# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.copy.Identity32int.ref_arraycopy
# Parameters: (size = 100)

# Run progress: 0.00% complete, ETA 09:04:00
# Fork: 1 of 3
# Warmup Iteration   1: 9.415 ns/op
# Warmup Iteration   2: 9.568 ns/op
# Warmup Iteration   3: 9.531 ns/op
Iteration   1: 9.591 ns/op
Iteration   2: 9.598 ns/op
Iteration   3: 9.646 ns/op
Iteration   4: 9.531 ns/op
Iteration   5: 9.537 ns/op

# Run progress: 0.02% complete, ETA 09:23:07
# Fork: 2 of 3
# Warmup Iteration   1: 9.647 ns/op
# Warmup Iteration   2: 9.454 ns/op
# Warmup Iteration   3: 9.396 ns/op
Iteration   1: 9.352 ns/op
Iteration   2: 9.331 ns/op
Iteration   3: 9.403 ns/op
Iteration   4: 9.434 ns/op
Iteration   5: 9.440 ns/op

# Run progress: 0.05% complete, ETA 11:14:00
# Fork: 3 of 3
# Warmup Iteration   1: 9.528 ns/op
# Warmup Iteration   2: 9.502 ns/op
# Warmup Iteration   3: 9.468 ns/op
Iteration   1: 9.495 ns/op
Iteration   2: 9.534 ns/op
Iteration   3: 9.508 ns/op
Iteration   4: 9.627 ns/op
Iteration   5: 9.518 ns/op


Result "kotlin_benchmarks.array.copy.Identity32int.ref_arraycopy":
  9.503 ±(99.9%) 0.102 ns/op [Average]
  (min, avg, max) = (9.331, 9.503, 9.646), stdev = 0.095
  CI (99.9%): [9.401, 9.605] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.copy.Identity32int.ref_arraycopy
# Parameters: (size = 1000000)

# Run progress: 0.07% complete, ETA 10:49:39
# Fork: 1 of 3
# Warmup Iteration   1: 76232.113 ns/op
# Warmup Iteration   2: 73846.471 ns/op
# Warmup Iteration   3: 73829.508 ns/op
Iteration   1: 73634.789 ns/op
Iteration   2: 73598.647 ns/op
Iteration   3: 73633.983 ns/op
Iteration   4: 72636.500 ns/op
Iteration   5: 75012.448 ns/op

# Run progress: 0.10% complete, ETA 11:32:08
# Fork: 2 of 3
# Warmup Iteration   1: 74578.960 ns/op
# Warmup Iteration   2: 73617.102 ns/op
# Warmup Iteration   3: 82678.266 ns/op
Iteration   1: 74281.582 ns/op
Iteration   2: 74558.233 ns/op
Iteration   3: 74943.298 ns/op
Iteration   4: 79728.405 ns/op
Iteration   5: 76060.194 ns/op

# Run progress: 0.12% complete, ETA 11:30:35
# Fork: 3 of 3
# Warmup Iteration   1: 72868.589 ns/op
# Warmup Iteration   2: 73900.871 ns/op
# Warmup Iteration   3: 79001.565 ns/op
Iteration   1: 78001.227 ns/op
Iteration   2: 81808.987 ns/op
Iteration   3: 79244.182 ns/op
Iteration   4: 76450.420 ns/op
Iteration   5: 75442.779 ns/op


Result "kotlin_benchmarks.array.copy.Identity32int.ref_arraycopy":
  75935.712 ±(99.9%) 2828.835 ns/op [Average]
  (min, avg, max) = (72636.500, 75935.712, 81808.987), stdev = 2646.094
  CI (99.9%): [73106.877, 78764.546] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.copy.Identity32int.ref_copy
# Parameters: (size = 100)

# Run progress: 0.15% complete, ETA 11:09:34
# Fork: 1 of 3
# Warmup Iteration   1: 74.967 ns/op
# Warmup Iteration   2: 75.213 ns/op
# Warmup Iteration   3: 75.070 ns/op
Iteration   1: 75.287 ns/op
Iteration   2: 74.963 ns/op
Iteration   3: 75.095 ns/op
Iteration   4: 74.513 ns/op
Iteration   5: 74.826 ns/op

# Run progress: 0.17% complete, ETA 10:54:07
# Fork: 2 of 3
# Warmup Iteration   1: 74.814 ns/op
# Warmup Iteration   2: 74.360 ns/op
# Warmup Iteration   3: 75.354 ns/op
Iteration   1: 75.862 ns/op
Iteration   2: 76.482 ns/op
Iteration   3: 75.408 ns/op
Iteration   4: 75.127 ns/op
Iteration   5: 75.491 ns/op

# Run progress: 0.20% complete, ETA 10:42:22
# Fork: 3 of 3
# Warmup Iteration   1: 76.016 ns/op
# Warmup Iteration   2: 76.328 ns/op
# Warmup Iteration   3: 75.055 ns/op
Iteration   1: 74.970 ns/op
Iteration   2: 77.035 ns/op
Iteration   3: 78.613 ns/op
Iteration   4: 82.696 ns/op
Iteration   5: 79.299 ns/op


Result "kotlin_benchmarks.array.copy.Identity32int.ref_copy":
  76.378 ±(99.9%) 2.393 ns/op [Average]
  (min, avg, max) = (74.513, 76.378, 82.696), stdev = 2.238
  CI (99.9%): [73.985, 78.771] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.copy.Identity32int.ref_copy
# Parameters: (size = 1000000)

# Run progress: 0.22% complete, ETA 10:33:17
# Fork: 1 of 3
# Warmup Iteration   1: 21592291.681 ns/op
# Warmup Iteration   2: 22444107.400 ns/op
# Warmup Iteration   3: 28933921.429 ns/op
Iteration   1: 43886204.696 ns/op
Iteration   2: 24589710.366 ns/op
Iteration   3: 10457155.928 ns/op
Iteration   4: 25358673.950 ns/op
Iteration   5: 40556780.000 ns/op

# Run progress: 0.25% complete, ETA 10:26:32
# Fork: 2 of 3
# Warmup Iteration   1: 37557511.893 ns/op
# Warmup Iteration   2: 46759166.682 ns/op
# Warmup Iteration   3: 28970302.371 ns/op
Iteration   1: 50522121.048 ns/op
Iteration   2: 44257264.522 ns/op
Iteration   3: 50527962.500 ns/op
Iteration   4: 46796530.273 ns/op
Iteration   5: 38851596.154 ns/op

# Run progress: 0.27% complete, ETA 10:21:48
# Fork: 3 of 3
# Warmup Iteration   1: 18755081.818 ns/op
# Warmup Iteration   2: 38318421.296 ns/op
# Warmup Iteration   3: 45424971.000 ns/op
Iteration   1: 41917600.000 ns/op
Iteration   2: 48654373.000 ns/op
Iteration   3: 36316322.893 ns/op
Iteration   4: 43590173.625 ns/op
Iteration   5: 42054026.640 ns/op


Result "kotlin_benchmarks.array.copy.Identity32int.ref_copy":
  39222433.040 ±(99.9%) 11875068.777 ns/op [Average]
  (min, avg, max) = (10457155.928, 39222433.040, 50527962.500), stdev = 11107946.702
  CI (99.9%): [27347364.263, 51097501.816] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.copy.Inline128int.Ref_to_Val_arraycopy
# Parameters: (size = 100)

# Run progress: 0.29% complete, ETA 10:18:08
# Fork: 1 of 3
# Warmup Iteration   1: 9.452 ns/op
# Warmup Iteration   2: 9.446 ns/op
# Warmup Iteration   3: 9.417 ns/op
Iteration   1: 9.375 ns/op
Iteration   2: 9.374 ns/op
Iteration   3: 9.451 ns/op
Iteration   4: 9.385 ns/op
Iteration   5: 9.403 ns/op

# Run progress: 0.32% complete, ETA 10:13:33
# Fork: 2 of 3
# Warmup Iteration   1: 9.466 ns/op
# Warmup Iteration   2: 9.363 ns/op
# Warmup Iteration   3: 9.531 ns/op
Iteration   1: 9.476 ns/op
Iteration   2: 9.479 ns/op
Iteration   3: 9.492 ns/op
Iteration   4: 9.457 ns/op
Iteration   5: 9.459 ns/op

# Run progress: 0.34% complete, ETA 10:09:39
# Fork: 3 of 3
# Warmup Iteration   1: 9.522 ns/op
# Warmup Iteration   2: 9.428 ns/op
# Warmup Iteration   3: 9.518 ns/op
Iteration   1: 9.833 ns/op
Iteration   2: 9.682 ns/op
Iteration   3: 9.503 ns/op
Iteration   4: 9.540 ns/op
Iteration   5: 9.563 ns/op


Result "kotlin_benchmarks.array.copy.Inline128int.Ref_to_Val_arraycopy":
  9.498 ±(99.9%) 0.131 ns/op [Average]
  (min, avg, max) = (9.374, 9.498, 9.833), stdev = 0.123
  CI (99.9%): [9.367, 9.629] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.copy.Inline128int.Ref_to_Val_arraycopy
# Parameters: (size = 1000000)

# Run progress: 0.37% complete, ETA 10:06:12
# Fork: 1 of 3
# Warmup Iteration   1: 75140.067 ns/op
# Warmup Iteration   2: 75339.964 ns/op
# Warmup Iteration   3: 73279.409 ns/op
Iteration   1: 72967.804 ns/op
Iteration   2: 72287.109 ns/op
Iteration   3: 76106.899 ns/op
Iteration   4: 74992.621 ns/op
Iteration   5: 73601.686 ns/op

# Run progress: 0.39% complete, ETA 10:03:42
# Fork: 2 of 3
# Warmup Iteration   1: 71339.753 ns/op
# Warmup Iteration   2: 73059.682 ns/op
# Warmup Iteration   3: 73410.234 ns/op
Iteration   1: 73159.734 ns/op
Iteration   2: 72354.414 ns/op
Iteration   3: 71066.036 ns/op
Iteration   4: 71054.329 ns/op
Iteration   5: 71323.198 ns/op

# Run progress: 0.42% complete, ETA 10:01:21
# Fork: 3 of 3
# Warmup Iteration   1: 75265.629 ns/op
# Warmup Iteration   2: 73610.637 ns/op
# Warmup Iteration   3: 75001.615 ns/op
Iteration   1: 75193.065 ns/op
Iteration   2: 72810.169 ns/op
Iteration   3: 72336.536 ns/op
Iteration   4: 72232.043 ns/op
Iteration   5: 72078.119 ns/op


Result "kotlin_benchmarks.array.copy.Inline128int.Ref_to_Val_arraycopy":
  72904.251 ±(99.9%) 1612.787 ns/op [Average]
  (min, avg, max) = (71054.329, 72904.251, 76106.899), stdev = 1508.602
  CI (99.9%): [71291.464, 74517.038] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.copy.Inline128int.Ref_to_Val_copy
# Parameters: (size = 100)

# Run progress: 0.44% complete, ETA 09:59:14
# Fork: 1 of 3
# Warmup Iteration   1: 174.946 ns/op
# Warmup Iteration   2: 174.734 ns/op
# Warmup Iteration   3: 172.685 ns/op
Iteration   1: 173.534 ns/op
Iteration   2: 175.744 ns/op
Iteration   3: 172.808 ns/op
Iteration   4: 172.942 ns/op
Iteration   5: 172.731 ns/op

# Run progress: 0.47% complete, ETA 09:57:02
# Fork: 2 of 3
# Warmup Iteration   1: 174.666 ns/op
# Warmup Iteration   2: 174.518 ns/op
# Warmup Iteration   3: 172.527 ns/op
Iteration   1: 173.127 ns/op
Iteration   2: 172.237 ns/op
Iteration   3: 173.064 ns/op
Iteration   4: 173.230 ns/op
Iteration   5: 173.012 ns/op

# Run progress: 0.49% complete, ETA 09:54:59
# Fork: 3 of 3
# Warmup Iteration   1: 175.684 ns/op
# Warmup Iteration   2: 174.256 ns/op
# Warmup Iteration   3: 173.503 ns/op
Iteration   1: 172.454 ns/op
Iteration   2: 173.020 ns/op
Iteration   3: 172.809 ns/op
Iteration   4: 172.565 ns/op
Iteration   5: 172.978 ns/op


Result "kotlin_benchmarks.array.copy.Inline128int.Ref_to_Val_copy":
  173.084 ±(99.9%) 0.857 ns/op [Average]
  (min, avg, max) = (172.237, 173.084, 175.744), stdev = 0.802
  CI (99.9%): [172.226, 173.941] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.copy.Inline128int.Ref_to_Val_copy
# Parameters: (size = 1000000)

# Run progress: 0.51% complete, ETA 09:53:09
# Fork: 1 of 3
# Warmup Iteration   1: 43183263.917 ns/op
# Warmup Iteration   2: 42378496.542 ns/op
# Warmup Iteration   3: 51985489.600 ns/op
Iteration   1: 37210020.074 ns/op
Iteration   2: 40559723.320 ns/op
Iteration   3: 41814013.320 ns/op
Iteration   4: 20093820.255 ns/op
Iteration   5: 23614903.409 ns/op

# Run progress: 0.54% complete, ETA 09:52:24
# Fork: 2 of 3
# Warmup Iteration   1: 40820770.846 ns/op
# Warmup Iteration   2: 49840902.810 ns/op
# Warmup Iteration   3: 38808168.269 ns/op
Iteration   1: 46230693.182 ns/op
Iteration   2: 38935113.769 ns/op
Iteration   3: 47989856.045 ns/op
Iteration   4: 47417089.045 ns/op
Iteration   5: 37437776.259 ns/op

# Run progress: 0.56% complete, ETA 09:51:45
# Fork: 3 of 3
# Warmup Iteration   1: 46954839.000 ns/op
# Warmup Iteration   2: 43711911.458 ns/op
# Warmup Iteration   3: 50496841.700 ns/op
Iteration   1: 47988809.524 ns/op
Iteration   2: 41913906.250 ns/op
Iteration   3: 40692261.640 ns/op
Iteration   4: 47006410.955 ns/op
Iteration   5: 47325965.909 ns/op


Result "kotlin_benchmarks.array.copy.Inline128int.Ref_to_Val_copy":
  40415357.530 ±(99.9%) 9078575.541 ns/op [Average]
  (min, avg, max) = (20093820.255, 40415357.530, 47989856.045), stdev = 8492105.194
  CI (99.9%): [31336781.990, 49493933.071] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.copy.Inline128int.Val_to_Ref_arraycopy
# Parameters: (size = 100)

# Run progress: 0.59% complete, ETA 09:50:57
# Fork: 1 of 3
# Warmup Iteration   1: 9.418 ns/op
# Warmup Iteration   2: 9.446 ns/op
# Warmup Iteration   3: 9.357 ns/op
Iteration   1: 9.381 ns/op
Iteration   2: 9.379 ns/op
Iteration   3: 9.407 ns/op
Iteration   4: 9.359 ns/op
Iteration   5: 9.392 ns/op

# Run progress: 0.61% complete, ETA 09:49:31
# Fork: 2 of 3
# Warmup Iteration   1: 9.444 ns/op
# Warmup Iteration   2: 9.391 ns/op
# Warmup Iteration   3: 9.473 ns/op
Iteration   1: 9.434 ns/op
Iteration   2: 9.467 ns/op
Iteration   3: 9.431 ns/op
Iteration   4: 9.496 ns/op
Iteration   5: 9.416 ns/op

# Run progress: 0.64% complete, ETA 09:48:11
# Fork: 3 of 3
# Warmup Iteration   1: 9.402 ns/op
# Warmup Iteration   2: 9.429 ns/op
# Warmup Iteration   3: 9.388 ns/op
Iteration   1: 9.414 ns/op
Iteration   2: 9.412 ns/op
Iteration   3: 9.376 ns/op
Iteration   4: 9.359 ns/op
Iteration   5: 9.385 ns/op


Result "kotlin_benchmarks.array.copy.Inline128int.Val_to_Ref_arraycopy":
  9.407 ±(99.9%) 0.041 ns/op [Average]
  (min, avg, max) = (9.359, 9.407, 9.496), stdev = 0.038
  CI (99.9%): [9.366, 9.448] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.copy.Inline128int.Val_to_Ref_arraycopy
# Parameters: (size = 1000000)

# Run progress: 0.66% complete, ETA 09:46:56
# Fork: 1 of 3
# Warmup Iteration   1: 83255.739 ns/op
# Warmup Iteration   2: 74004.792 ns/op
# Warmup Iteration   3: 71704.308 ns/op
Iteration   1: 71432.781 ns/op
Iteration   2: 71300.210 ns/op
Iteration   3: 70977.417 ns/op
Iteration   4: 71968.331 ns/op
Iteration   5: 71356.662 ns/op

# Run progress: 0.69% complete, ETA 09:46:02
# Fork: 2 of 3
# Warmup Iteration   1: 69966.051 ns/op
# Warmup Iteration   2: 72254.978 ns/op
# Warmup Iteration   3: 71935.055 ns/op
Iteration   1: 71635.919 ns/op
Iteration   2: 71328.333 ns/op
Iteration   3: 71401.989 ns/op
Iteration   4: 75032.354 ns/op
Iteration   5: 73125.946 ns/op

# Run progress: 0.71% complete, ETA 09:45:11
# Fork: 3 of 3
# Warmup Iteration   1: 70363.745 ns/op
# Warmup Iteration   2: 71391.649 ns/op
# Warmup Iteration   3: 71420.085 ns/op
Iteration   1: 72344.331 ns/op
Iteration   2: 74361.427 ns/op
Iteration   3: 71198.613 ns/op
Iteration   4: 71324.785 ns/op
Iteration   5: 71308.029 ns/op


Result "kotlin_benchmarks.array.copy.Inline128int.Val_to_Ref_arraycopy":
  72006.475 ±(99.9%) 1307.688 ns/op [Average]
  (min, avg, max) = (70977.417, 72006.475, 75032.354), stdev = 1223.212
  CI (99.9%): [70698.787, 73314.163] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.copy.Inline128int.Val_to_Ref_copy
# Parameters: (size = 100)

# Run progress: 0.74% complete, ETA 09:44:20
# Fork: 1 of 3
# Warmup Iteration   1: 175.397 ns/op
# Warmup Iteration   2: 177.144 ns/op
# Warmup Iteration   3: 172.647 ns/op
Iteration   1: 173.779 ns/op
Iteration   2: 173.447 ns/op
Iteration   3: 172.539 ns/op
Iteration   4: 172.610 ns/op
Iteration   5: 173.269 ns/op

# Run progress: 0.76% complete, ETA 09:43:21
# Fork: 2 of 3
# Warmup Iteration   1: 175.650 ns/op
# Warmup Iteration   2: 174.436 ns/op
# Warmup Iteration   3: 172.555 ns/op
Iteration   1: 172.801 ns/op
Iteration   2: 172.325 ns/op
Iteration   3: 173.712 ns/op
Iteration   4: 172.711 ns/op
Iteration   5: 173.068 ns/op

# Run progress: 0.78% complete, ETA 09:42:23
# Fork: 3 of 3
# Warmup Iteration   1: 175.147 ns/op
# Warmup Iteration   2: 173.578 ns/op
# Warmup Iteration   3: 172.690 ns/op
Iteration   1: 172.536 ns/op
Iteration   2: 173.446 ns/op
Iteration   3: 174.470 ns/op
Iteration   4: 173.287 ns/op
Iteration   5: 173.505 ns/op


Result "kotlin_benchmarks.array.copy.Inline128int.Val_to_Ref_copy":
  173.167 ±(99.9%) 0.628 ns/op [Average]
  (min, avg, max) = (172.325, 173.167, 174.470), stdev = 0.587
  CI (99.9%): [172.539, 173.795] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.copy.Inline128int.Val_to_Ref_copy
# Parameters: (size = 1000000)

# Run progress: 0.81% complete, ETA 09:41:29
# Fork: 1 of 3
# Warmup Iteration   1: 38886096.154 ns/op
# Warmup Iteration   2: 48546440.476 ns/op
# Warmup Iteration   3: 49338293.667 ns/op
Iteration   1: 46430098.455 ns/op
Iteration   2: 50033069.429 ns/op
Iteration   3: 40932533.320 ns/op
Iteration   4: 34166906.933 ns/op
Iteration   5: 50072765.905 ns/op

# Run progress: 0.83% complete, ETA 09:41:18
# Fork: 2 of 3
# Warmup Iteration   1: 46317517.045 ns/op
# Warmup Iteration   2: 50448954.150 ns/op
# Warmup Iteration   3: 43323118.042 ns/op
Iteration   1: 49740755.952 ns/op
Iteration   2: 43731961.957 ns/op
Iteration   3: 38802407.038 ns/op
Iteration   4: 50507168.750 ns/op
Iteration   5: 21008845.000 ns/op

# Run progress: 0.86% complete, ETA 09:40:57
# Fork: 3 of 3
# Warmup Iteration   1: 22599378.630 ns/op
# Warmup Iteration   2: 37052223.214 ns/op
# Warmup Iteration   3: 48567053.571 ns/op
Iteration   1: 30369863.971 ns/op
Iteration   2: 44119041.652 ns/op
Iteration   3: 31273457.118 ns/op
Iteration   4: 49005912.714 ns/op
Iteration   5: 33089868.500 ns/op


Result "kotlin_benchmarks.array.copy.Inline128int.Val_to_Ref_copy":
  40885643.780 ±(99.9%) 9742212.449 ns/op [Average]
  (min, avg, max) = (21008845.000, 40885643.780, 50507168.750), stdev = 9112871.570
  CI (99.9%): [31143431.330, 50627856.229] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.copy.Inline128int.Val_to_Val_arraycopy
# Parameters: (size = 100)

# Run progress: 0.88% complete, ETA 09:40:49
# Fork: 1 of 3
# Warmup Iteration   1: 9.392 ns/op
# Warmup Iteration   2: 9.409 ns/op
# Warmup Iteration   3: 9.374 ns/op
Iteration   1: 9.353 ns/op
Iteration   2: 9.358 ns/op
Iteration   3: 9.350 ns/op
Iteration   4: 9.389 ns/op
Iteration   5: 9.393 ns/op

# Run progress: 0.91% complete, ETA 09:40:04
# Fork: 2 of 3
# Warmup Iteration   1: 9.448 ns/op
# Warmup Iteration   2: 9.387 ns/op
# Warmup Iteration   3: 9.451 ns/op
Iteration   1: 9.448 ns/op
Iteration   2: 9.454 ns/op
Iteration   3: 9.430 ns/op
Iteration   4: 9.407 ns/op
Iteration   5: 9.432 ns/op

# Run progress: 0.93% complete, ETA 09:39:21
# Fork: 3 of 3
# Warmup Iteration   1: 9.413 ns/op
# Warmup Iteration   2: 9.388 ns/op
# Warmup Iteration   3: 9.371 ns/op
Iteration   1: 9.421 ns/op
Iteration   2: 9.394 ns/op
Iteration   3: 9.353 ns/op
Iteration   4: 9.732 ns/op
Iteration   5: 9.349 ns/op


Result "kotlin_benchmarks.array.copy.Inline128int.Val_to_Val_arraycopy":
  9.418 ±(99.9%) 0.101 ns/op [Average]
  (min, avg, max) = (9.349, 9.418, 9.732), stdev = 0.094
  CI (99.9%): [9.317, 9.519] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.copy.Inline128int.Val_to_Val_arraycopy
# Parameters: (size = 1000000)

# Run progress: 0.96% complete, ETA 09:38:40
# Fork: 1 of 3
# Warmup Iteration   1: 76309.470 ns/op
# Warmup Iteration   2: 79206.819 ns/op
# Warmup Iteration   3: 72519.472 ns/op
Iteration   1: 71230.742 ns/op
Iteration   2: 72207.292 ns/op
Iteration   3: 71181.575 ns/op
Iteration   4: 71676.687 ns/op
Iteration   5: 71510.472 ns/op

# Run progress: 0.98% complete, ETA 09:38:12
# Fork: 2 of 3
# Warmup Iteration   1: 70563.740 ns/op
# Warmup Iteration   2: 79087.917 ns/op
# Warmup Iteration   3: 79322.627 ns/op
Iteration   1: 79630.793 ns/op
Iteration   2: 75157.990 ns/op
Iteration   3: 71759.739 ns/op
Iteration   4: 71641.608 ns/op
Iteration   5: 72317.265 ns/op

# Run progress: 1.00% complete, ETA 09:37:45
# Fork: 3 of 3
# Warmup Iteration   1: 82196.354 ns/op
# Warmup Iteration   2: 81802.494 ns/op
# Warmup Iteration   3: 81854.162 ns/op
Iteration   1: 81696.311 ns/op
Iteration   2: 71861.521 ns/op
Iteration   3: 72236.262 ns/op
Iteration   4: 72270.641 ns/op
Iteration   5: 72035.640 ns/op


Result "kotlin_benchmarks.array.copy.Inline128int.Val_to_Val_arraycopy":
  73227.636 ±(99.9%) 3401.119 ns/op [Average]
  (min, avg, max) = (71181.575, 73227.636, 81696.311), stdev = 3181.409
  CI (99.9%): [69826.517, 76628.755] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.copy.Inline128int.Val_to_Val_copy
# Parameters: (size = 100)

# Run progress: 1.03% complete, ETA 09:37:19
# Fork: 1 of 3
# Warmup Iteration   1: 175.202 ns/op
# Warmup Iteration   2: 174.594 ns/op
# Warmup Iteration   3: 174.203 ns/op
Iteration   1: 173.944 ns/op
Iteration   2: 174.260 ns/op
Iteration   3: 175.225 ns/op
Iteration   4: 174.290 ns/op
Iteration   5: 175.489 ns/op

# Run progress: 1.05% complete, ETA 09:36:43
# Fork: 2 of 3
# Warmup Iteration   1: 175.858 ns/op
# Warmup Iteration   2: 174.953 ns/op
# Warmup Iteration   3: 172.260 ns/op
Iteration   1: 172.422 ns/op
Iteration   2: 172.337 ns/op
Iteration   3: 172.010 ns/op
Iteration   4: 174.218 ns/op
Iteration   5: 176.078 ns/op

# Run progress: 1.08% complete, ETA 09:36:09
# Fork: 3 of 3
# Warmup Iteration   1: 180.250 ns/op
# Warmup Iteration   2: 177.567 ns/op
# Warmup Iteration   3: 172.677 ns/op
Iteration   1: 175.756 ns/op
Iteration   2: 179.048 ns/op
Iteration   3: 192.270 ns/op
Iteration   4: 183.619 ns/op
Iteration   5: 173.406 ns/op


Result "kotlin_benchmarks.array.copy.Inline128int.Val_to_Val_copy":
  176.291 ±(99.9%) 5.671 ns/op [Average]
  (min, avg, max) = (172.010, 176.291, 192.270), stdev = 5.304
  CI (99.9%): [170.621, 181.962] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.copy.Inline128int.Val_to_Val_copy
# Parameters: (size = 1000000)

# Run progress: 1.10% complete, ETA 09:35:36
# Fork: 1 of 3
# Warmup Iteration   1: 20042497.549 ns/op
# Warmup Iteration   2: 28510325.250 ns/op
# Warmup Iteration   3: 36101642.241 ns/op
Iteration   1: 13504822.773 ns/op
Iteration   2: 12731673.519 ns/op
Iteration   3: 33420553.742 ns/op
Iteration   4: 37299111.607 ns/op
Iteration   5: 30813440.636 ns/op

# Run progress: 1.13% complete, ETA 09:35:29
# Fork: 2 of 3
# Warmup Iteration   1: 25534183.951 ns/op
# Warmup Iteration   2: 36360224.714 ns/op
# Warmup Iteration   3: 47866581.381 ns/op
Iteration   1: 46041545.304 ns/op
Iteration   2: 38838501.556 ns/op
Iteration   3: 20878965.820 ns/op
Iteration   4: 42300578.125 ns/op
Iteration   5: 41193855.000 ns/op

# Run progress: 1.15% complete, ETA 09:35:26
# Fork: 3 of 3
# Warmup Iteration   1: 39920246.926 ns/op
# Warmup Iteration   2: 33271776.871 ns/op
# Warmup Iteration   3: 19284667.453 ns/op
Iteration   1: 33739920.833 ns/op
Iteration   2: 19131678.241 ns/op
Iteration   3: 40273820.500 ns/op
Iteration   4: 52959886.000 ns/op
Iteration   5: 27428774.784 ns/op


Result "kotlin_benchmarks.array.copy.Inline128int.Val_to_Val_copy":
  32703808.563 ±(99.9%) 12755154.839 ns/op [Average]
  (min, avg, max) = (12731673.519, 32703808.563, 52959886.000), stdev = 11931179.751
  CI (99.9%): [19948653.724, 45458963.401] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.copy.Inline32int.Ref_to_Val_arraycopy
# Parameters: (size = 100)

# Run progress: 1.18% complete, ETA 09:35:19
# Fork: 1 of 3
# Warmup Iteration   1: 9.891 ns/op
# Warmup Iteration   2: 10.350 ns/op
# Warmup Iteration   3: 9.952 ns/op
Iteration   1: 10.366 ns/op
Iteration   2: 9.897 ns/op
Iteration   3: 9.885 ns/op
Iteration   4: 9.864 ns/op
Iteration   5: 9.893 ns/op

# Run progress: 1.20% complete, ETA 09:34:50
# Fork: 2 of 3
# Warmup Iteration   1: 9.909 ns/op
# Warmup Iteration   2: 9.790 ns/op
# Warmup Iteration   3: 9.952 ns/op
Iteration   1: 9.985 ns/op
Iteration   2: 9.917 ns/op
Iteration   3: 10.062 ns/op
Iteration   4: 9.939 ns/op
Iteration   5: 9.934 ns/op

# Run progress: 1.23% complete, ETA 09:34:20
# Fork: 3 of 3
# Warmup Iteration   1: 9.802 ns/op
# Warmup Iteration   2: 10.124 ns/op
# Warmup Iteration   3: 9.817 ns/op
Iteration   1: 9.798 ns/op
Iteration   2: 9.842 ns/op
Iteration   3: 9.790 ns/op
Iteration   4: 9.774 ns/op
Iteration   5: 9.769 ns/op


Result "kotlin_benchmarks.array.copy.Inline32int.Ref_to_Val_arraycopy":
  9.914 ±(99.9%) 0.159 ns/op [Average]
  (min, avg, max) = (9.769, 9.914, 10.366), stdev = 0.149
  CI (99.9%): [9.755, 10.074] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.copy.Inline32int.Ref_to_Val_arraycopy
# Parameters: (size = 1000000)

# Run progress: 1.25% complete, ETA 09:33:50
# Fork: 1 of 3
# Warmup Iteration   1: 67503.924 ns/op
# Warmup Iteration   2: 68720.671 ns/op
# Warmup Iteration   3: 68304.965 ns/op
Iteration   1: 68278.740 ns/op
Iteration   2: 69197.127 ns/op
Iteration   3: 68679.521 ns/op
Iteration   4: 69859.950 ns/op
Iteration   5: 72038.906 ns/op

# Run progress: 1.27% complete, ETA 09:33:23
# Fork: 2 of 3
# Warmup Iteration   1: 66668.209 ns/op
# Warmup Iteration   2: 69367.483 ns/op
# Warmup Iteration   3: 69040.949 ns/op
Iteration   1: 68908.750 ns/op
Iteration   2: 69780.260 ns/op
Iteration   3: 68568.653 ns/op
Iteration   4: 68992.897 ns/op
Iteration   5: 69414.407 ns/op

# Run progress: 1.30% complete, ETA 09:32:58
# Fork: 3 of 3
# Warmup Iteration   1: 65986.110 ns/op
# Warmup Iteration   2: 68877.341 ns/op
# Warmup Iteration   3: 68844.894 ns/op
Iteration   1: 68801.590 ns/op
Iteration   2: 67768.358 ns/op
Iteration   3: 67447.602 ns/op
Iteration   4: 67163.799 ns/op
Iteration   5: 68077.424 ns/op


Result "kotlin_benchmarks.array.copy.Inline32int.Ref_to_Val_arraycopy":
  68865.199 ±(99.9%) 1262.594 ns/op [Average]
  (min, avg, max) = (67163.799, 68865.199, 72038.906), stdev = 1181.031
  CI (99.9%): [67602.605, 70127.793] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.copy.Inline32int.Ref_to_Val_copy
# Parameters: (size = 100)

# Run progress: 1.32% complete, ETA 09:32:34
# Fork: 1 of 3
# Warmup Iteration   1: 76.659 ns/op
# Warmup Iteration   2: 75.079 ns/op
# Warmup Iteration   3: 75.397 ns/op
Iteration   1: 75.085 ns/op
Iteration   2: 75.398 ns/op
Iteration   3: 75.088 ns/op
Iteration   4: 74.902 ns/op
Iteration   5: 74.964 ns/op

# Run progress: 1.35% complete, ETA 09:32:15
# Fork: 2 of 3
# Warmup Iteration   1: 77.353 ns/op
# Warmup Iteration   2: 75.248 ns/op
# Warmup Iteration   3: 77.108 ns/op
Iteration   1: 77.232 ns/op
Iteration   2: 77.503 ns/op
Iteration   3: 77.307 ns/op
Iteration   4: 77.316 ns/op
Iteration   5: 76.814 ns/op

# Run progress: 1.37% complete, ETA 09:31:50
# Fork: 3 of 3
# Warmup Iteration   1: 77.192 ns/op
# Warmup Iteration   2: 75.796 ns/op
# Warmup Iteration   3: 76.861 ns/op
Iteration   1: 76.355 ns/op
Iteration   2: 76.468 ns/op
Iteration   3: 76.287 ns/op
Iteration   4: 76.575 ns/op
Iteration   5: 76.466 ns/op


Result "kotlin_benchmarks.array.copy.Inline32int.Ref_to_Val_copy":
  76.251 ±(99.9%) 0.999 ns/op [Average]
  (min, avg, max) = (74.902, 76.251, 77.503), stdev = 0.934
  CI (99.9%): [75.252, 77.250] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.copy.Inline32int.Ref_to_Val_copy
# Parameters: (size = 1000000)

# Run progress: 1.40% complete, ETA 09:31:24
# Fork: 1 of 3
# Warmup Iteration   1: 49360769.810 ns/op
# Warmup Iteration   2: 52601464.600 ns/op
# Warmup Iteration   3: 58234277.778 ns/op
Iteration   1: 32469393.219 ns/op
Iteration   2: 33214942.226 ns/op
Iteration   3: 51342025.000 ns/op
Iteration   4: 54078057.053 ns/op
Iteration   5: 47209638.273 ns/op

# Run progress: 1.42% complete, ETA 09:31:18
# Fork: 2 of 3
# Warmup Iteration   1: 47335946.955 ns/op
# Warmup Iteration   2: 50306142.857 ns/op
# Warmup Iteration   3: 53022806.250 ns/op
Iteration   1: 40891766.000 ns/op
Iteration   2: 58064650.444 ns/op
Iteration   3: 53539135.400 ns/op
Iteration   4: 48609702.381 ns/op
Iteration   5: 46490115.545 ns/op

# Run progress: 1.45% complete, ETA 09:31:17
# Fork: 3 of 3
# Warmup Iteration   1: 53146225.895 ns/op
# Warmup Iteration   2: 46262309.783 ns/op
# Warmup Iteration   3: 46291702.682 ns/op
Iteration   1: 50666261.905 ns/op
Iteration   2: 35867854.897 ns/op
Iteration   3: 51485175.000 ns/op
Iteration   4: 46171032.609 ns/op
Iteration   5: 50830521.810 ns/op


Result "kotlin_benchmarks.array.copy.Inline32int.Ref_to_Val_copy":
  46728684.784 ±(99.9%) 8316565.697 ns/op [Average]
  (min, avg, max) = (32469393.219, 46728684.784, 58064650.444), stdev = 7779320.714
  CI (99.9%): [38412119.087, 55045250.481] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.copy.Inline32int.Val_to_Ref_arraycopy
# Parameters: (size = 100)

# Run progress: 1.47% complete, ETA 09:31:14
# Fork: 1 of 3
# Warmup Iteration   1: 9.647 ns/op
# Warmup Iteration   2: 9.633 ns/op
# Warmup Iteration   3: 9.648 ns/op
Iteration   1: 9.618 ns/op
Iteration   2: 9.637 ns/op
Iteration   3: 9.601 ns/op
Iteration   4: 9.665 ns/op
Iteration   5: 9.651 ns/op

# Run progress: 1.50% complete, ETA 09:30:50
# Fork: 2 of 3
# Warmup Iteration   1: 20.581 ns/op
# Warmup Iteration   2: 20.503 ns/op
# Warmup Iteration   3: 20.627 ns/op
Iteration   1: 20.595 ns/op
Iteration   2: 20.573 ns/op
Iteration   3: 20.899 ns/op
Iteration   4: 21.013 ns/op
Iteration   5: 20.949 ns/op

# Run progress: 1.52% complete, ETA 09:30:25
# Fork: 3 of 3
# Warmup Iteration   1: 19.310 ns/op
# Warmup Iteration   2: 19.558 ns/op
# Warmup Iteration   3: 19.559 ns/op
Iteration   1: 19.445 ns/op
Iteration   2: 19.356 ns/op
Iteration   3: 19.448 ns/op
Iteration   4: 19.382 ns/op
Iteration   5: 19.295 ns/op


Result "kotlin_benchmarks.array.copy.Inline32int.Val_to_Ref_arraycopy":
  16.608 ±(99.9%) 5.496 ns/op [Average]
  (min, avg, max) = (9.601, 16.608, 21.013), stdev = 5.141
  CI (99.9%): [11.112, 22.104] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.copy.Inline32int.Val_to_Ref_arraycopy
# Parameters: (size = 1000000)

# Run progress: 1.54% complete, ETA 09:30:04
# Fork: 1 of 3
# Warmup Iteration   1: 76066.753 ns/op
# Warmup Iteration   2: 77544.635 ns/op
# Warmup Iteration   3: 75136.136 ns/op
Iteration   1: 73363.794 ns/op
Iteration   2: 74170.345 ns/op
Iteration   3: 70410.070 ns/op
Iteration   4: 72504.850 ns/op
Iteration   5: 71564.773 ns/op

# Run progress: 1.57% complete, ETA 09:29:42
# Fork: 2 of 3
# Warmup Iteration   1: 70527.399 ns/op
# Warmup Iteration   2: 73063.197 ns/op
# Warmup Iteration   3: 73254.351 ns/op
Iteration   1: 72326.757 ns/op
Iteration   2: 72428.465 ns/op
Iteration   3: 72485.015 ns/op
Iteration   4: 74946.096 ns/op
Iteration   5: 71603.873 ns/op

# Run progress: 1.59% complete, ETA 09:29:21
# Fork: 3 of 3
# Warmup Iteration   1: 86936.576 ns/op
# Warmup Iteration   2: 85913.021 ns/op
# Warmup Iteration   3: 84679.185 ns/op
Iteration   1: 69998.793 ns/op
Iteration   2: 67275.235 ns/op
Iteration   3: 66356.727 ns/op
Iteration   4: 69065.586 ns/op
Iteration   5: 68542.462 ns/op


Result "kotlin_benchmarks.array.copy.Inline32int.Val_to_Ref_arraycopy":
  71136.189 ±(99.9%) 2656.599 ns/op [Average]
  (min, avg, max) = (66356.727, 71136.189, 74946.096), stdev = 2484.985
  CI (99.9%): [68479.590, 73792.789] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.copy.Inline32int.Val_to_Ref_copy
# Parameters: (size = 100)

# Run progress: 1.62% complete, ETA 09:29:01
# Fork: 1 of 3
# Warmup Iteration   1: 76.901 ns/op
# Warmup Iteration   2: 75.090 ns/op
# Warmup Iteration   3: 75.007 ns/op
Iteration   1: 74.849 ns/op
Iteration   2: 75.665 ns/op
Iteration   3: 75.156 ns/op
Iteration   4: 75.198 ns/op
Iteration   5: 74.904 ns/op

# Run progress: 1.64% complete, ETA 09:28:39
# Fork: 2 of 3
# Warmup Iteration   1: 76.679 ns/op
# Warmup Iteration   2: 75.106 ns/op
# Warmup Iteration   3: 76.853 ns/op
Iteration   1: 76.309 ns/op
Iteration   2: 76.398 ns/op
Iteration   3: 76.492 ns/op
Iteration   4: 76.170 ns/op
Iteration   5: 76.577 ns/op

# Run progress: 1.67% complete, ETA 09:28:17
# Fork: 3 of 3
# Warmup Iteration   1: 76.818 ns/op
# Warmup Iteration   2: 74.929 ns/op
# Warmup Iteration   3: 75.406 ns/op
Iteration   1: 75.010 ns/op
Iteration   2: 75.066 ns/op
Iteration   3: 75.402 ns/op
Iteration   4: 75.144 ns/op
Iteration   5: 75.002 ns/op


Result "kotlin_benchmarks.array.copy.Inline32int.Val_to_Ref_copy":
  75.556 ±(99.9%) 0.690 ns/op [Average]
  (min, avg, max) = (74.849, 75.556, 76.577), stdev = 0.646
  CI (99.9%): [74.866, 76.246] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.copy.Inline32int.Val_to_Ref_copy
# Parameters: (size = 1000000)

# Run progress: 1.69% complete, ETA 09:27:56
# Fork: 1 of 3
# Warmup Iteration   1: 48127750.000 ns/op
# Warmup Iteration   2: 49947236.095 ns/op
# Warmup Iteration   3: 41596665.000 ns/op
Iteration   1: 48340998.000 ns/op
Iteration   2: 52020333.350 ns/op
Iteration   3: 33632440.300 ns/op
Iteration   4: 48010325.773 ns/op
Iteration   5: 52158260.400 ns/op

# Run progress: 1.72% complete, ETA 09:27:49
# Fork: 2 of 3
# Warmup Iteration   1: 41038615.000 ns/op
# Warmup Iteration   2: 50765606.250 ns/op
# Warmup Iteration   3: 56277182.889 ns/op
Iteration   1: 54348743.421 ns/op
Iteration   2: 48227928.045 ns/op
Iteration   3: 56170642.526 ns/op
Iteration   4: 51285068.750 ns/op
Iteration   5: 47533746.182 ns/op

# Run progress: 1.74% complete, ETA 09:27:43
# Fork: 3 of 3
# Warmup Iteration   1: 46562200.773 ns/op
# Warmup Iteration   2: 44370632.217 ns/op
# Warmup Iteration   3: 46558799.227 ns/op
Iteration   1: 46856136.364 ns/op
Iteration   2: 24625440.049 ns/op
Iteration   3: 6362573.576 ns/op
Iteration   4: 8117866.672 ns/op
Iteration   5: 34208497.233 ns/op


Result "kotlin_benchmarks.array.copy.Inline32int.Val_to_Ref_copy":
  40793266.709 ±(99.9%) 17240957.375 ns/op [Average]
  (min, avg, max) = (6362573.576, 40793266.709, 56170642.526), stdev = 16127202.227
  CI (99.9%): [23552309.335, 58034224.084] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.copy.Inline32int.Val_to_Val_arraycopy
# Parameters: (size = 100)

# Run progress: 1.76% complete, ETA 09:27:30
# Fork: 1 of 3
# Warmup Iteration   1: 9.927 ns/op
# Warmup Iteration   2: 9.624 ns/op
# Warmup Iteration   3: 9.591 ns/op
Iteration   1: 9.615 ns/op
Iteration   2: 10.644 ns/op
Iteration   3: 9.372 ns/op
Iteration   4: 10.338 ns/op
Iteration   5: 9.330 ns/op

# Run progress: 1.79% complete, ETA 09:27:09
# Fork: 2 of 3
# Warmup Iteration   1: 9.366 ns/op
# Warmup Iteration   2: 9.340 ns/op
# Warmup Iteration   3: 9.407 ns/op
Iteration   1: 9.491 ns/op
Iteration   2: 9.927 ns/op
Iteration   3: 10.575 ns/op
Iteration   4: 10.284 ns/op
Iteration   5: 9.840 ns/op

# Run progress: 1.81% complete, ETA 09:26:49
# Fork: 3 of 3
# Warmup Iteration   1: 9.905 ns/op
# Warmup Iteration   2: 9.930 ns/op
# Warmup Iteration   3: 9.948 ns/op
Iteration   1: 9.975 ns/op
Iteration   2: 10.087 ns/op
Iteration   3: 9.994 ns/op
Iteration   4: 9.996 ns/op
Iteration   5: 9.971 ns/op


Result "kotlin_benchmarks.array.copy.Inline32int.Val_to_Val_arraycopy":
  9.963 ±(99.9%) 0.425 ns/op [Average]
  (min, avg, max) = (9.330, 9.963, 10.644), stdev = 0.397
  CI (99.9%): [9.538, 10.387] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.copy.Inline32int.Val_to_Val_arraycopy
# Parameters: (size = 1000000)

# Run progress: 1.84% complete, ETA 09:26:31
# Fork: 1 of 3
# Warmup Iteration   1: 71339.057 ns/op
# Warmup Iteration   2: 73376.668 ns/op
# Warmup Iteration   3: 73939.915 ns/op
Iteration   1: 78573.908 ns/op
Iteration   2: 76277.563 ns/op
Iteration   3: 63505.871 ns/op
Iteration   4: 72596.349 ns/op
Iteration   5: 72221.431 ns/op

# Run progress: 1.86% complete, ETA 09:26:16
# Fork: 2 of 3
# Warmup Iteration   1: 70794.176 ns/op
# Warmup Iteration   2: 64594.133 ns/op
# Warmup Iteration   3: 73957.944 ns/op
Iteration   1: 74025.820 ns/op
Iteration   2: 73836.029 ns/op
Iteration   3: 72298.964 ns/op
Iteration   4: 72746.796 ns/op
Iteration   5: 71912.170 ns/op

# Run progress: 1.89% complete, ETA 09:26:04
# Fork: 3 of 3
# Warmup Iteration   1: 61783.283 ns/op
# Warmup Iteration   2: 74176.182 ns/op
# Warmup Iteration   3: 74316.275 ns/op
Iteration   1: 67093.707 ns/op
Iteration   2: 73005.438 ns/op
Iteration   3: 73388.319 ns/op
Iteration   4: 72642.617 ns/op
Iteration   5: 66277.969 ns/op


Result "kotlin_benchmarks.array.copy.Inline32int.Val_to_Val_arraycopy":
  72026.863 ±(99.9%) 4064.362 ns/op [Average]
  (min, avg, max) = (63505.871, 72026.863, 78573.908), stdev = 3801.807
  CI (99.9%): [67962.501, 76091.225] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.copy.Inline32int.Val_to_Val_copy
# Parameters: (size = 100)

# Run progress: 1.91% complete, ETA 09:25:50
# Fork: 1 of 3
# Warmup Iteration   1: 77.305 ns/op
# Warmup Iteration   2: 76.366 ns/op
# Warmup Iteration   3: 77.044 ns/op
Iteration   1: 77.319 ns/op
Iteration   2: 77.156 ns/op
Iteration   3: 78.579 ns/op
Iteration   4: 78.124 ns/op
Iteration   5: 84.686 ns/op

# Run progress: 1.94% complete, ETA 09:27:45
# Fork: 2 of 3
# Warmup Iteration   1: 79.057 ns/op
# Warmup Iteration   2: 78.777 ns/op
# Warmup Iteration   3: 77.269 ns/op
Iteration   1: 77.266 ns/op
Iteration   2: 76.896 ns/op
Iteration   3: 76.707 ns/op
Iteration   4: 76.403 ns/op
Iteration   5: 76.425 ns/op

# Run progress: 1.96% complete, ETA 09:27:28
# Fork: 3 of 3
# Warmup Iteration   1: 76.529 ns/op
# Warmup Iteration   2: 76.988 ns/op
# Warmup Iteration   3: 76.668 ns/op
Iteration   1: 76.498 ns/op
Iteration   2: 76.404 ns/op
Iteration   3: 76.914 ns/op
Iteration   4: 76.902 ns/op
Iteration   5: 76.980 ns/op


Result "kotlin_benchmarks.array.copy.Inline32int.Val_to_Val_copy":
  77.550 ±(99.9%) 2.211 ns/op [Average]
  (min, avg, max) = (76.403, 77.550, 84.686), stdev = 2.068
  CI (99.9%): [75.339, 79.761] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.copy.Inline32int.Val_to_Val_copy
# Parameters: (size = 1000000)

# Run progress: 1.99% complete, ETA 09:27:09
# Fork: 1 of 3
# Warmup Iteration   1: 16335856.492 ns/op
# Warmup Iteration   2: 40798729.154 ns/op
# Warmup Iteration   3: 29199704.771 ns/op
Iteration   1: 27592085.595 ns/op
Iteration   2: 29355541.657 ns/op
Iteration   3: 21557783.681 ns/op
Iteration   4: 21388406.021 ns/op
Iteration   5: 18845918.981 ns/op

# Run progress: 2.01% complete, ETA 09:26:58
# Fork: 2 of 3
# Warmup Iteration   1: 21740222.511 ns/op
# Warmup Iteration   2: 20204024.160 ns/op
# Warmup Iteration   3: 30627617.424 ns/op
Iteration   1: 21158582.490 ns/op
Iteration   2: 14857823.529 ns/op
Iteration   3: 16137585.938 ns/op
Iteration   4: 25209876.000 ns/op
Iteration   5: 26990220.077 ns/op

# Run progress: 2.03% complete, ETA 09:26:50
# Fork: 3 of 3
# Warmup Iteration   1: 26672948.474 ns/op
# Warmup Iteration   2: 19504011.000 ns/op
# Warmup Iteration   3: 24855416.659 ns/op
Iteration   1: 19865674.843 ns/op
Iteration   2: 12428327.744 ns/op
Iteration   3: 11750366.279 ns/op
Iteration   4: 19093993.056 ns/op
Iteration   5: 19869075.176 ns/op


Result "kotlin_benchmarks.array.copy.Inline32int.Val_to_Val_copy":
  20406750.738 ±(99.9%) 5666466.115 ns/op [Average]
  (min, avg, max) = (11750366.279, 20406750.738, 29355541.657), stdev = 5300415.920
  CI (99.9%): [14740284.623, 26073216.852] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.copy.Inline64byte.Ref_to_Val_arraycopy
# Parameters: (size = 100)

# Run progress: 2.06% complete, ETA 09:26:37
# Fork: 1 of 3
# Warmup Iteration   1: 9.691 ns/op
# Warmup Iteration   2: 9.670 ns/op
# Warmup Iteration   3: 10.148 ns/op
Iteration   1: 9.593 ns/op
Iteration   2: 9.826 ns/op
Iteration   3: 9.530 ns/op
Iteration   4: 9.642 ns/op
Iteration   5: 9.536 ns/op

# Run progress: 2.08% complete, ETA 09:26:18
# Fork: 2 of 3
# Warmup Iteration   1: 9.659 ns/op
# Warmup Iteration   2: 9.635 ns/op
# Warmup Iteration   3: 9.703 ns/op
Iteration   1: 9.826 ns/op
Iteration   2: 9.631 ns/op
Iteration   3: 9.671 ns/op
Iteration   4: 9.901 ns/op
Iteration   5: 9.607 ns/op

# Run progress: 2.11% complete, ETA 09:26:00
# Fork: 3 of 3
# Warmup Iteration   1: 9.570 ns/op
# Warmup Iteration   2: 9.579 ns/op
# Warmup Iteration   3: 9.555 ns/op
Iteration   1: 9.709 ns/op
Iteration   2: 9.701 ns/op
Iteration   3: 9.627 ns/op
Iteration   4: 9.619 ns/op
Iteration   5: 9.617 ns/op


Result "kotlin_benchmarks.array.copy.Inline64byte.Ref_to_Val_arraycopy":
  9.669 ±(99.9%) 0.115 ns/op [Average]
  (min, avg, max) = (9.530, 9.669, 9.901), stdev = 0.108
  CI (99.9%): [9.554, 9.784] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.copy.Inline64byte.Ref_to_Val_arraycopy
# Parameters: (size = 1000000)

# Run progress: 2.13% complete, ETA 09:25:42
# Fork: 1 of 3
# Warmup Iteration   1: 65853.719 ns/op
# Warmup Iteration   2: 85720.349 ns/op
# Warmup Iteration   3: 86102.931 ns/op
Iteration   1: 83740.300 ns/op
Iteration   2: 83565.641 ns/op
Iteration   3: 85121.853 ns/op
Iteration   4: 84974.000 ns/op
Iteration   5: 74906.193 ns/op

# Run progress: 2.16% complete, ETA 09:25:27
# Fork: 2 of 3
# Warmup Iteration   1: 85353.612 ns/op
# Warmup Iteration   2: 74950.576 ns/op
# Warmup Iteration   3: 78014.790 ns/op
Iteration   1: 81711.037 ns/op
Iteration   2: 74120.166 ns/op
Iteration   3: 74008.667 ns/op
Iteration   4: 76628.515 ns/op
Iteration   5: 81244.977 ns/op

# Run progress: 2.18% complete, ETA 09:25:12
# Fork: 3 of 3
# Warmup Iteration   1: 90878.913 ns/op
# Warmup Iteration   2: 72324.813 ns/op
# Warmup Iteration   3: 79366.929 ns/op
Iteration   1: 76976.985 ns/op
Iteration   2: 71188.500 ns/op
Iteration   3: 71835.938 ns/op
Iteration   4: 70392.851 ns/op
Iteration   5: 68341.181 ns/op


Result "kotlin_benchmarks.array.copy.Inline64byte.Ref_to_Val_arraycopy":
  77250.454 ±(99.9%) 6115.950 ns/op [Average]
  (min, avg, max) = (68341.181, 77250.454, 85121.853), stdev = 5720.864
  CI (99.9%): [71134.503, 83366.404] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.copy.Inline64byte.Ref_to_Val_copy
# Parameters: (size = 100)

# Run progress: 2.21% complete, ETA 09:25:01
# Fork: 1 of 3
# Warmup Iteration   1: 179.165 ns/op
# Warmup Iteration   2: 185.838 ns/op
# Warmup Iteration   3: 179.082 ns/op
Iteration   1: 179.248 ns/op
Iteration   2: 175.337 ns/op
Iteration   3: 176.619 ns/op
Iteration   4: 177.960 ns/op
Iteration   5: 177.189 ns/op

# Run progress: 2.23% complete, ETA 09:24:47
# Fork: 2 of 3
# Warmup Iteration   1: 177.367 ns/op
# Warmup Iteration   2: 176.615 ns/op
# Warmup Iteration   3: 177.443 ns/op
Iteration   1: 175.875 ns/op
Iteration   2: 174.701 ns/op
Iteration   3: 175.659 ns/op
Iteration   4: 177.245 ns/op
Iteration   5: 175.108 ns/op

# Run progress: 2.25% complete, ETA 09:26:30
# Fork: 3 of 3
# Warmup Iteration   1: 178.506 ns/op
# Warmup Iteration   2: 178.342 ns/op
# Warmup Iteration   3: 175.634 ns/op
Iteration   1: 174.186 ns/op
Iteration   2: 175.281 ns/op
Iteration   3: 183.721 ns/op
Iteration   4: 175.376 ns/op
Iteration   5: 175.466 ns/op


Result "kotlin_benchmarks.array.copy.Inline64byte.Ref_to_Val_copy":
  176.598 ±(99.9%) 2.548 ns/op [Average]
  (min, avg, max) = (174.186, 176.598, 183.721), stdev = 2.383
  CI (99.9%): [174.050, 179.146] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.copy.Inline64byte.Ref_to_Val_copy
# Parameters: (size = 1000000)

# Run progress: 2.28% complete, ETA 09:26:15
# Fork: 1 of 3
# Warmup Iteration   1: 28085547.444 ns/op
# Warmup Iteration   2: 22954504.727 ns/op
# Warmup Iteration   3: 24583048.619 ns/op
Iteration   1: 35650574.724 ns/op
Iteration   2: 32566623.688 ns/op
Iteration   3: 7342902.372 ns/op
Iteration   4: 19065996.849 ns/op
Iteration   5: 34053891.667 ns/op

# Run progress: 2.30% complete, ETA 09:26:04
# Fork: 2 of 3
# Warmup Iteration   1: 26748748.923 ns/op
# Warmup Iteration   2: 32799436.839 ns/op
# Warmup Iteration   3: 34702300.000 ns/op
Iteration   1: 27886297.444 ns/op
Iteration   2: 38472722.222 ns/op
Iteration   3: 36951043.143 ns/op
Iteration   4: 33227106.194 ns/op
Iteration   5: 27483810.811 ns/op

# Run progress: 2.33% complete, ETA 09:25:55
# Fork: 3 of 3
# Warmup Iteration   1: 26988769.737 ns/op
# Warmup Iteration   2: 23572806.209 ns/op
# Warmup Iteration   3: 17125072.217 ns/op
Iteration   1: 41185251.640 ns/op
Iteration   2: 13803958.904 ns/op
Iteration   3: 5499887.685 ns/op
Iteration   4: 6946840.234 ns/op
Iteration   5: 14680801.928 ns/op


Result "kotlin_benchmarks.array.copy.Inline64byte.Ref_to_Val_copy":
  24987847.300 ±(99.9%) 13420079.403 ns/op [Average]
  (min, avg, max) = (5499887.685, 24987847.300, 41185251.640), stdev = 12553150.601
  CI (99.9%): [11567767.897, 38407926.704] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.copy.Inline64byte.Val_to_Ref_arraycopy
# Parameters: (size = 100)

# Run progress: 2.35% complete, ETA 09:25:44
# Fork: 1 of 3
# Warmup Iteration   1: 9.603 ns/op
# Warmup Iteration   2: 9.688 ns/op
# Warmup Iteration   3: 9.654 ns/op
Iteration   1: 11.022 ns/op
Iteration   2: 9.981 ns/op
Iteration   3: 9.812 ns/op
Iteration   4: 9.701 ns/op
Iteration   5: 9.726 ns/op

# Run progress: 2.38% complete, ETA 09:25:26
# Fork: 2 of 3
# Warmup Iteration   1: 9.640 ns/op
# Warmup Iteration   2: 9.590 ns/op
# Warmup Iteration   3: 9.516 ns/op
Iteration   1: 9.771 ns/op
Iteration   2: 9.667 ns/op
Iteration   3: 9.820 ns/op
Iteration   4: 9.643 ns/op
Iteration   5: 9.533 ns/op

# Run progress: 2.40% complete, ETA 09:25:10
# Fork: 3 of 3
# Warmup Iteration   1: 9.678 ns/op
# Warmup Iteration   2: 9.604 ns/op
# Warmup Iteration   3: 9.599 ns/op
Iteration   1: 9.613 ns/op
Iteration   2: 9.590 ns/op
Iteration   3: 9.575 ns/op
Iteration   4: 9.597 ns/op
Iteration   5: 9.531 ns/op


Result "kotlin_benchmarks.array.copy.Inline64byte.Val_to_Ref_arraycopy":
  9.772 ±(99.9%) 0.393 ns/op [Average]
  (min, avg, max) = (9.531, 9.772, 11.022), stdev = 0.367
  CI (99.9%): [9.380, 10.165] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.copy.Inline64byte.Val_to_Ref_arraycopy
# Parameters: (size = 1000000)

# Run progress: 2.43% complete, ETA 09:24:56
# Fork: 1 of 3
# Warmup Iteration   1: 80438.377 ns/op
# Warmup Iteration   2: 70752.507 ns/op
# Warmup Iteration   3: 70915.568 ns/op
Iteration   1: 78447.064 ns/op
Iteration   2: 74594.615 ns/op
Iteration   3: 72071.483 ns/op
Iteration   4: 77302.809 ns/op
Iteration   5: 81443.619 ns/op

# Run progress: 2.45% complete, ETA 09:24:42
# Fork: 2 of 3
# Warmup Iteration   1: 74405.600 ns/op
# Warmup Iteration   2: 70045.869 ns/op
# Warmup Iteration   3: 69627.484 ns/op
Iteration   1: 70352.157 ns/op
Iteration   2: 72426.454 ns/op
Iteration   3: 70875.292 ns/op
Iteration   4: 71375.137 ns/op
Iteration   5: 62235.089 ns/op

# Run progress: 2.48% complete, ETA 09:24:27
# Fork: 3 of 3
# Warmup Iteration   1: 85302.476 ns/op
# Warmup Iteration   2: 71270.248 ns/op
# Warmup Iteration   3: 78127.604 ns/op
Iteration   1: 64612.820 ns/op
Iteration   2: 73932.074 ns/op
Iteration   3: 70950.299 ns/op
Iteration   4: 73227.856 ns/op
Iteration   5: 72857.244 ns/op


Result "kotlin_benchmarks.array.copy.Inline64byte.Val_to_Ref_arraycopy":
  72446.934 ±(99.9%) 5144.211 ns/op [Average]
  (min, avg, max) = (62235.089, 72446.934, 81443.619), stdev = 4811.898
  CI (99.9%): [67302.723, 77591.145] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.copy.Inline64byte.Val_to_Ref_copy
# Parameters: (size = 100)

# Run progress: 2.50% complete, ETA 09:24:14
# Fork: 1 of 3
# Warmup Iteration   1: 178.740 ns/op
# Warmup Iteration   2: 177.532 ns/op
# Warmup Iteration   3: 175.432 ns/op
Iteration   1: 176.580 ns/op
Iteration   2: 175.948 ns/op
Iteration   3: 174.819 ns/op
Iteration   4: 176.664 ns/op
Iteration   5: 177.095 ns/op

# Run progress: 2.52% complete, ETA 09:25:03
# Fork: 2 of 3
# Warmup Iteration   1: 182.742 ns/op
# Warmup Iteration   2: 179.643 ns/op
# Warmup Iteration   3: 186.300 ns/op
Iteration   1: 176.452 ns/op
Iteration   2: 178.949 ns/op
Iteration   3: 175.976 ns/op
Iteration   4: 177.381 ns/op
Iteration   5: 178.446 ns/op

# Run progress: 2.55% complete, ETA 09:24:47
# Fork: 3 of 3
# Warmup Iteration   1: 179.124 ns/op
# Warmup Iteration   2: 177.196 ns/op
# Warmup Iteration   3: 175.237 ns/op
Iteration   1: 177.010 ns/op
Iteration   2: 176.842 ns/op
Iteration   3: 176.573 ns/op
Iteration   4: 176.249 ns/op
Iteration   5: 186.025 ns/op


Result "kotlin_benchmarks.array.copy.Inline64byte.Val_to_Ref_copy":
  177.401 ±(99.9%) 2.761 ns/op [Average]
  (min, avg, max) = (174.819, 177.401, 186.025), stdev = 2.582
  CI (99.9%): [174.640, 180.161] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.copy.Inline64byte.Val_to_Ref_copy
# Parameters: (size = 1000000)

# Run progress: 2.57% complete, ETA 09:24:30
# Fork: 1 of 3
# Warmup Iteration   1: 19282558.962 ns/op
# Warmup Iteration   2: 22373535.326 ns/op
# Warmup Iteration   3: 20177655.235 ns/op
Iteration   1: 22561990.043 ns/op
Iteration   2: 20082513.078 ns/op
Iteration   3: 13708590.649 ns/op
Iteration   4: 14700673.214 ns/op
Iteration   5: 15408440.910 ns/op

# Run progress: 2.60% complete, ETA 09:24:24
# Fork: 2 of 3
# Warmup Iteration   1: 21532201.255 ns/op
# Warmup Iteration   2: 24242541.667 ns/op
# Warmup Iteration   3: 20633370.840 ns/op
Iteration   1: 21813728.723 ns/op
Iteration   2: 15787292.308 ns/op
Iteration   3: 11478492.420 ns/op
Iteration   4: 7002396.273 ns/op
Iteration   5: 10383184.701 ns/op

# Run progress: 2.62% complete, ETA 09:24:12
# Fork: 3 of 3
# Warmup Iteration   1: 15533957.046 ns/op
# Warmup Iteration   2: 21413668.396 ns/op
# Warmup Iteration   3: 12249823.795 ns/op
Iteration   1: 15659828.288 ns/op
Iteration   2: 22959832.386 ns/op
Iteration   3: 20348624.160 ns/op
Iteration   4: 22888539.773 ns/op
Iteration   5: 21813865.935 ns/op


Result "kotlin_benchmarks.array.copy.Inline64byte.Val_to_Ref_copy":
  17106532.857 ±(99.9%) 5452373.200 ns/op [Average]
  (min, avg, max) = (7002396.273, 17106532.857, 22959832.386), stdev = 5100153.275
  CI (99.9%): [11654159.657, 22558906.058] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.copy.Inline64byte.Val_to_Val_arraycopy
# Parameters: (size = 100)

# Run progress: 2.65% complete, ETA 09:24:01
# Fork: 1 of 3
# Warmup Iteration   1: 9.615 ns/op
# Warmup Iteration   2: 9.593 ns/op
# Warmup Iteration   3: 9.655 ns/op
Iteration   1: 9.541 ns/op
Iteration   2: 9.731 ns/op
Iteration   3: 10.028 ns/op
Iteration   4: 9.788 ns/op
Iteration   5: 9.570 ns/op

# Run progress: 2.67% complete, ETA 09:23:47
# Fork: 2 of 3
# Warmup Iteration   1: 10.143 ns/op
# Warmup Iteration   2: 10.133 ns/op
# Warmup Iteration   3: 10.061 ns/op
Iteration   1: 10.099 ns/op
Iteration   2: 10.029 ns/op
Iteration   3: 10.029 ns/op
Iteration   4: 10.134 ns/op
Iteration   5: 10.094 ns/op

# Run progress: 2.70% complete, ETA 09:23:30
# Fork: 3 of 3
# Warmup Iteration   1: 9.572 ns/op
# Warmup Iteration   2: 9.633 ns/op
# Warmup Iteration   3: 9.601 ns/op
Iteration   1: 9.551 ns/op
Iteration   2: 9.708 ns/op
Iteration   3: 9.703 ns/op
Iteration   4: 10.160 ns/op
Iteration   5: 10.167 ns/op


Result "kotlin_benchmarks.array.copy.Inline64byte.Val_to_Val_arraycopy":
  9.889 ±(99.9%) 0.255 ns/op [Average]
  (min, avg, max) = (9.541, 9.889, 10.167), stdev = 0.238
  CI (99.9%): [9.634, 10.144] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.copy.Inline64byte.Val_to_Val_arraycopy
# Parameters: (size = 1000000)

# Run progress: 2.72% complete, ETA 09:23:15
# Fork: 1 of 3
# Warmup Iteration   1: 61658.639 ns/op
# Warmup Iteration   2: 70140.265 ns/op
# Warmup Iteration   3: 73845.981 ns/op
Iteration   1: 74463.249 ns/op
Iteration   2: 74443.096 ns/op
Iteration   3: 72494.540 ns/op
Iteration   4: 65852.352 ns/op
Iteration   5: 73299.343 ns/op

# Run progress: 2.75% complete, ETA 09:23:01
# Fork: 2 of 3
# Warmup Iteration   1: 70397.803 ns/op
# Warmup Iteration   2: 73191.268 ns/op
# Warmup Iteration   3: 70568.595 ns/op
Iteration   1: 81939.822 ns/op
Iteration   2: 85211.982 ns/op
Iteration   3: 71540.451 ns/op
Iteration   4: 74994.661 ns/op
Iteration   5: 72818.206 ns/op

# Run progress: 2.77% complete, ETA 09:22:47
# Fork: 3 of 3
# Warmup Iteration   1: 71261.768 ns/op
# Warmup Iteration   2: 70241.788 ns/op
# Warmup Iteration   3: 74618.145 ns/op
Iteration   1: 73509.149 ns/op
Iteration   2: 73092.921 ns/op
Iteration   3: 73254.558 ns/op
Iteration   4: 77801.997 ns/op
Iteration   5: 90919.342 ns/op


Result "kotlin_benchmarks.array.copy.Inline64byte.Val_to_Val_arraycopy":
  75709.045 ±(99.9%) 6548.275 ns/op [Average]
  (min, avg, max) = (65852.352, 75709.045, 90919.342), stdev = 6125.260
  CI (99.9%): [69160.770, 82257.319] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.copy.Inline64byte.Val_to_Val_copy
# Parameters: (size = 100)

# Run progress: 2.79% complete, ETA 09:22:33
# Fork: 1 of 3
# Warmup Iteration   1: 183.618 ns/op
# Warmup Iteration   2: 179.454 ns/op
# Warmup Iteration   3: 176.880 ns/op
Iteration   1: 177.089 ns/op
Iteration   2: 181.665 ns/op
Iteration   3: 181.716 ns/op
Iteration   4: 179.992 ns/op
Iteration   5: 179.124 ns/op

# Run progress: 2.82% complete, ETA 09:22:19
# Fork: 2 of 3
# Warmup Iteration   1: 180.762 ns/op
# Warmup Iteration   2: 178.807 ns/op
# Warmup Iteration   3: 175.857 ns/op
Iteration   1: 171.243 ns/op
Iteration   2: 171.919 ns/op
Iteration   3: 171.911 ns/op
Iteration   4: 175.827 ns/op
Iteration   5: 176.304 ns/op

# Run progress: 2.84% complete, ETA 09:22:06
# Fork: 3 of 3
# Warmup Iteration   1: 178.882 ns/op
# Warmup Iteration   2: 178.540 ns/op
# Warmup Iteration   3: 179.409 ns/op
Iteration   1: 178.486 ns/op
Iteration   2: 179.615 ns/op
Iteration   3: 177.005 ns/op
Iteration   4: 177.050 ns/op
Iteration   5: 177.130 ns/op


Result "kotlin_benchmarks.array.copy.Inline64byte.Val_to_Val_copy":
  177.072 ±(99.9%) 3.536 ns/op [Average]
  (min, avg, max) = (171.243, 177.072, 181.716), stdev = 3.308
  CI (99.9%): [173.536, 180.608] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.copy.Inline64byte.Val_to_Val_copy
# Parameters: (size = 1000000)

# Run progress: 2.87% complete, ETA 09:21:52
# Fork: 1 of 3
# Warmup Iteration   1: 19985027.765 ns/op
# Warmup Iteration   2: 24568854.167 ns/op
# Warmup Iteration   3: 25515942.725 ns/op
Iteration   1: 27061019.737 ns/op
Iteration   2: 26148385.400 ns/op
Iteration   3: 26855217.105 ns/op
Iteration   4: 28333415.500 ns/op
Iteration   5: 24722613.095 ns/op

# Run progress: 2.89% complete, ETA 09:21:44
# Fork: 2 of 3
# Warmup Iteration   1: 10945680.250 ns/op
# Warmup Iteration   2: 17918147.259 ns/op
# Warmup Iteration   3: 26898231.368 ns/op
Iteration   1: 21381486.702 ns/op
Iteration   2: 28778343.750 ns/op
Iteration   3: 27345208.316 ns/op
Iteration   4: 24703652.439 ns/op
Iteration   5: 19705180.549 ns/op

# Run progress: 2.92% complete, ETA 09:21:40
# Fork: 3 of 3
# Warmup Iteration   1: 22181208.326 ns/op
# Warmup Iteration   2: 22484034.244 ns/op
# Warmup Iteration   3: 24445837.310 ns/op
Iteration   1: 26342803.436 ns/op
Iteration   2: 26927764.237 ns/op
Iteration   3: 25070513.195 ns/op
Iteration   4: 23148654.644 ns/op
Iteration   5: 10284542.939 ns/op


Result "kotlin_benchmarks.array.copy.Inline64byte.Val_to_Val_copy":
  24453920.070 ±(99.9%) 4967008.097 ns/op [Average]
  (min, avg, max) = (10284542.939, 24453920.070, 28778343.750), stdev = 4646142.456
  CI (99.9%): [19486911.973, 29420928.167] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.copy.Inline64int.Ref_to_Val_arraycopy
# Parameters: (size = 100)

# Run progress: 2.94% complete, ETA 09:21:33
# Fork: 1 of 3
# Warmup Iteration   1: 9.793 ns/op
# Warmup Iteration   2: 9.632 ns/op
# Warmup Iteration   3: 10.135 ns/op
Iteration   1: 9.622 ns/op
Iteration   2: 9.558 ns/op
Iteration   3: 9.535 ns/op
Iteration   4: 9.541 ns/op
Iteration   5: 9.574 ns/op

# Run progress: 2.97% complete, ETA 09:21:19
# Fork: 2 of 3
# Warmup Iteration   1: 9.966 ns/op
# Warmup Iteration   2: 9.572 ns/op
# Warmup Iteration   3: 9.584 ns/op
Iteration   1: 9.683 ns/op
Iteration   2: 9.650 ns/op
Iteration   3: 9.658 ns/op
Iteration   4: 9.679 ns/op
Iteration   5: 9.630 ns/op

# Run progress: 2.99% complete, ETA 09:21:06
# Fork: 3 of 3
# Warmup Iteration   1: 9.617 ns/op
# Warmup Iteration   2: 9.559 ns/op
# Warmup Iteration   3: 9.540 ns/op
Iteration   1: 9.603 ns/op
Iteration   2: 9.723 ns/op
Iteration   3: 9.626 ns/op
Iteration   4: 9.586 ns/op
Iteration   5: 9.614 ns/op


Result "kotlin_benchmarks.array.copy.Inline64int.Ref_to_Val_arraycopy":
  9.619 ±(99.9%) 0.058 ns/op [Average]
  (min, avg, max) = (9.535, 9.619, 9.723), stdev = 0.055
  CI (99.9%): [9.561, 9.677] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.copy.Inline64int.Ref_to_Val_arraycopy
# Parameters: (size = 1000000)

# Run progress: 3.01% complete, ETA 09:20:51
# Fork: 1 of 3
# Warmup Iteration   1: 67013.627 ns/op
# Warmup Iteration   2: 73810.221 ns/op
# Warmup Iteration   3: 74194.278 ns/op
Iteration   1: 74077.864 ns/op
Iteration   2: 73954.727 ns/op
Iteration   3: 72817.858 ns/op
Iteration   4: 83500.857 ns/op
Iteration   5: 74563.363 ns/op

# Run progress: 3.04% complete, ETA 09:20:38
# Fork: 2 of 3
# Warmup Iteration   1: 72476.750 ns/op
# Warmup Iteration   2: 74229.722 ns/op
# Warmup Iteration   3: 73355.386 ns/op
Iteration   1: 70366.620 ns/op
Iteration   2: 74859.174 ns/op
Iteration   3: 74731.153 ns/op
Iteration   4: 74634.799 ns/op
Iteration   5: 71592.248 ns/op

# Run progress: 3.06% complete, ETA 09:20:26
# Fork: 3 of 3
# Warmup Iteration   1: 70200.119 ns/op
# Warmup Iteration   2: 65478.674 ns/op
# Warmup Iteration   3: 70783.564 ns/op
Iteration   1: 68523.675 ns/op
Iteration   2: 71894.922 ns/op
Iteration   3: 85713.394 ns/op
Iteration   4: 83862.737 ns/op
Iteration   5: 80172.832 ns/op


Result "kotlin_benchmarks.array.copy.Inline64int.Ref_to_Val_arraycopy":
  75684.415 ±(99.9%) 5548.439 ns/op [Average]
  (min, avg, max) = (68523.675, 75684.415, 85713.394), stdev = 5190.014
  CI (99.9%): [70135.975, 81232.854] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.copy.Inline64int.Ref_to_Val_copy
# Parameters: (size = 100)

# Run progress: 3.09% complete, ETA 09:20:15
# Fork: 1 of 3
# Warmup Iteration   1: 179.273 ns/op
# Warmup Iteration   2: 179.165 ns/op
# Warmup Iteration   3: 177.143 ns/op
Iteration   1: 178.280 ns/op
Iteration   2: 178.335 ns/op
Iteration   3: 177.452 ns/op
Iteration   4: 177.561 ns/op
Iteration   5: 174.314 ns/op

# Run progress: 3.11% complete, ETA 09:20:01
# Fork: 2 of 3
# Warmup Iteration   1: 178.140 ns/op
# Warmup Iteration   2: 177.784 ns/op
# Warmup Iteration   3: 176.819 ns/op
Iteration   1: 176.464 ns/op
Iteration   2: 177.319 ns/op
Iteration   3: 177.384 ns/op
Iteration   4: 176.002 ns/op
Iteration   5: 176.254 ns/op

# Run progress: 3.14% complete, ETA 09:19:46
# Fork: 3 of 3
# Warmup Iteration   1: 180.001 ns/op
# Warmup Iteration   2: 191.963 ns/op
# Warmup Iteration   3: 175.652 ns/op
Iteration   1: 175.968 ns/op
Iteration   2: 177.528 ns/op
Iteration   3: 178.435 ns/op
Iteration   4: 178.726 ns/op
Iteration   5: 178.480 ns/op


Result "kotlin_benchmarks.array.copy.Inline64int.Ref_to_Val_copy":
  177.233 ±(99.9%) 1.309 ns/op [Average]
  (min, avg, max) = (174.314, 177.233, 178.726), stdev = 1.225
  CI (99.9%): [175.924, 178.543] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.copy.Inline64int.Ref_to_Val_copy
# Parameters: (size = 1000000)

# Run progress: 3.16% complete, ETA 09:19:30
# Fork: 1 of 3
# Warmup Iteration   1: 21801134.745 ns/op
# Warmup Iteration   2: 22131807.978 ns/op
# Warmup Iteration   3: 23003730.114 ns/op
Iteration   1: 8359047.811 ns/op
Iteration   2: 12634481.250 ns/op
Iteration   3: 24346741.071 ns/op
Iteration   4: 14591605.357 ns/op
Iteration   5: 23401424.227 ns/op

# Run progress: 3.19% complete, ETA 09:19:23
# Fork: 2 of 3
# Warmup Iteration   1: 24266185.524 ns/op
# Warmup Iteration   2: 28818090.457 ns/op
# Warmup Iteration   3: 23061849.432 ns/op
Iteration   1: 25002594.512 ns/op
Iteration   2: 25014870.927 ns/op
Iteration   3: 15738792.969 ns/op
Iteration   4: 23539282.953 ns/op
Iteration   5: 22979928.977 ns/op

# Run progress: 3.21% complete, ETA 09:19:12
# Fork: 3 of 3
# Warmup Iteration   1: 26874574.553 ns/op
# Warmup Iteration   2: 20169968.961 ns/op
# Warmup Iteration   3: 9488269.860 ns/op
Iteration   1: 20457517.857 ns/op
Iteration   2: 20313200.000 ns/op
Iteration   3: 19850861.922 ns/op
Iteration   4: 18439581.818 ns/op
Iteration   5: 27220105.263 ns/op


Result "kotlin_benchmarks.array.copy.Inline64int.Ref_to_Val_copy":
  20126002.461 ±(99.9%) 5670434.414 ns/op [Average]
  (min, avg, max) = (8359047.811, 20126002.461, 27220105.263), stdev = 5304127.870
  CI (99.9%): [14455568.047, 25796436.875] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.copy.Inline64int.Val_to_Ref_arraycopy
# Parameters: (size = 100)

# Run progress: 3.24% complete, ETA 09:19:04
# Fork: 1 of 3
# Warmup Iteration   1: 9.729 ns/op
# Warmup Iteration   2: 9.790 ns/op
# Warmup Iteration   3: 9.854 ns/op
Iteration   1: 11.011 ns/op
Iteration   2: 9.612 ns/op
Iteration   3: 9.582 ns/op
Iteration   4: 9.694 ns/op
Iteration   5: 9.723 ns/op

# Run progress: 3.26% complete, ETA 09:18:50
# Fork: 2 of 3
# Warmup Iteration   1: 9.645 ns/op
# Warmup Iteration   2: 9.870 ns/op
# Warmup Iteration   3: 9.700 ns/op
Iteration   1: 9.617 ns/op
Iteration   2: 9.587 ns/op
Iteration   3: 9.726 ns/op
Iteration   4: 9.620 ns/op
Iteration   5: 9.622 ns/op

# Run progress: 3.28% complete, ETA 09:18:35
# Fork: 3 of 3
# Warmup Iteration   1: 9.626 ns/op
# Warmup Iteration   2: 9.627 ns/op
# Warmup Iteration   3: 9.682 ns/op
Iteration   1: 9.587 ns/op
Iteration   2: 9.802 ns/op
Iteration   3: 9.695 ns/op
Iteration   4: 9.672 ns/op
Iteration   5: 9.752 ns/op


Result "kotlin_benchmarks.array.copy.Inline64int.Val_to_Ref_arraycopy":
  9.754 ±(99.9%) 0.379 ns/op [Average]
  (min, avg, max) = (9.582, 9.754, 11.011), stdev = 0.354
  CI (99.9%): [9.375, 10.132] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.copy.Inline64int.Val_to_Ref_arraycopy
# Parameters: (size = 1000000)

# Run progress: 3.31% complete, ETA 09:18:21
# Fork: 1 of 3
# Warmup Iteration   1: 73227.213 ns/op
# Warmup Iteration   2: 78447.660 ns/op
# Warmup Iteration   3: 78837.004 ns/op
Iteration   1: 77871.264 ns/op
Iteration   2: 72551.025 ns/op
Iteration   3: 81969.235 ns/op
Iteration   4: 85812.791 ns/op
Iteration   5: 85431.023 ns/op

# Run progress: 3.33% complete, ETA 09:18:12
# Fork: 2 of 3
# Warmup Iteration   1: 70614.085 ns/op
# Warmup Iteration   2: 66225.983 ns/op
# Warmup Iteration   3: 71744.036 ns/op
Iteration   1: 73004.224 ns/op
Iteration   2: 71662.524 ns/op
Iteration   3: 73769.402 ns/op
Iteration   4: 73151.744 ns/op
Iteration   5: 72073.398 ns/op

# Run progress: 3.36% complete, ETA 09:18:02
# Fork: 3 of 3
# Warmup Iteration   1: 75948.470 ns/op
# Warmup Iteration   2: 73998.984 ns/op
# Warmup Iteration   3: 68158.511 ns/op
Iteration   1: 69550.242 ns/op
Iteration   2: 71321.657 ns/op
Iteration   3: 69515.795 ns/op
Iteration   4: 70762.140 ns/op
Iteration   5: 63245.074 ns/op


Result "kotlin_benchmarks.array.copy.Inline64int.Val_to_Ref_arraycopy":
  74112.769 ±(99.9%) 6607.381 ns/op [Average]
  (min, avg, max) = (63245.074, 74112.769, 85812.791), stdev = 6180.548
  CI (99.9%): [67505.388, 80720.150] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.copy.Inline64int.Val_to_Ref_copy
# Parameters: (size = 100)

# Run progress: 3.38% complete, ETA 09:17:51
# Fork: 1 of 3
# Warmup Iteration   1: 177.408 ns/op
# Warmup Iteration   2: 178.338 ns/op
# Warmup Iteration   3: 177.731 ns/op
Iteration   1: 176.099 ns/op
Iteration   2: 176.283 ns/op
Iteration   3: 176.686 ns/op
Iteration   4: 176.710 ns/op
Iteration   5: 176.199 ns/op

# Run progress: 3.41% complete, ETA 09:17:36
# Fork: 2 of 3
# Warmup Iteration   1: 177.645 ns/op
# Warmup Iteration   2: 179.388 ns/op
# Warmup Iteration   3: 175.483 ns/op
Iteration   1: 177.475 ns/op
Iteration   2: 176.948 ns/op
Iteration   3: 177.831 ns/op
Iteration   4: 175.567 ns/op
Iteration   5: 176.630 ns/op

# Run progress: 3.43% complete, ETA 09:17:22
# Fork: 3 of 3
# Warmup Iteration   1: 178.125 ns/op
# Warmup Iteration   2: 179.535 ns/op
# Warmup Iteration   3: 176.029 ns/op
Iteration   1: 176.357 ns/op
Iteration   2: 178.114 ns/op
Iteration   3: 193.781 ns/op
Iteration   4: 185.405 ns/op
Iteration   5: 175.297 ns/op


Result "kotlin_benchmarks.array.copy.Inline64int.Val_to_Ref_copy":
  178.359 ±(99.9%) 5.225 ns/op [Average]
  (min, avg, max) = (175.297, 178.359, 193.781), stdev = 4.887
  CI (99.9%): [173.134, 183.583] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.copy.Inline64int.Val_to_Ref_copy
# Parameters: (size = 1000000)

# Run progress: 3.46% complete, ETA 09:18:00
# Fork: 1 of 3
# Warmup Iteration   1: 16753894.803 ns/op
# Warmup Iteration   2: 26458737.921 ns/op
# Warmup Iteration   3: 11763222.057 ns/op
Iteration   1: 17130586.066 ns/op
Iteration   2: 30564109.848 ns/op
Iteration   3: 34852178.172 ns/op
Iteration   4: 18255246.286 ns/op
Iteration   5: 25319772.366 ns/op

# Run progress: 3.48% complete, ETA 09:17:51
# Fork: 2 of 3
# Warmup Iteration   1: 25306280.200 ns/op
# Warmup Iteration   2: 25608331.250 ns/op
# Warmup Iteration   3: 13734614.151 ns/op
Iteration   1: 19416917.481 ns/op
Iteration   2: 6310631.769 ns/op
Iteration   3: 8786649.573 ns/op
Iteration   4: 20508907.500 ns/op
Iteration   5: 19607609.283 ns/op

# Run progress: 3.50% complete, ETA 09:17:42
# Fork: 3 of 3
# Warmup Iteration   1: 27232368.421 ns/op
# Warmup Iteration   2: 26138655.974 ns/op
# Warmup Iteration   3: 26512282.895 ns/op
Iteration   1: 24664408.738 ns/op
Iteration   2: 27681700.432 ns/op
Iteration   3: 25445377.100 ns/op
Iteration   4: 26954253.289 ns/op
Iteration   5: 17824772.649 ns/op


Result "kotlin_benchmarks.array.copy.Inline64int.Val_to_Ref_copy":
  21554874.703 ±(99.9%) 8146245.954 ns/op [Average]
  (min, avg, max) = (6310631.769, 21554874.703, 34852178.172), stdev = 7620003.520
  CI (99.9%): [13408628.750, 29701120.657] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.copy.Inline64int.Val_to_Val_arraycopy
# Parameters: (size = 100)

# Run progress: 3.53% complete, ETA 09:17:35
# Fork: 1 of 3
# Warmup Iteration   1: 9.717 ns/op
# Warmup Iteration   2: 9.656 ns/op
# Warmup Iteration   3: 9.609 ns/op
Iteration   1: 9.743 ns/op
Iteration   2: 9.664 ns/op
Iteration   3: 9.617 ns/op
Iteration   4: 9.678 ns/op
Iteration   5: 9.668 ns/op

# Run progress: 3.55% complete, ETA 09:17:21
# Fork: 2 of 3
# Warmup Iteration   1: 9.609 ns/op
# Warmup Iteration   2: 9.710 ns/op
# Warmup Iteration   3: 9.654 ns/op
Iteration   1: 9.589 ns/op
Iteration   2: 9.552 ns/op
Iteration   3: 9.594 ns/op
Iteration   4: 9.651 ns/op
Iteration   5: 9.580 ns/op

# Run progress: 3.58% complete, ETA 09:17:07
# Fork: 3 of 3
# Warmup Iteration   1: 9.544 ns/op
# Warmup Iteration   2: 9.512 ns/op
# Warmup Iteration   3: 9.537 ns/op
Iteration   1: 9.561 ns/op
Iteration   2: 9.615 ns/op
Iteration   3: 9.467 ns/op
Iteration   4: 9.532 ns/op
Iteration   5: 9.521 ns/op


Result "kotlin_benchmarks.array.copy.Inline64int.Val_to_Val_arraycopy":
  9.602 ±(99.9%) 0.076 ns/op [Average]
  (min, avg, max) = (9.467, 9.602, 9.743), stdev = 0.071
  CI (99.9%): [9.526, 9.678] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.copy.Inline64int.Val_to_Val_arraycopy
# Parameters: (size = 1000000)

# Run progress: 3.60% complete, ETA 09:16:53
# Fork: 1 of 3
# Warmup Iteration   1: 65179.574 ns/op
# Warmup Iteration   2: 73946.566 ns/op
# Warmup Iteration   3: 75440.194 ns/op
Iteration   1: 78355.326 ns/op
Iteration   2: 74709.588 ns/op
Iteration   3: 71807.008 ns/op
Iteration   4: 72871.405 ns/op
Iteration   5: 71424.010 ns/op

# Run progress: 3.63% complete, ETA 09:16:42
# Fork: 2 of 3
# Warmup Iteration   1: 67967.092 ns/op
# Warmup Iteration   2: 73361.242 ns/op
# Warmup Iteration   3: 86764.620 ns/op
Iteration   1: 79874.595 ns/op
Iteration   2: 69636.723 ns/op
Iteration   3: 71719.466 ns/op
Iteration   4: 69150.307 ns/op
Iteration   5: 73007.963 ns/op

# Run progress: 3.65% complete, ETA 09:16:31
# Fork: 3 of 3
# Warmup Iteration   1: 71785.116 ns/op
# Warmup Iteration   2: 71962.056 ns/op
# Warmup Iteration   3: 81975.525 ns/op
Iteration   1: 89645.464 ns/op
Iteration   2: 70773.247 ns/op
Iteration   3: 71317.940 ns/op
Iteration   4: 65684.129 ns/op
Iteration   5: 72885.974 ns/op


Result "kotlin_benchmarks.array.copy.Inline64int.Val_to_Val_arraycopy":
  73524.210 ±(99.9%) 6026.084 ns/op [Average]
  (min, avg, max) = (65684.129, 73524.210, 89645.464), stdev = 5636.803
  CI (99.9%): [67498.126, 79550.294] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.copy.Inline64int.Val_to_Val_copy
# Parameters: (size = 100)

# Run progress: 3.68% complete, ETA 09:16:19
# Fork: 1 of 3
# Warmup Iteration   1: 179.558 ns/op
# Warmup Iteration   2: 185.405 ns/op
# Warmup Iteration   3: 176.862 ns/op
Iteration   1: 175.636 ns/op
Iteration   2: 175.211 ns/op
Iteration   3: 174.371 ns/op
Iteration   4: 174.980 ns/op
Iteration   5: 175.329 ns/op

# Run progress: 3.70% complete, ETA 09:16:06
# Fork: 2 of 3
# Warmup Iteration   1: 180.748 ns/op
# Warmup Iteration   2: 177.346 ns/op
# Warmup Iteration   3: 175.120 ns/op
Iteration   1: 176.428 ns/op
Iteration   2: 176.401 ns/op
Iteration   3: 179.243 ns/op
Iteration   4: 177.893 ns/op
Iteration   5: 176.410 ns/op

# Run progress: 3.73% complete, ETA 09:15:52
# Fork: 3 of 3
# Warmup Iteration   1: 179.300 ns/op
# Warmup Iteration   2: 179.252 ns/op
# Warmup Iteration   3: 180.939 ns/op
Iteration   1: 179.648 ns/op
Iteration   2: 178.234 ns/op
Iteration   3: 176.928 ns/op
Iteration   4: 175.395 ns/op
Iteration   5: 175.518 ns/op


Result "kotlin_benchmarks.array.copy.Inline64int.Val_to_Val_copy":
  176.508 ±(99.9%) 1.700 ns/op [Average]
  (min, avg, max) = (174.371, 176.508, 179.648), stdev = 1.590
  CI (99.9%): [174.808, 178.208] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.copy.Inline64int.Val_to_Val_copy
# Parameters: (size = 1000000)

# Run progress: 3.75% complete, ETA 09:15:41
# Fork: 1 of 3
# Warmup Iteration   1: 23746468.023 ns/op
# Warmup Iteration   2: 8054274.000 ns/op
# Warmup Iteration   3: 6434170.673 ns/op
Iteration   1: 12128952.459 ns/op
Iteration   2: 17808423.246 ns/op
Iteration   3: 25156194.098 ns/op
Iteration   4: 24555266.881 ns/op
Iteration   5: 28730107.143 ns/op

# Run progress: 3.77% complete, ETA 09:15:33
# Fork: 2 of 3
# Warmup Iteration   1: 7411622.860 ns/op
# Warmup Iteration   2: 19768675.647 ns/op
# Warmup Iteration   3: 22551756.467 ns/op
Iteration   1: 17499528.741 ns/op
Iteration   2: 20218560.000 ns/op
Iteration   3: 26081370.718 ns/op
Iteration   4: 22019376.804 ns/op
Iteration   5: 24121549.619 ns/op

# Run progress: 3.80% complete, ETA 09:15:23
# Fork: 3 of 3
# Warmup Iteration   1: 19449345.346 ns/op
# Warmup Iteration   2: 20960585.878 ns/op
# Warmup Iteration   3: 24974233.732 ns/op
Iteration   1: 28364336.806 ns/op
Iteration   2: 21886617.915 ns/op
Iteration   3: 23292179.932 ns/op
Iteration   4: 22054750.000 ns/op
Iteration   5: 11262083.333 ns/op


Result "kotlin_benchmarks.array.copy.Inline64int.Val_to_Val_copy":
  21678619.846 ±(99.9%) 5550024.142 ns/op [Average]
  (min, avg, max) = (11262083.333, 21678619.846, 28730107.143), stdev = 5191496.027
  CI (99.9%): [16128595.704, 27228643.989] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.copy.InlineOpt.Ref_to_Val_arraycopy
# Parameters: (size = 100)

# Run progress: 3.82% complete, ETA 09:15:15
# Fork: 1 of 3
# Warmup Iteration   1: 9.860 ns/op
# Warmup Iteration   2: 9.855 ns/op
# Warmup Iteration   3: 9.941 ns/op
Iteration   1: 9.911 ns/op
Iteration   2: 10.247 ns/op
Iteration   3: 10.336 ns/op
Iteration   4: 9.874 ns/op
Iteration   5: 9.794 ns/op

# Run progress: 3.85% complete, ETA 09:15:02
# Fork: 2 of 3
# Warmup Iteration   1: 9.867 ns/op
# Warmup Iteration   2: 9.766 ns/op
# Warmup Iteration   3: 9.787 ns/op
Iteration   1: 9.828 ns/op
Iteration   2: 9.816 ns/op
Iteration   3: 9.832 ns/op
Iteration   4: 9.812 ns/op
Iteration   5: 9.855 ns/op

# Run progress: 3.87% complete, ETA 09:14:49
# Fork: 3 of 3
# Warmup Iteration   1: 9.854 ns/op
# Warmup Iteration   2: 9.833 ns/op
# Warmup Iteration   3: 9.915 ns/op
Iteration   1: 9.863 ns/op
Iteration   2: 9.809 ns/op
Iteration   3: 9.781 ns/op
Iteration   4: 9.783 ns/op
Iteration   5: 9.786 ns/op


Result "kotlin_benchmarks.array.copy.InlineOpt.Ref_to_Val_arraycopy":
  9.888 ±(99.9%) 0.180 ns/op [Average]
  (min, avg, max) = (9.781, 9.888, 10.336), stdev = 0.169
  CI (99.9%): [9.708, 10.069] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.copy.InlineOpt.Ref_to_Val_arraycopy
# Parameters: (size = 1000000)

# Run progress: 3.90% complete, ETA 09:14:36
# Fork: 1 of 3
# Warmup Iteration   1: 65293.616 ns/op
# Warmup Iteration   2: 71485.990 ns/op
# Warmup Iteration   3: 73539.580 ns/op
Iteration   1: 76562.859 ns/op
Iteration   2: 85079.216 ns/op
Iteration   3: 81006.168 ns/op
Iteration   4: 74968.620 ns/op
Iteration   5: 78586.380 ns/op

# Run progress: 3.92% complete, ETA 09:14:26
# Fork: 2 of 3
# Warmup Iteration   1: 72411.951 ns/op
# Warmup Iteration   2: 67491.136 ns/op
# Warmup Iteration   3: 70912.019 ns/op
Iteration   1: 72169.102 ns/op
Iteration   2: 81792.653 ns/op
Iteration   3: 83380.668 ns/op
Iteration   4: 83440.873 ns/op
Iteration   5: 83868.909 ns/op

# Run progress: 3.95% complete, ETA 09:14:14
# Fork: 3 of 3
# Warmup Iteration   1: 83356.087 ns/op
# Warmup Iteration   2: 83301.848 ns/op
# Warmup Iteration   3: 82971.288 ns/op
Iteration   1: 77401.584 ns/op
Iteration   2: 66537.305 ns/op
Iteration   3: 72367.230 ns/op
Iteration   4: 77897.593 ns/op
Iteration   5: 72270.755 ns/op


Result "kotlin_benchmarks.array.copy.InlineOpt.Ref_to_Val_arraycopy":
  77821.994 ±(99.9%) 5771.034 ns/op [Average]
  (min, avg, max) = (66537.305, 77821.994, 85079.216), stdev = 5398.229
  CI (99.9%): [72050.961, 83593.028] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.copy.InlineOpt.Ref_to_Val_copy
# Parameters: (size = 100)

# Run progress: 3.97% complete, ETA 09:14:02
# Fork: 1 of 3
# Warmup Iteration   1: 78.299 ns/op
# Warmup Iteration   2: 77.808 ns/op
# Warmup Iteration   3: 77.641 ns/op
Iteration   1: 77.728 ns/op
Iteration   2: 78.605 ns/op
Iteration   3: 78.757 ns/op
Iteration   4: 78.014 ns/op
Iteration   5: 77.800 ns/op

# Run progress: 4.00% complete, ETA 09:13:49
# Fork: 2 of 3
# Warmup Iteration   1: 77.031 ns/op
# Warmup Iteration   2: 77.216 ns/op
# Warmup Iteration   3: 76.884 ns/op
Iteration   1: 77.199 ns/op
Iteration   2: 77.679 ns/op
Iteration   3: 77.355 ns/op
Iteration   4: 79.306 ns/op
Iteration   5: 76.896 ns/op

# Run progress: 4.02% complete, ETA 09:13:37
# Fork: 3 of 3
# Warmup Iteration   1: 78.008 ns/op
# Warmup Iteration   2: 77.972 ns/op
# Warmup Iteration   3: 77.896 ns/op
Iteration   1: 78.617 ns/op
Iteration   2: 78.313 ns/op
Iteration   3: 78.558 ns/op
Iteration   4: 77.969 ns/op
Iteration   5: 79.164 ns/op


Result "kotlin_benchmarks.array.copy.InlineOpt.Ref_to_Val_copy":
  78.131 ±(99.9%) 0.758 ns/op [Average]
  (min, avg, max) = (76.896, 78.131, 79.306), stdev = 0.709
  CI (99.9%): [77.373, 78.888] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.copy.InlineOpt.Ref_to_Val_copy
# Parameters: (size = 1000000)

# Run progress: 4.04% complete, ETA 09:13:25
# Fork: 1 of 3
# Warmup Iteration   1: 29657814.286 ns/op
# Warmup Iteration   2: 24350989.071 ns/op
# Warmup Iteration   3: 25865970.077 ns/op
Iteration   1: 28769902.778 ns/op
Iteration   2: 13368057.566 ns/op
Iteration   3: 23588170.558 ns/op
Iteration   4: 31799320.697 ns/op
Iteration   5: 33366217.742 ns/op

# Run progress: 4.07% complete, ETA 09:13:17
# Fork: 2 of 3
# Warmup Iteration   1: 30018647.059 ns/op
# Warmup Iteration   2: 31454639.313 ns/op
# Warmup Iteration   3: 29287991.686 ns/op
Iteration   1: 34027604.167 ns/op
Iteration   2: 29544725.500 ns/op
Iteration   3: 29811666.657 ns/op
Iteration   4: 27099998.895 ns/op
Iteration   5: 8987370.536 ns/op

# Run progress: 4.09% complete, ETA 09:13:07
# Fork: 3 of 3
# Warmup Iteration   1: 6948178.293 ns/op
# Warmup Iteration   2: 18443158.482 ns/op
# Warmup Iteration   3: 16413557.129 ns/op
Iteration   1: 11495727.273 ns/op
Iteration   2: 14519535.211 ns/op
Iteration   3: 19945886.451 ns/op
Iteration   4: 25904255.359 ns/op
Iteration   5: 21796989.362 ns/op


Result "kotlin_benchmarks.array.copy.InlineOpt.Ref_to_Val_copy":
  23601695.250 ±(99.9%) 8821939.975 ns/op [Average]
  (min, avg, max) = (8987370.536, 23601695.250, 34027604.167), stdev = 8252048.127
  CI (99.9%): [14779755.275, 32423635.225] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.copy.InlineOpt.Val_to_Ref_arraycopy
# Parameters: (size = 100)

# Run progress: 4.12% complete, ETA 09:13:02
# Fork: 1 of 3
# Warmup Iteration   1: 9.847 ns/op
# Warmup Iteration   2: 9.794 ns/op
# Warmup Iteration   3: 9.799 ns/op
Iteration   1: 9.765 ns/op
Iteration   2: 9.787 ns/op
Iteration   3: 9.803 ns/op
Iteration   4: 9.787 ns/op
Iteration   5: 9.806 ns/op

# Run progress: 4.14% complete, ETA 09:12:49
# Fork: 2 of 3
# Warmup Iteration   1: 9.982 ns/op
# Warmup Iteration   2: 9.995 ns/op
# Warmup Iteration   3: 9.964 ns/op
Iteration   1: 10.084 ns/op
Iteration   2: 10.023 ns/op
Iteration   3: 9.997 ns/op
Iteration   4: 10.026 ns/op
Iteration   5: 10.056 ns/op

# Run progress: 4.17% complete, ETA 09:12:36
# Fork: 3 of 3
# Warmup Iteration   1: 9.851 ns/op
# Warmup Iteration   2: 9.862 ns/op
# Warmup Iteration   3: 9.799 ns/op
Iteration   1: 9.797 ns/op
Iteration   2: 9.772 ns/op
Iteration   3: 9.774 ns/op
Iteration   4: 9.844 ns/op
Iteration   5: 10.217 ns/op


Result "kotlin_benchmarks.array.copy.InlineOpt.Val_to_Ref_arraycopy":
  9.902 ±(99.9%) 0.158 ns/op [Average]
  (min, avg, max) = (9.765, 9.902, 10.217), stdev = 0.148
  CI (99.9%): [9.744, 10.061] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.copy.InlineOpt.Val_to_Ref_arraycopy
# Parameters: (size = 1000000)

# Run progress: 4.19% complete, ETA 09:12:25
# Fork: 1 of 3
# Warmup Iteration   1: 69737.751 ns/op
# Warmup Iteration   2: 69500.279 ns/op
# Warmup Iteration   3: 70778.240 ns/op
Iteration   1: 79253.364 ns/op
Iteration   2: 71835.251 ns/op
Iteration   3: 67877.719 ns/op
Iteration   4: 71168.499 ns/op
Iteration   5: 71635.745 ns/op

# Run progress: 4.22% complete, ETA 09:12:15
# Fork: 2 of 3
# Warmup Iteration   1: 81652.381 ns/op
# Warmup Iteration   2: 79887.641 ns/op
# Warmup Iteration   3: 73922.675 ns/op
Iteration   1: 73259.221 ns/op
Iteration   2: 72874.181 ns/op
Iteration   3: 72821.313 ns/op
Iteration   4: 67869.574 ns/op
Iteration   5: 72259.177 ns/op

# Run progress: 4.24% complete, ETA 09:12:03
# Fork: 3 of 3
# Warmup Iteration   1: 63272.817 ns/op
# Warmup Iteration   2: 73372.924 ns/op
# Warmup Iteration   3: 76802.228 ns/op
Iteration   1: 75670.284 ns/op
Iteration   2: 72842.372 ns/op
Iteration   3: 72668.861 ns/op
Iteration   4: 73339.284 ns/op
Iteration   5: 70083.834 ns/op


Result "kotlin_benchmarks.array.copy.InlineOpt.Val_to_Ref_arraycopy":
  72363.912 ±(99.9%) 2979.080 ns/op [Average]
  (min, avg, max) = (67869.574, 72363.912, 79253.364), stdev = 2786.633
  CI (99.9%): [69384.832, 75342.992] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.copy.InlineOpt.Val_to_Ref_copy
# Parameters: (size = 100)

# Run progress: 4.26% complete, ETA 09:11:51
# Fork: 1 of 3
# Warmup Iteration   1: 78.242 ns/op
# Warmup Iteration   2: 77.883 ns/op
# Warmup Iteration   3: 78.079 ns/op
Iteration   1: 77.831 ns/op
Iteration   2: 77.331 ns/op
Iteration   3: 77.246 ns/op
Iteration   4: 77.490 ns/op
Iteration   5: 77.379 ns/op

# Run progress: 4.29% complete, ETA 09:11:40
# Fork: 2 of 3
# Warmup Iteration   1: 78.634 ns/op
# Warmup Iteration   2: 77.091 ns/op
# Warmup Iteration   3: 77.246 ns/op
Iteration   1: 76.761 ns/op
Iteration   2: 76.558 ns/op
Iteration   3: 77.409 ns/op
Iteration   4: 77.154 ns/op
Iteration   5: 76.421 ns/op

# Run progress: 4.31% complete, ETA 09:11:29
# Fork: 3 of 3
# Warmup Iteration   1: 77.427 ns/op
# Warmup Iteration   2: 78.072 ns/op
# Warmup Iteration   3: 78.412 ns/op
Iteration   1: 78.319 ns/op
Iteration   2: 78.233 ns/op
Iteration   3: 77.326 ns/op
Iteration   4: 77.111 ns/op
Iteration   5: 77.136 ns/op


Result "kotlin_benchmarks.array.copy.InlineOpt.Val_to_Ref_copy":
  77.314 ±(99.9%) 0.567 ns/op [Average]
  (min, avg, max) = (76.421, 77.314, 78.319), stdev = 0.531
  CI (99.9%): [76.746, 77.881] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.copy.InlineOpt.Val_to_Ref_copy
# Parameters: (size = 1000000)

# Run progress: 4.34% complete, ETA 09:11:18
# Fork: 1 of 3
# Warmup Iteration   1: 19070693.396 ns/op
# Warmup Iteration   2: 7910061.852 ns/op
# Warmup Iteration   3: 32912502.677 ns/op
Iteration   1: 30416125.000 ns/op
Iteration   2: 33687834.677 ns/op
Iteration   3: 27732069.811 ns/op
Iteration   4: 21260430.563 ns/op
Iteration   5: 30459032.848 ns/op

# Run progress: 4.36% complete, ETA 09:11:10
# Fork: 2 of 3
# Warmup Iteration   1: 13824163.822 ns/op
# Warmup Iteration   2: 15704835.262 ns/op
# Warmup Iteration   3: 20622638.320 ns/op
Iteration   1: 29400734.543 ns/op
Iteration   2: 28323890.056 ns/op
Iteration   3: 27847713.816 ns/op
Iteration   4: 33867544.355 ns/op
Iteration   5: 28105788.194 ns/op

# Run progress: 4.39% complete, ETA 09:11:05
# Fork: 3 of 3
# Warmup Iteration   1: 14225103.282 ns/op
# Warmup Iteration   2: 39277636.231 ns/op
# Warmup Iteration   3: 28253565.972 ns/op
Iteration   1: 28281968.750 ns/op
Iteration   2: 26167507.462 ns/op
Iteration   3: 16090507.270 ns/op
Iteration   4: 24374168.667 ns/op
Iteration   5: 22328375.000 ns/op


Result "kotlin_benchmarks.array.copy.InlineOpt.Val_to_Ref_copy":
  27222912.734 ±(99.9%) 5012617.296 ns/op [Average]
  (min, avg, max) = (16090507.270, 27222912.734, 33867544.355), stdev = 4688805.329
  CI (99.9%): [22210295.438, 32235530.030] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.copy.InlineOpt.Val_to_Val_arraycopy
# Parameters: (size = 100)

# Run progress: 4.41% complete, ETA 09:10:58
# Fork: 1 of 3
# Warmup Iteration   1: 9.832 ns/op
# Warmup Iteration   2: 9.903 ns/op
# Warmup Iteration   3: 9.822 ns/op
Iteration   1: 9.872 ns/op
Iteration   2: 9.803 ns/op
Iteration   3: 9.876 ns/op
Iteration   4: 10.047 ns/op
Iteration   5: 10.078 ns/op

# Run progress: 4.44% complete, ETA 09:10:49
# Fork: 2 of 3
# Warmup Iteration   1: 10.076 ns/op
# Warmup Iteration   2: 10.006 ns/op
# Warmup Iteration   3: 9.953 ns/op
Iteration   1: 9.956 ns/op
Iteration   2: 9.969 ns/op
Iteration   3: 9.908 ns/op
Iteration   4: 9.904 ns/op
Iteration   5: 9.974 ns/op

# Run progress: 4.46% complete, ETA 09:10:37
# Fork: 3 of 3
# Warmup Iteration   1: 10.010 ns/op
# Warmup Iteration   2: 9.941 ns/op
# Warmup Iteration   3: 9.867 ns/op
Iteration   1: 9.932 ns/op
Iteration   2: 9.950 ns/op
Iteration   3: 9.880 ns/op
Iteration   4: 10.271 ns/op
Iteration   5: 10.233 ns/op


Result "kotlin_benchmarks.array.copy.InlineOpt.Val_to_Val_arraycopy":
  9.977 ±(99.9%) 0.140 ns/op [Average]
  (min, avg, max) = (9.803, 9.977, 10.271), stdev = 0.131
  CI (99.9%): [9.837, 10.117] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.copy.InlineOpt.Val_to_Val_arraycopy
# Parameters: (size = 1000000)

# Run progress: 4.49% complete, ETA 09:10:25
# Fork: 1 of 3
# Warmup Iteration   1: 83639.151 ns/op
# Warmup Iteration   2: 77787.800 ns/op
# Warmup Iteration   3: 71300.319 ns/op
Iteration   1: 72712.209 ns/op
Iteration   2: 65154.780 ns/op
Iteration   3: 67521.434 ns/op
Iteration   4: 70295.677 ns/op
Iteration   5: 71955.550 ns/op

# Run progress: 4.51% complete, ETA 09:10:15
# Fork: 2 of 3
# Warmup Iteration   1: 70276.932 ns/op
# Warmup Iteration   2: 64640.072 ns/op
# Warmup Iteration   3: 73705.125 ns/op
Iteration   1: 71670.422 ns/op
Iteration   2: 71989.559 ns/op
Iteration   3: 83259.410 ns/op
Iteration   4: 84578.231 ns/op
Iteration   5: 72598.944 ns/op

# Run progress: 4.53% complete, ETA 09:10:04
# Fork: 3 of 3
# Warmup Iteration   1: 61646.049 ns/op
# Warmup Iteration   2: 82942.456 ns/op
# Warmup Iteration   3: 73888.814 ns/op
Iteration   1: 71973.442 ns/op
Iteration   2: 71594.310 ns/op
Iteration   3: 71711.159 ns/op
Iteration   4: 69757.228 ns/op
Iteration   5: 73137.252 ns/op


Result "kotlin_benchmarks.array.copy.InlineOpt.Val_to_Val_arraycopy":
  72660.640 ±(99.9%) 5389.468 ns/op [Average]
  (min, avg, max) = (65154.780, 72660.640, 84578.231), stdev = 5041.312
  CI (99.9%): [67271.172, 78050.109] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.copy.InlineOpt.Val_to_Val_copy
# Parameters: (size = 100)

# Run progress: 4.56% complete, ETA 09:09:52
# Fork: 1 of 3
# Warmup Iteration   1: 77.398 ns/op
# Warmup Iteration   2: 76.849 ns/op
# Warmup Iteration   3: 77.863 ns/op
Iteration   1: 77.602 ns/op
Iteration   2: 78.280 ns/op
Iteration   3: 77.754 ns/op
Iteration   4: 77.992 ns/op
Iteration   5: 78.301 ns/op

# Run progress: 4.58% complete, ETA 09:09:41
# Fork: 2 of 3
# Warmup Iteration   1: 77.831 ns/op
# Warmup Iteration   2: 77.390 ns/op
# Warmup Iteration   3: 78.251 ns/op
Iteration   1: 77.717 ns/op
Iteration   2: 77.805 ns/op
Iteration   3: 77.407 ns/op
Iteration   4: 77.674 ns/op
Iteration   5: 77.514 ns/op

# Run progress: 4.61% complete, ETA 09:09:31
# Fork: 3 of 3
# Warmup Iteration   1: 77.776 ns/op
# Warmup Iteration   2: 77.167 ns/op
# Warmup Iteration   3: 77.069 ns/op
Iteration   1: 78.767 ns/op
Iteration   2: 77.246 ns/op
Iteration   3: 76.898 ns/op
Iteration   4: 77.152 ns/op
Iteration   5: 76.993 ns/op


Result "kotlin_benchmarks.array.copy.InlineOpt.Val_to_Val_copy":
  77.674 ±(99.9%) 0.550 ns/op [Average]
  (min, avg, max) = (76.898, 77.674, 78.767), stdev = 0.514
  CI (99.9%): [77.124, 78.223] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.copy.InlineOpt.Val_to_Val_copy
# Parameters: (size = 1000000)

# Run progress: 4.63% complete, ETA 09:09:20
# Fork: 1 of 3
# Warmup Iteration   1: 25034184.524 ns/op
# Warmup Iteration   2: 21740894.489 ns/op
# Warmup Iteration   3: 29975867.647 ns/op
Iteration   1: 37541273.148 ns/op
Iteration   2: 32876676.065 ns/op
Iteration   3: 30714109.848 ns/op
Iteration   4: 30739262.606 ns/op
Iteration   5: 28980991.657 ns/op

# Run progress: 4.66% complete, ETA 09:09:11
# Fork: 2 of 3
# Warmup Iteration   1: 27002930.921 ns/op
# Warmup Iteration   2: 17100283.898 ns/op
# Warmup Iteration   3: 16248597.656 ns/op
Iteration   1: 20202989.160 ns/op
Iteration   2: 30352750.000 ns/op
Iteration   3: 28899960.714 ns/op
Iteration   4: 29432500.000 ns/op
Iteration   5: 30651633.818 ns/op

# Run progress: 4.68% complete, ETA 09:09:06
# Fork: 3 of 3
# Warmup Iteration   1: 29050994.029 ns/op
# Warmup Iteration   2: 28171259.278 ns/op
# Warmup Iteration   3: 31076064.394 ns/op
Iteration   1: 29444047.629 ns/op
Iteration   2: 28354479.167 ns/op
Iteration   3: 40327231.680 ns/op
Iteration   4: 32299201.813 ns/op
Iteration   5: 25908858.974 ns/op


Result "kotlin_benchmarks.array.copy.InlineOpt.Val_to_Val_copy":
  30448397.752 ±(99.9%) 4898884.078 ns/op [Average]
  (min, avg, max) = (20202989.160, 30448397.752, 40327231.680), stdev = 4582419.206
  CI (99.9%): [25549513.674, 35347281.830] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.copy.Primitive128.p128int_arraycopy
# Parameters: (size = 100)

# Run progress: 4.71% complete, ETA 09:08:58
# Fork: 1 of 3
# Warmup Iteration   1: 28.602 ns/op
# Warmup Iteration   2: 28.634 ns/op
# Warmup Iteration   3: 29.553 ns/op
Iteration   1: 28.567 ns/op
Iteration   2: 28.854 ns/op
Iteration   3: 28.791 ns/op
Iteration   4: 28.716 ns/op
Iteration   5: 28.598 ns/op

# Run progress: 4.73% complete, ETA 09:08:49
# Fork: 2 of 3
# Warmup Iteration   1: 28.985 ns/op
# Warmup Iteration   2: 29.153 ns/op
# Warmup Iteration   3: 28.726 ns/op
Iteration   1: 28.703 ns/op
Iteration   2: 28.742 ns/op
Iteration   3: 28.766 ns/op
Iteration   4: 28.614 ns/op
Iteration   5: 28.615 ns/op

# Run progress: 4.75% complete, ETA 09:08:39
# Fork: 3 of 3
# Warmup Iteration   1: 29.204 ns/op
# Warmup Iteration   2: 28.968 ns/op
# Warmup Iteration   3: 28.637 ns/op
Iteration   1: 28.582 ns/op
Iteration   2: 28.656 ns/op
Iteration   3: 28.727 ns/op
Iteration   4: 28.605 ns/op
Iteration   5: 28.728 ns/op


Result "kotlin_benchmarks.array.copy.Primitive128.p128int_arraycopy":
  28.684 ±(99.9%) 0.092 ns/op [Average]
  (min, avg, max) = (28.567, 28.684, 28.854), stdev = 0.086
  CI (99.9%): [28.592, 28.776] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.copy.Primitive128.p128int_arraycopy
# Parameters: (size = 1000000)

# Run progress: 4.78% complete, ETA 09:08:28
# Fork: 1 of 3
# Warmup Iteration   1: 365616.322 ns/op
# Warmup Iteration   2: 381290.301 ns/op
# Warmup Iteration   3: 353168.735 ns/op
Iteration   1: 335660.826 ns/op
Iteration   2: 362757.391 ns/op
Iteration   3: 370672.722 ns/op
Iteration   4: 370671.300 ns/op
Iteration   5: 420514.070 ns/op

# Run progress: 4.80% complete, ETA 09:08:16
# Fork: 2 of 3
# Warmup Iteration   1: 403182.304 ns/op
# Warmup Iteration   2: 342562.029 ns/op
# Warmup Iteration   3: 375668.327 ns/op
Iteration   1: 355593.469 ns/op
Iteration   2: 353075.738 ns/op
Iteration   3: 351782.964 ns/op
Iteration   4: 327224.544 ns/op
Iteration   5: 377667.835 ns/op

# Run progress: 4.83% complete, ETA 09:08:05
# Fork: 3 of 3
# Warmup Iteration   1: 373049.951 ns/op
# Warmup Iteration   2: 358019.709 ns/op
# Warmup Iteration   3: 339953.679 ns/op
Iteration   1: 356666.208 ns/op
Iteration   2: 352627.511 ns/op
Iteration   3: 717207.915 ns/op
Iteration   4: 776641.705 ns/op
Iteration   5: 783824.405 ns/op


Result "kotlin_benchmarks.array.copy.Primitive128.p128int_arraycopy":
  440839.240 ±(99.9%) 178171.683 ns/op [Average]
  (min, avg, max) = (327224.544, 440839.240, 783824.405), stdev = 166661.903
  CI (99.9%): [262667.557, 619010.923] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.copy.Primitive128.p128int_copy
# Parameters: (size = 100)

# Run progress: 4.85% complete, ETA 09:07:55
# Fork: 1 of 3
# Warmup Iteration   1: 45.404 ns/op
# Warmup Iteration   2: 44.694 ns/op
# Warmup Iteration   3: 44.560 ns/op
Iteration   1: 44.492 ns/op
Iteration   2: 44.734 ns/op
Iteration   3: 45.100 ns/op
Iteration   4: 45.302 ns/op
Iteration   5: 45.030 ns/op

# Run progress: 4.88% complete, ETA 09:07:47
# Fork: 2 of 3
# Warmup Iteration   1: 46.043 ns/op
# Warmup Iteration   2: 44.918 ns/op
# Warmup Iteration   3: 44.356 ns/op
Iteration   1: 45.843 ns/op
Iteration   2: 45.642 ns/op
Iteration   3: 44.488 ns/op
Iteration   4: 44.487 ns/op
Iteration   5: 44.700 ns/op

# Run progress: 4.90% complete, ETA 09:07:39
# Fork: 3 of 3
# Warmup Iteration   1: 45.440 ns/op
# Warmup Iteration   2: 46.646 ns/op
# Warmup Iteration   3: 51.786 ns/op
Iteration   1: 57.084 ns/op
Iteration   2: 65.569 ns/op
Iteration   3: 78.304 ns/op
Iteration   4: 91.518 ns/op
Iteration   5: 86.546 ns/op


Result "kotlin_benchmarks.array.copy.Primitive128.p128int_copy":
  55.256 ±(99.9%) 18.054 ns/op [Average]
  (min, avg, max) = (44.487, 55.256, 91.518), stdev = 16.888
  CI (99.9%): [37.202, 73.310] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.copy.Primitive128.p128int_copy
# Parameters: (size = 1000000)

# Run progress: 4.93% complete, ETA 09:07:32
# Fork: 1 of 3
# Warmup Iteration   1: 1651340.540 ns/op
# Warmup Iteration   2: 1075254.416 ns/op
# Warmup Iteration   3: 1122120.963 ns/op
Iteration   1: 1182845.920 ns/op
Iteration   2: 1515772.710 ns/op
Iteration   3: 1163313.723 ns/op
Iteration   4: 1230850.876 ns/op
Iteration   5: 1716506.235 ns/op

# Run progress: 4.95% complete, ETA 09:07:33
# Fork: 2 of 3
# Warmup Iteration   1: 2163909.392 ns/op
# Warmup Iteration   2: 1674186.015 ns/op
# Warmup Iteration   3: 2157026.141 ns/op
Iteration   1: 1857535.328 ns/op
Iteration   2: 1652334.434 ns/op
Iteration   3: 2172203.125 ns/op
Iteration   4: 1548816.590 ns/op
Iteration   5: 1640693.627 ns/op

# Run progress: 4.98% complete, ETA 09:07:37
# Fork: 3 of 3
# Warmup Iteration   1: 1113760.497 ns/op
# Warmup Iteration   2: 1068744.713 ns/op
# Warmup Iteration   3: 1506419.666 ns/op
Iteration   1: 2051748.293 ns/op
Iteration   2: 1840110.656 ns/op
Iteration   3: 1621852.393 ns/op
Iteration   4: 1216574.910 ns/op
Iteration   5: 1715377.694 ns/op


Result "kotlin_benchmarks.array.copy.Primitive128.p128int_copy":
  1608435.768 ±(99.9%) 331220.736 ns/op [Average]
  (min, avg, max) = (1163313.723, 1608435.768, 2172203.125), stdev = 309824.082
  CI (99.9%): [1277215.031, 1939656.504] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.copy.Primitive32.p32int_arraycopy
# Parameters: (size = 100)

# Run progress: 5.00% complete, ETA 09:07:33
# Fork: 1 of 3
# Warmup Iteration   1: 23.202 ns/op
# Warmup Iteration   2: 26.320 ns/op
# Warmup Iteration   3: 28.044 ns/op
Iteration   1: 33.136 ns/op
Iteration   2: 35.090 ns/op
Iteration   3: 30.650 ns/op
Iteration   4: 26.458 ns/op
Iteration   5: 22.879 ns/op

# Run progress: 5.02% complete, ETA 09:07:36
# Fork: 2 of 3
# Warmup Iteration   1: 21.971 ns/op
# Warmup Iteration   2: 23.319 ns/op
# Warmup Iteration   3: 23.707 ns/op
Iteration   1: 25.029 ns/op
Iteration   2: 26.800 ns/op
Iteration   3: 27.621 ns/op
Iteration   4: 33.653 ns/op
Iteration   5: 29.715 ns/op

# Run progress: 5.05% complete, ETA 09:07:32
# Fork: 3 of 3
# Warmup Iteration   1: 19.548 ns/op
# Warmup Iteration   2: 23.313 ns/op
# Warmup Iteration   3: 28.619 ns/op
Iteration   1: 31.617 ns/op
Iteration   2: 34.856 ns/op
Iteration   3: 30.615 ns/op
Iteration   4: 34.450 ns/op
Iteration   5: 34.731 ns/op


Result "kotlin_benchmarks.array.copy.Primitive32.p32int_arraycopy":
  30.487 ±(99.9%) 4.225 ns/op [Average]
  (min, avg, max) = (22.879, 30.487, 35.090), stdev = 3.952
  CI (99.9%): [26.262, 34.712] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.copy.Primitive32.p32int_arraycopy
# Parameters: (size = 1000000)

# Run progress: 5.07% complete, ETA 09:07:36
# Fork: 1 of 3
# Warmup Iteration   1: 338772.237 ns/op
# Warmup Iteration   2: 334055.814 ns/op
# Warmup Iteration   3: 395960.862 ns/op
Iteration   1: 487269.745 ns/op
Iteration   2: 454581.011 ns/op
Iteration   3: 545229.990 ns/op
Iteration   4: 449959.717 ns/op
Iteration   5: 420588.429 ns/op

# Run progress: 5.10% complete, ETA 09:07:39
# Fork: 2 of 3
# Warmup Iteration   1: 429419.959 ns/op
# Warmup Iteration   2: 477037.726 ns/op
# Warmup Iteration   3: 429465.467 ns/op
Iteration   1: 377896.178 ns/op
Iteration   2: 381540.607 ns/op
Iteration   3: 385005.558 ns/op
Iteration   4: 387422.976 ns/op
Iteration   5: 403304.660 ns/op

# Run progress: 5.12% complete, ETA 09:07:42
# Fork: 3 of 3
# Warmup Iteration   1: 385519.220 ns/op
# Warmup Iteration   2: 408901.119 ns/op
# Warmup Iteration   3: 426423.447 ns/op
Iteration   1: 426716.571 ns/op
Iteration   2: 427761.465 ns/op
Iteration   3: 434175.444 ns/op
Iteration   4: 519008.454 ns/op
Iteration   5: 586173.740 ns/op


Result "kotlin_benchmarks.array.copy.Primitive32.p32int_arraycopy":
  445775.636 ±(99.9%) 67537.793 ns/op [Average]
  (min, avg, max) = (377896.178, 445775.636, 586173.740), stdev = 63174.894
  CI (99.9%): [378237.843, 513313.430] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.copy.Primitive32.p32int_copy
# Parameters: (size = 100)

# Run progress: 5.15% complete, ETA 09:07:41
# Fork: 1 of 3
# Warmup Iteration   1: 49.951 ns/op
# Warmup Iteration   2: 44.951 ns/op
# Warmup Iteration   3: 53.594 ns/op
Iteration   1: 46.309 ns/op
Iteration   2: 48.662 ns/op
Iteration   3: 49.023 ns/op
Iteration   4: 37.991 ns/op
Iteration   5: 39.848 ns/op

# Run progress: 5.17% complete, ETA 09:07:45
# Fork: 2 of 3
# Warmup Iteration   1: 41.658 ns/op
# Warmup Iteration   2: 35.236 ns/op
# Warmup Iteration   3: 37.158 ns/op
Iteration   1: 51.077 ns/op
Iteration   2: 44.280 ns/op
Iteration   3: 44.271 ns/op
Iteration   4: 43.557 ns/op
Iteration   5: 51.316 ns/op

# Run progress: 5.20% complete, ETA 09:07:43
# Fork: 3 of 3
# Warmup Iteration   1: 38.032 ns/op
# Warmup Iteration   2: 37.268 ns/op
# Warmup Iteration   3: 36.543 ns/op
Iteration   1: 46.393 ns/op
Iteration   2: 45.488 ns/op
Iteration   3: 43.006 ns/op
Iteration   4: 54.114 ns/op
Iteration   5: 59.980 ns/op


Result "kotlin_benchmarks.array.copy.Primitive32.p32int_copy":
  47.021 ±(99.9%) 5.989 ns/op [Average]
  (min, avg, max) = (37.991, 47.021, 59.980), stdev = 5.602
  CI (99.9%): [41.033, 53.010] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.copy.Primitive32.p32int_copy
# Parameters: (size = 1000000)

# Run progress: 5.22% complete, ETA 09:07:47
# Fork: 1 of 3
# Warmup Iteration   1: 430220.307 ns/op
# Warmup Iteration   2: 388099.287 ns/op
# Warmup Iteration   3: 382274.683 ns/op
Iteration   1: 389380.809 ns/op
Iteration   2: 390621.019 ns/op
Iteration   3: 388640.517 ns/op
Iteration   4: 383626.067 ns/op
Iteration   5: 388645.849 ns/op

# Run progress: 5.25% complete, ETA 09:07:46
# Fork: 2 of 3
# Warmup Iteration   1: 421660.744 ns/op
# Warmup Iteration   2: 381789.950 ns/op
# Warmup Iteration   3: 436017.777 ns/op
Iteration   1: 392809.302 ns/op
Iteration   2: 424336.817 ns/op
Iteration   3: 395206.179 ns/op
Iteration   4: 482399.804 ns/op
Iteration   5: 817469.848 ns/op

# Run progress: 5.27% complete, ETA 09:07:45
# Fork: 3 of 3
# Warmup Iteration   1: 384168.553 ns/op
# Warmup Iteration   2: 393475.091 ns/op
# Warmup Iteration   3: 445691.105 ns/op
Iteration   1: 429292.003 ns/op
Iteration   2: 428684.977 ns/op
Iteration   3: 464267.476 ns/op
Iteration   4: 441718.052 ns/op
Iteration   5: 428770.258 ns/op


Result "kotlin_benchmarks.array.copy.Primitive32.p32int_copy":
  443057.932 ±(99.9%) 115365.911 ns/op [Average]
  (min, avg, max) = (383626.067, 443057.932, 817469.848), stdev = 107913.345
  CI (99.9%): [327692.020, 558423.843] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.copy.Primitive64.p64byte_arraycopy
# Parameters: (size = 100)

# Run progress: 5.29% complete, ETA 09:07:44
# Fork: 1 of 3
# Warmup Iteration   1: 38.690 ns/op
# Warmup Iteration   2: 48.879 ns/op
# Warmup Iteration   3: 51.020 ns/op
Iteration   1: 48.275 ns/op
Iteration   2: 36.062 ns/op
Iteration   3: 38.623 ns/op
Iteration   4: 40.632 ns/op
Iteration   5: 43.061 ns/op

# Run progress: 5.32% complete, ETA 09:07:43
# Fork: 2 of 3
# Warmup Iteration   1: 42.824 ns/op
# Warmup Iteration   2: 33.470 ns/op
# Warmup Iteration   3: 28.660 ns/op
Iteration   1: 28.294 ns/op
Iteration   2: 29.690 ns/op
Iteration   3: 29.913 ns/op
Iteration   4: 37.478 ns/op
Iteration   5: 37.422 ns/op

# Run progress: 5.34% complete, ETA 09:07:38
# Fork: 3 of 3
# Warmup Iteration   1: 39.418 ns/op
# Warmup Iteration   2: 40.348 ns/op
# Warmup Iteration   3: 37.145 ns/op
Iteration   1: 42.826 ns/op
Iteration   2: 43.096 ns/op
Iteration   3: 35.574 ns/op
Iteration   4: 28.597 ns/op
Iteration   5: 25.620 ns/op


Result "kotlin_benchmarks.array.copy.Primitive64.p64byte_arraycopy":
  36.344 ±(99.9%) 7.156 ns/op [Average]
  (min, avg, max) = (25.620, 36.344, 48.275), stdev = 6.693
  CI (99.9%): [29.189, 43.500] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.copy.Primitive64.p64byte_arraycopy
# Parameters: (size = 1000000)

# Run progress: 5.37% complete, ETA 09:07:42
# Fork: 1 of 3
# Warmup Iteration   1: 237637.540 ns/op
# Warmup Iteration   2: 311365.327 ns/op
# Warmup Iteration   3: 317892.722 ns/op
Iteration   1: 313923.354 ns/op
Iteration   2: 319721.528 ns/op
Iteration   3: 307658.546 ns/op
Iteration   4: 286092.974 ns/op
Iteration   5: 483858.485 ns/op

# Run progress: 5.39% complete, ETA 09:07:34
# Fork: 2 of 3
# Warmup Iteration   1: 498979.945 ns/op
# Warmup Iteration   2: 452692.092 ns/op
# Warmup Iteration   3: 399020.866 ns/op
Iteration   1: 558812.108 ns/op
Iteration   2: 506031.789 ns/op
Iteration   3: 458241.193 ns/op
Iteration   4: 468165.834 ns/op
Iteration   5: 558923.130 ns/op

# Run progress: 5.42% complete, ETA 09:07:36
# Fork: 3 of 3
# Warmup Iteration   1: 543562.883 ns/op
# Warmup Iteration   2: 530574.952 ns/op
# Warmup Iteration   3: 488381.863 ns/op
Iteration   1: 358814.155 ns/op
Iteration   2: 253820.163 ns/op
Iteration   3: 225520.829 ns/op
Iteration   4: 370901.906 ns/op
Iteration   5: 406053.123 ns/op


Result "kotlin_benchmarks.array.copy.Primitive64.p64byte_arraycopy":
  391769.274 ±(99.9%) 116242.832 ns/op [Average]
  (min, avg, max) = (225520.829, 391769.274, 558923.130), stdev = 108733.617
  CI (99.9%): [275526.442, 508012.107] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.copy.Primitive64.p64byte_copy
# Parameters: (size = 100)

# Run progress: 5.44% complete, ETA 09:07:32
# Fork: 1 of 3
# Warmup Iteration   1: 56.496 ns/op
# Warmup Iteration   2: 50.362 ns/op
# Warmup Iteration   3: 45.769 ns/op
Iteration   1: 30.833 ns/op
Iteration   2: 25.047 ns/op
Iteration   3: 23.878 ns/op
Iteration   4: 24.004 ns/op
Iteration   5: 23.989 ns/op

# Run progress: 5.47% complete, ETA 09:07:27
# Fork: 2 of 3
# Warmup Iteration   1: 24.192 ns/op
# Warmup Iteration   2: 23.889 ns/op
# Warmup Iteration   3: 23.821 ns/op
Iteration   1: 25.745 ns/op
Iteration   2: 31.447 ns/op
Iteration   3: 45.447 ns/op
Iteration   4: 48.458 ns/op
Iteration   5: 45.032 ns/op

# Run progress: 5.49% complete, ETA 09:07:17
# Fork: 3 of 3
# Warmup Iteration   1: 31.578 ns/op
# Warmup Iteration   2: 27.083 ns/op
# Warmup Iteration   3: 25.090 ns/op
Iteration   1: 23.857 ns/op
Iteration   2: 23.772 ns/op
Iteration   3: 25.149 ns/op
Iteration   4: 24.253 ns/op
Iteration   5: 23.943 ns/op


Result "kotlin_benchmarks.array.copy.Primitive64.p64byte_copy":
  29.657 ±(99.9%) 9.597 ns/op [Average]
  (min, avg, max) = (23.772, 29.657, 48.458), stdev = 8.977
  CI (99.9%): [20.060, 39.254] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.copy.Primitive64.p64byte_copy
# Parameters: (size = 1000000)

# Run progress: 5.51% complete, ETA 09:07:07
# Fork: 1 of 3
# Warmup Iteration   1: 222449.050 ns/op
# Warmup Iteration   2: 238715.512 ns/op
# Warmup Iteration   3: 263545.779 ns/op
Iteration   1: 352979.648 ns/op
Iteration   2: 471180.892 ns/op
Iteration   3: 490362.664 ns/op
Iteration   4: 465659.140 ns/op
Iteration   5: 328183.723 ns/op

# Run progress: 5.54% complete, ETA 09:06:57
# Fork: 2 of 3
# Warmup Iteration   1: 244758.861 ns/op
# Warmup Iteration   2: 231949.407 ns/op
# Warmup Iteration   3: 236861.684 ns/op
Iteration   1: 245965.315 ns/op
Iteration   2: 345318.222 ns/op
Iteration   3: 463803.323 ns/op
Iteration   4: 435614.084 ns/op
Iteration   5: 434771.346 ns/op

# Run progress: 5.56% complete, ETA 09:06:46
# Fork: 3 of 3
# Warmup Iteration   1: 416572.084 ns/op
# Warmup Iteration   2: 277601.880 ns/op
# Warmup Iteration   3: 268222.185 ns/op
Iteration   1: 290151.298 ns/op
Iteration   2: 396298.285 ns/op
Iteration   3: 401843.252 ns/op
Iteration   4: 332644.194 ns/op
Iteration   5: 260281.022 ns/op


Result "kotlin_benchmarks.array.copy.Primitive64.p64byte_copy":
  381003.761 ±(99.9%) 85192.980 ns/op [Average]
  (min, avg, max) = (245965.315, 381003.761, 490362.664), stdev = 79689.566
  CI (99.9%): [295810.781, 466196.740] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.copy.Primitive64.p64int_arraycopy
# Parameters: (size = 100)

# Run progress: 5.59% complete, ETA 09:06:38
# Fork: 1 of 3
# Warmup Iteration   1: 19.061 ns/op
# Warmup Iteration   2: 16.715 ns/op
# Warmup Iteration   3: 15.442 ns/op
Iteration   1: 15.455 ns/op
Iteration   2: 15.586 ns/op
Iteration   3: 16.871 ns/op
Iteration   4: 16.147 ns/op
Iteration   5: 15.885 ns/op

# Run progress: 5.61% complete, ETA 09:06:28
# Fork: 2 of 3
# Warmup Iteration   1: 15.466 ns/op
# Warmup Iteration   2: 16.341 ns/op
# Warmup Iteration   3: 19.742 ns/op
Iteration   1: 25.770 ns/op
Iteration   2: 27.334 ns/op
Iteration   3: 21.567 ns/op
Iteration   4: 18.747 ns/op
Iteration   5: 16.164 ns/op

# Run progress: 5.64% complete, ETA 09:06:16
# Fork: 3 of 3
# Warmup Iteration   1: 15.566 ns/op
# Warmup Iteration   2: 15.518 ns/op
# Warmup Iteration   3: 15.513 ns/op
Iteration   1: 15.464 ns/op
Iteration   2: 15.421 ns/op
Iteration   3: 15.436 ns/op
Iteration   4: 15.492 ns/op
Iteration   5: 15.613 ns/op


Result "kotlin_benchmarks.array.copy.Primitive64.p64int_arraycopy":
  17.797 ±(99.9%) 4.206 ns/op [Average]
  (min, avg, max) = (15.421, 17.797, 27.334), stdev = 3.934
  CI (99.9%): [13.591, 22.003] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.copy.Primitive64.p64int_arraycopy
# Parameters: (size = 1000000)

# Run progress: 5.66% complete, ETA 09:06:04
# Fork: 1 of 3
# Warmup Iteration   1: 172936.680 ns/op
# Warmup Iteration   2: 195772.193 ns/op
# Warmup Iteration   3: 280124.581 ns/op
Iteration   1: 301100.522 ns/op
Iteration   2: 241342.998 ns/op
Iteration   3: 153116.480 ns/op
Iteration   4: 144564.161 ns/op
Iteration   5: 137298.157 ns/op

# Run progress: 5.69% complete, ETA 09:05:53
# Fork: 2 of 3
# Warmup Iteration   1: 143232.880 ns/op
# Warmup Iteration   2: 135102.927 ns/op
# Warmup Iteration   3: 136570.806 ns/op
Iteration   1: 139254.613 ns/op
Iteration   2: 141201.950 ns/op
Iteration   3: 142301.441 ns/op
Iteration   4: 146048.896 ns/op
Iteration   5: 144371.049 ns/op

# Run progress: 5.71% complete, ETA 09:05:43
# Fork: 3 of 3
# Warmup Iteration   1: 148016.277 ns/op
# Warmup Iteration   2: 255910.234 ns/op
# Warmup Iteration   3: 348463.179 ns/op
Iteration   1: 404875.234 ns/op
Iteration   2: 339926.517 ns/op
Iteration   3: 277127.721 ns/op
Iteration   4: 287367.236 ns/op
Iteration   5: 219530.331 ns/op


Result "kotlin_benchmarks.array.copy.Primitive64.p64int_arraycopy":
  214628.487 ±(99.9%) 94728.267 ns/op [Average]
  (min, avg, max) = (137298.157, 214628.487, 404875.234), stdev = 88608.880
  CI (99.9%): [119900.220, 309356.754] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.copy.Primitive64.p64int_copy
# Parameters: (size = 100)

# Run progress: 5.74% complete, ETA 09:05:33
# Fork: 1 of 3
# Warmup Iteration   1: 13.328 ns/op
# Warmup Iteration   2: 12.089 ns/op
# Warmup Iteration   3: 12.072 ns/op
Iteration   1: 12.313 ns/op
Iteration   2: 12.470 ns/op
Iteration   3: 12.868 ns/op
Iteration   4: 13.280 ns/op
Iteration   5: 13.649 ns/op

# Run progress: 5.76% complete, ETA 09:05:23
# Fork: 2 of 3
# Warmup Iteration   1: 16.021 ns/op
# Warmup Iteration   2: 21.550 ns/op
# Warmup Iteration   3: 22.193 ns/op
Iteration   1: 18.647 ns/op
Iteration   2: 15.413 ns/op
Iteration   3: 14.062 ns/op
Iteration   4: 13.025 ns/op
Iteration   5: 12.466 ns/op

# Run progress: 5.78% complete, ETA 09:05:12
# Fork: 3 of 3
# Warmup Iteration   1: 12.272 ns/op
# Warmup Iteration   2: 13.007 ns/op
# Warmup Iteration   3: 12.975 ns/op
Iteration   1: 13.178 ns/op
Iteration   2: 13.369 ns/op
Iteration   3: 13.351 ns/op
Iteration   4: 13.679 ns/op
Iteration   5: 15.133 ns/op


Result "kotlin_benchmarks.array.copy.Primitive64.p64int_copy":
  13.794 ±(99.9%) 1.720 ns/op [Average]
  (min, avg, max) = (12.313, 13.794, 18.647), stdev = 1.609
  CI (99.9%): [12.073, 15.514] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.copy.Primitive64.p64int_copy
# Parameters: (size = 1000000)

# Run progress: 5.81% complete, ETA 09:05:01
# Fork: 1 of 3
# Warmup Iteration   1: 342790.197 ns/op
# Warmup Iteration   2: 378396.473 ns/op
# Warmup Iteration   3: 303509.140 ns/op
Iteration   1: 265413.963 ns/op
Iteration   2: 250519.183 ns/op
Iteration   3: 253237.299 ns/op
Iteration   4: 239311.251 ns/op
Iteration   5: 240218.698 ns/op

# Run progress: 5.83% complete, ETA 09:04:52
# Fork: 2 of 3
# Warmup Iteration   1: 234725.853 ns/op
# Warmup Iteration   2: 233215.749 ns/op
# Warmup Iteration   3: 246471.406 ns/op
Iteration   1: 252056.252 ns/op
Iteration   2: 267740.646 ns/op
Iteration   3: 270556.039 ns/op
Iteration   4: 299444.623 ns/op
Iteration   5: 395896.996 ns/op

# Run progress: 5.86% complete, ETA 09:04:42
# Fork: 3 of 3
# Warmup Iteration   1: 410931.741 ns/op
# Warmup Iteration   2: 353254.021 ns/op
# Warmup Iteration   3: 287748.066 ns/op
Iteration   1: 260861.305 ns/op
Iteration   2: 246650.071 ns/op
Iteration   3: 239011.336 ns/op
Iteration   4: 247675.942 ns/op
Iteration   5: 260467.348 ns/op


Result "kotlin_benchmarks.array.copy.Primitive64.p64int_copy":
  265937.397 ±(99.9%) 41880.301 ns/op [Average]
  (min, avg, max) = (239011.336, 265937.397, 395896.996), stdev = 39174.860
  CI (99.9%): [224057.096, 307817.698] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.copy.Primitive64.p64long_arraycopy
# Parameters: (size = 100)

# Run progress: 5.88% complete, ETA 09:04:36
# Fork: 1 of 3
# Warmup Iteration   1: 21.128 ns/op
# Warmup Iteration   2: 20.461 ns/op
# Warmup Iteration   3: 19.601 ns/op
Iteration   1: 18.522 ns/op
Iteration   2: 18.457 ns/op
Iteration   3: 19.129 ns/op
Iteration   4: 27.138 ns/op
Iteration   5: 46.773 ns/op

# Run progress: 5.91% complete, ETA 09:04:26
# Fork: 2 of 3
# Warmup Iteration   1: 41.833 ns/op
# Warmup Iteration   2: 44.468 ns/op
# Warmup Iteration   3: 44.414 ns/op
Iteration   1: 35.962 ns/op
Iteration   2: 34.701 ns/op
Iteration   3: 24.095 ns/op
Iteration   4: 19.993 ns/op
Iteration   5: 18.487 ns/op

# Run progress: 5.93% complete, ETA 09:04:21
# Fork: 3 of 3
# Warmup Iteration   1: 18.610 ns/op
# Warmup Iteration   2: 18.004 ns/op
# Warmup Iteration   3: 18.601 ns/op
Iteration   1: 18.608 ns/op
Iteration   2: 21.280 ns/op
Iteration   3: 33.146 ns/op
Iteration   4: 38.260 ns/op
Iteration   5: 43.084 ns/op


Result "kotlin_benchmarks.array.copy.Primitive64.p64long_arraycopy":
  27.842 ±(99.9%) 10.626 ns/op [Average]
  (min, avg, max) = (18.457, 27.842, 46.773), stdev = 9.940
  CI (99.9%): [17.216, 38.469] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.copy.Primitive64.p64long_arraycopy
# Parameters: (size = 1000000)

# Run progress: 5.96% complete, ETA 09:04:10
# Fork: 1 of 3
# Warmup Iteration   1: 299172.760 ns/op
# Warmup Iteration   2: 207026.484 ns/op
# Warmup Iteration   3: 167428.498 ns/op
Iteration   1: 177498.067 ns/op
Iteration   2: 186985.499 ns/op
Iteration   3: 192019.494 ns/op
Iteration   4: 213222.783 ns/op
Iteration   5: 232185.436 ns/op

# Run progress: 5.98% complete, ETA 09:04:02
# Fork: 2 of 3
# Warmup Iteration   1: 224304.940 ns/op
# Warmup Iteration   2: 230137.313 ns/op
# Warmup Iteration   3: 224311.778 ns/op
Iteration   1: 267935.546 ns/op
Iteration   2: 336811.218 ns/op
Iteration   3: 500316.460 ns/op
Iteration   4: 487942.484 ns/op
Iteration   5: 419305.863 ns/op

# Run progress: 6.00% complete, ETA 09:03:54
# Fork: 3 of 3
# Warmup Iteration   1: 291396.879 ns/op
# Warmup Iteration   2: 200929.914 ns/op
# Warmup Iteration   3: 186806.821 ns/op
Iteration   1: 186819.457 ns/op
Iteration   2: 204607.243 ns/op
Iteration   3: 258902.788 ns/op
Iteration   4: 286570.973 ns/op
Iteration   5: 284425.546 ns/op


Result "kotlin_benchmarks.array.copy.Primitive64.p64long_arraycopy":
  282369.924 ±(99.9%) 115351.468 ns/op [Average]
  (min, avg, max) = (177498.067, 282369.924, 500316.460), stdev = 107899.834
  CI (99.9%): [167018.456, 397721.392] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.copy.Primitive64.p64long_copy
# Parameters: (size = 100)

# Run progress: 6.03% complete, ETA 09:03:46
# Fork: 1 of 3
# Warmup Iteration   1: 21.550 ns/op
# Warmup Iteration   2: 21.277 ns/op
# Warmup Iteration   3: 23.023 ns/op
Iteration   1: 29.225 ns/op
Iteration   2: 30.836 ns/op
Iteration   3: 35.526 ns/op
Iteration   4: 39.917 ns/op
Iteration   5: 31.408 ns/op

# Run progress: 6.05% complete, ETA 09:03:38
# Fork: 2 of 3
# Warmup Iteration   1: 31.070 ns/op
# Warmup Iteration   2: 32.479 ns/op
# Warmup Iteration   3: 36.554 ns/op
Iteration   1: 36.415 ns/op
Iteration   2: 33.093 ns/op
Iteration   3: 30.614 ns/op
Iteration   4: 30.512 ns/op
Iteration   5: 25.354 ns/op

# Run progress: 6.08% complete, ETA 09:03:33
# Fork: 3 of 3
# Warmup Iteration   1: 20.331 ns/op
# Warmup Iteration   2: 21.130 ns/op
# Warmup Iteration   3: 22.541 ns/op
Iteration   1: 29.865 ns/op
Iteration   2: 33.889 ns/op
Iteration   3: 65.167 ns/op
Iteration   4: 31.817 ns/op
Iteration   5: 36.473 ns/op


Result "kotlin_benchmarks.array.copy.Primitive64.p64long_copy":
  34.674 ±(99.9%) 9.792 ns/op [Average]
  (min, avg, max) = (25.354, 34.674, 65.167), stdev = 9.159
  CI (99.9%): [24.882, 44.466] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.copy.Primitive64.p64long_copy
# Parameters: (size = 1000000)

# Run progress: 6.10% complete, ETA 09:03:24
# Fork: 1 of 3
# Warmup Iteration   1: 511993.200 ns/op
# Warmup Iteration   2: 425965.325 ns/op
# Warmup Iteration   3: 338771.149 ns/op
Iteration   1: 341958.787 ns/op
Iteration   2: 350419.031 ns/op
Iteration   3: 294953.564 ns/op
Iteration   4: 249029.429 ns/op
Iteration   5: 224553.401 ns/op

# Run progress: 6.13% complete, ETA 09:03:20
# Fork: 2 of 3
# Warmup Iteration   1: 381290.519 ns/op
# Warmup Iteration   2: 445259.182 ns/op
# Warmup Iteration   3: 506535.887 ns/op
Iteration   1: 404060.459 ns/op
Iteration   2: 972259.923 ns/op
Iteration   3: 616905.301 ns/op
Iteration   4: 635369.213 ns/op
Iteration   5: 600329.900 ns/op

# Run progress: 6.15% complete, ETA 09:03:11
# Fork: 3 of 3
# Warmup Iteration   1: 688475.862 ns/op
# Warmup Iteration   2: 657697.944 ns/op
# Warmup Iteration   3: 624112.870 ns/op
Iteration   1: 697200.797 ns/op
Iteration   2: 538303.091 ns/op
Iteration   3: 577483.458 ns/op
Iteration   4: 1017972.054 ns/op
Iteration   5: 658295.904 ns/op


Result "kotlin_benchmarks.array.copy.Primitive64.p64long_copy":
  545272.954 ±(99.9%) 257386.393 ns/op [Average]
  (min, avg, max) = (224553.401, 545272.954, 1017972.054), stdev = 240759.391
  CI (99.9%): [287886.562, 802659.347] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Identity32int.Def_to_Ref_as_Ref_arrayfill
# Parameters: (size = 100)

# Run progress: 6.18% complete, ETA 09:03:08
# Fork: 1 of 3
# Warmup Iteration   1: 240.446 ns/op
# Warmup Iteration   2: 271.938 ns/op
# Warmup Iteration   3: 442.345 ns/op
Iteration   1: 371.218 ns/op
Iteration   2: 331.541 ns/op
Iteration   3: 244.271 ns/op
Iteration   4: 293.220 ns/op
Iteration   5: 352.993 ns/op

# Run progress: 6.20% complete, ETA 09:03:07
# Fork: 2 of 3
# Warmup Iteration   1: 229.619 ns/op
# Warmup Iteration   2: 237.559 ns/op
# Warmup Iteration   3: 244.538 ns/op
Iteration   1: 252.853 ns/op
Iteration   2: 242.922 ns/op
Iteration   3: 217.180 ns/op
Iteration   4: 180.492 ns/op
Iteration   5: 196.676 ns/op

# Run progress: 6.23% complete, ETA 09:03:04
# Fork: 3 of 3
# Warmup Iteration   1: 250.979 ns/op
# Warmup Iteration   2: 254.843 ns/op
# Warmup Iteration   3: 239.005 ns/op
Iteration   1: 276.323 ns/op
Iteration   2: 274.823 ns/op
Iteration   3: 273.107 ns/op
Iteration   4: 291.425 ns/op
Iteration   5: 272.814 ns/op


Result "kotlin_benchmarks.array.fill.Identity32int.Def_to_Ref_as_Ref_arrayfill":
  271.457 ±(99.9%) 57.026 ns/op [Average]
  (min, avg, max) = (180.492, 271.457, 371.218), stdev = 53.342
  CI (99.9%): [214.432, 328.483] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Identity32int.Def_to_Ref_as_Ref_arrayfill
# Parameters: (size = 1000000)

# Run progress: 6.25% complete, ETA 09:02:57
# Fork: 1 of 3
# Warmup Iteration   1: 24122799.595 ns/op
# Warmup Iteration   2: 47403070.091 ns/op
# Warmup Iteration   3: 44422579.739 ns/op
Iteration   1: 41211755.000 ns/op
Iteration   2: 33112216.387 ns/op
Iteration   3: 36931398.821 ns/op
Iteration   4: 60113808.824 ns/op
Iteration   5: 53068287.263 ns/op

# Run progress: 6.27% complete, ETA 09:02:55
# Fork: 2 of 3
# Warmup Iteration   1: 35124221.241 ns/op
# Warmup Iteration   2: 27230746.622 ns/op
# Warmup Iteration   3: 4274243.671 ns/op
Iteration   1: 4488939.631 ns/op
Iteration   2: 3386351.807 ns/op
Iteration   3: 3792541.513 ns/op
Iteration   4: 4349307.626 ns/op
Iteration   5: 37580401.786 ns/op

# Run progress: 6.30% complete, ETA 09:02:47
# Fork: 3 of 3
# Warmup Iteration   1: 7775913.826 ns/op
# Warmup Iteration   2: 18106066.964 ns/op
# Warmup Iteration   3: 58692000.000 ns/op
Iteration   1: 59054740.778 ns/op
Iteration   2: 35251274.414 ns/op
Iteration   3: 46068592.773 ns/op
Iteration   4: 47560655.318 ns/op
Iteration   5: 32962594.097 ns/op


Result "kotlin_benchmarks.array.fill.Identity32int.Def_to_Ref_as_Ref_arrayfill":
  33262191.069 ±(99.9%) 21516805.075 ns/op [Average]
  (min, avg, max) = (3386351.807, 33262191.069, 60113808.824), stdev = 20126832.819
  CI (99.9%): [11745385.994, 54778996.145] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Identity32int.Def_to_Ref_as_Ref_fill
# Parameters: (size = 100)

# Run progress: 6.32% complete, ETA 09:02:45
# Fork: 1 of 3
# Warmup Iteration   1: 363.777 ns/op
# Warmup Iteration   2: 531.886 ns/op
# Warmup Iteration   3: 1461.176 ns/op
Iteration   1: 1564.026 ns/op
Iteration   2: 870.261 ns/op
Iteration   3: 996.759 ns/op
Iteration   4: 749.001 ns/op
Iteration   5: 682.168 ns/op

# Run progress: 6.35% complete, ETA 09:02:36
# Fork: 2 of 3
# Warmup Iteration   1: 606.220 ns/op
# Warmup Iteration   2: 582.417 ns/op
# Warmup Iteration   3: 491.935 ns/op
Iteration   1: 485.868 ns/op
Iteration   2: 338.095 ns/op
Iteration   3: 387.712 ns/op
Iteration   4: 397.765 ns/op
Iteration   5: 406.093 ns/op

# Run progress: 6.37% complete, ETA 09:02:30
# Fork: 3 of 3
# Warmup Iteration   1: 767.115 ns/op
# Warmup Iteration   2: 1183.385 ns/op
# Warmup Iteration   3: 768.433 ns/op
Iteration   1: 527.148 ns/op
Iteration   2: 594.679 ns/op
Iteration   3: 709.418 ns/op
Iteration   4: 651.444 ns/op
Iteration   5: 487.323 ns/op


Result "kotlin_benchmarks.array.fill.Identity32int.Def_to_Ref_as_Ref_fill":
  656.517 ±(99.9%) 335.483 ns/op [Average]
  (min, avg, max) = (338.095, 656.517, 1564.026), stdev = 313.811
  CI (99.9%): [321.035, 992.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Identity32int.Def_to_Ref_as_Ref_fill
# Parameters: (size = 1000000)

# Run progress: 6.40% complete, ETA 09:02:26
# Fork: 1 of 3
# Warmup Iteration   1: 7023829.861 ns/op
# Warmup Iteration   2: 4200711.793 ns/op
# Warmup Iteration   3: 3564087.440 ns/op
Iteration   1: 3988477.605 ns/op
Iteration   2: 5118661.823 ns/op
Iteration   3: 5580486.033 ns/op
Iteration   4: 8137347.113 ns/op
Iteration   5: 10633633.337 ns/op

# Run progress: 6.42% complete, ETA 09:02:22
# Fork: 2 of 3
# Warmup Iteration   1: 11365473.315 ns/op
# Warmup Iteration   2: 11971267.357 ns/op
# Warmup Iteration   3: 9803372.981 ns/op
Iteration   1: 13754408.110 ns/op
Iteration   2: 17332053.678 ns/op
Iteration   3: 10335038.265 ns/op
Iteration   4: 8558444.106 ns/op
Iteration   5: 7216283.336 ns/op

# Run progress: 6.45% complete, ETA 09:02:22
# Fork: 3 of 3
# Warmup Iteration   1: 12041974.214 ns/op
# Warmup Iteration   2: 13662556.667 ns/op
# Warmup Iteration   3: 8467346.525 ns/op
Iteration   1: 10056325.089 ns/op
Iteration   2: 13662190.878 ns/op
Iteration   3: 20166559.180 ns/op
Iteration   4: 9655923.410 ns/op
Iteration   5: 8630554.487 ns/op


Result "kotlin_benchmarks.array.fill.Identity32int.Def_to_Ref_as_Ref_fill":
  10188425.763 ±(99.9%) 4775841.280 ns/op [Average]
  (min, avg, max) = (3988477.605, 10188425.763, 20166559.180), stdev = 4467324.897
  CI (99.9%): [5412584.483, 14964267.043] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Identity32int.New_to_Ref_as_Ref_arrayfill
# Parameters: (size = 100)

# Run progress: 6.47% complete, ETA 09:02:21
# Fork: 1 of 3
# Warmup Iteration   1: 245.348 ns/op
# Warmup Iteration   2: 270.883 ns/op
# Warmup Iteration   3: 249.523 ns/op
Iteration   1: 250.188 ns/op
Iteration   2: 255.556 ns/op
Iteration   3: 208.799 ns/op
Iteration   4: 173.403 ns/op
Iteration   5: 159.975 ns/op

# Run progress: 6.50% complete, ETA 09:02:17
# Fork: 2 of 3
# Warmup Iteration   1: 162.402 ns/op
# Warmup Iteration   2: 172.283 ns/op
# Warmup Iteration   3: 174.924 ns/op
Iteration   1: 194.820 ns/op
Iteration   2: 244.805 ns/op
Iteration   3: 291.921 ns/op
Iteration   4: 272.122 ns/op
Iteration   5: 259.439 ns/op

# Run progress: 6.52% complete, ETA 09:02:08
# Fork: 3 of 3
# Warmup Iteration   1: 253.574 ns/op
# Warmup Iteration   2: 233.415 ns/op
# Warmup Iteration   3: 170.132 ns/op
Iteration   1: 151.070 ns/op
Iteration   2: 151.261 ns/op
Iteration   3: 174.428 ns/op
Iteration   4: 167.721 ns/op
Iteration   5: 166.317 ns/op


Result "kotlin_benchmarks.array.fill.Identity32int.New_to_Ref_as_Ref_arrayfill":
  208.122 ±(99.9%) 52.545 ns/op [Average]
  (min, avg, max) = (151.070, 208.122, 291.921), stdev = 49.151
  CI (99.9%): [155.577, 260.667] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Identity32int.New_to_Ref_as_Ref_arrayfill
# Parameters: (size = 1000000)

# Run progress: 6.54% complete, ETA 09:02:03
# Fork: 1 of 3
# Warmup Iteration   1: 40165355.769 ns/op
# Warmup Iteration   2: 50564212.500 ns/op
# Warmup Iteration   3: 37168827.393 ns/op
Iteration   1: 27397481.973 ns/op
Iteration   2: 28154541.667 ns/op
Iteration   3: 3088275.436 ns/op
Iteration   4: 2637652.050 ns/op
Iteration   5: 5704969.460 ns/op

# Run progress: 6.57% complete, ETA 09:01:56
# Fork: 2 of 3
# Warmup Iteration   1: 44559855.043 ns/op
# Warmup Iteration   2: 49323549.619 ns/op
# Warmup Iteration   3: 16953565.283 ns/op
Iteration   1: 28760992.857 ns/op
Iteration   2: 24976929.878 ns/op
Iteration   3: 37759577.148 ns/op
Iteration   4: 36125281.250 ns/op
Iteration   5: 33525059.129 ns/op

# Run progress: 6.59% complete, ETA 09:01:53
# Fork: 3 of 3
# Warmup Iteration   1: 34929538.793 ns/op
# Warmup Iteration   2: 20597511.061 ns/op
# Warmup Iteration   3: 17771386.684 ns/op
Iteration   1: 3052278.158 ns/op
Iteration   2: 2862506.493 ns/op
Iteration   3: 8728274.720 ns/op
Iteration   4: 43766796.875 ns/op
Iteration   5: 45511744.565 ns/op


Result "kotlin_benchmarks.array.fill.Identity32int.New_to_Ref_as_Ref_arrayfill":
  22136824.111 ±(99.9%) 17209870.881 ns/op [Average]
  (min, avg, max) = (2637652.050, 22136824.111, 45511744.565), stdev = 16098123.902
  CI (99.9%): [4926953.229, 39346694.992] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Identity32int.New_to_Ref_as_Ref_fill
# Parameters: (size = 100)

# Run progress: 6.62% complete, ETA 09:01:45
# Fork: 1 of 3
# Warmup Iteration   1: 105.928 ns/op
# Warmup Iteration   2: 114.909 ns/op
# Warmup Iteration   3: 145.632 ns/op
Iteration   1: 170.042 ns/op
Iteration   2: 191.955 ns/op
Iteration   3: 170.118 ns/op
Iteration   4: 157.942 ns/op
Iteration   5: 154.434 ns/op

# Run progress: 6.64% complete, ETA 09:01:34
# Fork: 2 of 3
# Warmup Iteration   1: 194.394 ns/op
# Warmup Iteration   2: 239.948 ns/op
# Warmup Iteration   3: 230.822 ns/op
Iteration   1: 246.609 ns/op
Iteration   2: 245.753 ns/op
Iteration   3: 247.287 ns/op
Iteration   4: 176.849 ns/op
Iteration   5: 146.261 ns/op

# Run progress: 6.67% complete, ETA 09:01:26
# Fork: 3 of 3
# Warmup Iteration   1: 148.633 ns/op
# Warmup Iteration   2: 150.341 ns/op
# Warmup Iteration   3: 150.530 ns/op
Iteration   1: 160.463 ns/op
Iteration   2: 154.658 ns/op
Iteration   3: 158.090 ns/op
Iteration   4: 155.556 ns/op
Iteration   5: 149.779 ns/op


Result "kotlin_benchmarks.array.fill.Identity32int.New_to_Ref_as_Ref_fill":
  179.053 ±(99.9%) 39.298 ns/op [Average]
  (min, avg, max) = (146.261, 179.053, 247.287), stdev = 36.759
  CI (99.9%): [139.755, 218.351] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Identity32int.New_to_Ref_as_Ref_fill
# Parameters: (size = 1000000)

# Run progress: 6.69% complete, ETA 09:01:16
# Fork: 1 of 3
# Warmup Iteration   1: 36569244.241 ns/op
# Warmup Iteration   2: 42338281.250 ns/op
# Warmup Iteration   3: 9112135.786 ns/op
Iteration   1: 4930271.446 ns/op
Iteration   2: 10024764.030 ns/op
Iteration   3: 10305090.133 ns/op
Iteration   4: 11809165.230 ns/op
Iteration   5: 13960704.861 ns/op

# Run progress: 6.72% complete, ETA 09:01:10
# Fork: 2 of 3
# Warmup Iteration   1: 12573387.500 ns/op
# Warmup Iteration   2: 15621182.603 ns/op
# Warmup Iteration   3: 38083412.037 ns/op
Iteration   1: 31872313.813 ns/op
Iteration   2: 25671071.875 ns/op
Iteration   3: 26317586.538 ns/op
Iteration   4: 24714136.171 ns/op
Iteration   5: 21933248.196 ns/op

# Run progress: 6.74% complete, ETA 09:01:09
# Fork: 3 of 3
# Warmup Iteration   1: 17051259.033 ns/op
# Warmup Iteration   2: 3072833.970 ns/op
# Warmup Iteration   3: 3799451.574 ns/op
Iteration   1: 16316110.688 ns/op
Iteration   2: 19783407.667 ns/op
Iteration   3: 39320786.885 ns/op
Iteration   4: 26522808.769 ns/op
Iteration   5: 28980410.714 ns/op


Result "kotlin_benchmarks.array.fill.Identity32int.New_to_Ref_as_Ref_fill":
  20830791.801 ±(99.9%) 10153639.807 ns/op [Average]
  (min, avg, max) = (4930271.446, 20830791.801, 39320786.885), stdev = 9497720.976
  CI (99.9%): [10677151.994, 30984431.608] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Identity32int.Ref_to_Ref_as_Ref_arrayfillinst
# Parameters: (size = 100)

# Run progress: 6.76% complete, ETA 09:01:00
# Fork: 1 of 3
# Warmup Iteration   1: 73.694 ns/op
# Warmup Iteration   2: 83.925 ns/op
# Warmup Iteration   3: 91.073 ns/op
Iteration   1: 103.298 ns/op
Iteration   2: 127.231 ns/op
Iteration   3: 121.739 ns/op
Iteration   4: 132.745 ns/op
Iteration   5: 157.107 ns/op

# Run progress: 6.79% complete, ETA 09:00:49
# Fork: 2 of 3
# Warmup Iteration   1: 181.162 ns/op
# Warmup Iteration   2: 192.091 ns/op
# Warmup Iteration   3: 157.184 ns/op
Iteration   1: 159.103 ns/op
Iteration   2: 176.612 ns/op
Iteration   3: 197.985 ns/op
Iteration   4: 200.119 ns/op
Iteration   5: 186.497 ns/op

# Run progress: 6.81% complete, ETA 09:00:42
# Fork: 3 of 3
# Warmup Iteration   1: 169.272 ns/op
# Warmup Iteration   2: 107.243 ns/op
# Warmup Iteration   3: 93.714 ns/op
Iteration   1: 91.165 ns/op
Iteration   2: 91.731 ns/op
Iteration   3: 91.913 ns/op
Iteration   4: 107.453 ns/op
Iteration   5: 167.340 ns/op


Result "kotlin_benchmarks.array.fill.Identity32int.Ref_to_Ref_as_Ref_arrayfillinst":
  140.803 ±(99.9%) 42.241 ns/op [Average]
  (min, avg, max) = (91.165, 140.803, 200.119), stdev = 39.512
  CI (99.9%): [98.562, 183.044] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Identity32int.Ref_to_Ref_as_Ref_arrayfillinst
# Parameters: (size = 1000000)

# Run progress: 6.84% complete, ETA 09:00:35
# Fork: 1 of 3
# Warmup Iteration   1: 7401590.074 ns/op
# Warmup Iteration   2: 6721129.720 ns/op
# Warmup Iteration   3: 6757256.711 ns/op
Iteration   1: 4424035.297 ns/op
Iteration   2: 3538266.081 ns/op
Iteration   3: 3317146.729 ns/op
Iteration   4: 3294466.746 ns/op
Iteration   5: 3578088.652 ns/op

# Run progress: 6.86% complete, ETA 09:00:32
# Fork: 2 of 3
# Warmup Iteration   1: 47493181.818 ns/op
# Warmup Iteration   2: 30933952.000 ns/op
# Warmup Iteration   3: 27918840.081 ns/op
Iteration   1: 25998988.256 ns/op
Iteration   2: 29694684.514 ns/op
Iteration   3: 15962393.234 ns/op
Iteration   4: 25243968.977 ns/op
Iteration   5: 10036503.202 ns/op

# Run progress: 6.89% complete, ETA 09:00:26
# Fork: 3 of 3
# Warmup Iteration   1: 63286583.294 ns/op
# Warmup Iteration   2: 39277314.077 ns/op
# Warmup Iteration   3: 29462182.143 ns/op
Iteration   1: 26749970.395 ns/op
Iteration   2: 27990873.865 ns/op
Iteration   3: 30077132.353 ns/op
Iteration   4: 34423093.067 ns/op
Iteration   5: 23422780.295 ns/op


Result "kotlin_benchmarks.array.fill.Identity32int.Ref_to_Ref_as_Ref_arrayfillinst":
  17850159.444 ±(99.9%) 12697918.944 ns/op [Average]
  (min, avg, max) = (3294466.746, 17850159.444, 34423093.067), stdev = 11877641.260
  CI (99.9%): [5152240.500, 30548078.389] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Identity32int.Ref_to_Ref_as_Ref_arrayfillstat
# Parameters: (size = 100)

# Run progress: 6.91% complete, ETA 09:00:22
# Fork: 1 of 3
# Warmup Iteration   1: 78.243 ns/op
# Warmup Iteration   2: 90.864 ns/op
# Warmup Iteration   3: 106.321 ns/op
Iteration   1: 124.286 ns/op
Iteration   2: 156.415 ns/op
Iteration   3: 200.058 ns/op
Iteration   4: 205.886 ns/op
Iteration   5: 195.016 ns/op

# Run progress: 6.94% complete, ETA 09:00:11
# Fork: 2 of 3
# Warmup Iteration   1: 187.350 ns/op
# Warmup Iteration   2: 188.022 ns/op
# Warmup Iteration   3: 202.684 ns/op
Iteration   1: 196.571 ns/op
Iteration   2: 199.499 ns/op
Iteration   3: 150.075 ns/op
Iteration   4: 105.467 ns/op
Iteration   5: 94.059 ns/op

# Run progress: 6.96% complete, ETA 09:00:04
# Fork: 3 of 3
# Warmup Iteration   1: 84.859 ns/op
# Warmup Iteration   2: 84.929 ns/op
# Warmup Iteration   3: 86.783 ns/op
Iteration   1: 97.782 ns/op
Iteration   2: 141.914 ns/op
Iteration   3: 187.589 ns/op
Iteration   4: 195.796 ns/op
Iteration   5: 175.097 ns/op


Result "kotlin_benchmarks.array.fill.Identity32int.Ref_to_Ref_as_Ref_arrayfillstat":
  161.701 ±(99.9%) 43.301 ns/op [Average]
  (min, avg, max) = (94.059, 161.701, 205.886), stdev = 40.504
  CI (99.9%): [118.400, 205.002] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Identity32int.Ref_to_Ref_as_Ref_arrayfillstat
# Parameters: (size = 1000000)

# Run progress: 6.99% complete, ETA 08:59:54
# Fork: 1 of 3
# Warmup Iteration   1: 37329447.519 ns/op
# Warmup Iteration   2: 37656436.741 ns/op
# Warmup Iteration   3: 29098785.714 ns/op
Iteration   1: 29754272.629 ns/op
Iteration   2: 28819465.278 ns/op
Iteration   3: 26413276.316 ns/op
Iteration   4: 22911085.227 ns/op
Iteration   5: 18737106.481 ns/op

# Run progress: 7.01% complete, ETA 08:59:47
# Fork: 2 of 3
# Warmup Iteration   1: 25932253.125 ns/op
# Warmup Iteration   2: 21686261.511 ns/op
# Warmup Iteration   3: 25022108.732 ns/op
Iteration   1: 12222293.155 ns/op
Iteration   2: 3800327.023 ns/op
Iteration   3: 4113430.728 ns/op
Iteration   4: 31560164.063 ns/op
Iteration   5: 38023246.926 ns/op

# Run progress: 7.03% complete, ETA 08:59:37
# Fork: 3 of 3
# Warmup Iteration   1: 39541416.654 ns/op
# Warmup Iteration   2: 33553338.867 ns/op
# Warmup Iteration   3: 33940812.500 ns/op
Iteration   1: 26676227.564 ns/op
Iteration   2: 33054767.484 ns/op
Iteration   3: 33681879.167 ns/op
Iteration   4: 32075303.375 ns/op
Iteration   5: 35068961.100 ns/op


Result "kotlin_benchmarks.array.fill.Identity32int.Ref_to_Ref_as_Ref_arrayfillstat":
  25127453.768 ±(99.9%) 11565867.985 ns/op [Average]
  (min, avg, max) = (3800327.023, 25127453.768, 38023246.926), stdev = 10818720.090
  CI (99.9%): [13561585.783, 36693321.752] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Identity32int.Ref_to_Ref_as_Ref_fill_fillstat
# Parameters: (size = 100)

# Run progress: 7.06% complete, ETA 08:59:28
# Fork: 1 of 3
# Warmup Iteration   1: 76.925 ns/op
# Warmup Iteration   2: 95.431 ns/op
# Warmup Iteration   3: 154.965 ns/op
Iteration   1: 214.961 ns/op
Iteration   2: 243.925 ns/op
Iteration   3: 199.618 ns/op
Iteration   4: 206.233 ns/op
Iteration   5: 203.063 ns/op

# Run progress: 7.08% complete, ETA 08:59:16
# Fork: 2 of 3
# Warmup Iteration   1: 196.566 ns/op
# Warmup Iteration   2: 209.988 ns/op
# Warmup Iteration   3: 260.443 ns/op
Iteration   1: 186.357 ns/op
Iteration   2: 120.345 ns/op
Iteration   3: 101.808 ns/op
Iteration   4: 94.752 ns/op
Iteration   5: 96.362 ns/op

# Run progress: 7.11% complete, ETA 08:59:11
# Fork: 3 of 3
# Warmup Iteration   1: 148.249 ns/op
# Warmup Iteration   2: 170.794 ns/op
# Warmup Iteration   3: 200.907 ns/op
Iteration   1: 192.180 ns/op
Iteration   2: 200.798 ns/op
Iteration   3: 173.916 ns/op
Iteration   4: 180.694 ns/op
Iteration   5: 149.103 ns/op


Result "kotlin_benchmarks.array.fill.Identity32int.Ref_to_Ref_as_Ref_fill_fillstat":
  170.941 ±(99.9%) 50.493 ns/op [Average]
  (min, avg, max) = (94.752, 170.941, 243.925), stdev = 47.231
  CI (99.9%): [120.448, 221.434] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Identity32int.Ref_to_Ref_as_Ref_fill_fillstat
# Parameters: (size = 1000000)

# Run progress: 7.13% complete, ETA 08:59:01
# Fork: 1 of 3
# Warmup Iteration   1: 32713669.355 ns/op
# Warmup Iteration   2: 36197929.586 ns/op
# Warmup Iteration   3: 31941559.906 ns/op
Iteration   1: 28452860.351 ns/op
Iteration   2: 9854015.777 ns/op
Iteration   3: 8207380.764 ns/op
Iteration   4: 3476156.142 ns/op
Iteration   5: 3875339.448 ns/op

# Run progress: 7.16% complete, ETA 08:58:53
# Fork: 2 of 3
# Warmup Iteration   1: 7948032.480 ns/op
# Warmup Iteration   2: 10195487.798 ns/op
# Warmup Iteration   3: 8390311.298 ns/op
Iteration   1: 19382850.296 ns/op
Iteration   2: 19128838.741 ns/op
Iteration   3: 18336599.696 ns/op
Iteration   4: 31666542.969 ns/op
Iteration   5: 30769760.091 ns/op

# Run progress: 7.18% complete, ETA 08:58:53
# Fork: 3 of 3
# Warmup Iteration   1: 24778006.098 ns/op
# Warmup Iteration   2: 24329379.976 ns/op
# Warmup Iteration   3: 25321373.950 ns/op
Iteration   1: 34960250.000 ns/op
Iteration   2: 28906832.143 ns/op
Iteration   3: 21356839.417 ns/op
Iteration   4: 29159020.833 ns/op
Iteration   5: 25864803.436 ns/op


Result "kotlin_benchmarks.array.fill.Identity32int.Ref_to_Ref_as_Ref_fill_fillstat":
  20893206.007 ±(99.9%) 11116617.335 ns/op [Average]
  (min, avg, max) = (3476156.142, 20893206.007, 34960250.000), stdev = 10398490.753
  CI (99.9%): [9776588.672, 32009823.342] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Identity32int.Ref_to_Ref_as_Ref_fillinst
# Parameters: (size = 100)

# Run progress: 7.21% complete, ETA 08:58:44
# Fork: 1 of 3
# Warmup Iteration   1: 217.054 ns/op
# Warmup Iteration   2: 189.813 ns/op
# Warmup Iteration   3: 187.567 ns/op
Iteration   1: 198.018 ns/op
Iteration   2: 182.610 ns/op
Iteration   3: 153.661 ns/op
Iteration   4: 130.483 ns/op
Iteration   5: 121.288 ns/op

# Run progress: 7.23% complete, ETA 08:58:37
# Fork: 2 of 3
# Warmup Iteration   1: 140.951 ns/op
# Warmup Iteration   2: 141.034 ns/op
# Warmup Iteration   3: 141.473 ns/op
Iteration   1: 153.103 ns/op
Iteration   2: 141.599 ns/op
Iteration   3: 145.825 ns/op
Iteration   4: 176.614 ns/op
Iteration   5: 201.921 ns/op

# Run progress: 7.25% complete, ETA 08:58:28
# Fork: 3 of 3
# Warmup Iteration   1: 204.325 ns/op
# Warmup Iteration   2: 227.826 ns/op
# Warmup Iteration   3: 209.637 ns/op
Iteration   1: 179.399 ns/op
Iteration   2: 169.863 ns/op
Iteration   3: 141.636 ns/op
Iteration   4: 131.679 ns/op
Iteration   5: 142.105 ns/op


Result "kotlin_benchmarks.array.fill.Identity32int.Ref_to_Ref_as_Ref_fillinst":
  157.987 ±(99.9%) 26.893 ns/op [Average]
  (min, avg, max) = (121.288, 157.987, 201.921), stdev = 25.156
  CI (99.9%): [131.094, 184.880] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Identity32int.Ref_to_Ref_as_Ref_fillinst
# Parameters: (size = 1000000)

# Run progress: 7.28% complete, ETA 08:58:22
# Fork: 1 of 3
# Warmup Iteration   1: 40007665.077 ns/op
# Warmup Iteration   2: 34740636.483 ns/op
# Warmup Iteration   3: 31698805.969 ns/op
Iteration   1: 29175217.583 ns/op
Iteration   2: 30997068.182 ns/op
Iteration   3: 30584227.273 ns/op
Iteration   4: 9361878.852 ns/op
Iteration   5: 5265835.897 ns/op

# Run progress: 7.30% complete, ETA 08:58:15
# Fork: 2 of 3
# Warmup Iteration   1: 3212548.392 ns/op
# Warmup Iteration   2: 5934730.882 ns/op
# Warmup Iteration   3: 10895973.570 ns/op
Iteration   1: 5642194.598 ns/op
Iteration   2: 7392384.801 ns/op
Iteration   3: 12961195.671 ns/op
Iteration   4: 13985081.597 ns/op
Iteration   5: 15568831.415 ns/op

# Run progress: 7.33% complete, ETA 08:58:12
# Fork: 3 of 3
# Warmup Iteration   1: 31698585.938 ns/op
# Warmup Iteration   2: 42437362.875 ns/op
# Warmup Iteration   3: 25325947.925 ns/op
Iteration   1: 24708375.000 ns/op
Iteration   2: 23078926.136 ns/op
Iteration   3: 10517144.094 ns/op
Iteration   4: 5723322.266 ns/op
Iteration   5: 5545042.126 ns/op


Result "kotlin_benchmarks.array.fill.Identity32int.Ref_to_Ref_as_Ref_fillinst":
  15367115.033 ±(99.9%) 10420921.555 ns/op [Average]
  (min, avg, max) = (5265835.897, 15367115.033, 30997068.182), stdev = 9747736.489
  CI (99.9%): [4946193.477, 25788036.588] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.IdentityOpt.Def_to_Ref_as_Ref_arrayfill
# Parameters: (size = 100)

# Run progress: 7.35% complete, ETA 08:58:06
# Fork: 1 of 3
# Warmup Iteration   1: 248.552 ns/op
# Warmup Iteration   2: 235.827 ns/op
# Warmup Iteration   3: 196.802 ns/op
Iteration   1: 171.166 ns/op
Iteration   2: 152.591 ns/op
Iteration   3: 158.744 ns/op
Iteration   4: 154.483 ns/op
Iteration   5: 159.277 ns/op

# Run progress: 7.38% complete, ETA 08:58:01
# Fork: 2 of 3
# Warmup Iteration   1: 172.334 ns/op
# Warmup Iteration   2: 171.291 ns/op
# Warmup Iteration   3: 170.862 ns/op
Iteration   1: 200.678 ns/op
Iteration   2: 248.049 ns/op
Iteration   3: 263.295 ns/op
Iteration   4: 256.457 ns/op
Iteration   5: 252.150 ns/op

# Run progress: 7.40% complete, ETA 08:57:52
# Fork: 3 of 3
# Warmup Iteration   1: 239.002 ns/op
# Warmup Iteration   2: 218.771 ns/op
# Warmup Iteration   3: 160.568 ns/op
Iteration   1: 144.893 ns/op
Iteration   2: 147.695 ns/op
Iteration   3: 139.765 ns/op
Iteration   4: 133.761 ns/op
Iteration   5: 147.574 ns/op


Result "kotlin_benchmarks.array.fill.IdentityOpt.Def_to_Ref_as_Ref_arrayfill":
  182.038 ±(99.9%) 51.454 ns/op [Average]
  (min, avg, max) = (133.761, 182.038, 263.295), stdev = 48.130
  CI (99.9%): [130.584, 233.493] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.IdentityOpt.Def_to_Ref_as_Ref_arrayfill
# Parameters: (size = 1000000)

# Run progress: 7.43% complete, ETA 08:57:47
# Fork: 1 of 3
# Warmup Iteration   1: 27105117.108 ns/op
# Warmup Iteration   2: 40526881.423 ns/op
# Warmup Iteration   3: 34037022.839 ns/op
Iteration   1: 17389710.441 ns/op
Iteration   2: 4862102.657 ns/op
Iteration   3: 2767184.294 ns/op
Iteration   4: 2663118.056 ns/op
Iteration   5: 15048301.928 ns/op

# Run progress: 7.45% complete, ETA 08:57:40
# Fork: 2 of 3
# Warmup Iteration   1: 11539102.750 ns/op
# Warmup Iteration   2: 5559712.225 ns/op
# Warmup Iteration   3: 4419872.648 ns/op
Iteration   1: 12177385.542 ns/op
Iteration   2: 13395093.623 ns/op
Iteration   3: 12535352.613 ns/op
Iteration   4: 10386700.598 ns/op
Iteration   5: 6045640.216 ns/op

# Run progress: 7.48% complete, ETA 08:57:34
# Fork: 3 of 3
# Warmup Iteration   1: 32750849.452 ns/op
# Warmup Iteration   2: 15306902.773 ns/op
# Warmup Iteration   3: 11291689.356 ns/op
Iteration   1: 6090509.228 ns/op
Iteration   2: 6309672.394 ns/op
Iteration   3: 17818739.035 ns/op
Iteration   4: 18377141.673 ns/op
Iteration   5: 46264206.455 ns/op


Result "kotlin_benchmarks.array.fill.IdentityOpt.Def_to_Ref_as_Ref_arrayfill":
  12808723.917 ±(99.9%) 11457586.505 ns/op [Average]
  (min, avg, max) = (2663118.056, 12808723.917, 46264206.455), stdev = 10717433.526
  CI (99.9%): [1351137.412, 24266310.421] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.IdentityOpt.Def_to_Ref_as_Ref_fill
# Parameters: (size = 100)

# Run progress: 7.50% complete, ETA 08:57:30
# Fork: 1 of 3
# Warmup Iteration   1: 353.112 ns/op
# Warmup Iteration   2: 326.352 ns/op
# Warmup Iteration   3: 344.057 ns/op
Iteration   1: 393.574 ns/op
Iteration   2: 401.808 ns/op
Iteration   3: 388.906 ns/op
Iteration   4: 373.916 ns/op
Iteration   5: 374.394 ns/op

# Run progress: 7.52% complete, ETA 08:57:20
# Fork: 2 of 3
# Warmup Iteration   1: 739.663 ns/op
# Warmup Iteration   2: 637.647 ns/op
# Warmup Iteration   3: 695.602 ns/op
Iteration   1: 525.052 ns/op
Iteration   2: 819.113 ns/op
Iteration   3: 614.277 ns/op
Iteration   4: 607.182 ns/op
Iteration   5: 577.355 ns/op

# Run progress: 7.55% complete, ETA 08:57:13
# Fork: 3 of 3
# Warmup Iteration   1: 579.101 ns/op
# Warmup Iteration   2: 452.801 ns/op
# Warmup Iteration   3: 344.089 ns/op
Iteration   1: 376.592 ns/op
Iteration   2: 393.046 ns/op
Iteration   3: 390.500 ns/op
Iteration   4: 377.045 ns/op
Iteration   5: 416.304 ns/op


Result "kotlin_benchmarks.array.fill.IdentityOpt.Def_to_Ref_as_Ref_fill":
  468.604 ±(99.9%) 141.127 ns/op [Average]
  (min, avg, max) = (373.916, 468.604, 819.113), stdev = 132.010
  CI (99.9%): [327.478, 609.731] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.IdentityOpt.Def_to_Ref_as_Ref_fill
# Parameters: (size = 1000000)

# Run progress: 7.57% complete, ETA 08:57:08
# Fork: 1 of 3
# Warmup Iteration   1: 12557329.369 ns/op
# Warmup Iteration   2: 17333379.932 ns/op
# Warmup Iteration   3: 6390857.595 ns/op
Iteration   1: 9713232.143 ns/op
Iteration   2: 22963875.000 ns/op
Iteration   3: 6373582.547 ns/op
Iteration   4: 6051703.347 ns/op
Iteration   5: 8161574.328 ns/op

# Run progress: 7.60% complete, ETA 08:57:10
# Fork: 2 of 3
# Warmup Iteration   1: 13250502.701 ns/op
# Warmup Iteration   2: 9643642.292 ns/op
# Warmup Iteration   3: 8547793.432 ns/op
Iteration   1: 9440924.458 ns/op
Iteration   2: 8524959.398 ns/op
Iteration   3: 7184277.191 ns/op
Iteration   4: 9331721.444 ns/op
Iteration   5: 7763202.924 ns/op

# Run progress: 7.62% complete, ETA 08:57:05
# Fork: 3 of 3
# Warmup Iteration   1: 13733162.730 ns/op
# Warmup Iteration   2: 17776845.035 ns/op
# Warmup Iteration   3: 10030003.297 ns/op
Iteration   1: 8712938.224 ns/op
Iteration   2: 6589169.386 ns/op
Iteration   3: 6120270.084 ns/op
Iteration   4: 31859696.594 ns/op
Iteration   5: 6462111.732 ns/op


Result "kotlin_benchmarks.array.fill.IdentityOpt.Def_to_Ref_as_Ref_fill":
  10350215.920 ±(99.9%) 7735514.932 ns/op [Average]
  (min, avg, max) = (6051703.347, 10350215.920, 31859696.594), stdev = 7235805.468
  CI (99.9%): [2614700.988, 18085730.852] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.IdentityOpt.New_to_Ref_as_Ref_arrayfill
# Parameters: (size = 100)

# Run progress: 7.65% complete, ETA 08:57:03
# Fork: 1 of 3
# Warmup Iteration   1: 284.107 ns/op
# Warmup Iteration   2: 240.949 ns/op
# Warmup Iteration   3: 161.310 ns/op
Iteration   1: 140.376 ns/op
Iteration   2: 149.098 ns/op
Iteration   3: 173.225 ns/op
Iteration   4: 251.710 ns/op
Iteration   5: 314.947 ns/op

# Run progress: 7.67% complete, ETA 08:56:57
# Fork: 2 of 3
# Warmup Iteration   1: 276.978 ns/op
# Warmup Iteration   2: 242.220 ns/op
# Warmup Iteration   3: 229.737 ns/op
Iteration   1: 226.632 ns/op
Iteration   2: 197.485 ns/op
Iteration   3: 154.275 ns/op
Iteration   4: 151.570 ns/op
Iteration   5: 153.597 ns/op

# Run progress: 7.70% complete, ETA 08:56:53
# Fork: 3 of 3
# Warmup Iteration   1: 187.451 ns/op
# Warmup Iteration   2: 183.231 ns/op
# Warmup Iteration   3: 176.154 ns/op
Iteration   1: 177.074 ns/op
Iteration   2: 174.313 ns/op
Iteration   3: 221.299 ns/op
Iteration   4: 248.073 ns/op
Iteration   5: 295.756 ns/op


Result "kotlin_benchmarks.array.fill.IdentityOpt.New_to_Ref_as_Ref_arrayfill":
  201.962 ±(99.9%) 59.328 ns/op [Average]
  (min, avg, max) = (140.376, 201.962, 314.947), stdev = 55.495
  CI (99.9%): [142.634, 261.290] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.IdentityOpt.New_to_Ref_as_Ref_arrayfill
# Parameters: (size = 1000000)

# Run progress: 7.72% complete, ETA 08:56:44
# Fork: 1 of 3
# Warmup Iteration   1: 35504487.069 ns/op
# Warmup Iteration   2: 56231081.000 ns/op
# Warmup Iteration   3: 47548534.091 ns/op
Iteration   1: 56325976.833 ns/op
Iteration   2: 46050018.955 ns/op
Iteration   3: 30393345.588 ns/op
Iteration   4: 31516589.844 ns/op
Iteration   5: 28966304.743 ns/op

# Run progress: 7.75% complete, ETA 08:56:40
# Fork: 2 of 3
# Warmup Iteration   1: 42302194.458 ns/op
# Warmup Iteration   2: 51712650.000 ns/op
# Warmup Iteration   3: 31768050.781 ns/op
Iteration   1: 36093040.179 ns/op
Iteration   2: 33754651.871 ns/op
Iteration   3: 26487355.263 ns/op
Iteration   4: 5560910.103 ns/op
Iteration   5: 3147565.310 ns/op

# Run progress: 7.77% complete, ETA 08:56:30
# Fork: 3 of 3
# Warmup Iteration   1: 15953129.635 ns/op
# Warmup Iteration   2: 34423195.833 ns/op
# Warmup Iteration   3: 11527137.784 ns/op
Iteration   1: 13424461.066 ns/op
Iteration   2: 15795848.723 ns/op
Iteration   3: 8530998.597 ns/op
Iteration   4: 4671472.674 ns/op
Iteration   5: 7351554.348 ns/op


Result "kotlin_benchmarks.array.fill.IdentityOpt.New_to_Ref_as_Ref_arrayfill":
  23204672.940 ±(99.9%) 17462357.026 ns/op [Average]
  (min, avg, max) = (3147565.310, 23204672.940, 56325976.833), stdev = 16334299.598
  CI (99.9%): [5742315.914, 40667029.966] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.IdentityOpt.New_to_Ref_as_Ref_fill
# Parameters: (size = 100)

# Run progress: 7.79% complete, ETA 08:56:27
# Fork: 1 of 3
# Warmup Iteration   1: 267.808 ns/op
# Warmup Iteration   2: 185.873 ns/op
# Warmup Iteration   3: 152.338 ns/op
Iteration   1: 159.295 ns/op
Iteration   2: 206.324 ns/op
Iteration   3: 248.547 ns/op
Iteration   4: 284.736 ns/op
Iteration   5: 247.407 ns/op

# Run progress: 7.82% complete, ETA 08:56:21
# Fork: 2 of 3
# Warmup Iteration   1: 202.008 ns/op
# Warmup Iteration   2: 199.099 ns/op
# Warmup Iteration   3: 177.338 ns/op
Iteration   1: 164.836 ns/op
Iteration   2: 157.922 ns/op
Iteration   3: 152.605 ns/op
Iteration   4: 138.119 ns/op
Iteration   5: 154.601 ns/op

# Run progress: 7.84% complete, ETA 08:56:13
# Fork: 3 of 3
# Warmup Iteration   1: 157.139 ns/op
# Warmup Iteration   2: 170.903 ns/op
# Warmup Iteration   3: 179.975 ns/op
Iteration   1: 232.053 ns/op
Iteration   2: 274.333 ns/op
Iteration   3: 338.586 ns/op
Iteration   4: 256.435 ns/op
Iteration   5: 247.250 ns/op


Result "kotlin_benchmarks.array.fill.IdentityOpt.New_to_Ref_as_Ref_fill":
  217.537 ±(99.9%) 64.643 ns/op [Average]
  (min, avg, max) = (138.119, 217.537, 338.586), stdev = 60.467
  CI (99.9%): [152.893, 282.180] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.IdentityOpt.New_to_Ref_as_Ref_fill
# Parameters: (size = 1000000)

# Run progress: 7.87% complete, ETA 08:56:04
# Fork: 1 of 3
# Warmup Iteration   1: 28721691.657 ns/op
# Warmup Iteration   2: 41253058.360 ns/op
# Warmup Iteration   3: 34427732.548 ns/op
Iteration   1: 37859658.963 ns/op
Iteration   2: 29334780.943 ns/op
Iteration   3: 34617344.433 ns/op
Iteration   4: 33095493.290 ns/op
Iteration   5: 33790319.467 ns/op

# Run progress: 7.89% complete, ETA 08:55:58
# Fork: 2 of 3
# Warmup Iteration   1: 36264188.241 ns/op
# Warmup Iteration   2: 39412429.500 ns/op
# Warmup Iteration   3: 31430984.848 ns/op
Iteration   1: 20229550.840 ns/op
Iteration   2: 3087046.128 ns/op
Iteration   3: 2742081.177 ns/op
Iteration   4: 20355794.865 ns/op
Iteration   5: 50240164.667 ns/op

# Run progress: 7.92% complete, ETA 08:55:49
# Fork: 3 of 3
# Warmup Iteration   1: 42117378.458 ns/op
# Warmup Iteration   2: 32732286.290 ns/op
# Warmup Iteration   3: 30867268.382 ns/op
Iteration   1: 29060240.486 ns/op
Iteration   2: 32692416.677 ns/op
Iteration   3: 20462290.039 ns/op
Iteration   4: 41641335.000 ns/op
Iteration   5: 36231294.643 ns/op


Result "kotlin_benchmarks.array.fill.IdentityOpt.New_to_Ref_as_Ref_fill":
  28362654.108 ±(99.9%) 14015239.691 ns/op [Average]
  (min, avg, max) = (2742081.177, 28362654.108, 50240164.667), stdev = 13109863.904
  CI (99.9%): [14347414.417, 42377893.799] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.IdentityOpt.Ref_to_Ref_as_Ref_arrayfillinst
# Parameters: (size = 100)

# Run progress: 7.94% complete, ETA 08:55:41
# Fork: 1 of 3
# Warmup Iteration   1: 91.097 ns/op
# Warmup Iteration   2: 126.180 ns/op
# Warmup Iteration   3: 190.763 ns/op
Iteration   1: 181.036 ns/op
Iteration   2: 179.660 ns/op
Iteration   3: 196.555 ns/op
Iteration   4: 147.265 ns/op
Iteration   5: 137.992 ns/op

# Run progress: 7.97% complete, ETA 08:55:30
# Fork: 2 of 3
# Warmup Iteration   1: 176.235 ns/op
# Warmup Iteration   2: 184.658 ns/op
# Warmup Iteration   3: 199.582 ns/op
Iteration   1: 181.521 ns/op
Iteration   2: 234.236 ns/op
Iteration   3: 176.053 ns/op
Iteration   4: 184.724 ns/op
Iteration   5: 127.895 ns/op

# Run progress: 7.99% complete, ETA 08:55:23
# Fork: 3 of 3
# Warmup Iteration   1: 140.918 ns/op
# Warmup Iteration   2: 179.467 ns/op
# Warmup Iteration   3: 197.761 ns/op
Iteration   1: 186.055 ns/op
Iteration   2: 188.570 ns/op
Iteration   3: 192.848 ns/op
Iteration   4: 148.533 ns/op
Iteration   5: 109.612 ns/op


Result "kotlin_benchmarks.array.fill.IdentityOpt.Ref_to_Ref_as_Ref_arrayfillinst":
  171.504 ±(99.9%) 33.740 ns/op [Average]
  (min, avg, max) = (109.612, 171.504, 234.236), stdev = 31.561
  CI (99.9%): [137.763, 205.244] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.IdentityOpt.Ref_to_Ref_as_Ref_arrayfillinst
# Parameters: (size = 1000000)

# Run progress: 8.01% complete, ETA 08:55:14
# Fork: 1 of 3
# Warmup Iteration   1: 24319947.429 ns/op
# Warmup Iteration   2: 36120793.179 ns/op
# Warmup Iteration   3: 28739696.778 ns/op
Iteration   1: 31498434.333 ns/op
Iteration   2: 26209244.641 ns/op
Iteration   3: 29749218.147 ns/op
Iteration   4: 25829190.179 ns/op
Iteration   5: 28144578.811 ns/op

# Run progress: 8.04% complete, ETA 08:55:05
# Fork: 2 of 3
# Warmup Iteration   1: 32915373.677 ns/op
# Warmup Iteration   2: 28740756.944 ns/op
# Warmup Iteration   3: 4417197.189 ns/op
Iteration   1: 3502457.471 ns/op
Iteration   2: 6433174.096 ns/op
Iteration   3: 39018826.923 ns/op
Iteration   4: 26092728.615 ns/op
Iteration   5: 57108148.111 ns/op

# Run progress: 8.06% complete, ETA 08:54:55
# Fork: 3 of 3
# Warmup Iteration   1: 32947893.806 ns/op
# Warmup Iteration   2: 28446652.778 ns/op
# Warmup Iteration   3: 28917623.800 ns/op
Iteration   1: 7637537.879 ns/op
Iteration   2: 7666972.328 ns/op
Iteration   3: 15562558.076 ns/op
Iteration   4: 44019315.217 ns/op
Iteration   5: 26488665.590 ns/op


Result "kotlin_benchmarks.array.fill.IdentityOpt.Ref_to_Ref_as_Ref_arrayfillinst":
  24997403.361 ±(99.9%) 16079766.989 ns/op [Average]
  (min, avg, max) = (3502457.471, 24997403.361, 57108148.111), stdev = 15041024.019
  CI (99.9%): [8917636.373, 41077170.350] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.IdentityOpt.Ref_to_Ref_as_Ref_arrayfillstat
# Parameters: (size = 100)

# Run progress: 8.09% complete, ETA 08:54:46
# Fork: 1 of 3
# Warmup Iteration   1: 116.852 ns/op
# Warmup Iteration   2: 169.169 ns/op
# Warmup Iteration   3: 194.488 ns/op
Iteration   1: 195.750 ns/op
Iteration   2: 192.870 ns/op
Iteration   3: 249.548 ns/op
Iteration   4: 191.561 ns/op
Iteration   5: 194.769 ns/op

# Run progress: 8.11% complete, ETA 08:54:37
# Fork: 2 of 3
# Warmup Iteration   1: 176.793 ns/op
# Warmup Iteration   2: 176.515 ns/op
# Warmup Iteration   3: 191.912 ns/op
Iteration   1: 131.639 ns/op
Iteration   2: 104.489 ns/op
Iteration   3: 97.463 ns/op
Iteration   4: 97.518 ns/op
Iteration   5: 105.633 ns/op

# Run progress: 8.14% complete, ETA 08:54:30
# Fork: 3 of 3
# Warmup Iteration   1: 178.633 ns/op
# Warmup Iteration   2: 185.209 ns/op
# Warmup Iteration   3: 189.176 ns/op
Iteration   1: 170.538 ns/op
Iteration   2: 160.328 ns/op
Iteration   3: 129.306 ns/op
Iteration   4: 115.806 ns/op
Iteration   5: 107.834 ns/op


Result "kotlin_benchmarks.array.fill.IdentityOpt.Ref_to_Ref_as_Ref_arrayfillstat":
  149.670 ±(99.9%) 50.602 ns/op [Average]
  (min, avg, max) = (97.463, 149.670, 249.548), stdev = 47.333
  CI (99.9%): [99.068, 200.272] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.IdentityOpt.Ref_to_Ref_as_Ref_arrayfillstat
# Parameters: (size = 1000000)

# Run progress: 8.16% complete, ETA 08:54:22
# Fork: 1 of 3
# Warmup Iteration   1: 24178646.833 ns/op
# Warmup Iteration   2: 35762519.321 ns/op
# Warmup Iteration   3: 28912925.000 ns/op
Iteration   1: 26638945.158 ns/op
Iteration   2: 28949986.914 ns/op
Iteration   3: 26479672.158 ns/op
Iteration   4: 21904944.739 ns/op
Iteration   5: 33686727.161 ns/op

# Run progress: 8.19% complete, ETA 08:54:13
# Fork: 2 of 3
# Warmup Iteration   1: 3163053.233 ns/op
# Warmup Iteration   2: 3424546.595 ns/op
# Warmup Iteration   3: 37915842.593 ns/op
Iteration   1: 37677537.037 ns/op
Iteration   2: 35071184.700 ns/op
Iteration   3: 31055939.394 ns/op
Iteration   4: 28227835.667 ns/op
Iteration   5: 25756143.154 ns/op

# Run progress: 8.21% complete, ETA 08:54:08
# Fork: 3 of 3
# Warmup Iteration   1: 28551577.528 ns/op
# Warmup Iteration   2: 30422466.912 ns/op
# Warmup Iteration   3: 29698497.559 ns/op
Iteration   1: 30866748.765 ns/op
Iteration   2: 26722479.184 ns/op
Iteration   3: 33208981.194 ns/op
Iteration   4: 51012775.000 ns/op
Iteration   5: 5407649.563 ns/op


Result "kotlin_benchmarks.array.fill.IdentityOpt.Ref_to_Ref_as_Ref_arrayfillstat":
  29511169.986 ±(99.9%) 10203663.466 ns/op [Average]
  (min, avg, max) = (5407649.563, 29511169.986, 51012775.000), stdev = 9544513.138
  CI (99.9%): [19307506.520, 39714833.452] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.IdentityOpt.Ref_to_Ref_as_Ref_fill_fillstat
# Parameters: (size = 100)

# Run progress: 8.24% complete, ETA 08:53:59
# Fork: 1 of 3
# Warmup Iteration   1: 189.260 ns/op
# Warmup Iteration   2: 169.606 ns/op
# Warmup Iteration   3: 189.921 ns/op
Iteration   1: 173.213 ns/op
Iteration   2: 178.618 ns/op
Iteration   3: 181.151 ns/op
Iteration   4: 181.696 ns/op
Iteration   5: 193.201 ns/op

# Run progress: 8.26% complete, ETA 08:53:53
# Fork: 2 of 3
# Warmup Iteration   1: 117.391 ns/op
# Warmup Iteration   2: 99.708 ns/op
# Warmup Iteration   3: 97.103 ns/op
Iteration   1: 100.568 ns/op
Iteration   2: 142.931 ns/op
Iteration   3: 206.519 ns/op
Iteration   4: 198.295 ns/op
Iteration   5: 190.592 ns/op

# Run progress: 8.28% complete, ETA 08:53:45
# Fork: 3 of 3
# Warmup Iteration   1: 142.281 ns/op
# Warmup Iteration   2: 119.499 ns/op
# Warmup Iteration   3: 104.459 ns/op
Iteration   1: 89.043 ns/op
Iteration   2: 79.953 ns/op
Iteration   3: 74.406 ns/op
Iteration   4: 83.294 ns/op
Iteration   5: 94.420 ns/op


Result "kotlin_benchmarks.array.fill.IdentityOpt.Ref_to_Ref_as_Ref_fill_fillstat":
  144.527 ±(99.9%) 54.432 ns/op [Average]
  (min, avg, max) = (74.406, 144.527, 206.519), stdev = 50.916
  CI (99.9%): [90.095, 198.959] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.IdentityOpt.Ref_to_Ref_as_Ref_fill_fillstat
# Parameters: (size = 1000000)

# Run progress: 8.31% complete, ETA 08:53:37
# Fork: 1 of 3
# Warmup Iteration   1: 28451141.222 ns/op
# Warmup Iteration   2: 51284222.950 ns/op
# Warmup Iteration   3: 26919549.342 ns/op
Iteration   1: 15856347.000 ns/op
Iteration   2: 8540005.252 ns/op
Iteration   3: 5202125.000 ns/op
Iteration   4: 32951428.030 ns/op
Iteration   5: 41095265.444 ns/op

# Run progress: 8.33% complete, ETA 08:53:30
# Fork: 2 of 3
# Warmup Iteration   1: 61113014.706 ns/op
# Warmup Iteration   2: 38290206.778 ns/op
# Warmup Iteration   3: 27193415.579 ns/op
Iteration   1: 27922922.297 ns/op
Iteration   2: 32568121.094 ns/op
Iteration   3: 31918359.375 ns/op
Iteration   4: 41604166.680 ns/op
Iteration   5: 38168379.630 ns/op

# Run progress: 8.36% complete, ETA 08:53:23
# Fork: 3 of 3
# Warmup Iteration   1: 41165686.680 ns/op
# Warmup Iteration   2: 33773918.067 ns/op
# Warmup Iteration   3: 28976846.429 ns/op
Iteration   1: 3923194.660 ns/op
Iteration   2: 4165620.202 ns/op
Iteration   3: 20174939.180 ns/op
Iteration   4: 50877147.900 ns/op
Iteration   5: 49878271.810 ns/op


Result "kotlin_benchmarks.array.fill.IdentityOpt.Ref_to_Ref_as_Ref_fill_fillstat":
  26989752.904 ±(99.9%) 17525323.550 ns/op [Average]
  (min, avg, max) = (3923194.660, 26989752.904, 50877147.900), stdev = 16393198.524
  CI (99.9%): [9464429.353, 44515076.454] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.IdentityOpt.Ref_to_Ref_as_Ref_fillinst
# Parameters: (size = 100)

# Run progress: 8.38% complete, ETA 08:53:14
# Fork: 1 of 3
# Warmup Iteration   1: 101.313 ns/op
# Warmup Iteration   2: 101.650 ns/op
# Warmup Iteration   3: 113.465 ns/op
Iteration   1: 133.448 ns/op
Iteration   2: 148.709 ns/op
Iteration   3: 144.961 ns/op
Iteration   4: 139.658 ns/op
Iteration   5: 139.540 ns/op

# Run progress: 8.41% complete, ETA 08:53:04
# Fork: 2 of 3
# Warmup Iteration   1: 174.668 ns/op
# Warmup Iteration   2: 200.773 ns/op
# Warmup Iteration   3: 196.483 ns/op
Iteration   1: 165.702 ns/op
Iteration   2: 193.456 ns/op
Iteration   3: 219.941 ns/op
Iteration   4: 185.724 ns/op
Iteration   5: 172.517 ns/op

# Run progress: 8.43% complete, ETA 08:52:56
# Fork: 3 of 3
# Warmup Iteration   1: 175.984 ns/op
# Warmup Iteration   2: 183.140 ns/op
# Warmup Iteration   3: 195.470 ns/op
Iteration   1: 181.323 ns/op
Iteration   2: 122.284 ns/op
Iteration   3: 108.943 ns/op
Iteration   4: 112.270 ns/op
Iteration   5: 128.987 ns/op


Result "kotlin_benchmarks.array.fill.IdentityOpt.Ref_to_Ref_as_Ref_fillinst":
  153.164 ±(99.9%) 34.378 ns/op [Average]
  (min, avg, max) = (108.943, 153.164, 219.941), stdev = 32.157
  CI (99.9%): [118.786, 187.542] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.IdentityOpt.Ref_to_Ref_as_Ref_fillinst
# Parameters: (size = 1000000)

# Run progress: 8.46% complete, ETA 08:52:50
# Fork: 1 of 3
# Warmup Iteration   1: 28221666.667 ns/op
# Warmup Iteration   2: 6645972.309 ns/op
# Warmup Iteration   3: 3220611.155 ns/op
Iteration   1: 15918395.828 ns/op
Iteration   2: 54809122.789 ns/op
Iteration   3: 49504166.667 ns/op
Iteration   4: 58001837.944 ns/op
Iteration   5: 41519495.000 ns/op

# Run progress: 8.48% complete, ETA 08:52:44
# Fork: 2 of 3
# Warmup Iteration   1: 35562469.828 ns/op
# Warmup Iteration   2: 32835126.313 ns/op
# Warmup Iteration   3: 33128293.000 ns/op
Iteration   1: 44379547.087 ns/op
Iteration   2: 50556133.300 ns/op
Iteration   3: 46899007.545 ns/op
Iteration   4: 39141895.846 ns/op
Iteration   5: 28118584.500 ns/op

# Run progress: 8.50% complete, ETA 08:52:34
# Fork: 3 of 3
# Warmup Iteration   1: 5413807.570 ns/op
# Warmup Iteration   2: 4355184.267 ns/op
# Warmup Iteration   3: 2811847.610 ns/op
Iteration   1: 8543658.811 ns/op
Iteration   2: 48417545.667 ns/op
Iteration   3: 50522478.190 ns/op
Iteration   4: 66442987.000 ns/op
Iteration   5: 36310891.357 ns/op


Result "kotlin_benchmarks.array.fill.IdentityOpt.Ref_to_Ref_as_Ref_fillinst":
  42605716.502 ±(99.9%) 16458289.079 ns/op [Average]
  (min, avg, max) = (8543658.811, 42605716.502, 66442987.000), stdev = 15395093.817
  CI (99.9%): [26147427.424, 59064005.581] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline128int.Def_to_Ref_as_Ref_arrayfill
# Parameters: (size = 100)

# Run progress: 8.53% complete, ETA 08:52:27
# Fork: 1 of 3
# Warmup Iteration   1: 290.619 ns/op
# Warmup Iteration   2: 333.323 ns/op
# Warmup Iteration   3: 209.849 ns/op
Iteration   1: 326.054 ns/op
Iteration   2: 352.241 ns/op
Iteration   3: 326.820 ns/op
Iteration   4: 334.396 ns/op
Iteration   5: 348.161 ns/op

# Run progress: 8.55% complete, ETA 08:52:16
# Fork: 2 of 3
# Warmup Iteration   1: 823.355 ns/op
# Warmup Iteration   2: 599.430 ns/op
# Warmup Iteration   3: 339.574 ns/op
Iteration   1: 340.783 ns/op
Iteration   2: 337.598 ns/op
Iteration   3: 330.517 ns/op
Iteration   4: 361.130 ns/op
Iteration   5: 429.477 ns/op

# Run progress: 8.58% complete, ETA 08:52:12
# Fork: 3 of 3
# Warmup Iteration   1: 607.176 ns/op
# Warmup Iteration   2: 604.101 ns/op
# Warmup Iteration   3: 217.655 ns/op
Iteration   1: 211.128 ns/op
Iteration   2: 227.467 ns/op
Iteration   3: 294.903 ns/op
Iteration   4: 342.308 ns/op
Iteration   5: 327.879 ns/op


Result "kotlin_benchmarks.array.fill.Inline128int.Def_to_Ref_as_Ref_arrayfill":
  326.057 ±(99.9%) 55.482 ns/op [Average]
  (min, avg, max) = (211.128, 326.057, 429.477), stdev = 51.897
  CI (99.9%): [270.576, 381.539] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline128int.Def_to_Ref_as_Ref_arrayfill
# Parameters: (size = 1000000)

# Run progress: 8.60% complete, ETA 08:52:06
# Fork: 1 of 3
# Warmup Iteration   1: 10341481.724 ns/op
# Warmup Iteration   2: 34365025.000 ns/op
# Warmup Iteration   3: 56627219.889 ns/op
Iteration   1: 17121435.729 ns/op
Iteration   2: 26007580.225 ns/op
Iteration   3: 31487058.091 ns/op
Iteration   4: 52210866.700 ns/op
Iteration   5: 37615425.926 ns/op

# Run progress: 8.63% complete, ETA 08:52:05
# Fork: 2 of 3
# Warmup Iteration   1: 29109913.114 ns/op
# Warmup Iteration   2: 39144312.500 ns/op
# Warmup Iteration   3: 44434894.957 ns/op
Iteration   1: 47794056.818 ns/op
Iteration   2: 28533578.694 ns/op
Iteration   3: 18570615.741 ns/op
Iteration   4: 3874235.536 ns/op
Iteration   5: 4679896.606 ns/op

# Run progress: 8.65% complete, ETA 08:51:56
# Fork: 3 of 3
# Warmup Iteration   1: 12214656.138 ns/op
# Warmup Iteration   2: 46111962.136 ns/op
# Warmup Iteration   3: 20875977.041 ns/op
Iteration   1: 39117272.423 ns/op
Iteration   2: 32893180.097 ns/op
Iteration   3: 33906970.833 ns/op
Iteration   4: 30049013.471 ns/op
Iteration   5: 34539708.333 ns/op


Result "kotlin_benchmarks.array.fill.Inline128int.Def_to_Ref_as_Ref_arrayfill":
  29226726.348 ±(99.9%) 14643734.046 ns/op [Average]
  (min, avg, max) = (3874235.536, 29226726.348, 52210866.700), stdev = 13697757.914
  CI (99.9%): [14582992.302, 43870460.394] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline128int.Def_to_Ref_as_Ref_fill
# Parameters: (size = 100)

# Run progress: 8.68% complete, ETA 08:51:53
# Fork: 1 of 3
# Warmup Iteration   1: 819.300 ns/op
# Warmup Iteration   2: 919.744 ns/op
# Warmup Iteration   3: 1587.133 ns/op
Iteration   1: 1786.392 ns/op
Iteration   2: 2185.724 ns/op
Iteration   3: 1285.166 ns/op
Iteration   4: 1098.821 ns/op
Iteration   5: 1081.207 ns/op

# Run progress: 8.70% complete, ETA 08:51:43
# Fork: 2 of 3
# Warmup Iteration   1: 1355.853 ns/op
# Warmup Iteration   2: 1319.774 ns/op
# Warmup Iteration   3: 2284.295 ns/op
Iteration   1: 1262.487 ns/op
Iteration   2: 1170.895 ns/op
Iteration   3: 1146.683 ns/op
Iteration   4: 1224.032 ns/op
Iteration   5: 1171.434 ns/op

# Run progress: 8.73% complete, ETA 08:51:37
# Fork: 3 of 3
# Warmup Iteration   1: 1548.259 ns/op
# Warmup Iteration   2: 2277.594 ns/op
# Warmup Iteration   3: 1176.590 ns/op
Iteration   1: 2333.620 ns/op
Iteration   2: 1449.488 ns/op
Iteration   3: 1261.791 ns/op
Iteration   4: 1143.603 ns/op
Iteration   5: 1110.216 ns/op


Result "kotlin_benchmarks.array.fill.Inline128int.Def_to_Ref_as_Ref_fill":
  1380.771 ±(99.9%) 426.508 ns/op [Average]
  (min, avg, max) = (1081.207, 1380.771, 2333.620), stdev = 398.956
  CI (99.9%): [954.262, 1807.279] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline128int.Def_to_Ref_as_Ref_fill
# Parameters: (size = 1000000)

# Run progress: 8.75% complete, ETA 08:51:31
# Fork: 1 of 3
# Warmup Iteration   1: 18124369.054 ns/op
# Warmup Iteration   2: 28721849.556 ns/op
# Warmup Iteration   3: 33979483.333 ns/op
Iteration   1: 37243360.143 ns/op
Iteration   2: 6886591.034 ns/op
Iteration   3: 7648389.722 ns/op
Iteration   4: 7514546.607 ns/op
Iteration   5: 7527679.104 ns/op

# Run progress: 8.77% complete, ETA 08:51:27
# Fork: 2 of 3
# Warmup Iteration   1: 13389195.724 ns/op
# Warmup Iteration   2: 19047793.204 ns/op
# Warmup Iteration   3: 22944308.705 ns/op
Iteration   1: 16240302.078 ns/op
Iteration   2: 17129408.898 ns/op
Iteration   3: 13066194.974 ns/op
Iteration   4: 17058735.881 ns/op
Iteration   5: 15002475.500 ns/op

# Run progress: 8.80% complete, ETA 08:51:21
# Fork: 3 of 3
# Warmup Iteration   1: 16638939.213 ns/op
# Warmup Iteration   2: 25690732.275 ns/op
# Warmup Iteration   3: 32238536.469 ns/op
Iteration   1: 27815309.028 ns/op
Iteration   2: 9361494.602 ns/op
Iteration   3: 9190141.673 ns/op
Iteration   4: 9314121.945 ns/op
Iteration   5: 9225870.073 ns/op


Result "kotlin_benchmarks.array.fill.Inline128int.Def_to_Ref_as_Ref_fill":
  14014974.751 ±(99.9%) 9131617.910 ns/op [Average]
  (min, avg, max) = (6886591.034, 14014974.751, 37243360.143), stdev = 8541721.059
  CI (99.9%): [4883356.841, 23146592.660] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline128int.Def_to_Val_as_Val_arrayfill
# Parameters: (size = 100)

# Run progress: 8.82% complete, ETA 08:51:19
# Fork: 1 of 3
# Warmup Iteration   1: 575.238 ns/op
# Warmup Iteration   2: 689.065 ns/op
# Warmup Iteration   3: 350.323 ns/op
Iteration   1: 461.577 ns/op
Iteration   2: 539.835 ns/op
Iteration   3: 394.854 ns/op
Iteration   4: 337.335 ns/op
Iteration   5: 325.294 ns/op

# Run progress: 8.85% complete, ETA 08:51:11
# Fork: 2 of 3
# Warmup Iteration   1: 596.451 ns/op
# Warmup Iteration   2: 582.650 ns/op
# Warmup Iteration   3: 348.992 ns/op
Iteration   1: 365.534 ns/op
Iteration   2: 360.537 ns/op
Iteration   3: 368.608 ns/op
Iteration   4: 257.660 ns/op
Iteration   5: 212.173 ns/op

# Run progress: 8.87% complete, ETA 08:51:04
# Fork: 3 of 3
# Warmup Iteration   1: 467.459 ns/op
# Warmup Iteration   2: 634.498 ns/op
# Warmup Iteration   3: 389.743 ns/op
Iteration   1: 378.384 ns/op
Iteration   2: 375.068 ns/op
Iteration   3: 376.254 ns/op
Iteration   4: 377.480 ns/op
Iteration   5: 407.463 ns/op


Result "kotlin_benchmarks.array.fill.Inline128int.Def_to_Val_as_Val_arrayfill":
  369.204 ±(99.9%) 80.884 ns/op [Average]
  (min, avg, max) = (212.173, 369.204, 539.835), stdev = 75.659
  CI (99.9%): [288.320, 450.088] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline128int.Def_to_Val_as_Val_arrayfill
# Parameters: (size = 1000000)

# Run progress: 8.90% complete, ETA 08:50:54
# Fork: 1 of 3
# Warmup Iteration   1: 37695814.000 ns/op
# Warmup Iteration   2: 34727494.433 ns/op
# Warmup Iteration   3: 30042083.343 ns/op
Iteration   1: 23317112.419 ns/op
Iteration   2: 30640818.182 ns/op
Iteration   3: 30200966.912 ns/op
Iteration   4: 33833605.567 ns/op
Iteration   5: 31912015.625 ns/op

# Run progress: 8.92% complete, ETA 08:50:49
# Fork: 2 of 3
# Warmup Iteration   1: 3074665.781 ns/op
# Warmup Iteration   2: 3909686.531 ns/op
# Warmup Iteration   3: 4217989.063 ns/op
Iteration   1: 22241766.304 ns/op
Iteration   2: 30997101.000 ns/op
Iteration   3: 30715560.606 ns/op
Iteration   4: 40991221.154 ns/op
Iteration   5: 35587938.867 ns/op

# Run progress: 8.95% complete, ETA 08:50:45
# Fork: 3 of 3
# Warmup Iteration   1: 18246386.893 ns/op
# Warmup Iteration   2: 32651897.871 ns/op
# Warmup Iteration   3: 35752479.167 ns/op
Iteration   1: 28336934.676 ns/op
Iteration   2: 33620340.065 ns/op
Iteration   3: 30512316.909 ns/op
Iteration   4: 25659713.525 ns/op
Iteration   5: 9498450.935 ns/op


Result "kotlin_benchmarks.array.fill.Inline128int.Def_to_Val_as_Val_arrayfill":
  29204390.850 ±(99.9%) 7682504.989 ns/op [Average]
  (min, avg, max) = (9498450.935, 29204390.850, 40991221.154), stdev = 7186219.934
  CI (99.9%): [21521885.860, 36886895.839] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline128int.Def_to_Val_as_Val_fill
# Parameters: (size = 100)

# Run progress: 8.97% complete, ETA 08:50:37
# Fork: 1 of 3
# Warmup Iteration   1: 2317.185 ns/op
# Warmup Iteration   2: 1349.169 ns/op
# Warmup Iteration   3: 1563.957 ns/op
Iteration   1: 885.343 ns/op
Iteration   2: 896.030 ns/op
Iteration   3: 1097.865 ns/op
Iteration   4: 1025.556 ns/op
Iteration   5: 931.721 ns/op

# Run progress: 9.00% complete, ETA 08:50:33
# Fork: 2 of 3
# Warmup Iteration   1: 1375.563 ns/op
# Warmup Iteration   2: 940.334 ns/op
# Warmup Iteration   3: 785.004 ns/op
Iteration   1: 760.521 ns/op
Iteration   2: 815.197 ns/op
Iteration   3: 909.366 ns/op
Iteration   4: 1213.559 ns/op
Iteration   5: 1930.085 ns/op

# Run progress: 9.02% complete, ETA 08:50:26
# Fork: 3 of 3
# Warmup Iteration   1: 2033.635 ns/op
# Warmup Iteration   2: 1630.847 ns/op
# Warmup Iteration   3: 1331.512 ns/op
Iteration   1: 1337.588 ns/op
Iteration   2: 1184.667 ns/op
Iteration   3: 1181.908 ns/op
Iteration   4: 1303.531 ns/op
Iteration   5: 1175.072 ns/op


Result "kotlin_benchmarks.array.fill.Inline128int.Def_to_Val_as_Val_fill":
  1109.867 ±(99.9%) 309.330 ns/op [Average]
  (min, avg, max) = (760.521, 1109.867, 1930.085), stdev = 289.347
  CI (99.9%): [800.537, 1419.197] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline128int.Def_to_Val_as_Val_fill
# Parameters: (size = 1000000)

# Run progress: 9.04% complete, ETA 08:50:20
# Fork: 1 of 3
# Warmup Iteration   1: 28841972.629 ns/op
# Warmup Iteration   2: 23053098.477 ns/op
# Warmup Iteration   3: 24536955.293 ns/op
Iteration   1: 21575778.383 ns/op
Iteration   2: 6266192.807 ns/op
Iteration   3: 11119993.582 ns/op
Iteration   4: 13814567.014 ns/op
Iteration   5: 18337734.855 ns/op

# Run progress: 9.07% complete, ETA 08:50:16
# Fork: 2 of 3
# Warmup Iteration   1: 16185409.397 ns/op
# Warmup Iteration   2: 25047981.707 ns/op
# Warmup Iteration   3: 25708183.325 ns/op
Iteration   1: 9458039.720 ns/op
Iteration   2: 7616537.910 ns/op
Iteration   3: 7519387.659 ns/op
Iteration   4: 7504746.607 ns/op
Iteration   5: 7362508.754 ns/op

# Run progress: 9.09% complete, ETA 08:50:12
# Fork: 3 of 3
# Warmup Iteration   1: 12748844.275 ns/op
# Warmup Iteration   2: 9165147.523 ns/op
# Warmup Iteration   3: 6280053.826 ns/op
Iteration   1: 9359766.440 ns/op
Iteration   2: 13765733.452 ns/op
Iteration   3: 20452284.160 ns/op
Iteration   4: 13279216.000 ns/op
Iteration   5: 11305678.244 ns/op


Result "kotlin_benchmarks.array.fill.Inline128int.Def_to_Val_as_Val_fill":
  11915877.706 ±(99.9%) 5266946.586 ns/op [Average]
  (min, avg, max) = (6266192.807, 11915877.706, 21575778.383), stdev = 4926705.105
  CI (99.9%): [6648931.120, 17182824.292] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline128int.New_to_Ref_as_Ref_arrayfill
# Parameters: (size = 100)

# Run progress: 9.12% complete, ETA 08:50:07
# Fork: 1 of 3
# Warmup Iteration   1: 404.499 ns/op
# Warmup Iteration   2: 323.643 ns/op
# Warmup Iteration   3: 285.037 ns/op
Iteration   1: 224.819 ns/op
Iteration   2: 202.510 ns/op
Iteration   3: 214.996 ns/op
Iteration   4: 220.947 ns/op
Iteration   5: 240.985 ns/op

# Run progress: 9.14% complete, ETA 08:50:00
# Fork: 2 of 3
# Warmup Iteration   1: 251.912 ns/op
# Warmup Iteration   2: 257.841 ns/op
# Warmup Iteration   3: 280.042 ns/op
Iteration   1: 363.178 ns/op
Iteration   2: 362.406 ns/op
Iteration   3: 357.158 ns/op
Iteration   4: 365.932 ns/op
Iteration   5: 357.012 ns/op

# Run progress: 9.17% complete, ETA 08:49:50
# Fork: 3 of 3
# Warmup Iteration   1: 332.101 ns/op
# Warmup Iteration   2: 256.381 ns/op
# Warmup Iteration   3: 219.232 ns/op
Iteration   1: 218.799 ns/op
Iteration   2: 226.381 ns/op
Iteration   3: 229.138 ns/op
Iteration   4: 238.020 ns/op
Iteration   5: 225.959 ns/op


Result "kotlin_benchmarks.array.fill.Inline128int.New_to_Ref_as_Ref_arrayfill":
  269.883 ±(99.9%) 72.065 ns/op [Average]
  (min, avg, max) = (202.510, 269.883, 365.932), stdev = 67.410
  CI (99.9%): [197.817, 341.948] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline128int.New_to_Ref_as_Ref_arrayfill
# Parameters: (size = 1000000)

# Run progress: 9.19% complete, ETA 08:49:41
# Fork: 1 of 3
# Warmup Iteration   1: 33258546.875 ns/op
# Warmup Iteration   2: 24021896.833 ns/op
# Warmup Iteration   3: 34974576.138 ns/op
Iteration   1: 39078568.885 ns/op
Iteration   2: 11650057.471 ns/op
Iteration   3: 9491336.841 ns/op
Iteration   4: 34756223.600 ns/op
Iteration   5: 21633514.170 ns/op

# Run progress: 9.22% complete, ETA 08:49:34
# Fork: 2 of 3
# Warmup Iteration   1: 11510970.506 ns/op
# Warmup Iteration   2: 6567293.292 ns/op
# Warmup Iteration   3: 3607027.086 ns/op
Iteration   1: 13833395.824 ns/op
Iteration   2: 24054885.651 ns/op
Iteration   3: 31087535.364 ns/op
Iteration   4: 58005000.000 ns/op
Iteration   5: 33310060.484 ns/op

# Run progress: 9.24% complete, ETA 08:49:28
# Fork: 3 of 3
# Warmup Iteration   1: 20572687.918 ns/op
# Warmup Iteration   2: 20850405.396 ns/op
# Warmup Iteration   3: 28065788.270 ns/op
Iteration   1: 4471045.201 ns/op
Iteration   2: 2648412.631 ns/op
Iteration   3: 12864105.183 ns/op
Iteration   4: 31738280.303 ns/op
Iteration   5: 68839577.733 ns/op


Result "kotlin_benchmarks.array.fill.Inline128int.New_to_Ref_as_Ref_arrayfill":
  26497466.623 ±(99.9%) 20297040.557 ns/op [Average]
  (min, avg, max) = (2648412.631, 26497466.623, 68839577.733), stdev = 18985864.332
  CI (99.9%): [6200426.065, 46794507.180] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline128int.New_to_Ref_as_Ref_fill
# Parameters: (size = 100)

# Run progress: 9.26% complete, ETA 08:49:19
# Fork: 1 of 3
# Warmup Iteration   1: 431.054 ns/op
# Warmup Iteration   2: 384.331 ns/op
# Warmup Iteration   3: 472.638 ns/op
Iteration   1: 647.307 ns/op
Iteration   2: 634.778 ns/op
Iteration   3: 543.704 ns/op
Iteration   4: 554.649 ns/op
Iteration   5: 563.611 ns/op

# Run progress: 9.29% complete, ETA 08:49:09
# Fork: 2 of 3
# Warmup Iteration   1: 789.378 ns/op
# Warmup Iteration   2: 830.908 ns/op
# Warmup Iteration   3: 770.999 ns/op
Iteration   1: 889.706 ns/op
Iteration   2: 820.600 ns/op
Iteration   3: 782.851 ns/op
Iteration   4: 625.968 ns/op
Iteration   5: 684.833 ns/op

# Run progress: 9.31% complete, ETA 08:49:00
# Fork: 3 of 3
# Warmup Iteration   1: 617.076 ns/op
# Warmup Iteration   2: 502.461 ns/op
# Warmup Iteration   3: 615.322 ns/op
Iteration   1: 529.296 ns/op
Iteration   2: 460.027 ns/op
Iteration   3: 455.352 ns/op
Iteration   4: 654.130 ns/op
Iteration   5: 514.421 ns/op


Result "kotlin_benchmarks.array.fill.Inline128int.New_to_Ref_as_Ref_fill":
  624.082 ±(99.9%) 137.313 ns/op [Average]
  (min, avg, max) = (455.352, 624.082, 889.706), stdev = 128.443
  CI (99.9%): [486.769, 761.396] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline128int.New_to_Ref_as_Ref_fill
# Parameters: (size = 1000000)

# Run progress: 9.34% complete, ETA 08:48:51
# Fork: 1 of 3
# Warmup Iteration   1: 9834245.951 ns/op
# Warmup Iteration   2: 11778761.977 ns/op
# Warmup Iteration   3: 19562429.481 ns/op
Iteration   1: 15083644.284 ns/op
Iteration   2: 8063461.336 ns/op
Iteration   3: 10589554.821 ns/op
Iteration   4: 10011526.147 ns/op
Iteration   5: 6744087.248 ns/op

# Run progress: 9.36% complete, ETA 08:48:44
# Fork: 2 of 3
# Warmup Iteration   1: 11350169.011 ns/op
# Warmup Iteration   2: 8264932.377 ns/op
# Warmup Iteration   3: 10864426.415 ns/op
Iteration   1: 8301314.205 ns/op
Iteration   2: 6232816.099 ns/op
Iteration   3: 9128037.910 ns/op
Iteration   4: 7981914.370 ns/op
Iteration   5: 6392145.962 ns/op

# Run progress: 9.39% complete, ETA 08:48:37
# Fork: 3 of 3
# Warmup Iteration   1: 12664938.235 ns/op
# Warmup Iteration   2: 12389674.793 ns/op
# Warmup Iteration   3: 17598315.379 ns/op
Iteration   1: 17959602.679 ns/op
Iteration   2: 26532572.368 ns/op
Iteration   3: 20061794.160 ns/op
Iteration   4: 7468581.500 ns/op
Iteration   5: 11971070.094 ns/op


Result "kotlin_benchmarks.array.fill.Inline128int.New_to_Ref_as_Ref_fill":
  11501474.879 ±(99.9%) 6323788.584 ns/op [Average]
  (min, avg, max) = (6232816.099, 11501474.879, 26532572.368), stdev = 5915275.766
  CI (99.9%): [5177686.294, 17825263.463] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline128int.New_to_Val_as_Val_arrayfill
# Parameters: (size = 100)

# Run progress: 9.41% complete, ETA 08:48:35
# Fork: 1 of 3
# Warmup Iteration   1: 407.078 ns/op
# Warmup Iteration   2: 387.606 ns/op
# Warmup Iteration   3: 344.869 ns/op
Iteration   1: 361.095 ns/op
Iteration   2: 342.966 ns/op
Iteration   3: 359.362 ns/op
Iteration   4: 252.331 ns/op
Iteration   5: 247.714 ns/op

# Run progress: 9.44% complete, ETA 08:48:27
# Fork: 2 of 3
# Warmup Iteration   1: 410.243 ns/op
# Warmup Iteration   2: 388.574 ns/op
# Warmup Iteration   3: 367.903 ns/op
Iteration   1: 309.791 ns/op
Iteration   2: 243.962 ns/op
Iteration   3: 241.211 ns/op
Iteration   4: 202.853 ns/op
Iteration   5: 211.874 ns/op

# Run progress: 9.46% complete, ETA 08:48:19
# Fork: 3 of 3
# Warmup Iteration   1: 243.365 ns/op
# Warmup Iteration   2: 270.300 ns/op
# Warmup Iteration   3: 246.584 ns/op
Iteration   1: 238.675 ns/op
Iteration   2: 236.224 ns/op
Iteration   3: 265.093 ns/op
Iteration   4: 342.133 ns/op
Iteration   5: 353.493 ns/op


Result "kotlin_benchmarks.array.fill.Inline128int.New_to_Val_as_Val_arrayfill":
  280.585 ±(99.9%) 61.303 ns/op [Average]
  (min, avg, max) = (202.853, 280.585, 361.095), stdev = 57.342
  CI (99.9%): [219.283, 341.888] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline128int.New_to_Val_as_Val_arrayfill
# Parameters: (size = 1000000)

# Run progress: 9.49% complete, ETA 08:48:10
# Fork: 1 of 3
# Warmup Iteration   1: 41001405.000 ns/op
# Warmup Iteration   2: 57300486.111 ns/op
# Warmup Iteration   3: 32748286.636 ns/op
Iteration   1: 50686958.300 ns/op
Iteration   2: 41261353.320 ns/op
Iteration   3: 34077566.667 ns/op
Iteration   4: 29886533.088 ns/op
Iteration   5: 28970691.657 ns/op

# Run progress: 9.51% complete, ETA 08:48:08
# Fork: 2 of 3
# Warmup Iteration   1: 33824779.548 ns/op
# Warmup Iteration   2: 33525426.758 ns/op
# Warmup Iteration   3: 40221400.654 ns/op
Iteration   1: 40666791.680 ns/op
Iteration   2: 25764899.390 ns/op
Iteration   3: 25871059.846 ns/op
Iteration   4: 4975233.703 ns/op
Iteration   5: 3035302.679 ns/op

# Run progress: 9.53% complete, ETA 08:48:00
# Fork: 3 of 3
# Warmup Iteration   1: 51640327.100 ns/op
# Warmup Iteration   2: 13869611.301 ns/op
# Warmup Iteration   3: 11656355.616 ns/op
Iteration   1: 14628029.771 ns/op
Iteration   2: 8402611.458 ns/op
Iteration   3: 3720727.787 ns/op
Iteration   4: 8698088.000 ns/op
Iteration   5: 25969907.051 ns/op


Result "kotlin_benchmarks.array.fill.Inline128int.New_to_Val_as_Val_arrayfill":
  23107716.960 ±(99.9%) 16226621.640 ns/op [Average]
  (min, avg, max) = (3035302.679, 23107716.960, 50686958.300), stdev = 15178391.951
  CI (99.9%): [6881095.319, 39334338.600] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline128int.New_to_Val_as_Val_fill
# Parameters: (size = 100)

# Run progress: 9.56% complete, ETA 08:47:56
# Fork: 1 of 3
# Warmup Iteration   1: 1049.199 ns/op
# Warmup Iteration   2: 536.657 ns/op
# Warmup Iteration   3: 532.056 ns/op
Iteration   1: 627.562 ns/op
Iteration   2: 777.229 ns/op
Iteration   3: 942.481 ns/op
Iteration   4: 885.558 ns/op
Iteration   5: 697.382 ns/op

# Run progress: 9.58% complete, ETA 08:47:49
# Fork: 2 of 3
# Warmup Iteration   1: 977.695 ns/op
# Warmup Iteration   2: 756.520 ns/op
# Warmup Iteration   3: 751.096 ns/op
Iteration   1: 568.969 ns/op
Iteration   2: 494.451 ns/op
Iteration   3: 516.278 ns/op
Iteration   4: 556.684 ns/op
Iteration   5: 590.792 ns/op

# Run progress: 9.61% complete, ETA 08:47:42
# Fork: 3 of 3
# Warmup Iteration   1: 971.256 ns/op
# Warmup Iteration   2: 855.016 ns/op
# Warmup Iteration   3: 814.224 ns/op
Iteration   1: 765.630 ns/op
Iteration   2: 777.858 ns/op
Iteration   3: 875.567 ns/op
Iteration   4: 898.442 ns/op
Iteration   5: 867.267 ns/op


Result "kotlin_benchmarks.array.fill.Inline128int.New_to_Val_as_Val_fill":
  722.810 ±(99.9%) 164.340 ns/op [Average]
  (min, avg, max) = (494.451, 722.810, 942.481), stdev = 153.723
  CI (99.9%): [558.470, 887.150] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline128int.New_to_Val_as_Val_fill
# Parameters: (size = 1000000)

# Run progress: 9.63% complete, ETA 08:47:34
# Fork: 1 of 3
# Warmup Iteration   1: 13958670.096 ns/op
# Warmup Iteration   2: 9737865.779 ns/op
# Warmup Iteration   3: 15225786.621 ns/op
Iteration   1: 23342229.651 ns/op
Iteration   2: 18225305.054 ns/op
Iteration   3: 5382154.401 ns/op
Iteration   4: 6034101.190 ns/op
Iteration   5: 9940264.706 ns/op

# Run progress: 9.66% complete, ETA 08:47:31
# Fork: 2 of 3
# Warmup Iteration   1: 14699765.710 ns/op
# Warmup Iteration   2: 10874689.713 ns/op
# Warmup Iteration   3: 16940207.650 ns/op
Iteration   1: 19958714.863 ns/op
Iteration   2: 31877653.656 ns/op
Iteration   3: 34652272.233 ns/op
Iteration   4: 16805242.367 ns/op
Iteration   5: 12326024.390 ns/op

# Run progress: 9.68% complete, ETA 08:47:28
# Fork: 3 of 3
# Warmup Iteration   1: 16395196.903 ns/op
# Warmup Iteration   2: 10225772.727 ns/op
# Warmup Iteration   3: 16065476.190 ns/op
Iteration   1: 14445704.225 ns/op
Iteration   2: 21009719.388 ns/op
Iteration   3: 8667268.672 ns/op
Iteration   4: 10176117.920 ns/op
Iteration   5: 9997105.614 ns/op


Result "kotlin_benchmarks.array.fill.Inline128int.New_to_Val_as_Val_fill":
  16189325.222 ±(99.9%) 9425074.098 ns/op [Average]
  (min, avg, max) = (5382154.401, 16189325.222, 34652272.233), stdev = 8816220.160
  CI (99.9%): [6764251.124, 25614399.320] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline128int.Ref_to_Ref_as_Ref_arrayfillinst
# Parameters: (size = 100)

# Run progress: 9.71% complete, ETA 08:47:24
# Fork: 1 of 3
# Warmup Iteration   1: 237.310 ns/op
# Warmup Iteration   2: 244.700 ns/op
# Warmup Iteration   3: 291.527 ns/op
Iteration   1: 298.922 ns/op
Iteration   2: 309.899 ns/op
Iteration   3: 324.081 ns/op
Iteration   4: 284.191 ns/op
Iteration   5: 262.677 ns/op

# Run progress: 9.73% complete, ETA 08:47:16
# Fork: 2 of 3
# Warmup Iteration   1: 214.430 ns/op
# Warmup Iteration   2: 194.595 ns/op
# Warmup Iteration   3: 205.543 ns/op
Iteration   1: 222.374 ns/op
Iteration   2: 210.490 ns/op
Iteration   3: 214.432 ns/op
Iteration   4: 218.709 ns/op
Iteration   5: 216.096 ns/op

# Run progress: 9.75% complete, ETA 08:47:07
# Fork: 3 of 3
# Warmup Iteration   1: 217.214 ns/op
# Warmup Iteration   2: 299.136 ns/op
# Warmup Iteration   3: 310.379 ns/op
Iteration   1: 356.861 ns/op
Iteration   2: 297.495 ns/op
Iteration   3: 318.076 ns/op
Iteration   4: 320.050 ns/op
Iteration   5: 279.837 ns/op


Result "kotlin_benchmarks.array.fill.Inline128int.Ref_to_Ref_as_Ref_arrayfillinst":
  275.613 ±(99.9%) 51.733 ns/op [Average]
  (min, avg, max) = (210.490, 275.613, 356.861), stdev = 48.391
  CI (99.9%): [223.880, 327.345] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline128int.Ref_to_Ref_as_Ref_arrayfillinst
# Parameters: (size = 1000000)

# Run progress: 9.78% complete, ETA 08:46:57
# Fork: 1 of 3
# Warmup Iteration   1: 56892234.632 ns/op
# Warmup Iteration   2: 38866665.038 ns/op
# Warmup Iteration   3: 38896035.519 ns/op
Iteration   1: 32736106.194 ns/op
Iteration   2: 33961512.500 ns/op
Iteration   3: 35097234.172 ns/op
Iteration   4: 55098596.474 ns/op
Iteration   5: 48396882.905 ns/op

# Run progress: 9.80% complete, ETA 08:46:50
# Fork: 2 of 3
# Warmup Iteration   1: 27133750.000 ns/op
# Warmup Iteration   2: 25301840.625 ns/op
# Warmup Iteration   3: 3897975.000 ns/op
Iteration   1: 5350996.032 ns/op
Iteration   2: 4019257.637 ns/op
Iteration   3: 6092168.168 ns/op
Iteration   4: 6197975.056 ns/op
Iteration   5: 7444715.074 ns/op

# Run progress: 9.83% complete, ETA 08:46:41
# Fork: 3 of 3
# Warmup Iteration   1: 4571039.036 ns/op
# Warmup Iteration   2: 5170214.103 ns/op
# Warmup Iteration   3: 5675013.655 ns/op
Iteration   1: 3980754.447 ns/op
Iteration   2: 12939762.127 ns/op
Iteration   3: 67595158.333 ns/op
Iteration   4: 37138529.296 ns/op
Iteration   5: 18990317.130 ns/op


Result "kotlin_benchmarks.array.fill.Inline128int.Ref_to_Ref_as_Ref_arrayfillinst":
  25002664.370 ±(99.9%) 22362834.334 ns/op [Average]
  (min, avg, max) = (3980754.447, 25002664.370, 67595158.333), stdev = 20918209.113
  CI (99.9%): [2639830.035, 47365498.704] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline128int.Ref_to_Ref_as_Ref_arrayfillstat
# Parameters: (size = 100)

# Run progress: 9.85% complete, ETA 08:46:36
# Fork: 1 of 3
# Warmup Iteration   1: 318.018 ns/op
# Warmup Iteration   2: 266.734 ns/op
# Warmup Iteration   3: 337.600 ns/op
Iteration   1: 329.970 ns/op
Iteration   2: 319.752 ns/op
Iteration   3: 290.261 ns/op
Iteration   4: 226.534 ns/op
Iteration   5: 221.872 ns/op

# Run progress: 9.88% complete, ETA 08:46:26
# Fork: 2 of 3
# Warmup Iteration   1: 223.830 ns/op
# Warmup Iteration   2: 258.133 ns/op
# Warmup Iteration   3: 246.588 ns/op
Iteration   1: 221.345 ns/op
Iteration   2: 222.468 ns/op
Iteration   3: 220.410 ns/op
Iteration   4: 295.087 ns/op
Iteration   5: 305.308 ns/op

# Run progress: 9.90% complete, ETA 08:46:16
# Fork: 3 of 3
# Warmup Iteration   1: 380.815 ns/op
# Warmup Iteration   2: 310.246 ns/op
# Warmup Iteration   3: 316.296 ns/op
Iteration   1: 287.879 ns/op
Iteration   2: 257.852 ns/op
Iteration   3: 235.431 ns/op
Iteration   4: 219.902 ns/op
Iteration   5: 210.513 ns/op


Result "kotlin_benchmarks.array.fill.Inline128int.Ref_to_Ref_as_Ref_arrayfillstat":
  257.639 ±(99.9%) 45.238 ns/op [Average]
  (min, avg, max) = (210.513, 257.639, 329.970), stdev = 42.315
  CI (99.9%): [212.401, 302.877] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline128int.Ref_to_Ref_as_Ref_arrayfillstat
# Parameters: (size = 1000000)

# Run progress: 9.93% complete, ETA 08:46:11
# Fork: 1 of 3
# Warmup Iteration   1: 32794868.290 ns/op
# Warmup Iteration   2: 64460356.813 ns/op
# Warmup Iteration   3: 48582212.333 ns/op
Iteration   1: 41740326.640 ns/op
Iteration   2: 30634921.727 ns/op
Iteration   3: 28951097.600 ns/op
Iteration   4: 31188279.030 ns/op
Iteration   5: 3779036.534 ns/op

# Run progress: 9.95% complete, ETA 08:46:03
# Fork: 2 of 3
# Warmup Iteration   1: 3923133.687 ns/op
# Warmup Iteration   2: 10398278.750 ns/op
# Warmup Iteration   3: 50510266.650 ns/op
Iteration   1: 44754954.739 ns/op
Iteration   2: 55139028.526 ns/op
Iteration   3: 49372458.333 ns/op
Iteration   4: 35632408.034 ns/op
Iteration   5: 34323320.833 ns/op

# Run progress: 9.98% complete, ETA 08:46:02
# Fork: 3 of 3
# Warmup Iteration   1: 35706892.241 ns/op
# Warmup Iteration   2: 51934783.714 ns/op
# Warmup Iteration   3: 51664429.200 ns/op
Iteration   1: 36807561.000 ns/op
Iteration   2: 40778133.320 ns/op
Iteration   3: 6084117.679 ns/op
Iteration   4: 3032241.443 ns/op
Iteration   5: 3680475.760 ns/op


Result "kotlin_benchmarks.array.fill.Inline128int.Ref_to_Ref_as_Ref_arrayfillstat":
  29726557.413 ±(99.9%) 18641926.494 ns/op [Average]
  (min, avg, max) = (3032241.443, 29726557.413, 55139028.526), stdev = 17437669.611
  CI (99.9%): [11084630.919, 48368483.908] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline128int.Ref_to_Ref_as_Ref_fillinst
# Parameters: (size = 100)

# Run progress: 10.00% complete, ETA 08:45:54
# Fork: 1 of 3
# Warmup Iteration   1: 345.553 ns/op
# Warmup Iteration   2: 318.304 ns/op
# Warmup Iteration   3: 307.226 ns/op
Iteration   1: 308.300 ns/op
Iteration   2: 346.341 ns/op
Iteration   3: 324.194 ns/op
Iteration   4: 356.925 ns/op
Iteration   5: 304.218 ns/op

# Run progress: 10.02% complete, ETA 08:45:47
# Fork: 2 of 3
# Warmup Iteration   1: 334.617 ns/op
# Warmup Iteration   2: 234.950 ns/op
# Warmup Iteration   3: 251.457 ns/op
Iteration   1: 324.079 ns/op
Iteration   2: 322.818 ns/op
Iteration   3: 272.559 ns/op
Iteration   4: 405.473 ns/op
Iteration   5: 364.355 ns/op

# Run progress: 10.05% complete, ETA 08:45:39
# Fork: 3 of 3
# Warmup Iteration   1: 350.718 ns/op
# Warmup Iteration   2: 279.137 ns/op
# Warmup Iteration   3: 235.986 ns/op
Iteration   1: 227.395 ns/op
Iteration   2: 237.436 ns/op
Iteration   3: 246.928 ns/op
Iteration   4: 269.085 ns/op
Iteration   5: 254.653 ns/op


Result "kotlin_benchmarks.array.fill.Inline128int.Ref_to_Ref_as_Ref_fillinst":
  304.317 ±(99.9%) 55.634 ns/op [Average]
  (min, avg, max) = (227.395, 304.317, 405.473), stdev = 52.040
  CI (99.9%): [248.683, 359.951] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline128int.Ref_to_Ref_as_Ref_fillinst
# Parameters: (size = 1000000)

# Run progress: 10.07% complete, ETA 08:45:30
# Fork: 1 of 3
# Warmup Iteration   1: 28499619.222 ns/op
# Warmup Iteration   2: 37054339.286 ns/op
# Warmup Iteration   3: 34686608.333 ns/op
Iteration   1: 10654883.768 ns/op
Iteration   2: 6218764.482 ns/op
Iteration   3: 19221301.704 ns/op
Iteration   4: 50851729.150 ns/op
Iteration   5: 31373257.576 ns/op

# Run progress: 10.10% complete, ETA 08:45:23
# Fork: 2 of 3
# Warmup Iteration   1: 46612490.545 ns/op
# Warmup Iteration   2: 43597293.375 ns/op
# Warmup Iteration   3: 36580129.310 ns/op
Iteration   1: 36718427.071 ns/op
Iteration   2: 32884733.871 ns/op
Iteration   3: 27730230.865 ns/op
Iteration   4: 43619260.417 ns/op
Iteration   5: 42156357.625 ns/op

# Run progress: 10.12% complete, ETA 08:45:16
# Fork: 3 of 3
# Warmup Iteration   1: 23850886.628 ns/op
# Warmup Iteration   2: 11889156.871 ns/op
# Warmup Iteration   3: 5688942.797 ns/op
Iteration   1: 5349392.763 ns/op
Iteration   2: 7818147.388 ns/op
Iteration   3: 65136682.313 ns/op
Iteration   4: 36174388.393 ns/op
Iteration   5: 12820680.899 ns/op


Result "kotlin_benchmarks.array.fill.Inline128int.Ref_to_Ref_as_Ref_fillinst":
  28581882.552 ±(99.9%) 19213103.420 ns/op [Average]
  (min, avg, max) = (5349392.763, 28581882.552, 65136682.313), stdev = 17971948.861
  CI (99.9%): [9368779.132, 47794985.972] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline128int.Ref_to_Ref_as_Ref_fillstat
# Parameters: (size = 100)

# Run progress: 10.15% complete, ETA 08:45:08
# Fork: 1 of 3
# Warmup Iteration   1: 266.722 ns/op
# Warmup Iteration   2: 322.821 ns/op
# Warmup Iteration   3: 318.363 ns/op
Iteration   1: 314.941 ns/op
Iteration   2: 319.549 ns/op
Iteration   3: 314.022 ns/op
Iteration   4: 285.327 ns/op
Iteration   5: 221.085 ns/op

# Run progress: 10.17% complete, ETA 08:45:01
# Fork: 2 of 3
# Warmup Iteration   1: 283.500 ns/op
# Warmup Iteration   2: 324.716 ns/op
# Warmup Iteration   3: 374.496 ns/op
Iteration   1: 337.674 ns/op
Iteration   2: 287.231 ns/op
Iteration   3: 260.062 ns/op
Iteration   4: 228.035 ns/op
Iteration   5: 192.689 ns/op

# Run progress: 10.20% complete, ETA 08:44:52
# Fork: 3 of 3
# Warmup Iteration   1: 195.451 ns/op
# Warmup Iteration   2: 211.664 ns/op
# Warmup Iteration   3: 223.588 ns/op
Iteration   1: 227.931 ns/op
Iteration   2: 210.051 ns/op
Iteration   3: 192.182 ns/op
Iteration   4: 219.900 ns/op
Iteration   5: 285.178 ns/op


Result "kotlin_benchmarks.array.fill.Inline128int.Ref_to_Ref_as_Ref_fillstat":
  259.724 ±(99.9%) 52.939 ns/op [Average]
  (min, avg, max) = (192.182, 259.724, 337.674), stdev = 49.519
  CI (99.9%): [206.785, 312.662] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline128int.Ref_to_Ref_as_Ref_fillstat
# Parameters: (size = 1000000)

# Run progress: 10.22% complete, ETA 08:44:42
# Fork: 1 of 3
# Warmup Iteration   1: 5477204.281 ns/op
# Warmup Iteration   2: 7051020.257 ns/op
# Warmup Iteration   3: 27881509.250 ns/op
Iteration   1: 53505842.105 ns/op
Iteration   2: 29644057.618 ns/op
Iteration   3: 31868242.188 ns/op
Iteration   4: 35473343.067 ns/op
Iteration   5: 37688811.704 ns/op

# Run progress: 10.25% complete, ETA 08:44:39
# Fork: 2 of 3
# Warmup Iteration   1: 30460069.455 ns/op
# Warmup Iteration   2: 26056558.769 ns/op
# Warmup Iteration   3: 30093219.057 ns/op
Iteration   1: 34555979.897 ns/op
Iteration   2: 37717358.037 ns/op
Iteration   3: 40986063.360 ns/op
Iteration   4: 26614821.590 ns/op
Iteration   5: 19746637.019 ns/op

# Run progress: 10.27% complete, ETA 08:44:30
# Fork: 3 of 3
# Warmup Iteration   1: 4051010.664 ns/op
# Warmup Iteration   2: 6035662.302 ns/op
# Warmup Iteration   3: 32604758.065 ns/op
Iteration   1: 5911574.561 ns/op
Iteration   2: 7802618.543 ns/op
Iteration   3: 6931214.041 ns/op
Iteration   4: 7704216.603 ns/op
Iteration   5: 5176760.256 ns/op


Result "kotlin_benchmarks.array.fill.Inline128int.Ref_to_Ref_as_Ref_fillstat":
  25421836.039 ±(99.9%) 16578720.266 ns/op [Average]
  (min, avg, max) = (5176760.256, 25421836.039, 53505842.105), stdev = 15507745.224
  CI (99.9%): [8843115.773, 42000556.305] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline128int.Ref_to_Val_as_Val_arrayfillinst
# Parameters: (size = 100)

# Run progress: 10.29% complete, ETA 08:44:27
# Fork: 1 of 3
# Warmup Iteration   1: 289.856 ns/op
# Warmup Iteration   2: 297.896 ns/op
# Warmup Iteration   3: 227.164 ns/op
Iteration   1: 218.348 ns/op
Iteration   2: 208.091 ns/op
Iteration   3: 283.800 ns/op
Iteration   4: 325.821 ns/op
Iteration   5: 310.667 ns/op

# Run progress: 10.32% complete, ETA 08:44:20
# Fork: 2 of 3
# Warmup Iteration   1: 312.335 ns/op
# Warmup Iteration   2: 317.421 ns/op
# Warmup Iteration   3: 282.689 ns/op
Iteration   1: 254.867 ns/op
Iteration   2: 205.647 ns/op
Iteration   3: 194.112 ns/op
Iteration   4: 194.499 ns/op
Iteration   5: 210.075 ns/op

# Run progress: 10.34% complete, ETA 08:44:13
# Fork: 3 of 3
# Warmup Iteration   1: 237.342 ns/op
# Warmup Iteration   2: 227.023 ns/op
# Warmup Iteration   3: 225.847 ns/op
Iteration   1: 213.984 ns/op
Iteration   2: 246.244 ns/op
Iteration   3: 318.869 ns/op
Iteration   4: 365.480 ns/op
Iteration   5: 343.449 ns/op


Result "kotlin_benchmarks.array.fill.Inline128int.Ref_to_Val_as_Val_arrayfillinst":
  259.597 ±(99.9%) 63.799 ns/op [Average]
  (min, avg, max) = (194.112, 259.597, 365.480), stdev = 59.678
  CI (99.9%): [195.798, 323.396] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline128int.Ref_to_Val_as_Val_arrayfillinst
# Parameters: (size = 1000000)

# Run progress: 10.37% complete, ETA 08:44:04
# Fork: 1 of 3
# Warmup Iteration   1: 29500153.571 ns/op
# Warmup Iteration   2: 30329506.118 ns/op
# Warmup Iteration   3: 45165532.609 ns/op
Iteration   1: 34719411.100 ns/op
Iteration   2: 30750655.303 ns/op
Iteration   3: 30503175.265 ns/op
Iteration   4: 36638714.069 ns/op
Iteration   5: 28879626.171 ns/op

# Run progress: 10.39% complete, ETA 08:44:01
# Fork: 2 of 3
# Warmup Iteration   1: 33441125.000 ns/op
# Warmup Iteration   2: 34682387.500 ns/op
# Warmup Iteration   3: 38865429.000 ns/op
Iteration   1: 29058959.472 ns/op
Iteration   2: 31273689.394 ns/op
Iteration   3: 3813117.611 ns/op
Iteration   4: 4257838.958 ns/op
Iteration   5: 7050939.366 ns/op

# Run progress: 10.42% complete, ETA 08:43:52
# Fork: 3 of 3
# Warmup Iteration   1: 8917974.412 ns/op
# Warmup Iteration   2: 13928884.581 ns/op
# Warmup Iteration   3: 8852760.504 ns/op
Iteration   1: 7921624.672 ns/op
Iteration   2: 12382765.060 ns/op
Iteration   3: 13343290.584 ns/op
Iteration   4: 36740818.464 ns/op
Iteration   5: 30107082.088 ns/op


Result "kotlin_benchmarks.array.fill.Inline128int.Ref_to_Val_as_Val_arrayfillinst":
  22496113.839 ±(99.9%) 13468495.233 ns/op [Average]
  (min, avg, max) = (3813117.611, 22496113.839, 36740818.464), stdev = 12598438.798
  CI (99.9%): [9027618.606, 35964609.071] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline128int.Ref_to_Val_as_Val_arrayfillstat
# Parameters: (size = 100)

# Run progress: 10.44% complete, ETA 08:43:47
# Fork: 1 of 3
# Warmup Iteration   1: 166.333 ns/op
# Warmup Iteration   2: 169.671 ns/op
# Warmup Iteration   3: 196.380 ns/op
Iteration   1: 289.252 ns/op
Iteration   2: 319.764 ns/op
Iteration   3: 458.674 ns/op
Iteration   4: 320.146 ns/op
Iteration   5: 322.450 ns/op

# Run progress: 10.47% complete, ETA 08:43:36
# Fork: 2 of 3
# Warmup Iteration   1: 323.304 ns/op
# Warmup Iteration   2: 306.307 ns/op
# Warmup Iteration   3: 237.401 ns/op
Iteration   1: 194.709 ns/op
Iteration   2: 192.168 ns/op
Iteration   3: 192.025 ns/op
Iteration   4: 212.670 ns/op
Iteration   5: 225.608 ns/op

# Run progress: 10.49% complete, ETA 08:43:28
# Fork: 3 of 3
# Warmup Iteration   1: 318.866 ns/op
# Warmup Iteration   2: 303.270 ns/op
# Warmup Iteration   3: 310.360 ns/op
Iteration   1: 295.756 ns/op
Iteration   2: 322.183 ns/op
Iteration   3: 324.572 ns/op
Iteration   4: 295.809 ns/op
Iteration   5: 282.627 ns/op


Result "kotlin_benchmarks.array.fill.Inline128int.Ref_to_Val_as_Val_arrayfillstat":
  283.228 ±(99.9%) 76.314 ns/op [Average]
  (min, avg, max) = (192.025, 283.228, 458.674), stdev = 71.384
  CI (99.9%): [206.913, 359.542] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline128int.Ref_to_Val_as_Val_arrayfillstat
# Parameters: (size = 1000000)

# Run progress: 10.51% complete, ETA 08:43:19
# Fork: 1 of 3
# Warmup Iteration   1: 5700303.672 ns/op
# Warmup Iteration   2: 14093592.014 ns/op
# Warmup Iteration   3: 14039061.644 ns/op
Iteration   1: 12040961.310 ns/op
Iteration   2: 8789811.957 ns/op
Iteration   3: 8349919.374 ns/op
Iteration   4: 32080069.424 ns/op
Iteration   5: 36933913.679 ns/op

# Run progress: 10.54% complete, ETA 08:43:14
# Fork: 2 of 3
# Warmup Iteration   1: 24729548.780 ns/op
# Warmup Iteration   2: 16550768.443 ns/op
# Warmup Iteration   3: 18834700.630 ns/op
Iteration   1: 41200693.320 ns/op
Iteration   2: 33888973.600 ns/op
Iteration   3: 24678284.561 ns/op
Iteration   4: 34498181.933 ns/op
Iteration   5: 51101884.905 ns/op

# Run progress: 10.56% complete, ETA 08:43:05
# Fork: 3 of 3
# Warmup Iteration   1: 35419287.500 ns/op
# Warmup Iteration   2: 32944916.645 ns/op
# Warmup Iteration   3: 31774473.485 ns/op
Iteration   1: 29923546.429 ns/op
Iteration   2: 30508804.303 ns/op
Iteration   3: 27636474.081 ns/op
Iteration   4: 28689063.054 ns/op
Iteration   5: 36480940.500 ns/op


Result "kotlin_benchmarks.array.fill.Inline128int.Ref_to_Val_as_Val_arrayfillstat":
  29120101.495 ±(99.9%) 12668363.225 ns/op [Average]
  (min, avg, max) = (8349919.374, 29120101.495, 51101884.905), stdev = 11849994.822
  CI (99.9%): [16451738.270, 41788464.720] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline128int.Ref_to_Val_as_Val_fillinst
# Parameters: (size = 100)

# Run progress: 10.59% complete, ETA 08:42:57
# Fork: 1 of 3
# Warmup Iteration   1: 210.976 ns/op
# Warmup Iteration   2: 381.906 ns/op
# Warmup Iteration   3: 322.852 ns/op
Iteration   1: 346.654 ns/op
Iteration   2: 357.710 ns/op
Iteration   3: 263.060 ns/op
Iteration   4: 239.516 ns/op
Iteration   5: 208.027 ns/op

# Run progress: 10.61% complete, ETA 08:42:46
# Fork: 2 of 3
# Warmup Iteration   1: 197.570 ns/op
# Warmup Iteration   2: 206.978 ns/op
# Warmup Iteration   3: 219.387 ns/op
Iteration   1: 223.599 ns/op
Iteration   2: 242.221 ns/op
Iteration   3: 257.442 ns/op
Iteration   4: 237.065 ns/op
Iteration   5: 249.230 ns/op

# Run progress: 10.64% complete, ETA 08:42:36
# Fork: 3 of 3
# Warmup Iteration   1: 355.316 ns/op
# Warmup Iteration   2: 392.037 ns/op
# Warmup Iteration   3: 434.426 ns/op
Iteration   1: 323.435 ns/op
Iteration   2: 317.457 ns/op
Iteration   3: 304.073 ns/op
Iteration   4: 312.169 ns/op
Iteration   5: 315.552 ns/op


Result "kotlin_benchmarks.array.fill.Inline128int.Ref_to_Val_as_Val_fillinst":
  279.814 ±(99.9%) 50.841 ns/op [Average]
  (min, avg, max) = (208.027, 279.814, 357.710), stdev = 47.556
  CI (99.9%): [228.973, 330.655] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline128int.Ref_to_Val_as_Val_fillinst
# Parameters: (size = 1000000)

# Run progress: 10.66% complete, ETA 08:42:28
# Fork: 1 of 3
# Warmup Iteration   1: 16597256.603 ns/op
# Warmup Iteration   2: 50599583.350 ns/op
# Warmup Iteration   3: 44650772.583 ns/op
Iteration   1: 29341123.800 ns/op
Iteration   2: 22249711.957 ns/op
Iteration   3: 27488592.324 ns/op
Iteration   4: 14947723.881 ns/op
Iteration   5: 15258352.273 ns/op

# Run progress: 10.69% complete, ETA 08:42:23
# Fork: 2 of 3
# Warmup Iteration   1: 3842599.617 ns/op
# Warmup Iteration   2: 10587358.330 ns/op
# Warmup Iteration   3: 29481975.216 ns/op
Iteration   1: 43868177.083 ns/op
Iteration   2: 36173432.448 ns/op
Iteration   3: 33767004.167 ns/op
Iteration   4: 33896455.645 ns/op
Iteration   5: 38030395.857 ns/op

# Run progress: 10.71% complete, ETA 08:42:20
# Fork: 3 of 3
# Warmup Iteration   1: 33276923.387 ns/op
# Warmup Iteration   2: 27435807.432 ns/op
# Warmup Iteration   3: 26854885.692 ns/op
Iteration   1: 23802215.116 ns/op
Iteration   2: 22480168.511 ns/op
Iteration   3: 24294801.372 ns/op
Iteration   4: 7174947.621 ns/op
Iteration   5: 4416894.658 ns/op


Result "kotlin_benchmarks.array.fill.Inline128int.Ref_to_Val_as_Val_fillinst":
  25145999.781 ±(99.9%) 12069910.590 ns/op [Average]
  (min, avg, max) = (4416894.658, 25145999.781, 43868177.083), stdev = 11290201.856
  CI (99.9%): [13076089.191, 37215910.371] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline128int.Ref_to_Val_as_Val_fillstat
# Parameters: (size = 100)

# Run progress: 10.74% complete, ETA 08:42:12
# Fork: 1 of 3
# Warmup Iteration   1: 271.076 ns/op
# Warmup Iteration   2: 312.275 ns/op
# Warmup Iteration   3: 306.073 ns/op
Iteration   1: 303.431 ns/op
Iteration   2: 307.401 ns/op
Iteration   3: 306.044 ns/op
Iteration   4: 315.314 ns/op
Iteration   5: 245.690 ns/op

# Run progress: 10.76% complete, ETA 08:42:05
# Fork: 2 of 3
# Warmup Iteration   1: 173.993 ns/op
# Warmup Iteration   2: 170.494 ns/op
# Warmup Iteration   3: 196.235 ns/op
Iteration   1: 265.020 ns/op
Iteration   2: 327.313 ns/op
Iteration   3: 363.092 ns/op
Iteration   4: 306.081 ns/op
Iteration   5: 282.091 ns/op

# Run progress: 10.78% complete, ETA 08:41:55
# Fork: 3 of 3
# Warmup Iteration   1: 230.628 ns/op
# Warmup Iteration   2: 227.847 ns/op
# Warmup Iteration   3: 220.275 ns/op
Iteration   1: 240.842 ns/op
Iteration   2: 221.276 ns/op
Iteration   3: 193.059 ns/op
Iteration   4: 191.358 ns/op
Iteration   5: 195.083 ns/op


Result "kotlin_benchmarks.array.fill.Inline128int.Ref_to_Val_as_Val_fillstat":
  270.873 ±(99.9%) 57.722 ns/op [Average]
  (min, avg, max) = (191.358, 270.873, 363.092), stdev = 53.993
  CI (99.9%): [213.151, 328.595] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline128int.Ref_to_Val_as_Val_fillstat
# Parameters: (size = 1000000)

# Run progress: 10.81% complete, ETA 08:41:46
# Fork: 1 of 3
# Warmup Iteration   1: 40297068.320 ns/op
# Warmup Iteration   2: 28081202.556 ns/op
# Warmup Iteration   3: 18585042.426 ns/op
Iteration   1: 13914695.000 ns/op
Iteration   2: 4319641.703 ns/op
Iteration   3: 3215574.546 ns/op
Iteration   4: 13624594.041 ns/op
Iteration   5: 53403063.579 ns/op

# Run progress: 10.83% complete, ETA 08:41:39
# Fork: 2 of 3
# Warmup Iteration   1: 38688807.111 ns/op
# Warmup Iteration   2: 26024263.897 ns/op
# Warmup Iteration   3: 28177657.389 ns/op
Iteration   1: 28044710.639 ns/op
Iteration   2: 31101792.939 ns/op
Iteration   3: 37818001.464 ns/op
Iteration   4: 40990971.154 ns/op
Iteration   5: 34914284.483 ns/op

# Run progress: 10.86% complete, ETA 08:41:31
# Fork: 3 of 3
# Warmup Iteration   1: 35508610.621 ns/op
# Warmup Iteration   2: 17467447.569 ns/op
# Warmup Iteration   3: 27312049.541 ns/op
Iteration   1: 3369115.940 ns/op
Iteration   2: 3370521.178 ns/op
Iteration   3: 17292591.948 ns/op
Iteration   4: 34948588.900 ns/op
Iteration   5: 63758151.000 ns/op


Result "kotlin_benchmarks.array.fill.Inline128int.Ref_to_Val_as_Val_fillstat":
  25605753.234 ±(99.9%) 20438084.143 ns/op [Average]
  (min, avg, max) = (3215574.546, 25605753.234, 63758151.000), stdev = 19117796.590
  CI (99.9%): [5167669.091, 46043837.377] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline128int.Val_to_Ref_as_Ref_arrayfillinst
# Parameters: (size = 100)

# Run progress: 10.88% complete, ETA 08:41:21
# Fork: 1 of 3
# Warmup Iteration   1: 144.157 ns/op
# Warmup Iteration   2: 154.599 ns/op
# Warmup Iteration   3: 179.864 ns/op
Iteration   1: 277.117 ns/op
Iteration   2: 260.995 ns/op
Iteration   3: 285.536 ns/op
Iteration   4: 270.914 ns/op
Iteration   5: 290.690 ns/op

# Run progress: 10.91% complete, ETA 08:41:11
# Fork: 2 of 3
# Warmup Iteration   1: 388.571 ns/op
# Warmup Iteration   2: 274.652 ns/op
# Warmup Iteration   3: 309.000 ns/op
Iteration   1: 318.719 ns/op
Iteration   2: 320.974 ns/op
Iteration   3: 279.836 ns/op
Iteration   4: 274.695 ns/op
Iteration   5: 288.870 ns/op

# Run progress: 10.93% complete, ETA 08:41:04
# Fork: 3 of 3
# Warmup Iteration   1: 238.381 ns/op
# Warmup Iteration   2: 231.647 ns/op
# Warmup Iteration   3: 220.353 ns/op
Iteration   1: 195.934 ns/op
Iteration   2: 194.611 ns/op
Iteration   3: 200.028 ns/op
Iteration   4: 213.565 ns/op
Iteration   5: 264.695 ns/op


Result "kotlin_benchmarks.array.fill.Inline128int.Val_to_Ref_as_Ref_arrayfillinst":
  262.478 ±(99.9%) 44.885 ns/op [Average]
  (min, avg, max) = (194.611, 262.478, 320.974), stdev = 41.985
  CI (99.9%): [217.594, 307.363] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline128int.Val_to_Ref_as_Ref_arrayfillinst
# Parameters: (size = 1000000)

# Run progress: 10.96% complete, ETA 08:40:55
# Fork: 1 of 3
# Warmup Iteration   1: 3156806.079 ns/op
# Warmup Iteration   2: 5371819.149 ns/op
# Warmup Iteration   3: 20426684.160 ns/op
Iteration   1: 15852176.438 ns/op
Iteration   2: 52625164.714 ns/op
Iteration   3: 42152333.360 ns/op
Iteration   4: 37140971.714 ns/op
Iteration   5: 54498576.737 ns/op

# Run progress: 10.98% complete, ETA 08:40:52
# Fork: 2 of 3
# Warmup Iteration   1: 60674129.882 ns/op
# Warmup Iteration   2: 55742372.789 ns/op
# Warmup Iteration   3: 39073620.192 ns/op
Iteration   1: 34230559.733 ns/op
Iteration   2: 24613408.537 ns/op
Iteration   3: 64249424.500 ns/op
Iteration   4: 26925555.921 ns/op
Iteration   5: 19811013.059 ns/op

# Run progress: 11.00% complete, ETA 08:40:44
# Fork: 3 of 3
# Warmup Iteration   1: 4082811.996 ns/op
# Warmup Iteration   2: 3195723.676 ns/op
# Warmup Iteration   3: 6418478.302 ns/op
Iteration   1: 58359423.611 ns/op
Iteration   2: 41609775.000 ns/op
Iteration   3: 48118106.870 ns/op
Iteration   4: 67701205.533 ns/op
Iteration   5: 50385589.286 ns/op


Result "kotlin_benchmarks.array.fill.Inline128int.Val_to_Ref_as_Ref_arrayfillinst":
  42551552.334 ±(99.9%) 17107968.400 ns/op [Average]
  (min, avg, max) = (15852176.438, 42551552.334, 67701205.533), stdev = 16002804.257
  CI (99.9%): [25443583.935, 59659520.734] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline128int.Val_to_Ref_as_Ref_arrayfillstat
# Parameters: (size = 100)

# Run progress: 11.03% complete, ETA 08:40:42
# Fork: 1 of 3
# Warmup Iteration   1: 152.612 ns/op
# Warmup Iteration   2: 181.641 ns/op
# Warmup Iteration   3: 248.933 ns/op
Iteration   1: 314.560 ns/op
Iteration   2: 281.174 ns/op
Iteration   3: 313.867 ns/op
Iteration   4: 366.384 ns/op
Iteration   5: 314.306 ns/op

# Run progress: 11.05% complete, ETA 08:40:31
# Fork: 2 of 3
# Warmup Iteration   1: 299.957 ns/op
# Warmup Iteration   2: 346.875 ns/op
# Warmup Iteration   3: 357.442 ns/op
Iteration   1: 303.635 ns/op
Iteration   2: 294.035 ns/op
Iteration   3: 297.687 ns/op
Iteration   4: 316.114 ns/op
Iteration   5: 304.896 ns/op

# Run progress: 11.08% complete, ETA 08:40:25
# Fork: 3 of 3
# Warmup Iteration   1: 321.069 ns/op
# Warmup Iteration   2: 331.615 ns/op
# Warmup Iteration   3: 280.123 ns/op
Iteration   1: 206.178 ns/op
Iteration   2: 232.344 ns/op
Iteration   3: 307.844 ns/op
Iteration   4: 308.109 ns/op
Iteration   5: 351.408 ns/op


Result "kotlin_benchmarks.array.fill.Inline128int.Val_to_Ref_as_Ref_arrayfillstat":
  300.836 ±(99.9%) 42.232 ns/op [Average]
  (min, avg, max) = (206.178, 300.836, 366.384), stdev = 39.504
  CI (99.9%): [258.604, 343.068] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline128int.Val_to_Ref_as_Ref_arrayfillstat
# Parameters: (size = 1000000)

# Run progress: 11.10% complete, ETA 08:40:17
# Fork: 1 of 3
# Warmup Iteration   1: 7156468.014 ns/op
# Warmup Iteration   2: 46967236.773 ns/op
# Warmup Iteration   3: 50028343.750 ns/op
Iteration   1: 42511569.458 ns/op
Iteration   2: 54201989.053 ns/op
Iteration   3: 45813237.304 ns/op
Iteration   4: 33591133.065 ns/op
Iteration   5: 37613598.741 ns/op

# Run progress: 11.13% complete, ETA 08:40:15
# Fork: 2 of 3
# Warmup Iteration   1: 29531486.529 ns/op
# Warmup Iteration   2: 20469218.340 ns/op
# Warmup Iteration   3: 40555755.000 ns/op
Iteration   1: 36683182.448 ns/op
Iteration   2: 41690301.680 ns/op
Iteration   3: 25254887.500 ns/op
Iteration   4: 8153541.000 ns/op
Iteration   5: 3402868.687 ns/op

# Run progress: 11.15% complete, ETA 08:40:07
# Fork: 3 of 3
# Warmup Iteration   1: 14767307.971 ns/op
# Warmup Iteration   2: 14025955.514 ns/op
# Warmup Iteration   3: 6310824.586 ns/op
Iteration   1: 14329720.662 ns/op
Iteration   2: 8875601.614 ns/op
Iteration   3: 6234555.302 ns/op
Iteration   4: 5169595.328 ns/op
Iteration   5: 5827263.728 ns/op


Result "kotlin_benchmarks.array.fill.Inline128int.Val_to_Ref_as_Ref_arrayfillstat":
  24623536.371 ±(99.9%) 19114514.011 ns/op [Average]
  (min, avg, max) = (3402868.687, 24623536.371, 54201989.053), stdev = 17879728.267
  CI (99.9%): [5509022.360, 43738050.383] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline128int.Val_to_Ref_as_Ref_fillinst
# Parameters: (size = 100)

# Run progress: 11.18% complete, ETA 08:40:04
# Fork: 1 of 3
# Warmup Iteration   1: 327.964 ns/op
# Warmup Iteration   2: 370.894 ns/op
# Warmup Iteration   3: 342.128 ns/op
Iteration   1: 342.150 ns/op
Iteration   2: 361.879 ns/op
Iteration   3: 400.235 ns/op
Iteration   4: 328.803 ns/op
Iteration   5: 350.113 ns/op

# Run progress: 11.20% complete, ETA 08:39:56
# Fork: 2 of 3
# Warmup Iteration   1: 383.425 ns/op
# Warmup Iteration   2: 363.805 ns/op
# Warmup Iteration   3: 368.023 ns/op
Iteration   1: 363.451 ns/op
Iteration   2: 375.433 ns/op
Iteration   3: 362.379 ns/op
Iteration   4: 339.567 ns/op
Iteration   5: 260.012 ns/op

# Run progress: 11.23% complete, ETA 08:39:50
# Fork: 3 of 3
# Warmup Iteration   1: 231.688 ns/op
# Warmup Iteration   2: 251.085 ns/op
# Warmup Iteration   3: 332.303 ns/op
Iteration   1: 323.762 ns/op
Iteration   2: 317.603 ns/op
Iteration   3: 342.943 ns/op
Iteration   4: 370.690 ns/op
Iteration   5: 348.415 ns/op


Result "kotlin_benchmarks.array.fill.Inline128int.Val_to_Ref_as_Ref_fillinst":
  345.829 ±(99.9%) 34.192 ns/op [Average]
  (min, avg, max) = (260.012, 345.829, 400.235), stdev = 31.983
  CI (99.9%): [311.637, 380.021] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline128int.Val_to_Ref_as_Ref_fillinst
# Parameters: (size = 1000000)

# Run progress: 11.25% complete, ETA 08:39:40
# Fork: 1 of 3
# Warmup Iteration   1: 47589003.818 ns/op
# Warmup Iteration   2: 25065859.143 ns/op
# Warmup Iteration   3: 56540879.611 ns/op
Iteration   1: 45772157.609 ns/op
Iteration   2: 41280059.308 ns/op
Iteration   3: 40104786.846 ns/op
Iteration   4: 32691332.000 ns/op
Iteration   5: 27894191.459 ns/op

# Run progress: 11.27% complete, ETA 08:39:36
# Fork: 2 of 3
# Warmup Iteration   1: 39224017.615 ns/op
# Warmup Iteration   2: 30149171.559 ns/op
# Warmup Iteration   3: 25152896.341 ns/op
Iteration   1: 6656627.451 ns/op
Iteration   2: 6359723.535 ns/op
Iteration   3: 5035376.453 ns/op
Iteration   4: 14198887.392 ns/op
Iteration   5: 29469025.000 ns/op

# Run progress: 11.30% complete, ETA 08:39:28
# Fork: 3 of 3
# Warmup Iteration   1: 18341391.673 ns/op
# Warmup Iteration   2: 6407291.936 ns/op
# Warmup Iteration   3: 4006629.315 ns/op
Iteration   1: 5392804.435 ns/op
Iteration   2: 7462828.735 ns/op
Iteration   3: 16369221.774 ns/op
Iteration   4: 10394209.629 ns/op
Iteration   5: 8228882.789 ns/op


Result "kotlin_benchmarks.array.fill.Inline128int.Val_to_Ref_as_Ref_fillinst":
  19820674.294 ±(99.9%) 15831163.293 ns/op [Average]
  (min, avg, max) = (5035376.453, 19820674.294, 45772157.609), stdev = 14808479.967
  CI (99.9%): [3989511.002, 35651837.587] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline128int.Val_to_Ref_as_Ref_fillstat
# Parameters: (size = 100)

# Run progress: 11.32% complete, ETA 08:39:20
# Fork: 1 of 3
# Warmup Iteration   1: 306.574 ns/op
# Warmup Iteration   2: 316.015 ns/op
# Warmup Iteration   3: 316.222 ns/op
Iteration   1: 326.173 ns/op
Iteration   2: 329.295 ns/op
Iteration   3: 324.563 ns/op
Iteration   4: 296.447 ns/op
Iteration   5: 257.778 ns/op

# Run progress: 11.35% complete, ETA 08:39:13
# Fork: 2 of 3
# Warmup Iteration   1: 284.792 ns/op
# Warmup Iteration   2: 261.119 ns/op
# Warmup Iteration   3: 269.580 ns/op
Iteration   1: 260.193 ns/op
Iteration   2: 246.753 ns/op
Iteration   3: 235.421 ns/op
Iteration   4: 207.106 ns/op
Iteration   5: 216.207 ns/op

# Run progress: 11.37% complete, ETA 08:39:04
# Fork: 3 of 3
# Warmup Iteration   1: 266.640 ns/op
# Warmup Iteration   2: 314.754 ns/op
# Warmup Iteration   3: 358.689 ns/op
Iteration   1: 356.827 ns/op
Iteration   2: 304.915 ns/op
Iteration   3: 317.653 ns/op
Iteration   4: 291.057 ns/op
Iteration   5: 240.318 ns/op


Result "kotlin_benchmarks.array.fill.Inline128int.Val_to_Ref_as_Ref_fillstat":
  280.714 ±(99.9%) 49.331 ns/op [Average]
  (min, avg, max) = (207.106, 280.714, 356.827), stdev = 46.145
  CI (99.9%): [231.382, 330.045] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline128int.Val_to_Ref_as_Ref_fillstat
# Parameters: (size = 1000000)

# Run progress: 11.40% complete, ETA 08:38:54
# Fork: 1 of 3
# Warmup Iteration   1: 42740083.333 ns/op
# Warmup Iteration   2: 48184982.143 ns/op
# Warmup Iteration   3: 39763422.852 ns/op
Iteration   1: 30552262.636 ns/op
Iteration   2: 27317792.763 ns/op
Iteration   3: 28156787.162 ns/op
Iteration   4: 21619908.681 ns/op
Iteration   5: 12959331.250 ns/op

# Run progress: 11.42% complete, ETA 08:38:48
# Fork: 2 of 3
# Warmup Iteration   1: 6146229.677 ns/op
# Warmup Iteration   2: 4418817.507 ns/op
# Warmup Iteration   3: 5458306.308 ns/op
Iteration   1: 8239382.937 ns/op
Iteration   2: 5762592.091 ns/op
Iteration   3: 9423788.636 ns/op
Iteration   4: 46570168.545 ns/op
Iteration   5: 40841818.320 ns/op

# Run progress: 11.45% complete, ETA 08:38:47
# Fork: 3 of 3
# Warmup Iteration   1: 48864458.333 ns/op
# Warmup Iteration   2: 45304942.708 ns/op
# Warmup Iteration   3: 30849955.882 ns/op
Iteration   1: 37772679.037 ns/op
Iteration   2: 32014227.844 ns/op
Iteration   3: 17986548.982 ns/op
Iteration   4: 28533027.778 ns/op
Iteration   5: 21499605.489 ns/op


Result "kotlin_benchmarks.array.fill.Inline128int.Val_to_Ref_as_Ref_fillstat":
  24616661.477 ±(99.9%) 13082280.469 ns/op [Average]
  (min, avg, max) = (5762592.091, 24616661.477, 46570168.545), stdev = 12237173.269
  CI (99.9%): [11534381.007, 37698941.946] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline128int.Val_to_Val_as_Val_arrayfillinst
# Parameters: (size = 100)

# Run progress: 11.47% complete, ETA 08:38:40
# Fork: 1 of 3
# Warmup Iteration   1: 427.362 ns/op
# Warmup Iteration   2: 298.133 ns/op
# Warmup Iteration   3: 299.682 ns/op
Iteration   1: 323.530 ns/op
Iteration   2: 258.652 ns/op
Iteration   3: 254.894 ns/op
Iteration   4: 238.567 ns/op
Iteration   5: 210.755 ns/op

# Run progress: 11.50% complete, ETA 08:38:33
# Fork: 2 of 3
# Warmup Iteration   1: 207.667 ns/op
# Warmup Iteration   2: 192.463 ns/op
# Warmup Iteration   3: 203.814 ns/op
Iteration   1: 198.768 ns/op
Iteration   2: 218.474 ns/op
Iteration   3: 250.395 ns/op
Iteration   4: 309.998 ns/op
Iteration   5: 264.523 ns/op

# Run progress: 11.52% complete, ETA 08:38:23
# Fork: 3 of 3
# Warmup Iteration   1: 322.142 ns/op
# Warmup Iteration   2: 318.026 ns/op
# Warmup Iteration   3: 316.888 ns/op
Iteration   1: 238.701 ns/op
Iteration   2: 260.232 ns/op
Iteration   3: 303.217 ns/op
Iteration   4: 261.082 ns/op
Iteration   5: 260.893 ns/op


Result "kotlin_benchmarks.array.fill.Inline128int.Val_to_Val_as_Val_arrayfillinst":
  256.845 ±(99.9%) 37.481 ns/op [Average]
  (min, avg, max) = (198.768, 256.845, 323.530), stdev = 35.060
  CI (99.9%): [219.364, 294.327] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline128int.Val_to_Val_as_Val_arrayfillinst
# Parameters: (size = 1000000)

# Run progress: 11.54% complete, ETA 08:38:17
# Fork: 1 of 3
# Warmup Iteration   1: 7914613.777 ns/op
# Warmup Iteration   2: 6255972.311 ns/op
# Warmup Iteration   3: 7603185.479 ns/op
Iteration   1: 42017576.640 ns/op
Iteration   2: 29870966.912 ns/op
Iteration   3: 17231938.559 ns/op
Iteration   4: 24931055.878 ns/op
Iteration   5: 10386175.258 ns/op

# Run progress: 11.57% complete, ETA 08:38:12
# Fork: 2 of 3
# Warmup Iteration   1: 51986771.810 ns/op
# Warmup Iteration   2: 28758723.361 ns/op
# Warmup Iteration   3: 43598166.667 ns/op
Iteration   1: 34319047.200 ns/op
Iteration   2: 29198094.029 ns/op
Iteration   3: 23780823.628 ns/op
Iteration   4: 18169870.536 ns/op
Iteration   5: 33714827.968 ns/op

# Run progress: 11.59% complete, ETA 08:38:11
# Fork: 3 of 3
# Warmup Iteration   1: 50534132.952 ns/op
# Warmup Iteration   2: 41092312.500 ns/op
# Warmup Iteration   3: 33783965.065 ns/op
Iteration   1: 26607487.947 ns/op
Iteration   2: 11394734.852 ns/op
Iteration   3: 3919362.195 ns/op
Iteration   4: 5881913.775 ns/op
Iteration   5: 56150348.684 ns/op


Result "kotlin_benchmarks.array.fill.Inline128int.Val_to_Val_as_Val_arrayfillinst":
  24504948.271 ±(99.9%) 15064815.061 ns/op [Average]
  (min, avg, max) = (3919362.195, 24504948.271, 56150348.684), stdev = 14091637.356
  CI (99.9%): [9440133.209, 39569763.332] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline128int.Val_to_Val_as_Val_arrayfillstat
# Parameters: (size = 100)

# Run progress: 11.62% complete, ETA 08:38:02
# Fork: 1 of 3
# Warmup Iteration   1: 236.323 ns/op
# Warmup Iteration   2: 210.985 ns/op
# Warmup Iteration   3: 190.514 ns/op
Iteration   1: 195.047 ns/op
Iteration   2: 192.804 ns/op
Iteration   3: 221.751 ns/op
Iteration   4: 197.218 ns/op
Iteration   5: 191.988 ns/op

# Run progress: 11.64% complete, ETA 08:37:53
# Fork: 2 of 3
# Warmup Iteration   1: 192.732 ns/op
# Warmup Iteration   2: 199.908 ns/op
# Warmup Iteration   3: 279.188 ns/op
Iteration   1: 320.764 ns/op
Iteration   2: 347.697 ns/op
Iteration   3: 311.113 ns/op
Iteration   4: 316.324 ns/op
Iteration   5: 241.818 ns/op

# Run progress: 11.67% complete, ETA 08:37:43
# Fork: 3 of 3
# Warmup Iteration   1: 227.675 ns/op
# Warmup Iteration   2: 196.517 ns/op
# Warmup Iteration   3: 213.735 ns/op
Iteration   1: 206.277 ns/op
Iteration   2: 192.103 ns/op
Iteration   3: 192.043 ns/op
Iteration   4: 182.303 ns/op
Iteration   5: 187.463 ns/op


Result "kotlin_benchmarks.array.fill.Inline128int.Val_to_Val_as_Val_arrayfillstat":
  233.114 ±(99.9%) 63.139 ns/op [Average]
  (min, avg, max) = (182.303, 233.114, 347.697), stdev = 59.060
  CI (99.9%): [169.976, 296.253] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline128int.Val_to_Val_as_Val_arrayfillstat
# Parameters: (size = 1000000)

# Run progress: 11.69% complete, ETA 08:37:34
# Fork: 1 of 3
# Warmup Iteration   1: 17399646.552 ns/op
# Warmup Iteration   2: 11227179.622 ns/op
# Warmup Iteration   3: 4262575.105 ns/op
Iteration   1: 3795690.814 ns/op
Iteration   2: 8750994.974 ns/op
Iteration   3: 21394031.043 ns/op
Iteration   4: 18165606.393 ns/op
Iteration   5: 5587870.630 ns/op

# Run progress: 11.72% complete, ETA 08:37:25
# Fork: 2 of 3
# Warmup Iteration   1: 35124458.310 ns/op
# Warmup Iteration   2: 21207475.708 ns/op
# Warmup Iteration   3: 18742879.630 ns/op
Iteration   1: 22873121.370 ns/op
Iteration   2: 20747521.660 ns/op
Iteration   3: 20015616.843 ns/op
Iteration   4: 21957738.217 ns/op
Iteration   5: 27507215.108 ns/op

# Run progress: 11.74% complete, ETA 08:37:19
# Fork: 3 of 3
# Warmup Iteration   1: 28239103.000 ns/op
# Warmup Iteration   2: 19531162.736 ns/op
# Warmup Iteration   3: 3870478.846 ns/op
Iteration   1: 5666274.809 ns/op
Iteration   2: 42130098.958 ns/op
Iteration   3: 34700608.333 ns/op
Iteration   4: 39852199.074 ns/op
Iteration   5: 38922145.846 ns/op


Result "kotlin_benchmarks.array.fill.Inline128int.Val_to_Val_as_Val_arrayfillstat":
  22137782.272 ±(99.9%) 13601078.848 ns/op [Average]
  (min, avg, max) = (3795690.814, 22137782.272, 42130098.958), stdev = 12722457.594
  CI (99.9%): [8536703.424, 35738861.119] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline128int.Val_to_Val_as_Val_fillinst
# Parameters: (size = 100)

# Run progress: 11.76% complete, ETA 08:37:10
# Fork: 1 of 3
# Warmup Iteration   1: 182.867 ns/op
# Warmup Iteration   2: 182.111 ns/op
# Warmup Iteration   3: 200.328 ns/op
Iteration   1: 231.117 ns/op
Iteration   2: 268.892 ns/op
Iteration   3: 281.801 ns/op
Iteration   4: 253.774 ns/op
Iteration   5: 262.360 ns/op

# Run progress: 11.79% complete, ETA 08:37:00
# Fork: 2 of 3
# Warmup Iteration   1: 364.979 ns/op
# Warmup Iteration   2: 370.919 ns/op
# Warmup Iteration   3: 367.349 ns/op
Iteration   1: 385.890 ns/op
Iteration   2: 327.460 ns/op
Iteration   3: 296.145 ns/op
Iteration   4: 344.543 ns/op
Iteration   5: 270.274 ns/op

# Run progress: 11.81% complete, ETA 08:36:51
# Fork: 3 of 3
# Warmup Iteration   1: 260.478 ns/op
# Warmup Iteration   2: 251.593 ns/op
# Warmup Iteration   3: 247.246 ns/op
Iteration   1: 219.800 ns/op
Iteration   2: 216.574 ns/op
Iteration   3: 213.505 ns/op
Iteration   4: 219.472 ns/op
Iteration   5: 226.467 ns/op


Result "kotlin_benchmarks.array.fill.Inline128int.Val_to_Val_as_Val_fillinst":
  267.872 ±(99.9%) 55.618 ns/op [Average]
  (min, avg, max) = (213.505, 267.872, 385.890), stdev = 52.025
  CI (99.9%): [212.253, 323.490] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline128int.Val_to_Val_as_Val_fillinst
# Parameters: (size = 1000000)

# Run progress: 11.84% complete, ETA 08:36:42
# Fork: 1 of 3
# Warmup Iteration   1: 8953543.885 ns/op
# Warmup Iteration   2: 5136461.294 ns/op
# Warmup Iteration   3: 5631931.250 ns/op
Iteration   1: 12297357.220 ns/op
Iteration   2: 11131938.637 ns/op
Iteration   3: 10863883.415 ns/op
Iteration   4: 13476726.974 ns/op
Iteration   5: 16244379.710 ns/op

# Run progress: 11.86% complete, ETA 08:36:34
# Fork: 2 of 3
# Warmup Iteration   1: 23691509.698 ns/op
# Warmup Iteration   2: 22251033.500 ns/op
# Warmup Iteration   3: 20487020.820 ns/op
Iteration   1: 30956407.818 ns/op
Iteration   2: 26607349.789 ns/op
Iteration   3: 27256386.243 ns/op
Iteration   4: 23300570.068 ns/op
Iteration   5: 15171901.119 ns/op

# Run progress: 11.89% complete, ETA 08:36:27
# Fork: 3 of 3
# Warmup Iteration   1: 7416479.478 ns/op
# Warmup Iteration   2: 4668384.884 ns/op
# Warmup Iteration   3: 7306300.593 ns/op
Iteration   1: 34826673.862 ns/op
Iteration   2: 29145317.857 ns/op
Iteration   3: 36169994.241 ns/op
Iteration   4: 34848712.621 ns/op
Iteration   5: 25940703.000 ns/op


Result "kotlin_benchmarks.array.fill.Inline128int.Val_to_Val_as_Val_fillinst":
  23215886.838 ±(99.9%) 9873804.392 ns/op [Average]
  (min, avg, max) = (10863883.415, 23215886.838, 36169994.241), stdev = 9235962.755
  CI (99.9%): [13342082.447, 33089691.230] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline128int.Val_to_Val_as_Val_fillstat
# Parameters: (size = 100)

# Run progress: 11.91% complete, ETA 08:36:20
# Fork: 1 of 3
# Warmup Iteration   1: 134.811 ns/op
# Warmup Iteration   2: 143.921 ns/op
# Warmup Iteration   3: 162.616 ns/op
Iteration   1: 204.573 ns/op
Iteration   2: 230.492 ns/op
Iteration   3: 223.242 ns/op
Iteration   4: 248.407 ns/op
Iteration   5: 289.094 ns/op

# Run progress: 11.94% complete, ETA 08:36:09
# Fork: 2 of 3
# Warmup Iteration   1: 304.755 ns/op
# Warmup Iteration   2: 326.475 ns/op
# Warmup Iteration   3: 318.153 ns/op
Iteration   1: 284.717 ns/op
Iteration   2: 297.369 ns/op
Iteration   3: 297.515 ns/op
Iteration   4: 345.985 ns/op
Iteration   5: 294.708 ns/op

# Run progress: 11.96% complete, ETA 08:36:01
# Fork: 3 of 3
# Warmup Iteration   1: 318.334 ns/op
# Warmup Iteration   2: 220.449 ns/op
# Warmup Iteration   3: 190.079 ns/op
Iteration   1: 171.490 ns/op
Iteration   2: 171.855 ns/op
Iteration   3: 202.807 ns/op
Iteration   4: 275.588 ns/op
Iteration   5: 329.088 ns/op


Result "kotlin_benchmarks.array.fill.Inline128int.Val_to_Val_as_Val_fillstat":
  257.795 ±(99.9%) 58.628 ns/op [Average]
  (min, avg, max) = (171.490, 257.795, 345.985), stdev = 54.841
  CI (99.9%): [199.167, 316.424] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline128int.Val_to_Val_as_Val_fillstat
# Parameters: (size = 1000000)

# Run progress: 11.99% complete, ETA 08:35:53
# Fork: 1 of 3
# Warmup Iteration   1: 13043710.494 ns/op
# Warmup Iteration   2: 10132597.920 ns/op
# Warmup Iteration   3: 17967460.554 ns/op
Iteration   1: 17646531.068 ns/op
Iteration   2: 22606187.064 ns/op
Iteration   3: 36039918.103 ns/op
Iteration   4: 31444177.094 ns/op
Iteration   5: 26631114.333 ns/op

# Run progress: 12.01% complete, ETA 08:35:50
# Fork: 2 of 3
# Warmup Iteration   1: 25213166.659 ns/op
# Warmup Iteration   2: 26453462.615 ns/op
# Warmup Iteration   3: 24399495.048 ns/op
Iteration   1: 30234246.324 ns/op
Iteration   2: 20207214.160 ns/op
Iteration   3: 24663128.049 ns/op
Iteration   4: 4794991.114 ns/op
Iteration   5: 4455078.907 ns/op

# Run progress: 12.03% complete, ETA 08:35:41
# Fork: 3 of 3
# Warmup Iteration   1: 26983644.737 ns/op
# Warmup Iteration   2: 26627803.737 ns/op
# Warmup Iteration   3: 36802316.964 ns/op
Iteration   1: 26804800.205 ns/op
Iteration   2: 32694583.313 ns/op
Iteration   3: 28812222.629 ns/op
Iteration   4: 27089210.526 ns/op
Iteration   5: 20625395.408 ns/op


Result "kotlin_benchmarks.array.fill.Inline128int.Val_to_Val_as_Val_fillstat":
  23649919.886 ±(99.9%) 9814118.008 ns/op [Average]
  (min, avg, max) = (4455078.907, 23649919.886, 36039918.103), stdev = 9180132.075
  CI (99.9%): [13835801.878, 33464037.895] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline32int.Def_to_Ref_as_Ref_arrayfill
# Parameters: (size = 100)

# Run progress: 12.06% complete, ETA 08:35:37
# Fork: 1 of 3
# Warmup Iteration   1: 136.734 ns/op
# Warmup Iteration   2: 158.054 ns/op
# Warmup Iteration   3: 185.503 ns/op
Iteration   1: 176.455 ns/op
Iteration   2: 188.392 ns/op
Iteration   3: 191.481 ns/op
Iteration   4: 191.868 ns/op
Iteration   5: 193.243 ns/op

# Run progress: 12.08% complete, ETA 08:35:26
# Fork: 2 of 3
# Warmup Iteration   1: 180.392 ns/op
# Warmup Iteration   2: 187.271 ns/op
# Warmup Iteration   3: 230.732 ns/op
Iteration   1: 286.796 ns/op
Iteration   2: 221.836 ns/op
Iteration   3: 211.866 ns/op
Iteration   4: 207.444 ns/op
Iteration   5: 266.799 ns/op

# Run progress: 12.11% complete, ETA 08:35:18
# Fork: 3 of 3
# Warmup Iteration   1: 126.600 ns/op
# Warmup Iteration   2: 118.978 ns/op
# Warmup Iteration   3: 140.479 ns/op
Iteration   1: 183.811 ns/op
Iteration   2: 188.294 ns/op
Iteration   3: 183.509 ns/op
Iteration   4: 194.595 ns/op
Iteration   5: 193.208 ns/op


Result "kotlin_benchmarks.array.fill.Inline32int.Def_to_Ref_as_Ref_arrayfill":
  205.306 ±(99.9%) 33.645 ns/op [Average]
  (min, avg, max) = (176.455, 205.306, 286.796), stdev = 31.471
  CI (99.9%): [171.662, 238.951] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline32int.Def_to_Ref_as_Ref_arrayfill
# Parameters: (size = 1000000)

# Run progress: 12.13% complete, ETA 08:35:08
# Fork: 1 of 3
# Warmup Iteration   1: 34852915.241 ns/op
# Warmup Iteration   2: 18498107.582 ns/op
# Warmup Iteration   3: 39504839.731 ns/op
Iteration   1: 31744226.563 ns/op
Iteration   2: 23429240.523 ns/op
Iteration   3: 27047529.605 ns/op
Iteration   4: 29221357.143 ns/op
Iteration   5: 28999666.686 ns/op

# Run progress: 12.16% complete, ETA 08:35:01
# Fork: 2 of 3
# Warmup Iteration   1: 29862995.229 ns/op
# Warmup Iteration   2: 28653503.472 ns/op
# Warmup Iteration   3: 7806104.651 ns/op
Iteration   1: 6003301.589 ns/op
Iteration   2: 15333238.000 ns/op
Iteration   3: 18539628.036 ns/op
Iteration   4: 18749783.167 ns/op
Iteration   5: 8618839.639 ns/op

# Run progress: 12.18% complete, ETA 08:34:52
# Fork: 3 of 3
# Warmup Iteration   1: 6607811.149 ns/op
# Warmup Iteration   2: 4990828.149 ns/op
# Warmup Iteration   3: 5891862.813 ns/op
Iteration   1: 5368210.548 ns/op
Iteration   2: 7683522.388 ns/op
Iteration   3: 4798826.815 ns/op
Iteration   4: 5563048.876 ns/op
Iteration   5: 7307335.404 ns/op


Result "kotlin_benchmarks.array.fill.Inline32int.Def_to_Ref_as_Ref_arrayfill":
  15893850.332 ±(99.9%) 10803700.237 ns/op [Average]
  (min, avg, max) = (4798826.815, 15893850.332, 31744226.563), stdev = 10105787.905
  CI (99.9%): [5090150.095, 26697550.569] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline32int.Def_to_Ref_as_Ref_fill
# Parameters: (size = 100)

# Run progress: 12.21% complete, ETA 08:34:46
# Fork: 1 of 3
# Warmup Iteration   1: 196.608 ns/op
# Warmup Iteration   2: 182.122 ns/op
# Warmup Iteration   3: 192.096 ns/op
Iteration   1: 181.601 ns/op
Iteration   2: 146.465 ns/op
Iteration   3: 157.360 ns/op
Iteration   4: 133.546 ns/op
Iteration   5: 116.753 ns/op

# Run progress: 12.23% complete, ETA 08:34:38
# Fork: 2 of 3
# Warmup Iteration   1: 133.122 ns/op
# Warmup Iteration   2: 125.422 ns/op
# Warmup Iteration   3: 132.848 ns/op
Iteration   1: 130.085 ns/op
Iteration   2: 131.658 ns/op
Iteration   3: 134.204 ns/op
Iteration   4: 161.002 ns/op
Iteration   5: 175.065 ns/op

# Run progress: 12.25% complete, ETA 08:34:28
# Fork: 3 of 3
# Warmup Iteration   1: 185.584 ns/op
# Warmup Iteration   2: 204.104 ns/op
# Warmup Iteration   3: 191.849 ns/op
Iteration   1: 185.835 ns/op
Iteration   2: 191.892 ns/op
Iteration   3: 191.865 ns/op
Iteration   4: 195.556 ns/op
Iteration   5: 206.179 ns/op


Result "kotlin_benchmarks.array.fill.Inline32int.Def_to_Ref_as_Ref_fill":
  162.604 ±(99.9%) 31.055 ns/op [Average]
  (min, avg, max) = (116.753, 162.604, 206.179), stdev = 29.048
  CI (99.9%): [131.550, 193.659] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline32int.Def_to_Ref_as_Ref_fill
# Parameters: (size = 1000000)

# Run progress: 12.28% complete, ETA 08:34:22
# Fork: 1 of 3
# Warmup Iteration   1: 77868500.000 ns/op
# Warmup Iteration   2: 52768695.850 ns/op
# Warmup Iteration   3: 38660305.556 ns/op
Iteration   1: 9478887.189 ns/op
Iteration   2: 9829860.029 ns/op
Iteration   3: 4140525.551 ns/op
Iteration   4: 5187393.164 ns/op
Iteration   5: 3532918.574 ns/op

# Run progress: 12.30% complete, ETA 08:34:15
# Fork: 2 of 3
# Warmup Iteration   1: 5687582.163 ns/op
# Warmup Iteration   2: 3607832.588 ns/op
# Warmup Iteration   3: 8180118.561 ns/op
Iteration   1: 8965065.421 ns/op
Iteration   2: 33982706.933 ns/op
Iteration   3: 33724138.900 ns/op
Iteration   4: 28645554.389 ns/op
Iteration   5: 20003874.208 ns/op

# Run progress: 12.33% complete, ETA 08:34:11
# Fork: 3 of 3
# Warmup Iteration   1: 44919944.417 ns/op
# Warmup Iteration   2: 45091594.217 ns/op
# Warmup Iteration   3: 36828854.179 ns/op
Iteration   1: 24090013.881 ns/op
Iteration   2: 21515178.191 ns/op
Iteration   3: 3693506.237 ns/op
Iteration   4: 7263351.324 ns/op
Iteration   5: 2997726.757 ns/op


Result "kotlin_benchmarks.array.fill.Inline32int.Def_to_Ref_as_Ref_fill":
  14470046.717 ±(99.9%) 12169492.792 ns/op [Average]
  (min, avg, max) = (2997726.757, 14470046.717, 33982706.933), stdev = 11383351.109
  CI (99.9%): [2300553.924, 26639539.509] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline32int.Def_to_Val_as_Val_arrayfill
# Parameters: (size = 100)

# Run progress: 12.35% complete, ETA 08:34:03
# Fork: 1 of 3
# Warmup Iteration   1: 187.935 ns/op
# Warmup Iteration   2: 199.189 ns/op
# Warmup Iteration   3: 238.188 ns/op
Iteration   1: 193.803 ns/op
Iteration   2: 201.539 ns/op
Iteration   3: 194.453 ns/op
Iteration   4: 191.910 ns/op
Iteration   5: 204.814 ns/op

# Run progress: 12.38% complete, ETA 08:33:56
# Fork: 2 of 3
# Warmup Iteration   1: 198.408 ns/op
# Warmup Iteration   2: 196.839 ns/op
# Warmup Iteration   3: 191.333 ns/op
Iteration   1: 191.953 ns/op
Iteration   2: 203.323 ns/op
Iteration   3: 186.161 ns/op
Iteration   4: 199.931 ns/op
Iteration   5: 218.436 ns/op

# Run progress: 12.40% complete, ETA 08:33:48
# Fork: 3 of 3
# Warmup Iteration   1: 199.251 ns/op
# Warmup Iteration   2: 197.500 ns/op
# Warmup Iteration   3: 195.237 ns/op
Iteration   1: 161.992 ns/op
Iteration   2: 115.674 ns/op
Iteration   3: 96.593 ns/op
Iteration   4: 93.462 ns/op
Iteration   5: 105.983 ns/op


Result "kotlin_benchmarks.array.fill.Inline32int.Def_to_Val_as_Val_arrayfill":
  170.668 ±(99.9%) 47.209 ns/op [Average]
  (min, avg, max) = (93.462, 170.668, 218.436), stdev = 44.159
  CI (99.9%): [123.460, 217.877] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline32int.Def_to_Val_as_Val_arrayfill
# Parameters: (size = 1000000)

# Run progress: 12.43% complete, ETA 08:33:40
# Fork: 1 of 3
# Warmup Iteration   1: 42184982.625 ns/op
# Warmup Iteration   2: 49008967.818 ns/op
# Warmup Iteration   3: 17124084.746 ns/op
Iteration   1: 4158740.266 ns/op
Iteration   2: 3459005.028 ns/op
Iteration   3: 3426804.847 ns/op
Iteration   4: 3399671.576 ns/op
Iteration   5: 3207873.810 ns/op

# Run progress: 12.45% complete, ETA 08:33:32
# Fork: 2 of 3
# Warmup Iteration   1: 5827986.669 ns/op
# Warmup Iteration   2: 5238703.798 ns/op
# Warmup Iteration   3: 9091092.634 ns/op
Iteration   1: 3999236.000 ns/op
Iteration   2: 3654372.892 ns/op
Iteration   3: 3203495.635 ns/op
Iteration   4: 4504385.556 ns/op
Iteration   5: 13042582.269 ns/op

# Run progress: 12.48% complete, ETA 08:33:26
# Fork: 3 of 3
# Warmup Iteration   1: 24148400.209 ns/op
# Warmup Iteration   2: 11868556.376 ns/op
# Warmup Iteration   3: 4858065.303 ns/op
Iteration   1: 3596853.280 ns/op
Iteration   2: 12434239.841 ns/op
Iteration   3: 24358310.524 ns/op
Iteration   4: 7842146.643 ns/op
Iteration   5: 50734050.000 ns/op


Result "kotlin_benchmarks.array.fill.Inline32int.Def_to_Val_as_Val_arrayfill":
  9668117.878 ±(99.9%) 13664068.288 ns/op [Average]
  (min, avg, max) = (3203495.635, 9668117.878, 50734050.000), stdev = 12781377.955
  CI (99.9%): [≈ 0, 23332186.165] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline32int.Def_to_Val_as_Val_fill
# Parameters: (size = 100)

# Run progress: 12.50% complete, ETA 08:33:19
# Fork: 1 of 3
# Warmup Iteration   1: 159.286 ns/op
# Warmup Iteration   2: 182.471 ns/op
# Warmup Iteration   3: 178.018 ns/op
Iteration   1: 147.988 ns/op
Iteration   2: 133.347 ns/op
Iteration   3: 125.844 ns/op
Iteration   4: 128.134 ns/op
Iteration   5: 121.465 ns/op

# Run progress: 12.52% complete, ETA 08:33:10
# Fork: 2 of 3
# Warmup Iteration   1: 154.771 ns/op
# Warmup Iteration   2: 183.074 ns/op
# Warmup Iteration   3: 187.909 ns/op
Iteration   1: 139.672 ns/op
Iteration   2: 184.423 ns/op
Iteration   3: 215.590 ns/op
Iteration   4: 191.630 ns/op
Iteration   5: 185.626 ns/op

# Run progress: 12.55% complete, ETA 08:33:01
# Fork: 3 of 3
# Warmup Iteration   1: 189.506 ns/op
# Warmup Iteration   2: 200.645 ns/op
# Warmup Iteration   3: 162.334 ns/op
Iteration   1: 177.492 ns/op
Iteration   2: 170.109 ns/op
Iteration   3: 173.878 ns/op
Iteration   4: 172.659 ns/op
Iteration   5: 166.690 ns/op


Result "kotlin_benchmarks.array.fill.Inline32int.Def_to_Val_as_Val_fill":
  162.303 ±(99.9%) 29.973 ns/op [Average]
  (min, avg, max) = (121.465, 162.303, 215.590), stdev = 28.037
  CI (99.9%): [132.330, 192.276] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline32int.Def_to_Val_as_Val_fill
# Parameters: (size = 1000000)

# Run progress: 12.57% complete, ETA 08:32:52
# Fork: 1 of 3
# Warmup Iteration   1: 6955572.205 ns/op
# Warmup Iteration   2: 19173705.981 ns/op
# Warmup Iteration   3: 17635839.912 ns/op
Iteration   1: 19694590.558 ns/op
Iteration   2: 27212037.289 ns/op
Iteration   3: 24266929.571 ns/op
Iteration   4: 25766926.282 ns/op
Iteration   5: 19461917.462 ns/op

# Run progress: 12.60% complete, ETA 08:32:46
# Fork: 2 of 3
# Warmup Iteration   1: 54428164.474 ns/op
# Warmup Iteration   2: 64955533.813 ns/op
# Warmup Iteration   3: 47441632.545 ns/op
Iteration   1: 34288140.267 ns/op
Iteration   2: 32156645.844 ns/op
Iteration   3: 31207032.818 ns/op
Iteration   4: 26741768.632 ns/op
Iteration   5: 34627865.267 ns/op

# Run progress: 12.62% complete, ETA 08:32:39
# Fork: 3 of 3
# Warmup Iteration   1: 16813085.417 ns/op
# Warmup Iteration   2: 4175825.070 ns/op
# Warmup Iteration   3: 3742988.030 ns/op
Iteration   1: 3644563.918 ns/op
Iteration   2: 9591103.774 ns/op
Iteration   3: 14648460.114 ns/op
Iteration   4: 33622545.833 ns/op
Iteration   5: 25076054.279 ns/op


Result "kotlin_benchmarks.array.fill.Inline32int.Def_to_Val_as_Val_fill":
  24133772.127 ±(99.9%) 9898907.368 ns/op [Average]
  (min, avg, max) = (3644563.918, 24133772.127, 34627865.267), stdev = 9259444.095
  CI (99.9%): [14234864.759, 34032679.495] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline32int.New_to_Ref_as_Ref_arrayfill
# Parameters: (size = 100)

# Run progress: 12.65% complete, ETA 08:32:30
# Fork: 1 of 3
# Warmup Iteration   1: 191.060 ns/op
# Warmup Iteration   2: 197.848 ns/op
# Warmup Iteration   3: 202.052 ns/op
Iteration   1: 185.120 ns/op
Iteration   2: 173.062 ns/op
Iteration   3: 165.619 ns/op
Iteration   4: 181.661 ns/op
Iteration   5: 250.685 ns/op

# Run progress: 12.67% complete, ETA 08:32:22
# Fork: 2 of 3
# Warmup Iteration   1: 279.721 ns/op
# Warmup Iteration   2: 304.720 ns/op
# Warmup Iteration   3: 243.596 ns/op
Iteration   1: 237.453 ns/op
Iteration   2: 239.555 ns/op
Iteration   3: 232.084 ns/op
Iteration   4: 229.677 ns/op
Iteration   5: 258.602 ns/op

# Run progress: 12.70% complete, ETA 08:32:15
# Fork: 3 of 3
# Warmup Iteration   1: 241.162 ns/op
# Warmup Iteration   2: 252.214 ns/op
# Warmup Iteration   3: 261.209 ns/op
Iteration   1: 194.165 ns/op
Iteration   2: 156.789 ns/op
Iteration   3: 182.987 ns/op
Iteration   4: 239.622 ns/op
Iteration   5: 374.202 ns/op


Result "kotlin_benchmarks.array.fill.Inline32int.New_to_Ref_as_Ref_arrayfill":
  220.086 ±(99.9%) 58.136 ns/op [Average]
  (min, avg, max) = (156.789, 220.086, 374.202), stdev = 54.381
  CI (99.9%): [161.949, 278.222] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline32int.New_to_Ref_as_Ref_arrayfill
# Parameters: (size = 1000000)

# Run progress: 12.72% complete, ETA 08:32:07
# Fork: 1 of 3
# Warmup Iteration   1: 10872730.896 ns/op
# Warmup Iteration   2: 43148987.833 ns/op
# Warmup Iteration   3: 37034474.714 ns/op
Iteration   1: 32614411.606 ns/op
Iteration   2: 42302399.292 ns/op
Iteration   3: 32949532.258 ns/op
Iteration   4: 42682000.000 ns/op
Iteration   5: 32201218.750 ns/op

# Run progress: 12.75% complete, ETA 08:32:03
# Fork: 2 of 3
# Warmup Iteration   1: 44147320.652 ns/op
# Warmup Iteration   2: 38227544.741 ns/op
# Warmup Iteration   3: 33643919.355 ns/op
Iteration   1: 31487893.939 ns/op
Iteration   2: 22537118.511 ns/op
Iteration   3: 5163584.607 ns/op
Iteration   4: 4206936.458 ns/op
Iteration   5: 2918688.278 ns/op

# Run progress: 12.77% complete, ETA 08:31:54
# Fork: 3 of 3
# Warmup Iteration   1: 42889958.333 ns/op
# Warmup Iteration   2: 38345547.607 ns/op
# Warmup Iteration   3: 40897798.320 ns/op
Iteration   1: 39177016.963 ns/op
Iteration   2: 39849878.192 ns/op
Iteration   3: 35971166.655 ns/op
Iteration   4: 31128285.364 ns/op
Iteration   5: 26760992.316 ns/op


Result "kotlin_benchmarks.array.fill.Inline32int.New_to_Ref_as_Ref_arrayfill":
  28130074.879 ±(99.9%) 14518900.249 ns/op [Average]
  (min, avg, max) = (2918688.278, 28130074.879, 42682000.000), stdev = 13580988.302
  CI (99.9%): [13611174.630, 42648975.128] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline32int.New_to_Ref_as_Ref_fill
# Parameters: (size = 100)

# Run progress: 12.79% complete, ETA 08:31:49
# Fork: 1 of 3
# Warmup Iteration   1: 275.710 ns/op
# Warmup Iteration   2: 340.333 ns/op
# Warmup Iteration   3: 613.114 ns/op
Iteration   1: 1088.073 ns/op
Iteration   2: 1255.786 ns/op
Iteration   3: 609.464 ns/op
Iteration   4: 637.848 ns/op
Iteration   5: 772.362 ns/op

# Run progress: 12.82% complete, ETA 08:31:38
# Fork: 2 of 3
# Warmup Iteration   1: 817.096 ns/op
# Warmup Iteration   2: 511.360 ns/op
# Warmup Iteration   3: 531.805 ns/op
Iteration   1: 638.179 ns/op
Iteration   2: 641.980 ns/op
Iteration   3: 653.835 ns/op
Iteration   4: 614.918 ns/op
Iteration   5: 551.709 ns/op

# Run progress: 12.84% complete, ETA 08:31:31
# Fork: 3 of 3
# Warmup Iteration   1: 511.538 ns/op
# Warmup Iteration   2: 397.308 ns/op
# Warmup Iteration   3: 457.681 ns/op
Iteration   1: 596.330 ns/op
Iteration   2: 735.695 ns/op
Iteration   3: 559.284 ns/op
Iteration   4: 481.647 ns/op
Iteration   5: 387.266 ns/op


Result "kotlin_benchmarks.array.fill.Inline32int.New_to_Ref_as_Ref_fill":
  681.625 ±(99.9%) 236.919 ns/op [Average]
  (min, avg, max) = (387.266, 681.625, 1255.786), stdev = 221.615
  CI (99.9%): [444.706, 918.544] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline32int.New_to_Ref_as_Ref_fill
# Parameters: (size = 1000000)

# Run progress: 12.87% complete, ETA 08:31:23
# Fork: 1 of 3
# Warmup Iteration   1: 7962770.008 ns/op
# Warmup Iteration   2: 4236296.895 ns/op
# Warmup Iteration   3: 3551307.218 ns/op
Iteration   1: 3802335.377 ns/op
Iteration   2: 4931254.696 ns/op
Iteration   3: 5128672.802 ns/op
Iteration   4: 4269377.460 ns/op
Iteration   5: 3297831.977 ns/op

# Run progress: 12.89% complete, ETA 08:31:14
# Fork: 2 of 3
# Warmup Iteration   1: 4379173.883 ns/op
# Warmup Iteration   2: 4217903.243 ns/op
# Warmup Iteration   3: 8518885.593 ns/op
Iteration   1: 8049163.032 ns/op
Iteration   2: 7850135.742 ns/op
Iteration   3: 6557597.044 ns/op
Iteration   4: 5606115.739 ns/op
Iteration   5: 5414253.134 ns/op

# Run progress: 12.92% complete, ETA 08:31:05
# Fork: 3 of 3
# Warmup Iteration   1: 7042275.174 ns/op
# Warmup Iteration   2: 8160804.105 ns/op
# Warmup Iteration   3: 4644174.693 ns/op
Iteration   1: 3645423.561 ns/op
Iteration   2: 3009764.175 ns/op
Iteration   3: 3523018.941 ns/op
Iteration   4: 3951020.996 ns/op
Iteration   5: 3683356.993 ns/op


Result "kotlin_benchmarks.array.fill.Inline32int.New_to_Ref_as_Ref_fill":
  4847954.778 ±(99.9%) 1708041.132 ns/op [Average]
  (min, avg, max) = (3009764.175, 4847954.778, 8049163.032), stdev = 1597702.735
  CI (99.9%): [3139913.646, 6555995.910] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline32int.New_to_Val_as_Val_arrayfill
# Parameters: (size = 100)

# Run progress: 12.94% complete, ETA 08:30:58
# Fork: 1 of 3
# Warmup Iteration   1: 229.625 ns/op
# Warmup Iteration   2: 247.225 ns/op
# Warmup Iteration   3: 232.370 ns/op
Iteration   1: 256.742 ns/op
Iteration   2: 313.649 ns/op
Iteration   3: 249.795 ns/op
Iteration   4: 246.962 ns/op
Iteration   5: 255.151 ns/op

# Run progress: 12.97% complete, ETA 08:30:49
# Fork: 2 of 3
# Warmup Iteration   1: 236.973 ns/op
# Warmup Iteration   2: 233.519 ns/op
# Warmup Iteration   3: 246.163 ns/op
Iteration   1: 311.152 ns/op
Iteration   2: 184.796 ns/op
Iteration   3: 168.709 ns/op
Iteration   4: 151.679 ns/op
Iteration   5: 156.655 ns/op

# Run progress: 12.99% complete, ETA 08:30:42
# Fork: 3 of 3
# Warmup Iteration   1: 202.549 ns/op
# Warmup Iteration   2: 244.943 ns/op
# Warmup Iteration   3: 230.819 ns/op
Iteration   1: 229.203 ns/op
Iteration   2: 224.821 ns/op
Iteration   3: 223.115 ns/op
Iteration   4: 225.367 ns/op
Iteration   5: 223.541 ns/op


Result "kotlin_benchmarks.array.fill.Inline32int.New_to_Val_as_Val_arrayfill":
  228.089 ±(99.9%) 51.909 ns/op [Average]
  (min, avg, max) = (151.679, 228.089, 313.649), stdev = 48.555
  CI (99.9%): [176.180, 279.998] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline32int.New_to_Val_as_Val_arrayfill
# Parameters: (size = 1000000)

# Run progress: 13.01% complete, ETA 08:30:33
# Fork: 1 of 3
# Warmup Iteration   1: 61009683.824 ns/op
# Warmup Iteration   2: 43469557.292 ns/op
# Warmup Iteration   3: 31719009.125 ns/op
Iteration   1: 26908623.923 ns/op
Iteration   2: 34470247.233 ns/op
Iteration   3: 25115863.095 ns/op
Iteration   4: 42870505.208 ns/op
Iteration   5: 30485590.706 ns/op

# Run progress: 13.04% complete, ETA 08:30:26
# Fork: 2 of 3
# Warmup Iteration   1: 14987060.940 ns/op
# Warmup Iteration   2: 3435473.549 ns/op
# Warmup Iteration   3: 3476400.000 ns/op
Iteration   1: 17123661.800 ns/op
Iteration   2: 32800576.844 ns/op
Iteration   3: 40444911.680 ns/op
Iteration   4: 58722011.556 ns/op
Iteration   5: 35876056.571 ns/op

# Run progress: 13.06% complete, ETA 08:30:18
# Fork: 3 of 3
# Warmup Iteration   1: 30927746.212 ns/op
# Warmup Iteration   2: 28934545.229 ns/op
# Warmup Iteration   3: 32858853.484 ns/op
Iteration   1: 35172969.828 ns/op
Iteration   2: 42926550.333 ns/op
Iteration   3: 38153742.296 ns/op
Iteration   4: 28161367.108 ns/op
Iteration   5: 32586471.774 ns/op


Result "kotlin_benchmarks.array.fill.Inline32int.New_to_Val_as_Val_arrayfill":
  34787943.330 ±(99.9%) 10254248.378 ns/op [Average]
  (min, avg, max) = (17123661.800, 34787943.330, 58722011.556), stdev = 9591830.296
  CI (99.9%): [24533694.952, 45042191.709] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline32int.New_to_Val_as_Val_fill
# Parameters: (size = 100)

# Run progress: 13.09% complete, ETA 08:30:08
# Fork: 1 of 3
# Warmup Iteration   1: 1077.204 ns/op
# Warmup Iteration   2: 586.033 ns/op
# Warmup Iteration   3: 448.149 ns/op
Iteration   1: 561.175 ns/op
Iteration   2: 450.793 ns/op
Iteration   3: 431.066 ns/op
Iteration   4: 369.371 ns/op
Iteration   5: 314.628 ns/op

# Run progress: 13.11% complete, ETA 08:30:00
# Fork: 2 of 3
# Warmup Iteration   1: 346.859 ns/op
# Warmup Iteration   2: 301.245 ns/op
# Warmup Iteration   3: 360.898 ns/op
Iteration   1: 370.858 ns/op
Iteration   2: 397.649 ns/op
Iteration   3: 451.997 ns/op
Iteration   4: 530.385 ns/op
Iteration   5: 615.846 ns/op

# Run progress: 13.14% complete, ETA 08:29:50
# Fork: 3 of 3
# Warmup Iteration   1: 679.226 ns/op
# Warmup Iteration   2: 473.878 ns/op
# Warmup Iteration   3: 614.798 ns/op
Iteration   1: 607.545 ns/op
Iteration   2: 624.543 ns/op
Iteration   3: 654.780 ns/op
Iteration   4: 691.420 ns/op
Iteration   5: 762.958 ns/op


Result "kotlin_benchmarks.array.fill.Inline32int.New_to_Val_as_Val_fill":
  522.334 ±(99.9%) 144.417 ns/op [Average]
  (min, avg, max) = (314.628, 522.334, 762.958), stdev = 135.088
  CI (99.9%): [377.917, 666.752] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline32int.New_to_Val_as_Val_fill
# Parameters: (size = 1000000)

# Run progress: 13.16% complete, ETA 08:29:43
# Fork: 1 of 3
# Warmup Iteration   1: 10533610.240 ns/op
# Warmup Iteration   2: 7066559.441 ns/op
# Warmup Iteration   3: 8362079.867 ns/op
Iteration   1: 4901971.073 ns/op
Iteration   2: 3588809.103 ns/op
Iteration   3: 3943575.457 ns/op
Iteration   4: 4628689.794 ns/op
Iteration   5: 8469672.567 ns/op

# Run progress: 13.19% complete, ETA 08:29:36
# Fork: 2 of 3
# Warmup Iteration   1: 9835779.534 ns/op
# Warmup Iteration   2: 6440902.776 ns/op
# Warmup Iteration   3: 5826759.448 ns/op
Iteration   1: 4004554.730 ns/op
Iteration   2: 4664622.889 ns/op
Iteration   3: 3712970.279 ns/op
Iteration   4: 3393050.676 ns/op
Iteration   5: 3420467.203 ns/op

# Run progress: 13.21% complete, ETA 08:29:30
# Fork: 3 of 3
# Warmup Iteration   1: 4671318.548 ns/op
# Warmup Iteration   2: 3572675.353 ns/op
# Warmup Iteration   3: 3813518.396 ns/op
Iteration   1: 3703778.238 ns/op
Iteration   2: 4839921.471 ns/op
Iteration   3: 7040513.313 ns/op
Iteration   4: 7449882.912 ns/op
Iteration   5: 7854126.923 ns/op


Result "kotlin_benchmarks.array.fill.Inline32int.New_to_Val_as_Val_fill":
  5041107.108 ±(99.9%) 1876254.232 ns/op [Average]
  (min, avg, max) = (3393050.676, 5041107.108, 8469672.567), stdev = 1755049.373
  CI (99.9%): [3164852.876, 6917361.341] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline32int.Ref_to_Ref_as_Ref_arrayfillinst
# Parameters: (size = 100)

# Run progress: 13.24% complete, ETA 08:29:21
# Fork: 1 of 3
# Warmup Iteration   1: 144.238 ns/op
# Warmup Iteration   2: 133.634 ns/op
# Warmup Iteration   3: 125.779 ns/op
Iteration   1: 116.358 ns/op
Iteration   2: 116.961 ns/op
Iteration   3: 117.030 ns/op
Iteration   4: 116.821 ns/op
Iteration   5: 116.169 ns/op

# Run progress: 13.26% complete, ETA 08:29:12
# Fork: 2 of 3
# Warmup Iteration   1: 126.878 ns/op
# Warmup Iteration   2: 119.901 ns/op
# Warmup Iteration   3: 140.792 ns/op
Iteration   1: 206.027 ns/op
Iteration   2: 190.686 ns/op
Iteration   3: 164.681 ns/op
Iteration   4: 226.293 ns/op
Iteration   5: 200.363 ns/op

# Run progress: 13.28% complete, ETA 08:29:02
# Fork: 3 of 3
# Warmup Iteration   1: 174.854 ns/op
# Warmup Iteration   2: 164.951 ns/op
# Warmup Iteration   3: 184.841 ns/op
Iteration   1: 166.993 ns/op
Iteration   2: 145.432 ns/op
Iteration   3: 123.051 ns/op
Iteration   4: 117.074 ns/op
Iteration   5: 122.382 ns/op


Result "kotlin_benchmarks.array.fill.Inline32int.Ref_to_Ref_as_Ref_arrayfillinst":
  149.755 ±(99.9%) 42.190 ns/op [Average]
  (min, avg, max) = (116.169, 149.755, 226.293), stdev = 39.465
  CI (99.9%): [107.565, 191.945] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline32int.Ref_to_Ref_as_Ref_arrayfillinst
# Parameters: (size = 1000000)

# Run progress: 13.31% complete, ETA 08:28:54
# Fork: 1 of 3
# Warmup Iteration   1: 55587859.632 ns/op
# Warmup Iteration   2: 11974192.952 ns/op
# Warmup Iteration   3: 8481301.653 ns/op
Iteration   1: 3847302.682 ns/op
Iteration   2: 3891780.777 ns/op
Iteration   3: 6235157.830 ns/op
Iteration   4: 23554707.372 ns/op
Iteration   5: 28060201.389 ns/op

# Run progress: 13.33% complete, ETA 08:28:45
# Fork: 2 of 3
# Warmup Iteration   1: 25979850.000 ns/op
# Warmup Iteration   2: 26721684.951 ns/op
# Warmup Iteration   3: 44522538.208 ns/op
Iteration   1: 43189595.458 ns/op
Iteration   2: 34157870.833 ns/op
Iteration   3: 29845519.057 ns/op
Iteration   4: 33335147.871 ns/op
Iteration   5: 34939181.034 ns/op

# Run progress: 13.36% complete, ETA 08:28:38
# Fork: 3 of 3
# Warmup Iteration   1: 32254149.750 ns/op
# Warmup Iteration   2: 32125045.563 ns/op
# Warmup Iteration   3: 4012991.534 ns/op
Iteration   1: 3557617.958 ns/op
Iteration   2: 3084660.314 ns/op
Iteration   3: 7183282.923 ns/op
Iteration   4: 12215918.675 ns/op
Iteration   5: 12437064.815 ns/op


Result "kotlin_benchmarks.array.fill.Inline32int.Ref_to_Ref_as_Ref_arrayfillinst":
  18635667.266 ±(99.9%) 15210901.382 ns/op [Average]
  (min, avg, max) = (3084660.314, 18635667.266, 43189595.458), stdev = 14228286.591
  CI (99.9%): [3424765.884, 33846568.648] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline32int.Ref_to_Ref_as_Ref_arrayfillstat
# Parameters: (size = 100)

# Run progress: 13.38% complete, ETA 08:28:28
# Fork: 1 of 3
# Warmup Iteration   1: 162.955 ns/op
# Warmup Iteration   2: 164.841 ns/op
# Warmup Iteration   3: 160.548 ns/op
Iteration   1: 183.467 ns/op
Iteration   2: 224.871 ns/op
Iteration   3: 180.697 ns/op
Iteration   4: 184.544 ns/op
Iteration   5: 127.734 ns/op

# Run progress: 13.41% complete, ETA 08:28:20
# Fork: 2 of 3
# Warmup Iteration   1: 190.755 ns/op
# Warmup Iteration   2: 186.309 ns/op
# Warmup Iteration   3: 183.689 ns/op
Iteration   1: 180.507 ns/op
Iteration   2: 175.972 ns/op
Iteration   3: 191.859 ns/op
Iteration   4: 153.104 ns/op
Iteration   5: 152.169 ns/op

# Run progress: 13.43% complete, ETA 08:28:10
# Fork: 3 of 3
# Warmup Iteration   1: 160.784 ns/op
# Warmup Iteration   2: 138.286 ns/op
# Warmup Iteration   3: 116.308 ns/op
Iteration   1: 133.561 ns/op
Iteration   2: 156.996 ns/op
Iteration   3: 164.927 ns/op
Iteration   4: 146.395 ns/op
Iteration   5: 134.821 ns/op


Result "kotlin_benchmarks.array.fill.Inline32int.Ref_to_Ref_as_Ref_arrayfillstat":
  166.108 ±(99.9%) 28.027 ns/op [Average]
  (min, avg, max) = (127.734, 166.108, 224.871), stdev = 26.216
  CI (99.9%): [138.082, 194.135] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline32int.Ref_to_Ref_as_Ref_arrayfillstat
# Parameters: (size = 1000000)

# Run progress: 13.46% complete, ETA 08:28:01
# Fork: 1 of 3
# Warmup Iteration   1: 4105693.535 ns/op
# Warmup Iteration   2: 3142217.261 ns/op
# Warmup Iteration   3: 3146496.356 ns/op
Iteration   1: 25808539.634 ns/op
Iteration   2: 49739847.238 ns/op
Iteration   3: 38779307.111 ns/op
Iteration   4: 44047947.917 ns/op
Iteration   5: 57277791.667 ns/op

# Run progress: 13.48% complete, ETA 08:27:54
# Fork: 2 of 3
# Warmup Iteration   1: 59086187.500 ns/op
# Warmup Iteration   2: 18816226.074 ns/op
# Warmup Iteration   3: 41851493.320 ns/op
Iteration   1: 41416276.640 ns/op
Iteration   2: 21557809.404 ns/op
Iteration   3: 32897965.032 ns/op
Iteration   4: 25203212.500 ns/op
Iteration   5: 5404128.968 ns/op

# Run progress: 13.50% complete, ETA 08:27:45
# Fork: 3 of 3
# Warmup Iteration   1: 13024632.474 ns/op
# Warmup Iteration   2: 36008507.464 ns/op
# Warmup Iteration   3: 12948815.167 ns/op
Iteration   1: 13764433.568 ns/op
Iteration   2: 12072559.524 ns/op
Iteration   3: 11755453.488 ns/op
Iteration   4: 11160775.467 ns/op
Iteration   5: 10818122.763 ns/op


Result "kotlin_benchmarks.array.fill.Inline32int.Ref_to_Ref_as_Ref_arrayfillstat":
  26780278.061 ±(99.9%) 17494061.955 ns/op [Average]
  (min, avg, max) = (5404128.968, 26780278.061, 57277791.667), stdev = 16363956.409
  CI (99.9%): [9286216.106, 44274340.017] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline32int.Ref_to_Ref_as_Ref_fillinst
# Parameters: (size = 100)

# Run progress: 13.53% complete, ETA 08:27:41
# Fork: 1 of 3
# Warmup Iteration   1: 188.611 ns/op
# Warmup Iteration   2: 176.882 ns/op
# Warmup Iteration   3: 174.298 ns/op
Iteration   1: 203.642 ns/op
Iteration   2: 192.119 ns/op
Iteration   3: 231.281 ns/op
Iteration   4: 208.886 ns/op
Iteration   5: 211.112 ns/op

# Run progress: 13.55% complete, ETA 08:27:33
# Fork: 2 of 3
# Warmup Iteration   1: 192.093 ns/op
# Warmup Iteration   2: 203.964 ns/op
# Warmup Iteration   3: 204.063 ns/op
Iteration   1: 202.926 ns/op
Iteration   2: 204.265 ns/op
Iteration   3: 240.720 ns/op
Iteration   4: 239.595 ns/op
Iteration   5: 220.033 ns/op

# Run progress: 13.58% complete, ETA 08:27:26
# Fork: 3 of 3
# Warmup Iteration   1: 153.908 ns/op
# Warmup Iteration   2: 133.067 ns/op
# Warmup Iteration   3: 138.421 ns/op
Iteration   1: 160.475 ns/op
Iteration   2: 194.297 ns/op
Iteration   3: 172.523 ns/op
Iteration   4: 162.254 ns/op
Iteration   5: 197.015 ns/op


Result "kotlin_benchmarks.array.fill.Inline32int.Ref_to_Ref_as_Ref_fillinst":
  202.743 ±(99.9%) 26.467 ns/op [Average]
  (min, avg, max) = (160.475, 202.743, 240.720), stdev = 24.757
  CI (99.9%): [176.276, 229.210] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline32int.Ref_to_Ref_as_Ref_fillinst
# Parameters: (size = 1000000)

# Run progress: 13.60% complete, ETA 08:27:18
# Fork: 1 of 3
# Warmup Iteration   1: 52380875.000 ns/op
# Warmup Iteration   2: 47856740.545 ns/op
# Warmup Iteration   3: 20236689.180 ns/op
Iteration   1: 8528110.647 ns/op
Iteration   2: 3417272.395 ns/op
Iteration   3: 2706980.345 ns/op
Iteration   4: 4277873.059 ns/op
Iteration   5: 10794577.320 ns/op

# Run progress: 13.63% complete, ETA 08:27:12
# Fork: 2 of 3
# Warmup Iteration   1: 6603190.865 ns/op
# Warmup Iteration   2: 52309835.400 ns/op
# Warmup Iteration   3: 25196178.125 ns/op
Iteration   1: 28164466.444 ns/op
Iteration   2: 4373212.500 ns/op
Iteration   3: 3263731.837 ns/op
Iteration   4: 9977900.324 ns/op
Iteration   5: 12939526.167 ns/op

# Run progress: 13.65% complete, ETA 08:27:06
# Fork: 3 of 3
# Warmup Iteration   1: 24618314.024 ns/op
# Warmup Iteration   2: 28244828.838 ns/op
# Warmup Iteration   3: 44177548.625 ns/op
Iteration   1: 45498068.870 ns/op
Iteration   2: 42272248.320 ns/op
Iteration   3: 32241845.063 ns/op
Iteration   4: 36547375.000 ns/op
Iteration   5: 37366996.926 ns/op


Result "kotlin_benchmarks.array.fill.Inline32int.Ref_to_Ref_as_Ref_fillinst":
  18824679.014 ±(99.9%) 17213417.929 ns/op [Average]
  (min, avg, max) = (2706980.345, 18824679.014, 45498068.870), stdev = 16101441.812
  CI (99.9%): [1611261.085, 36038096.943] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline32int.Ref_to_Ref_as_Ref_fillstat
# Parameters: (size = 100)

# Run progress: 13.68% complete, ETA 08:26:59
# Fork: 1 of 3
# Warmup Iteration   1: 132.859 ns/op
# Warmup Iteration   2: 171.303 ns/op
# Warmup Iteration   3: 261.376 ns/op
Iteration   1: 237.525 ns/op
Iteration   2: 161.483 ns/op
Iteration   3: 181.415 ns/op
Iteration   4: 204.331 ns/op
Iteration   5: 229.131 ns/op

# Run progress: 13.70% complete, ETA 08:26:49
# Fork: 2 of 3
# Warmup Iteration   1: 169.266 ns/op
# Warmup Iteration   2: 245.615 ns/op
# Warmup Iteration   3: 87.562 ns/op
Iteration   1: 69.921 ns/op
Iteration   2: 69.872 ns/op
Iteration   3: 69.893 ns/op
Iteration   4: 69.784 ns/op
Iteration   5: 70.038 ns/op

# Run progress: 13.73% complete, ETA 08:26:47
# Fork: 3 of 3
# Warmup Iteration   1: 70.573 ns/op
# Warmup Iteration   2: 71.202 ns/op
# Warmup Iteration   3: 69.984 ns/op
Iteration   1: 70.367 ns/op
Iteration   2: 70.300 ns/op
Iteration   3: 69.955 ns/op
Iteration   4: 70.731 ns/op
Iteration   5: 70.451 ns/op


Result "kotlin_benchmarks.array.fill.Inline32int.Ref_to_Ref_as_Ref_fillstat":
  114.346 ±(99.9%) 71.553 ns/op [Average]
  (min, avg, max) = (69.784, 114.346, 237.525), stdev = 66.931
  CI (99.9%): [42.793, 185.900] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline32int.Ref_to_Ref_as_Ref_fillstat
# Parameters: (size = 1000000)

# Run progress: 13.75% complete, ETA 08:26:36
# Fork: 1 of 3
# Warmup Iteration   1: 36527311.793 ns/op
# Warmup Iteration   2: 48869150.810 ns/op
# Warmup Iteration   3: 39283890.407 ns/op
Iteration   1: 54074355.263 ns/op
Iteration   2: 38018172.852 ns/op
Iteration   3: 33414202.935 ns/op
Iteration   4: 28620412.028 ns/op
Iteration   5: 40808722.731 ns/op

# Run progress: 13.77% complete, ETA 08:26:27
# Fork: 2 of 3
# Warmup Iteration   1: 36963459.821 ns/op
# Warmup Iteration   2: 37812429.037 ns/op
# Warmup Iteration   3: 53059800.421 ns/op
Iteration   1: 52454479.150 ns/op
Iteration   2: 53331054.842 ns/op
Iteration   3: 49156208.333 ns/op
Iteration   4: 37801368.852 ns/op
Iteration   5: 40459056.640 ns/op

# Run progress: 13.80% complete, ETA 08:26:17
# Fork: 3 of 3
# Warmup Iteration   1: 45394327.913 ns/op
# Warmup Iteration   2: 50971510.400 ns/op
# Warmup Iteration   3: 44381882.261 ns/op
Iteration   1: 37733010.778 ns/op
Iteration   2: 44798306.174 ns/op
Iteration   3: 11093150.648 ns/op
Iteration   4: 5561471.221 ns/op
Iteration   5: 7208090.827 ns/op


Result "kotlin_benchmarks.array.fill.Inline32int.Ref_to_Ref_as_Ref_fillstat":
  35635470.885 ±(99.9%) 17230038.639 ns/op [Average]
  (min, avg, max) = (5561471.221, 35635470.885, 54074355.263), stdev = 16116988.834
  CI (99.9%): [18405432.246, 52865509.524] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline32int.Ref_to_Val_as_Val_arrayfillinst
# Parameters: (size = 100)

# Run progress: 13.82% complete, ETA 08:26:07
# Fork: 1 of 3
# Warmup Iteration   1: 76.000 ns/op
# Warmup Iteration   2: 72.071 ns/op
# Warmup Iteration   3: 69.626 ns/op
Iteration   1: 79.377 ns/op
Iteration   2: 69.391 ns/op
Iteration   3: 69.299 ns/op
Iteration   4: 70.019 ns/op
Iteration   5: 70.324 ns/op

# Run progress: 13.85% complete, ETA 08:25:57
# Fork: 2 of 3
# Warmup Iteration   1: 71.730 ns/op
# Warmup Iteration   2: 71.305 ns/op
# Warmup Iteration   3: 70.817 ns/op
Iteration   1: 70.631 ns/op
Iteration   2: 70.935 ns/op
Iteration   3: 70.180 ns/op
Iteration   4: 69.637 ns/op
Iteration   5: 70.166 ns/op

# Run progress: 13.87% complete, ETA 08:25:47
# Fork: 3 of 3
# Warmup Iteration   1: 73.067 ns/op
# Warmup Iteration   2: 72.142 ns/op
# Warmup Iteration   3: 71.213 ns/op
Iteration   1: 70.446 ns/op
Iteration   2: 70.337 ns/op
Iteration   3: 70.386 ns/op
Iteration   4: 70.045 ns/op
Iteration   5: 69.712 ns/op


Result "kotlin_benchmarks.array.fill.Inline32int.Ref_to_Val_as_Val_arrayfillinst":
  70.726 ±(99.9%) 2.603 ns/op [Average]
  (min, avg, max) = (69.299, 70.726, 79.377), stdev = 2.435
  CI (99.9%): [68.123, 73.329] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline32int.Ref_to_Val_as_Val_arrayfillinst
# Parameters: (size = 1000000)

# Run progress: 13.90% complete, ETA 08:25:36
# Fork: 1 of 3
# Warmup Iteration   1: 31237079.545 ns/op
# Warmup Iteration   2: 31503304.303 ns/op
# Warmup Iteration   3: 34029797.233 ns/op
Iteration   1: 17900122.807 ns/op
Iteration   2: 10780882.543 ns/op
Iteration   3: 28834238.114 ns/op
Iteration   4: 33641069.433 ns/op
Iteration   5: 45282731.913 ns/op

# Run progress: 13.92% complete, ETA 08:25:26
# Fork: 2 of 3
# Warmup Iteration   1: 37119067.889 ns/op
# Warmup Iteration   2: 47106467.818 ns/op
# Warmup Iteration   3: 40192055.000 ns/op
Iteration   1: 46264253.818 ns/op
Iteration   2: 47872529.762 ns/op
Iteration   3: 21798691.130 ns/op
Iteration   4: 29172185.714 ns/op
Iteration   5: 23239568.511 ns/op

# Run progress: 13.95% complete, ETA 08:25:16
# Fork: 3 of 3
# Warmup Iteration   1: 50286185.400 ns/op
# Warmup Iteration   2: 28169228.000 ns/op
# Warmup Iteration   3: 15962600.922 ns/op
Iteration   1: 12884322.785 ns/op
Iteration   2: 15662147.727 ns/op
Iteration   3: 22616133.152 ns/op
Iteration   4: 25914614.600 ns/op
Iteration   5: 23431045.455 ns/op


Result "kotlin_benchmarks.array.fill.Inline32int.Ref_to_Val_as_Val_arrayfillinst":
  27019635.831 ±(99.9%) 12588511.414 ns/op [Average]
  (min, avg, max) = (10780882.543, 27019635.831, 47872529.762), stdev = 11775301.388
  CI (99.9%): [14431124.417, 39608147.245] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline32int.Ref_to_Val_as_Val_arrayfillstat
# Parameters: (size = 100)

# Run progress: 13.97% complete, ETA 08:25:07
# Fork: 1 of 3
# Warmup Iteration   1: 69.461 ns/op
# Warmup Iteration   2: 70.896 ns/op
# Warmup Iteration   3: 70.394 ns/op
Iteration   1: 70.455 ns/op
Iteration   2: 69.934 ns/op
Iteration   3: 70.851 ns/op
Iteration   4: 71.791 ns/op
Iteration   5: 70.144 ns/op

# Run progress: 14.00% complete, ETA 08:25:04
# Fork: 2 of 3
# Warmup Iteration   1: 70.226 ns/op
# Warmup Iteration   2: 71.476 ns/op
# Warmup Iteration   3: 70.782 ns/op
Iteration   1: 69.881 ns/op
Iteration   2: 70.355 ns/op
Iteration   3: 70.688 ns/op
Iteration   4: 70.651 ns/op
Iteration   5: 70.237 ns/op

# Run progress: 14.02% complete, ETA 08:24:54
# Fork: 3 of 3
# Warmup Iteration   1: 69.894 ns/op
# Warmup Iteration   2: 71.523 ns/op
# Warmup Iteration   3: 70.645 ns/op
Iteration   1: 69.301 ns/op
Iteration   2: 69.257 ns/op
Iteration   3: 69.561 ns/op
Iteration   4: 70.019 ns/op
Iteration   5: 71.116 ns/op


Result "kotlin_benchmarks.array.fill.Inline32int.Ref_to_Val_as_Val_arrayfillstat":
  70.283 ±(99.9%) 0.731 ns/op [Average]
  (min, avg, max) = (69.257, 70.283, 71.791), stdev = 0.683
  CI (99.9%): [69.552, 71.013] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline32int.Ref_to_Val_as_Val_arrayfillstat
# Parameters: (size = 1000000)

# Run progress: 14.04% complete, ETA 08:24:43
# Fork: 1 of 3
# Warmup Iteration   1: 22778127.778 ns/op
# Warmup Iteration   2: 31145753.676 ns/op
# Warmup Iteration   3: 38984754.630 ns/op
Iteration   1: 49090755.952 ns/op
Iteration   2: 50048527.100 ns/op
Iteration   3: 48506674.619 ns/op
Iteration   4: 42566078.320 ns/op
Iteration   5: 49438646.810 ns/op

# Run progress: 14.07% complete, ETA 08:24:34
# Fork: 2 of 3
# Warmup Iteration   1: 40782350.000 ns/op
# Warmup Iteration   2: 35560212.655 ns/op
# Warmup Iteration   3: 49349089.286 ns/op
Iteration   1: 43276312.500 ns/op
Iteration   2: 49925337.286 ns/op
Iteration   3: 43902820.652 ns/op
Iteration   4: 33643394.467 ns/op
Iteration   5: 11750029.558 ns/op

# Run progress: 14.09% complete, ETA 08:24:25
# Fork: 3 of 3
# Warmup Iteration   1: 6550170.432 ns/op
# Warmup Iteration   2: 10109021.040 ns/op
# Warmup Iteration   3: 25279662.690 ns/op
Iteration   1: 23871862.395 ns/op
Iteration   2: 48144363.636 ns/op
Iteration   3: 33205116.935 ns/op
Iteration   4: 40065516.000 ns/op
Iteration   5: 37590858.037 ns/op


Result "kotlin_benchmarks.array.fill.Inline32int.Ref_to_Val_as_Val_arrayfillstat":
  40335086.285 ±(99.9%) 11750426.663 ns/op [Average]
  (min, avg, max) = (11750029.558, 40335086.285, 50048527.100), stdev = 10991356.392
  CI (99.9%): [28584659.622, 52085512.947] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline32int.Ref_to_Val_as_Val_fillinst
# Parameters: (size = 100)

# Run progress: 14.12% complete, ETA 08:24:16
# Fork: 1 of 3
# Warmup Iteration   1: 76.182 ns/op
# Warmup Iteration   2: 75.684 ns/op
# Warmup Iteration   3: 75.937 ns/op
Iteration   1: 75.853 ns/op
Iteration   2: 75.226 ns/op
Iteration   3: 73.932 ns/op
Iteration   4: 74.169 ns/op
Iteration   5: 73.470 ns/op

# Run progress: 14.14% complete, ETA 08:24:05
# Fork: 2 of 3
# Warmup Iteration   1: 74.090 ns/op
# Warmup Iteration   2: 73.756 ns/op
# Warmup Iteration   3: 90.397 ns/op
Iteration   1: 73.264 ns/op
Iteration   2: 73.334 ns/op
Iteration   3: 73.354 ns/op
Iteration   4: 72.598 ns/op
Iteration   5: 75.091 ns/op

# Run progress: 14.17% complete, ETA 08:23:54
# Fork: 3 of 3
# Warmup Iteration   1: 71.405 ns/op
# Warmup Iteration   2: 71.113 ns/op
# Warmup Iteration   3: 71.779 ns/op
Iteration   1: 71.316 ns/op
Iteration   2: 72.519 ns/op
Iteration   3: 73.450 ns/op
Iteration   4: 74.717 ns/op
Iteration   5: 72.956 ns/op


Result "kotlin_benchmarks.array.fill.Inline32int.Ref_to_Val_as_Val_fillinst":
  73.683 ±(99.9%) 1.265 ns/op [Average]
  (min, avg, max) = (71.316, 73.683, 75.853), stdev = 1.183
  CI (99.9%): [72.418, 74.948] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline32int.Ref_to_Val_as_Val_fillinst
# Parameters: (size = 1000000)

# Run progress: 14.19% complete, ETA 08:23:44
# Fork: 1 of 3
# Warmup Iteration   1: 11659238.989 ns/op
# Warmup Iteration   2: 13937111.486 ns/op
# Warmup Iteration   3: 14675628.014 ns/op
Iteration   1: 16553924.180 ns/op
Iteration   2: 12783416.139 ns/op
Iteration   3: 19288616.358 ns/op
Iteration   4: 15737201.394 ns/op
Iteration   5: 19986886.431 ns/op

# Run progress: 14.22% complete, ETA 08:23:34
# Fork: 2 of 3
# Warmup Iteration   1: 18165531.250 ns/op
# Warmup Iteration   2: 5955583.580 ns/op
# Warmup Iteration   3: 5283809.868 ns/op
Iteration   1: 7174274.525 ns/op
Iteration   2: 13002556.443 ns/op
Iteration   3: 17407678.678 ns/op
Iteration   4: 23502795.455 ns/op
Iteration   5: 19402763.889 ns/op

# Run progress: 14.24% complete, ETA 08:23:24
# Fork: 3 of 3
# Warmup Iteration   1: 29932867.857 ns/op
# Warmup Iteration   2: 31623986.969 ns/op
# Warmup Iteration   3: 28650831.028 ns/op
Iteration   1: 35158408.069 ns/op
Iteration   2: 14882912.985 ns/op
Iteration   3: 16942000.683 ns/op
Iteration   4: 24135949.405 ns/op
Iteration   5: 15840809.891 ns/op


Result "kotlin_benchmarks.array.fill.Inline32int.Ref_to_Val_as_Val_fillinst":
  18120012.968 ±(99.9%) 6774270.065 ns/op [Average]
  (min, avg, max) = (7174274.525, 18120012.968, 35158408.069), stdev = 6336656.423
  CI (99.9%): [11345742.903, 24894283.034] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline32int.Ref_to_Val_as_Val_fillstat
# Parameters: (size = 100)

# Run progress: 14.26% complete, ETA 08:23:14
# Fork: 1 of 3
# Warmup Iteration   1: 70.670 ns/op
# Warmup Iteration   2: 71.130 ns/op
# Warmup Iteration   3: 69.857 ns/op
Iteration   1: 69.974 ns/op
Iteration   2: 69.584 ns/op
Iteration   3: 70.038 ns/op
Iteration   4: 69.532 ns/op
Iteration   5: 82.994 ns/op

# Run progress: 14.29% complete, ETA 08:23:04
# Fork: 2 of 3
# Warmup Iteration   1: 69.859 ns/op
# Warmup Iteration   2: 71.127 ns/op
# Warmup Iteration   3: 69.742 ns/op
Iteration   1: 69.409 ns/op
Iteration   2: 69.776 ns/op
Iteration   3: 69.611 ns/op
Iteration   4: 71.027 ns/op
Iteration   5: 70.205 ns/op

# Run progress: 14.31% complete, ETA 08:23:00
# Fork: 3 of 3
# Warmup Iteration   1: 70.728 ns/op
# Warmup Iteration   2: 72.243 ns/op
# Warmup Iteration   3: 72.563 ns/op
Iteration   1: 70.541 ns/op
Iteration   2: 69.270 ns/op
Iteration   3: 69.728 ns/op
Iteration   4: 70.042 ns/op
Iteration   5: 73.393 ns/op


Result "kotlin_benchmarks.array.fill.Inline32int.Ref_to_Val_as_Val_fillstat":
  71.008 ±(99.9%) 3.704 ns/op [Average]
  (min, avg, max) = (69.270, 71.008, 82.994), stdev = 3.465
  CI (99.9%): [67.305, 74.712] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline32int.Ref_to_Val_as_Val_fillstat
# Parameters: (size = 1000000)

# Run progress: 14.34% complete, ETA 08:22:49
# Fork: 1 of 3
# Warmup Iteration   1: 28754236.914 ns/op
# Warmup Iteration   2: 33503841.387 ns/op
# Warmup Iteration   3: 31983398.438 ns/op
Iteration   1: 33998612.500 ns/op
Iteration   2: 42570086.792 ns/op
Iteration   3: 39357907.038 ns/op
Iteration   4: 13100321.051 ns/op
Iteration   5: 28680655.971 ns/op

# Run progress: 14.36% complete, ETA 08:22:40
# Fork: 2 of 3
# Warmup Iteration   1: 19470508.019 ns/op
# Warmup Iteration   2: 33109366.935 ns/op
# Warmup Iteration   3: 26739356.342 ns/op
Iteration   1: 36344961.286 ns/op
Iteration   2: 50649197.900 ns/op
Iteration   3: 49033303.571 ns/op
Iteration   4: 52505325.000 ns/op
Iteration   5: 45448239.130 ns/op

# Run progress: 14.39% complete, ETA 08:22:31
# Fork: 3 of 3
# Warmup Iteration   1: 42113052.083 ns/op
# Warmup Iteration   2: 54659745.579 ns/op
# Warmup Iteration   3: 62479642.176 ns/op
Iteration   1: 54719133.737 ns/op
Iteration   2: 48031342.818 ns/op
Iteration   3: 44031614.130 ns/op
Iteration   4: 17484857.759 ns/op
Iteration   5: 24844658.714 ns/op


Result "kotlin_benchmarks.array.fill.Inline32int.Ref_to_Val_as_Val_fillstat":
  38720014.493 ±(99.9%) 13698513.591 ns/op [Average]
  (min, avg, max) = (13100321.051, 38720014.493, 54719133.737), stdev = 12813598.113
  CI (99.9%): [25021500.902, 52418528.085] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline32int.Val_to_Ref_as_Ref_arrayfillinst
# Parameters: (size = 100)

# Run progress: 14.41% complete, ETA 08:22:22
# Fork: 1 of 3
# Warmup Iteration   1: 70.130 ns/op
# Warmup Iteration   2: 72.579 ns/op
# Warmup Iteration   3: 71.725 ns/op
Iteration   1: 69.912 ns/op
Iteration   2: 69.908 ns/op
Iteration   3: 66.502 ns/op
Iteration   4: 66.589 ns/op
Iteration   5: 66.263 ns/op

# Run progress: 14.44% complete, ETA 08:22:12
# Fork: 2 of 3
# Warmup Iteration   1: 68.205 ns/op
# Warmup Iteration   2: 67.836 ns/op
# Warmup Iteration   3: 66.188 ns/op
Iteration   1: 66.089 ns/op
Iteration   2: 66.112 ns/op
Iteration   3: 66.283 ns/op
Iteration   4: 68.356 ns/op
Iteration   5: 69.686 ns/op

# Run progress: 14.46% complete, ETA 08:22:02
# Fork: 3 of 3
# Warmup Iteration   1: 74.210 ns/op
# Warmup Iteration   2: 67.840 ns/op
# Warmup Iteration   3: 66.103 ns/op
Iteration   1: 66.163 ns/op
Iteration   2: 66.180 ns/op
Iteration   3: 66.104 ns/op
Iteration   4: 66.059 ns/op
Iteration   5: 66.150 ns/op


Result "kotlin_benchmarks.array.fill.Inline32int.Val_to_Ref_as_Ref_arrayfillinst":
  67.090 ±(99.9%) 1.635 ns/op [Average]
  (min, avg, max) = (66.059, 67.090, 69.912), stdev = 1.529
  CI (99.9%): [65.456, 68.725] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline32int.Val_to_Ref_as_Ref_arrayfillinst
# Parameters: (size = 1000000)

# Run progress: 14.49% complete, ETA 08:21:52
# Fork: 1 of 3
# Warmup Iteration   1: 23378882.591 ns/op
# Warmup Iteration   2: 41125397.462 ns/op
# Warmup Iteration   3: 38947665.148 ns/op
Iteration   1: 49688222.238 ns/op
Iteration   2: 36710186.036 ns/op
Iteration   3: 37742742.259 ns/op
Iteration   4: 11751625.000 ns/op
Iteration   5: 27863120.361 ns/op

# Run progress: 14.51% complete, ETA 08:21:43
# Fork: 2 of 3
# Warmup Iteration   1: 17093778.000 ns/op
# Warmup Iteration   2: 39504108.962 ns/op
# Warmup Iteration   3: 51620235.400 ns/op
Iteration   1: 46855346.591 ns/op
Iteration   2: 46582134.455 ns/op
Iteration   3: 48017019.810 ns/op
Iteration   4: 45646639.478 ns/op
Iteration   5: 48031820.091 ns/op

# Run progress: 14.53% complete, ETA 08:21:34
# Fork: 3 of 3
# Warmup Iteration   1: 53432399.105 ns/op
# Warmup Iteration   2: 47741575.773 ns/op
# Warmup Iteration   3: 51688160.400 ns/op
Iteration   1: 46701884.455 ns/op
Iteration   2: 36381875.000 ns/op
Iteration   3: 32025210.938 ns/op
Iteration   4: 7340870.775 ns/op
Iteration   5: 7361550.725 ns/op


Result "kotlin_benchmarks.array.fill.Inline32int.Val_to_Ref_as_Ref_arrayfillinst":
  35246683.214 ±(99.9%) 16214673.313 ns/op [Average]
  (min, avg, max) = (7340870.775, 35246683.214, 49688222.238), stdev = 15167215.478
  CI (99.9%): [19032009.901, 51461356.527] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline32int.Val_to_Ref_as_Ref_arrayfillstat
# Parameters: (size = 100)

# Run progress: 14.56% complete, ETA 08:21:24
# Fork: 1 of 3
# Warmup Iteration   1: 71.160 ns/op
# Warmup Iteration   2: 71.077 ns/op
# Warmup Iteration   3: 69.547 ns/op
Iteration   1: 69.696 ns/op
Iteration   2: 69.685 ns/op
Iteration   3: 69.714 ns/op
Iteration   4: 69.783 ns/op
Iteration   5: 69.513 ns/op

# Run progress: 14.58% complete, ETA 08:21:14
# Fork: 2 of 3
# Warmup Iteration   1: 71.522 ns/op
# Warmup Iteration   2: 71.744 ns/op
# Warmup Iteration   3: 85.326 ns/op
Iteration   1: 69.684 ns/op
Iteration   2: 70.359 ns/op
Iteration   3: 69.996 ns/op
Iteration   4: 69.765 ns/op
Iteration   5: 69.566 ns/op

# Run progress: 14.61% complete, ETA 08:21:03
# Fork: 3 of 3
# Warmup Iteration   1: 69.700 ns/op
# Warmup Iteration   2: 71.335 ns/op
# Warmup Iteration   3: 69.704 ns/op
Iteration   1: 70.082 ns/op
Iteration   2: 71.149 ns/op
Iteration   3: 70.990 ns/op
Iteration   4: 70.378 ns/op
Iteration   5: 69.384 ns/op


Result "kotlin_benchmarks.array.fill.Inline32int.Val_to_Ref_as_Ref_arrayfillstat":
  69.983 ±(99.9%) 0.561 ns/op [Average]
  (min, avg, max) = (69.384, 69.983, 71.149), stdev = 0.525
  CI (99.9%): [69.422, 70.544] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline32int.Val_to_Ref_as_Ref_arrayfillstat
# Parameters: (size = 1000000)

# Run progress: 14.63% complete, ETA 08:20:53
# Fork: 1 of 3
# Warmup Iteration   1: 30655768.382 ns/op
# Warmup Iteration   2: 39143291.667 ns/op
# Warmup Iteration   3: 29885063.735 ns/op
Iteration   1: 13457799.342 ns/op
Iteration   2: 28985121.429 ns/op
Iteration   3: 37685410.714 ns/op
Iteration   4: 43615262.167 ns/op
Iteration   5: 44090715.609 ns/op

# Run progress: 14.66% complete, ETA 08:20:44
# Fork: 2 of 3
# Warmup Iteration   1: 44839809.783 ns/op
# Warmup Iteration   2: 41959851.680 ns/op
# Warmup Iteration   3: 46986433.727 ns/op
Iteration   1: 43462428.833 ns/op
Iteration   2: 43020217.000 ns/op
Iteration   3: 43834634.087 ns/op
Iteration   4: 7784897.287 ns/op
Iteration   5: 8547792.708 ns/op

# Run progress: 14.68% complete, ETA 08:20:35
# Fork: 3 of 3
# Warmup Iteration   1: 26389502.128 ns/op
# Warmup Iteration   2: 12343486.280 ns/op
# Warmup Iteration   3: 7608022.075 ns/op
Iteration   1: 12111013.393 ns/op
Iteration   2: 12149717.647 ns/op
Iteration   3: 29268202.371 ns/op
Iteration   4: 30943242.424 ns/op
Iteration   5: 30425444.455 ns/op


Result "kotlin_benchmarks.array.fill.Inline32int.Val_to_Ref_as_Ref_arrayfillstat":
  28625459.964 ±(99.9%) 15187343.961 ns/op [Average]
  (min, avg, max) = (7784897.287, 28625459.964, 44090715.609), stdev = 14206250.965
  CI (99.9%): [13438116.003, 43812803.926] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline32int.Val_to_Ref_as_Ref_fillinst
# Parameters: (size = 100)

# Run progress: 14.71% complete, ETA 08:20:25
# Fork: 1 of 3
# Warmup Iteration   1: 76.043 ns/op
# Warmup Iteration   2: 75.246 ns/op
# Warmup Iteration   3: 74.871 ns/op
Iteration   1: 74.094 ns/op
Iteration   2: 74.975 ns/op
Iteration   3: 75.618 ns/op
Iteration   4: 75.501 ns/op
Iteration   5: 75.055 ns/op

# Run progress: 14.73% complete, ETA 08:20:15
# Fork: 2 of 3
# Warmup Iteration   1: 73.909 ns/op
# Warmup Iteration   2: 73.348 ns/op
# Warmup Iteration   3: 73.543 ns/op
Iteration   1: 74.068 ns/op
Iteration   2: 73.993 ns/op
Iteration   3: 73.200 ns/op
Iteration   4: 73.172 ns/op
Iteration   5: 73.691 ns/op

# Run progress: 14.75% complete, ETA 08:20:06
# Fork: 3 of 3
# Warmup Iteration   1: 74.280 ns/op
# Warmup Iteration   2: 74.002 ns/op
# Warmup Iteration   3: 73.351 ns/op
Iteration   1: 73.579 ns/op
Iteration   2: 73.689 ns/op
Iteration   3: 73.976 ns/op
Iteration   4: 74.253 ns/op
Iteration   5: 73.243 ns/op


Result "kotlin_benchmarks.array.fill.Inline32int.Val_to_Ref_as_Ref_fillinst":
  74.141 ±(99.9%) 0.856 ns/op [Average]
  (min, avg, max) = (73.172, 74.141, 75.618), stdev = 0.801
  CI (99.9%): [73.284, 74.997] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline32int.Val_to_Ref_as_Ref_fillinst
# Parameters: (size = 1000000)

# Run progress: 14.78% complete, ETA 08:19:55
# Fork: 1 of 3
# Warmup Iteration   1: 8342822.829 ns/op
# Warmup Iteration   2: 12737584.354 ns/op
# Warmup Iteration   3: 21553669.319 ns/op
Iteration   1: 26704611.103 ns/op
Iteration   2: 19560082.547 ns/op
Iteration   3: 29140489.286 ns/op
Iteration   4: 27718134.000 ns/op
Iteration   5: 32559238.281 ns/op

# Run progress: 14.80% complete, ETA 08:19:46
# Fork: 2 of 3
# Warmup Iteration   1: 28954622.600 ns/op
# Warmup Iteration   2: 32620812.500 ns/op
# Warmup Iteration   3: 33132694.903 ns/op
Iteration   1: 33069420.710 ns/op
Iteration   2: 32788384.125 ns/op
Iteration   3: 31672046.875 ns/op
Iteration   4: 33206560.484 ns/op
Iteration   5: 27164992.342 ns/op

# Run progress: 14.83% complete, ETA 08:19:37
# Fork: 3 of 3
# Warmup Iteration   1: 29872709.559 ns/op
# Warmup Iteration   2: 7815011.771 ns/op
# Warmup Iteration   3: 30192477.941 ns/op
Iteration   1: 32195751.313 ns/op
Iteration   2: 33079744.613 ns/op
Iteration   3: 33631804.167 ns/op
Iteration   4: 31010702.030 ns/op
Iteration   5: 22528522.222 ns/op


Result "kotlin_benchmarks.array.fill.Inline32int.Val_to_Ref_as_Ref_fillinst":
  29735365.606 ±(99.9%) 4553141.445 ns/op [Average]
  (min, avg, max) = (19560082.547, 29735365.606, 33631804.167), stdev = 4259011.333
  CI (99.9%): [25182224.161, 34288507.051] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline32int.Val_to_Ref_as_Ref_fillstat
# Parameters: (size = 100)

# Run progress: 14.85% complete, ETA 08:19:27
# Fork: 1 of 3
# Warmup Iteration   1: 70.631 ns/op
# Warmup Iteration   2: 72.260 ns/op
# Warmup Iteration   3: 69.516 ns/op
Iteration   1: 70.218 ns/op
Iteration   2: 70.279 ns/op
Iteration   3: 70.086 ns/op
Iteration   4: 69.638 ns/op
Iteration   5: 69.725 ns/op

# Run progress: 14.88% complete, ETA 08:19:17
# Fork: 2 of 3
# Warmup Iteration   1: 70.422 ns/op
# Warmup Iteration   2: 72.418 ns/op
# Warmup Iteration   3: 70.558 ns/op
Iteration   1: 70.061 ns/op
Iteration   2: 70.082 ns/op
Iteration   3: 69.418 ns/op
Iteration   4: 69.575 ns/op
Iteration   5: 69.388 ns/op

# Run progress: 14.90% complete, ETA 08:19:06
# Fork: 3 of 3
# Warmup Iteration   1: 69.783 ns/op
# Warmup Iteration   2: 71.149 ns/op
# Warmup Iteration   3: 69.235 ns/op
Iteration   1: 69.306 ns/op
Iteration   2: 69.341 ns/op
Iteration   3: 69.701 ns/op
Iteration   4: 69.664 ns/op
Iteration   5: 70.053 ns/op


Result "kotlin_benchmarks.array.fill.Inline32int.Val_to_Ref_as_Ref_fillstat":
  69.769 ±(99.9%) 0.357 ns/op [Average]
  (min, avg, max) = (69.306, 69.769, 70.279), stdev = 0.334
  CI (99.9%): [69.412, 70.126] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline32int.Val_to_Ref_as_Ref_fillstat
# Parameters: (size = 1000000)

# Run progress: 14.93% complete, ETA 08:18:56
# Fork: 1 of 3
# Warmup Iteration   1: 38597868.577 ns/op
# Warmup Iteration   2: 34617533.333 ns/op
# Warmup Iteration   3: 40012953.500 ns/op
Iteration   1: 36143925.607 ns/op
Iteration   2: 35251311.793 ns/op
Iteration   3: 34878277.767 ns/op
Iteration   4: 33699418.033 ns/op
Iteration   5: 39403918.269 ns/op

# Run progress: 14.95% complete, ETA 08:18:47
# Fork: 2 of 3
# Warmup Iteration   1: 37016206.857 ns/op
# Warmup Iteration   2: 34352234.733 ns/op
# Warmup Iteration   3: 32236165.344 ns/op
Iteration   1: 35429339.069 ns/op
Iteration   2: 27414485.351 ns/op
Iteration   3: 27488212.737 ns/op
Iteration   4: 35545231.345 ns/op
Iteration   5: 35813037.379 ns/op

# Run progress: 14.98% complete, ETA 08:18:37
# Fork: 3 of 3
# Warmup Iteration   1: 35173070.414 ns/op
# Warmup Iteration   2: 35203004.310 ns/op
# Warmup Iteration   3: 23379067.227 ns/op
Iteration   1: 31194497.455 ns/op
Iteration   2: 31761595.063 ns/op
Iteration   3: 27083197.368 ns/op
Iteration   4: 30839811.879 ns/op
Iteration   5: 28167627.243 ns/op


Result "kotlin_benchmarks.array.fill.Inline32int.Val_to_Ref_as_Ref_fillstat":
  32674259.091 ±(99.9%) 4121477.609 ns/op [Average]
  (min, avg, max) = (27083197.368, 32674259.091, 39403918.269), stdev = 3855232.713
  CI (99.9%): [28552781.482, 36795736.700] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline32int.Val_to_Val_as_Val_arrayfillinst
# Parameters: (size = 100)

# Run progress: 15.00% complete, ETA 08:18:28
# Fork: 1 of 3
# Warmup Iteration   1: 73.115 ns/op
# Warmup Iteration   2: 72.504 ns/op
# Warmup Iteration   3: 70.498 ns/op
Iteration   1: 69.762 ns/op
Iteration   2: 70.128 ns/op
Iteration   3: 70.084 ns/op
Iteration   4: 69.961 ns/op
Iteration   5: 69.848 ns/op

# Run progress: 15.02% complete, ETA 08:18:17
# Fork: 2 of 3
# Warmup Iteration   1: 71.587 ns/op
# Warmup Iteration   2: 71.324 ns/op
# Warmup Iteration   3: 70.922 ns/op
Iteration   1: 71.162 ns/op
Iteration   2: 70.260 ns/op
Iteration   3: 70.337 ns/op
Iteration   4: 70.324 ns/op
Iteration   5: 70.567 ns/op

# Run progress: 15.05% complete, ETA 08:18:07
# Fork: 3 of 3
# Warmup Iteration   1: 72.969 ns/op
# Warmup Iteration   2: 71.854 ns/op
# Warmup Iteration   3: 69.555 ns/op
Iteration   1: 69.780 ns/op
Iteration   2: 70.241 ns/op
Iteration   3: 70.322 ns/op
Iteration   4: 70.238 ns/op
Iteration   5: 70.691 ns/op


Result "kotlin_benchmarks.array.fill.Inline32int.Val_to_Val_as_Val_arrayfillinst":
  70.247 ±(99.9%) 0.393 ns/op [Average]
  (min, avg, max) = (69.762, 70.247, 71.162), stdev = 0.368
  CI (99.9%): [69.854, 70.640] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline32int.Val_to_Val_as_Val_arrayfillinst
# Parameters: (size = 1000000)

# Run progress: 15.07% complete, ETA 08:17:57
# Fork: 1 of 3
# Warmup Iteration   1: 31500072.938 ns/op
# Warmup Iteration   2: 32620409.935 ns/op
# Warmup Iteration   3: 35011860.655 ns/op
Iteration   1: 32435390.625 ns/op
Iteration   2: 31439518.219 ns/op
Iteration   3: 35877391.393 ns/op
Iteration   4: 36181508.929 ns/op
Iteration   5: 36732955.357 ns/op

# Run progress: 15.10% complete, ETA 08:17:47
# Fork: 2 of 3
# Warmup Iteration   1: 34138981.967 ns/op
# Warmup Iteration   2: 33650224.452 ns/op
# Warmup Iteration   3: 25605827.244 ns/op
Iteration   1: 33008005.387 ns/op
Iteration   2: 25989308.769 ns/op
Iteration   3: 35663152.310 ns/op
Iteration   4: 28217885.417 ns/op
Iteration   5: 32998973.129 ns/op

# Run progress: 15.12% complete, ETA 08:17:38
# Fork: 3 of 3
# Warmup Iteration   1: 32916095.452 ns/op
# Warmup Iteration   2: 34218408.333 ns/op
# Warmup Iteration   3: 34180172.233 ns/op
Iteration   1: 27977104.730 ns/op
Iteration   2: 37397353.370 ns/op
Iteration   3: 38561890.444 ns/op
Iteration   4: 34703383.621 ns/op
Iteration   5: 36130690.464 ns/op


Result "kotlin_benchmarks.array.fill.Inline32int.Val_to_Val_as_Val_arrayfillinst":
  33554300.811 ±(99.9%) 4018342.653 ns/op [Average]
  (min, avg, max) = (25989308.769, 33554300.811, 38561890.444), stdev = 3758760.211
  CI (99.9%): [29535958.158, 37572643.463] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline32int.Val_to_Val_as_Val_arrayfillstat
# Parameters: (size = 100)

# Run progress: 15.15% complete, ETA 08:17:28
# Fork: 1 of 3
# Warmup Iteration   1: 71.110 ns/op
# Warmup Iteration   2: 72.044 ns/op
# Warmup Iteration   3: 69.714 ns/op
Iteration   1: 69.716 ns/op
Iteration   2: 70.531 ns/op
Iteration   3: 69.563 ns/op
Iteration   4: 69.948 ns/op
Iteration   5: 70.190 ns/op

# Run progress: 15.17% complete, ETA 08:17:18
# Fork: 2 of 3
# Warmup Iteration   1: 71.095 ns/op
# Warmup Iteration   2: 72.054 ns/op
# Warmup Iteration   3: 70.154 ns/op
Iteration   1: 70.327 ns/op
Iteration   2: 70.386 ns/op
Iteration   3: 70.067 ns/op
Iteration   4: 70.685 ns/op
Iteration   5: 70.732 ns/op

# Run progress: 15.20% complete, ETA 08:17:08
# Fork: 3 of 3
# Warmup Iteration   1: 70.160 ns/op
# Warmup Iteration   2: 71.234 ns/op
# Warmup Iteration   3: 69.613 ns/op
Iteration   1: 69.679 ns/op
Iteration   2: 74.301 ns/op
Iteration   3: 70.391 ns/op
Iteration   4: 70.912 ns/op
Iteration   5: 70.930 ns/op


Result "kotlin_benchmarks.array.fill.Inline32int.Val_to_Val_as_Val_arrayfillstat":
  70.557 ±(99.9%) 1.200 ns/op [Average]
  (min, avg, max) = (69.563, 70.557, 74.301), stdev = 1.123
  CI (99.9%): [69.357, 71.758] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline32int.Val_to_Val_as_Val_arrayfillstat
# Parameters: (size = 1000000)

# Run progress: 15.22% complete, ETA 08:16:57
# Fork: 1 of 3
# Warmup Iteration   1: 33686112.500 ns/op
# Warmup Iteration   2: 34912649.414 ns/op
# Warmup Iteration   3: 35980265.793 ns/op
Iteration   1: 35510438.900 ns/op
Iteration   2: 38365493.852 ns/op
Iteration   3: 32531921.875 ns/op
Iteration   4: 34081377.800 ns/op
Iteration   5: 36401592.250 ns/op

# Run progress: 15.25% complete, ETA 08:16:48
# Fork: 2 of 3
# Warmup Iteration   1: 14250169.556 ns/op
# Warmup Iteration   2: 10148390.566 ns/op
# Warmup Iteration   3: 26653491.237 ns/op
Iteration   1: 31746315.094 ns/op
Iteration   2: 34813047.233 ns/op
Iteration   3: 32341545.563 ns/op
Iteration   4: 29000565.486 ns/op
Iteration   5: 31382695.313 ns/op

# Run progress: 15.27% complete, ETA 08:16:39
# Fork: 3 of 3
# Warmup Iteration   1: 32413829.438 ns/op
# Warmup Iteration   2: 35349933.897 ns/op
# Warmup Iteration   3: 33808673.633 ns/op
Iteration   1: 29289867.857 ns/op
Iteration   2: 33820670.833 ns/op
Iteration   3: 32187574.219 ns/op
Iteration   4: 35482238.517 ns/op
Iteration   5: 25139740.854 ns/op


Result "kotlin_benchmarks.array.fill.Inline32int.Val_to_Val_as_Val_arrayfillstat":
  32806339.043 ±(99.9%) 3550676.561 ns/op [Average]
  (min, avg, max) = (25139740.854, 32806339.043, 38365493.852), stdev = 3321305.059
  CI (99.9%): [29255662.482, 36357015.604] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline32int.Val_to_Val_as_Val_fillinst
# Parameters: (size = 100)

# Run progress: 15.29% complete, ETA 08:16:29
# Fork: 1 of 3
# Warmup Iteration   1: 73.479 ns/op
# Warmup Iteration   2: 73.671 ns/op
# Warmup Iteration   3: 74.555 ns/op
Iteration   1: 73.484 ns/op
Iteration   2: 73.595 ns/op
Iteration   3: 74.257 ns/op
Iteration   4: 74.851 ns/op
Iteration   5: 74.908 ns/op

# Run progress: 15.32% complete, ETA 08:16:19
# Fork: 2 of 3
# Warmup Iteration   1: 75.007 ns/op
# Warmup Iteration   2: 74.181 ns/op
# Warmup Iteration   3: 73.984 ns/op
Iteration   1: 73.696 ns/op
Iteration   2: 73.345 ns/op
Iteration   3: 73.650 ns/op
Iteration   4: 73.979 ns/op
Iteration   5: 73.505 ns/op

# Run progress: 15.34% complete, ETA 08:16:09
# Fork: 3 of 3
# Warmup Iteration   1: 73.710 ns/op
# Warmup Iteration   2: 73.816 ns/op
# Warmup Iteration   3: 73.424 ns/op
Iteration   1: 73.464 ns/op
Iteration   2: 73.455 ns/op
Iteration   3: 74.233 ns/op
Iteration   4: 75.192 ns/op
Iteration   5: 74.999 ns/op


Result "kotlin_benchmarks.array.fill.Inline32int.Val_to_Val_as_Val_fillinst":
  74.041 ±(99.9%) 0.698 ns/op [Average]
  (min, avg, max) = (73.345, 74.041, 75.192), stdev = 0.653
  CI (99.9%): [73.343, 74.739] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline32int.Val_to_Val_as_Val_fillinst
# Parameters: (size = 1000000)

# Run progress: 15.37% complete, ETA 08:15:58
# Fork: 1 of 3
# Warmup Iteration   1: 35033964.069 ns/op
# Warmup Iteration   2: 35371969.828 ns/op
# Warmup Iteration   3: 37955779.333 ns/op
Iteration   1: 25446291.650 ns/op
Iteration   2: 31764608.094 ns/op
Iteration   3: 18125200.161 ns/op
Iteration   4: 20186942.500 ns/op
Iteration   5: 31441260.406 ns/op

# Run progress: 15.39% complete, ETA 08:15:49
# Fork: 2 of 3
# Warmup Iteration   1: 30388643.382 ns/op
# Warmup Iteration   2: 34619729.897 ns/op
# Warmup Iteration   3: 36560389.893 ns/op
Iteration   1: 35082149.414 ns/op
Iteration   2: 34504766.667 ns/op
Iteration   3: 35715353.448 ns/op
Iteration   4: 35178639.345 ns/op
Iteration   5: 31420694.455 ns/op

# Run progress: 15.42% complete, ETA 08:15:39
# Fork: 3 of 3
# Warmup Iteration   1: 34838442.517 ns/op
# Warmup Iteration   2: 34508619.433 ns/op
# Warmup Iteration   3: 35101445.379 ns/op
Iteration   1: 34155225.000 ns/op
Iteration   2: 33630958.333 ns/op
Iteration   3: 29722276.971 ns/op
Iteration   4: 11066589.543 ns/op
Iteration   5: 34362515.267 ns/op


Result "kotlin_benchmarks.array.fill.Inline32int.Val_to_Val_as_Val_fillinst":
  29453564.750 ±(99.9%) 7951042.649 ns/op [Average]
  (min, avg, max) = (11066589.543, 29453564.750, 35715353.448), stdev = 7437410.227
  CI (99.9%): [21502522.102, 37404607.399] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline32int.Val_to_Val_as_Val_fillstat
# Parameters: (size = 100)

# Run progress: 15.44% complete, ETA 08:15:29
# Fork: 1 of 3
# Warmup Iteration   1: 98.270 ns/op
# Warmup Iteration   2: 71.043 ns/op
# Warmup Iteration   3: 70.111 ns/op
Iteration   1: 69.747 ns/op
Iteration   2: 69.797 ns/op
Iteration   3: 70.076 ns/op
Iteration   4: 70.755 ns/op
Iteration   5: 70.732 ns/op

# Run progress: 15.47% complete, ETA 08:15:19
# Fork: 2 of 3
# Warmup Iteration   1: 69.387 ns/op
# Warmup Iteration   2: 69.673 ns/op
# Warmup Iteration   3: 69.086 ns/op
Iteration   1: 69.672 ns/op
Iteration   2: 69.534 ns/op
Iteration   3: 69.694 ns/op
Iteration   4: 69.598 ns/op
Iteration   5: 69.580 ns/op

# Run progress: 15.49% complete, ETA 08:15:09
# Fork: 3 of 3
# Warmup Iteration   1: 70.065 ns/op
# Warmup Iteration   2: 71.015 ns/op
# Warmup Iteration   3: 69.632 ns/op
Iteration   1: 69.548 ns/op
Iteration   2: 69.672 ns/op
Iteration   3: 69.560 ns/op
Iteration   4: 69.390 ns/op
Iteration   5: 69.487 ns/op


Result "kotlin_benchmarks.array.fill.Inline32int.Val_to_Val_as_Val_fillstat":
  69.790 ±(99.9%) 0.447 ns/op [Average]
  (min, avg, max) = (69.390, 69.790, 70.755), stdev = 0.418
  CI (99.9%): [69.342, 70.237] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline32int.Val_to_Val_as_Val_fillstat
# Parameters: (size = 1000000)

# Run progress: 15.51% complete, ETA 08:14:59
# Fork: 1 of 3
# Warmup Iteration   1: 35681271.552 ns/op
# Warmup Iteration   2: 36973267.857 ns/op
# Warmup Iteration   3: 35022087.655 ns/op
Iteration   1: 28822505.806 ns/op
Iteration   2: 19484301.288 ns/op
Iteration   3: 30744136.029 ns/op
Iteration   4: 12211879.012 ns/op
Iteration   5: 17699068.750 ns/op

# Run progress: 15.54% complete, ETA 08:14:49
# Fork: 2 of 3
# Warmup Iteration   1: 29345145.229 ns/op
# Warmup Iteration   2: 34307381.967 ns/op
# Warmup Iteration   3: 32876779.969 ns/op
Iteration   1: 34914551.367 ns/op
Iteration   2: 34766923.600 ns/op
Iteration   3: 33902743.033 ns/op
Iteration   4: 26519375.000 ns/op
Iteration   5: 34966521.552 ns/op

# Run progress: 15.56% complete, ETA 08:14:40
# Fork: 3 of 3
# Warmup Iteration   1: 34233655.567 ns/op
# Warmup Iteration   2: 25389023.950 ns/op
# Warmup Iteration   3: 24872486.119 ns/op
Iteration   1: 17529818.259 ns/op
Iteration   2: 25534580.225 ns/op
Iteration   3: 35183247.103 ns/op
Iteration   4: 32065533.844 ns/op
Iteration   5: 34592552.800 ns/op


Result "kotlin_benchmarks.array.fill.Inline32int.Val_to_Val_as_Val_fillstat":
  27929182.511 ±(99.9%) 8293144.706 ns/op [Average]
  (min, avg, max) = (12211879.012, 27929182.511, 35183247.103), stdev = 7757412.704
  CI (99.9%): [19636037.805, 36222327.217] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline64byte.Def_to_Ref_as_Ref_arrayfill
# Parameters: (size = 100)

# Run progress: 15.59% complete, ETA 08:14:31
# Fork: 1 of 3
# Warmup Iteration   1: 138.796 ns/op
# Warmup Iteration   2: 139.822 ns/op
# Warmup Iteration   3: 137.415 ns/op
Iteration   1: 138.865 ns/op
Iteration   2: 135.504 ns/op
Iteration   3: 135.774 ns/op
Iteration   4: 135.542 ns/op
Iteration   5: 137.214 ns/op

# Run progress: 15.61% complete, ETA 08:14:21
# Fork: 2 of 3
# Warmup Iteration   1: 137.030 ns/op
# Warmup Iteration   2: 139.093 ns/op
# Warmup Iteration   3: 138.058 ns/op
Iteration   1: 138.889 ns/op
Iteration   2: 138.984 ns/op
Iteration   3: 136.387 ns/op
Iteration   4: 137.093 ns/op
Iteration   5: 137.254 ns/op

# Run progress: 15.64% complete, ETA 08:14:11
# Fork: 3 of 3
# Warmup Iteration   1: 135.747 ns/op
# Warmup Iteration   2: 139.512 ns/op
# Warmup Iteration   3: 137.830 ns/op
Iteration   1: 137.928 ns/op
Iteration   2: 135.501 ns/op
Iteration   3: 135.888 ns/op
Iteration   4: 136.276 ns/op
Iteration   5: 135.989 ns/op


Result "kotlin_benchmarks.array.fill.Inline64byte.Def_to_Ref_as_Ref_arrayfill":
  136.872 ±(99.9%) 1.370 ns/op [Average]
  (min, avg, max) = (135.501, 136.872, 138.984), stdev = 1.281
  CI (99.9%): [135.503, 138.242] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline64byte.Def_to_Ref_as_Ref_arrayfill
# Parameters: (size = 1000000)

# Run progress: 15.66% complete, ETA 08:14:01
# Fork: 1 of 3
# Warmup Iteration   1: 30279274.500 ns/op
# Warmup Iteration   2: 27000673.237 ns/op
# Warmup Iteration   3: 34235308.333 ns/op
Iteration   1: 34723577.767 ns/op
Iteration   2: 34889182.483 ns/op
Iteration   3: 35497604.897 ns/op
Iteration   4: 36118331.821 ns/op
Iteration   5: 32821592.438 ns/op

# Run progress: 15.69% complete, ETA 08:13:51
# Fork: 2 of 3
# Warmup Iteration   1: 34904295.966 ns/op
# Warmup Iteration   2: 34741502.862 ns/op
# Warmup Iteration   3: 37573148.786 ns/op
Iteration   1: 36280011.893 ns/op
Iteration   2: 34226918.067 ns/op
Iteration   3: 31674259.125 ns/op
Iteration   4: 34269781.933 ns/op
Iteration   5: 35293725.586 ns/op

# Run progress: 15.71% complete, ETA 08:13:42
# Fork: 3 of 3
# Warmup Iteration   1: 29332391.657 ns/op
# Warmup Iteration   2: 14336040.471 ns/op
# Warmup Iteration   3: 37603279.333 ns/op
Iteration   1: 34142037.500 ns/op
Iteration   2: 36050244.036 ns/op
Iteration   3: 35250170.966 ns/op
Iteration   4: 36602532.750 ns/op
Iteration   5: 25619595.825 ns/op


Result "kotlin_benchmarks.array.fill.Inline64byte.Def_to_Ref_as_Ref_arrayfill":
  34230637.806 ±(99.9%) 2911407.872 ns/op [Average]
  (min, avg, max) = (25619595.825, 34230637.806, 36602532.750), stdev = 2723332.730
  CI (99.9%): [31319229.934, 37142045.678] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline64byte.Def_to_Ref_as_Ref_fill
# Parameters: (size = 100)

# Run progress: 15.74% complete, ETA 08:13:33
# Fork: 1 of 3
# Warmup Iteration   1: 333.628 ns/op
# Warmup Iteration   2: 366.300 ns/op
# Warmup Iteration   3: 367.816 ns/op
Iteration   1: 368.830 ns/op
Iteration   2: 367.737 ns/op
Iteration   3: 367.719 ns/op
Iteration   4: 365.600 ns/op
Iteration   5: 367.715 ns/op

# Run progress: 15.76% complete, ETA 08:13:23
# Fork: 2 of 3
# Warmup Iteration   1: 308.154 ns/op
# Warmup Iteration   2: 367.544 ns/op
# Warmup Iteration   3: 367.609 ns/op
Iteration   1: 365.901 ns/op
Iteration   2: 363.965 ns/op
Iteration   3: 367.349 ns/op
Iteration   4: 367.142 ns/op
Iteration   5: 365.041 ns/op

# Run progress: 15.78% complete, ETA 08:13:13
# Fork: 3 of 3
# Warmup Iteration   1: 334.820 ns/op
# Warmup Iteration   2: 359.654 ns/op
# Warmup Iteration   3: 356.515 ns/op
Iteration   1: 356.972 ns/op
Iteration   2: 355.695 ns/op
Iteration   3: 359.116 ns/op
Iteration   4: 360.247 ns/op
Iteration   5: 363.017 ns/op


Result "kotlin_benchmarks.array.fill.Inline64byte.Def_to_Ref_as_Ref_fill":
  364.136 ±(99.9%) 4.520 ns/op [Average]
  (min, avg, max) = (355.695, 364.136, 368.830), stdev = 4.228
  CI (99.9%): [359.616, 368.656] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline64byte.Def_to_Ref_as_Ref_fill
# Parameters: (size = 1000000)

# Run progress: 15.81% complete, ETA 08:13:03
# Fork: 1 of 3
# Warmup Iteration   1: 4699676.206 ns/op
# Warmup Iteration   2: 4202263.830 ns/op
# Warmup Iteration   3: 3778069.914 ns/op
Iteration   1: 3722114.279 ns/op
Iteration   2: 3723219.096 ns/op
Iteration   3: 3744366.291 ns/op
Iteration   4: 3747664.352 ns/op
Iteration   5: 3707544.577 ns/op

# Run progress: 15.83% complete, ETA 08:12:53
# Fork: 2 of 3
# Warmup Iteration   1: 4324423.639 ns/op
# Warmup Iteration   2: 3997377.323 ns/op
# Warmup Iteration   3: 3735873.461 ns/op
Iteration   1: 3737903.451 ns/op
Iteration   2: 3702934.674 ns/op
Iteration   3: 3755593.554 ns/op
Iteration   4: 4002121.361 ns/op
Iteration   5: 3799602.517 ns/op

# Run progress: 15.86% complete, ETA 08:12:43
# Fork: 3 of 3
# Warmup Iteration   1: 4738284.427 ns/op
# Warmup Iteration   2: 3833395.519 ns/op
# Warmup Iteration   3: 3738125.000 ns/op
Iteration   1: 3734585.181 ns/op
Iteration   2: 3737857.807 ns/op
Iteration   3: 3740056.227 ns/op
Iteration   4: 3694897.827 ns/op
Iteration   5: 3709350.579 ns/op


Result "kotlin_benchmarks.array.fill.Inline64byte.Def_to_Ref_as_Ref_fill":
  3750654.118 ±(99.9%) 79241.933 ns/op [Average]
  (min, avg, max) = (3694897.827, 3750654.118, 4002121.361), stdev = 74122.954
  CI (99.9%): [3671412.185, 3829896.052] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline64byte.Def_to_Val_as_Val_arrayfill
# Parameters: (size = 100)

# Run progress: 15.88% complete, ETA 08:12:33
# Fork: 1 of 3
# Warmup Iteration   1: 134.917 ns/op
# Warmup Iteration   2: 139.671 ns/op
# Warmup Iteration   3: 138.730 ns/op
Iteration   1: 138.672 ns/op
Iteration   2: 136.874 ns/op
Iteration   3: 136.437 ns/op
Iteration   4: 135.868 ns/op
Iteration   5: 137.074 ns/op

# Run progress: 15.91% complete, ETA 08:12:23
# Fork: 2 of 3
# Warmup Iteration   1: 136.859 ns/op
# Warmup Iteration   2: 141.214 ns/op
# Warmup Iteration   3: 139.937 ns/op
Iteration   1: 140.014 ns/op
Iteration   2: 136.484 ns/op
Iteration   3: 136.700 ns/op
Iteration   4: 136.077 ns/op
Iteration   5: 135.677 ns/op

# Run progress: 15.93% complete, ETA 08:12:13
# Fork: 3 of 3
# Warmup Iteration   1: 135.279 ns/op
# Warmup Iteration   2: 138.054 ns/op
# Warmup Iteration   3: 137.253 ns/op
Iteration   1: 136.717 ns/op
Iteration   2: 135.551 ns/op
Iteration   3: 136.369 ns/op
Iteration   4: 136.412 ns/op
Iteration   5: 137.760 ns/op


Result "kotlin_benchmarks.array.fill.Inline64byte.Def_to_Val_as_Val_arrayfill":
  136.846 ±(99.9%) 1.265 ns/op [Average]
  (min, avg, max) = (135.551, 136.846, 140.014), stdev = 1.183
  CI (99.9%): [135.581, 138.111] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline64byte.Def_to_Val_as_Val_arrayfill
# Parameters: (size = 1000000)

# Run progress: 15.96% complete, ETA 08:12:03
# Fork: 1 of 3
# Warmup Iteration   1: 34145602.800 ns/op
# Warmup Iteration   2: 35825362.069 ns/op
# Warmup Iteration   3: 34964429.167 ns/op
Iteration   1: 35993342.250 ns/op
Iteration   2: 37336726.179 ns/op
Iteration   3: 35025398.000 ns/op
Iteration   4: 38871245.192 ns/op
Iteration   5: 36326011.517 ns/op

# Run progress: 15.98% complete, ETA 08:11:54
# Fork: 2 of 3
# Warmup Iteration   1: 34874945.414 ns/op
# Warmup Iteration   2: 39144940.692 ns/op
# Warmup Iteration   3: 38125938.296 ns/op
Iteration   1: 34036352.767 ns/op
Iteration   2: 37096677.071 ns/op
Iteration   3: 35117692.517 ns/op
Iteration   4: 29027902.371 ns/op
Iteration   5: 35406413.793 ns/op

# Run progress: 16.00% complete, ETA 08:11:45
# Fork: 3 of 3
# Warmup Iteration   1: 31312861.091 ns/op
# Warmup Iteration   2: 32932405.903 ns/op
# Warmup Iteration   3: 36477275.286 ns/op
Iteration   1: 36681324.429 ns/op
Iteration   2: 28612314.833 ns/op
Iteration   3: 34809608.333 ns/op
Iteration   4: 39078033.654 ns/op
Iteration   5: 38141123.444 ns/op


Result "kotlin_benchmarks.array.fill.Inline64byte.Def_to_Val_as_Val_arrayfill":
  35437344.423 ±(99.9%) 3278371.956 ns/op [Average]
  (min, avg, max) = (28612314.833, 35437344.423, 39078033.654), stdev = 3066591.162
  CI (99.9%): [32158972.468, 38715716.379] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline64byte.Def_to_Val_as_Val_fill
# Parameters: (size = 100)

# Run progress: 16.03% complete, ETA 08:11:36
# Fork: 1 of 3
# Warmup Iteration   1: 386.288 ns/op
# Warmup Iteration   2: 348.134 ns/op
# Warmup Iteration   3: 350.382 ns/op
Iteration   1: 378.710 ns/op
Iteration   2: 394.004 ns/op
Iteration   3: 431.869 ns/op
Iteration   4: 420.027 ns/op
Iteration   5: 383.083 ns/op

# Run progress: 16.05% complete, ETA 08:11:26
# Fork: 2 of 3
# Warmup Iteration   1: 344.116 ns/op
# Warmup Iteration   2: 356.117 ns/op
# Warmup Iteration   3: 356.494 ns/op
Iteration   1: 359.352 ns/op
Iteration   2: 356.500 ns/op
Iteration   3: 360.055 ns/op
Iteration   4: 356.227 ns/op
Iteration   5: 355.445 ns/op

# Run progress: 16.08% complete, ETA 08:11:16
# Fork: 3 of 3
# Warmup Iteration   1: 301.640 ns/op
# Warmup Iteration   2: 371.617 ns/op
# Warmup Iteration   3: 405.539 ns/op
Iteration   1: 426.031 ns/op
Iteration   2: 415.272 ns/op
Iteration   3: 418.940 ns/op
Iteration   4: 392.613 ns/op
Iteration   5: 368.400 ns/op


Result "kotlin_benchmarks.array.fill.Inline64byte.Def_to_Val_as_Val_fill":
  387.768 ±(99.9%) 30.388 ns/op [Average]
  (min, avg, max) = (355.445, 387.768, 431.869), stdev = 28.425
  CI (99.9%): [357.380, 418.157] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline64byte.Def_to_Val_as_Val_fill
# Parameters: (size = 1000000)

# Run progress: 16.10% complete, ETA 08:11:06
# Fork: 1 of 3
# Warmup Iteration   1: 4640749.041 ns/op
# Warmup Iteration   2: 3928718.627 ns/op
# Warmup Iteration   3: 3704248.467 ns/op
Iteration   1: 3729605.948 ns/op
Iteration   2: 3726490.349 ns/op
Iteration   3: 3776109.608 ns/op
Iteration   4: 3780455.367 ns/op
Iteration   5: 3839464.669 ns/op

# Run progress: 16.13% complete, ETA 08:10:56
# Fork: 2 of 3
# Warmup Iteration   1: 4955461.804 ns/op
# Warmup Iteration   2: 4383563.135 ns/op
# Warmup Iteration   3: 4895026.829 ns/op
Iteration   1: 5585568.056 ns/op
Iteration   2: 7053797.239 ns/op
Iteration   3: 7446866.667 ns/op
Iteration   4: 6844611.395 ns/op
Iteration   5: 6777477.196 ns/op

# Run progress: 16.15% complete, ETA 08:10:46
# Fork: 3 of 3
# Warmup Iteration   1: 6876522.680 ns/op
# Warmup Iteration   2: 4972199.714 ns/op
# Warmup Iteration   3: 4012091.332 ns/op
Iteration   1: 4021030.164 ns/op
Iteration   2: 3851477.416 ns/op
Iteration   3: 4015656.164 ns/op
Iteration   4: 4167012.177 ns/op
Iteration   5: 4154002.221 ns/op


Result "kotlin_benchmarks.array.fill.Inline64byte.Def_to_Val_as_Val_fill":
  4851308.309 ±(99.9%) 1538701.428 ns/op [Average]
  (min, avg, max) = (3726490.349, 4851308.309, 7446866.667), stdev = 1439302.271
  CI (99.9%): [3312606.881, 6390009.737] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline64byte.New_to_Ref_as_Ref_arrayfill
# Parameters: (size = 100)

# Run progress: 16.18% complete, ETA 08:10:38
# Fork: 1 of 3
# Warmup Iteration   1: 360.063 ns/op
# Warmup Iteration   2: 451.039 ns/op
# Warmup Iteration   3: 378.912 ns/op
Iteration   1: 350.262 ns/op
Iteration   2: 246.377 ns/op
Iteration   3: 218.532 ns/op
Iteration   4: 196.704 ns/op
Iteration   5: 167.133 ns/op

# Run progress: 16.20% complete, ETA 08:10:28
# Fork: 2 of 3
# Warmup Iteration   1: 308.062 ns/op
# Warmup Iteration   2: 307.955 ns/op
# Warmup Iteration   3: 291.513 ns/op
Iteration   1: 282.139 ns/op
Iteration   2: 282.749 ns/op
Iteration   3: 282.930 ns/op
Iteration   4: 284.723 ns/op
Iteration   5: 282.556 ns/op

# Run progress: 16.23% complete, ETA 08:10:18
# Fork: 3 of 3
# Warmup Iteration   1: 502.381 ns/op
# Warmup Iteration   2: 468.482 ns/op
# Warmup Iteration   3: 393.577 ns/op
Iteration   1: 469.535 ns/op
Iteration   2: 529.029 ns/op
Iteration   3: 600.362 ns/op
Iteration   4: 566.110 ns/op
Iteration   5: 541.403 ns/op


Result "kotlin_benchmarks.array.fill.Inline64byte.New_to_Ref_as_Ref_arrayfill":
  353.370 ±(99.9%) 156.387 ns/op [Average]
  (min, avg, max) = (167.133, 353.370, 600.362), stdev = 146.284
  CI (99.9%): [196.983, 509.756] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline64byte.New_to_Ref_as_Ref_arrayfill
# Parameters: (size = 1000000)

# Run progress: 16.25% complete, ETA 08:10:09
# Fork: 1 of 3
# Warmup Iteration   1: 61628463.235 ns/op
# Warmup Iteration   2: 76328485.143 ns/op
# Warmup Iteration   3: 47107233.696 ns/op
Iteration   1: 63571625.000 ns/op
Iteration   2: 53363579.150 ns/op
Iteration   3: 53980265.368 ns/op
Iteration   4: 44690228.261 ns/op
Iteration   5: 19066800.321 ns/op

# Run progress: 16.27% complete, ETA 08:10:04
# Fork: 2 of 3
# Warmup Iteration   1: 22416215.733 ns/op
# Warmup Iteration   2: 26455075.000 ns/op
# Warmup Iteration   3: 66819005.250 ns/op
Iteration   1: 73483577.357 ns/op
Iteration   2: 47850441.318 ns/op
Iteration   3: 47692147.727 ns/op
Iteration   4: 34976557.483 ns/op
Iteration   5: 55933685.167 ns/op

# Run progress: 16.30% complete, ETA 08:09:58
# Fork: 3 of 3
# Warmup Iteration   1: 48284356.091 ns/op
# Warmup Iteration   2: 46032047.087 ns/op
# Warmup Iteration   3: 51858441.650 ns/op
Iteration   1: 53603438.579 ns/op
Iteration   2: 56987884.278 ns/op
Iteration   3: 50661329.150 ns/op
Iteration   4: 48324021.810 ns/op
Iteration   5: 46329085.130 ns/op


Result "kotlin_benchmarks.array.fill.Inline64byte.New_to_Ref_as_Ref_arrayfill":
  50034311.073 ±(99.9%) 13084717.365 ns/op [Average]
  (min, avg, max) = (19066800.321, 50034311.073, 73483577.357), stdev = 12239452.742
  CI (99.9%): [36949593.708, 63119028.438] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline64byte.New_to_Ref_as_Ref_fill
# Parameters: (size = 100)

# Run progress: 16.32% complete, ETA 08:09:50
# Fork: 1 of 3
# Warmup Iteration   1: 1876.309 ns/op
# Warmup Iteration   2: 1709.154 ns/op
# Warmup Iteration   3: 654.387 ns/op
Iteration   1: 1189.814 ns/op
Iteration   2: 1183.372 ns/op
Iteration   3: 891.993 ns/op
Iteration   4: 847.932 ns/op
Iteration   5: 891.946 ns/op

# Run progress: 16.35% complete, ETA 08:09:42
# Fork: 2 of 3
# Warmup Iteration   1: 1878.903 ns/op
# Warmup Iteration   2: 1816.988 ns/op
# Warmup Iteration   3: 1014.713 ns/op
Iteration   1: 827.972 ns/op
Iteration   2: 1037.935 ns/op
Iteration   3: 1057.307 ns/op
Iteration   4: 1115.543 ns/op
Iteration   5: 1209.643 ns/op

# Run progress: 16.37% complete, ETA 08:09:36
# Fork: 3 of 3
# Warmup Iteration   1: 1830.152 ns/op
# Warmup Iteration   2: 1653.203 ns/op
# Warmup Iteration   3: 954.119 ns/op
Iteration   1: 1158.409 ns/op
Iteration   2: 1146.251 ns/op
Iteration   3: 1222.875 ns/op
Iteration   4: 1076.524 ns/op
Iteration   5: 915.995 ns/op


Result "kotlin_benchmarks.array.fill.Inline64byte.New_to_Ref_as_Ref_fill":
  1051.567 ±(99.9%) 150.354 ns/op [Average]
  (min, avg, max) = (827.972, 1051.567, 1222.875), stdev = 140.641
  CI (99.9%): [901.214, 1201.921] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline64byte.New_to_Ref_as_Ref_fill
# Parameters: (size = 1000000)

# Run progress: 16.40% complete, ETA 08:09:28
# Fork: 1 of 3
# Warmup Iteration   1: 19101509.259 ns/op
# Warmup Iteration   2: 18154253.714 ns/op
# Warmup Iteration   3: 13839023.649 ns/op
Iteration   1: 18002142.107 ns/op
Iteration   2: 32925264.774 ns/op
Iteration   3: 20293135.840 ns/op
Iteration   4: 11348885.764 ns/op
Iteration   5: 10077324.257 ns/op

# Run progress: 16.42% complete, ETA 08:09:22
# Fork: 2 of 3
# Warmup Iteration   1: 20479872.500 ns/op
# Warmup Iteration   2: 17474415.241 ns/op
# Warmup Iteration   3: 14877106.884 ns/op
Iteration   1: 21326919.271 ns/op
Iteration   2: 27594583.316 ns/op
Iteration   3: 26555471.500 ns/op
Iteration   4: 10300048.404 ns/op
Iteration   5: 13144762.987 ns/op

# Run progress: 16.45% complete, ETA 08:09:20
# Fork: 3 of 3
# Warmup Iteration   1: 26035321.564 ns/op
# Warmup Iteration   2: 14266316.310 ns/op
# Warmup Iteration   3: 22725261.111 ns/op
Iteration   1: 22886805.864 ns/op
Iteration   2: 34344251.400 ns/op
Iteration   3: 36389326.138 ns/op
Iteration   4: 65275267.118 ns/op
Iteration   5: 50978970.850 ns/op


Result "kotlin_benchmarks.array.fill.Inline64byte.New_to_Ref_as_Ref_fill":
  26762877.306 ±(99.9%) 16645736.560 ns/op [Average]
  (min, avg, max) = (10077324.257, 26762877.306, 65275267.118), stdev = 15570432.308
  CI (99.9%): [10117140.746, 43408613.866] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline64byte.New_to_Val_as_Val_arrayfill
# Parameters: (size = 100)

# Run progress: 16.47% complete, ETA 08:09:16
# Fork: 1 of 3
# Warmup Iteration   1: 693.101 ns/op
# Warmup Iteration   2: 858.079 ns/op
# Warmup Iteration   3: 557.638 ns/op
Iteration   1: 494.297 ns/op
Iteration   2: 581.771 ns/op
Iteration   3: 441.415 ns/op
Iteration   4: 461.725 ns/op
Iteration   5: 513.016 ns/op

# Run progress: 16.50% complete, ETA 08:09:10
# Fork: 2 of 3
# Warmup Iteration   1: 863.083 ns/op
# Warmup Iteration   2: 538.599 ns/op
# Warmup Iteration   3: 365.530 ns/op
Iteration   1: 352.100 ns/op
Iteration   2: 428.904 ns/op
Iteration   3: 371.037 ns/op
Iteration   4: 357.293 ns/op
Iteration   5: 388.002 ns/op

# Run progress: 16.52% complete, ETA 08:09:04
# Fork: 3 of 3
# Warmup Iteration   1: 602.092 ns/op
# Warmup Iteration   2: 544.732 ns/op
# Warmup Iteration   3: 408.437 ns/op
Iteration   1: 387.603 ns/op
Iteration   2: 382.023 ns/op
Iteration   3: 383.837 ns/op
Iteration   4: 359.051 ns/op
Iteration   5: 341.823 ns/op


Result "kotlin_benchmarks.array.fill.Inline64byte.New_to_Val_as_Val_arrayfill":
  416.260 ±(99.9%) 74.507 ns/op [Average]
  (min, avg, max) = (341.823, 416.260, 581.771), stdev = 69.693
  CI (99.9%): [341.753, 490.766] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline64byte.New_to_Val_as_Val_arrayfill
# Parameters: (size = 1000000)

# Run progress: 16.54% complete, ETA 08:08:56
# Fork: 1 of 3
# Warmup Iteration   1: 5429400.850 ns/op
# Warmup Iteration   2: 4083743.255 ns/op
# Warmup Iteration   3: 3786036.517 ns/op
Iteration   1: 9422367.206 ns/op
Iteration   2: 4685289.921 ns/op
Iteration   3: 3643945.351 ns/op
Iteration   4: 4106347.502 ns/op
Iteration   5: 4646338.491 ns/op

# Run progress: 16.57% complete, ETA 08:08:50
# Fork: 2 of 3
# Warmup Iteration   1: 24381072.429 ns/op
# Warmup Iteration   2: 39129011.231 ns/op
# Warmup Iteration   3: 29851997.559 ns/op
Iteration   1: 25324829.175 ns/op
Iteration   2: 17245295.186 ns/op
Iteration   3: 24639572.146 ns/op
Iteration   4: 10073096.670 ns/op
Iteration   5: 13947208.338 ns/op

# Run progress: 16.59% complete, ETA 08:08:43
# Fork: 3 of 3
# Warmup Iteration   1: 32134220.031 ns/op
# Warmup Iteration   2: 38638229.154 ns/op
# Warmup Iteration   3: 36128346.714 ns/op
Iteration   1: 16001688.813 ns/op
Iteration   2: 4861571.194 ns/op
Iteration   3: 3146280.172 ns/op
Iteration   4: 3272870.146 ns/op
Iteration   5: 7086204.883 ns/op


Result "kotlin_benchmarks.array.fill.Inline64byte.New_to_Val_as_Val_arrayfill":
  10140193.680 ±(99.9%) 8144081.759 ns/op [Average]
  (min, avg, max) = (3146280.172, 10140193.680, 25324829.175), stdev = 7617979.131
  CI (99.9%): [1996111.920, 18284275.439] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline64byte.New_to_Val_as_Val_fill
# Parameters: (size = 100)

# Run progress: 16.62% complete, ETA 08:08:37
# Fork: 1 of 3
# Warmup Iteration   1: 1301.958 ns/op
# Warmup Iteration   2: 1050.119 ns/op
# Warmup Iteration   3: 798.897 ns/op
Iteration   1: 874.449 ns/op
Iteration   2: 783.771 ns/op
Iteration   3: 901.429 ns/op
Iteration   4: 585.961 ns/op
Iteration   5: 551.363 ns/op

# Run progress: 16.64% complete, ETA 08:08:29
# Fork: 2 of 3
# Warmup Iteration   1: 804.991 ns/op
# Warmup Iteration   2: 967.047 ns/op
# Warmup Iteration   3: 812.322 ns/op
Iteration   1: 820.133 ns/op
Iteration   2: 1004.417 ns/op
Iteration   3: 807.033 ns/op
Iteration   4: 843.716 ns/op
Iteration   5: 868.629 ns/op

# Run progress: 16.67% complete, ETA 08:08:20
# Fork: 3 of 3
# Warmup Iteration   1: 1458.448 ns/op
# Warmup Iteration   2: 1130.676 ns/op
# Warmup Iteration   3: 672.048 ns/op
Iteration   1: 778.305 ns/op
Iteration   2: 765.946 ns/op
Iteration   3: 1035.432 ns/op
Iteration   4: 850.626 ns/op
Iteration   5: 700.027 ns/op


Result "kotlin_benchmarks.array.fill.Inline64byte.New_to_Val_as_Val_fill":
  811.416 ±(99.9%) 140.046 ns/op [Average]
  (min, avg, max) = (551.363, 811.416, 1035.432), stdev = 130.999
  CI (99.9%): [671.370, 951.462] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline64byte.New_to_Val_as_Val_fill
# Parameters: (size = 1000000)

# Run progress: 16.69% complete, ETA 08:08:12
# Fork: 1 of 3
# Warmup Iteration   1: 18694166.661 ns/op
# Warmup Iteration   2: 11242600.000 ns/op
# Warmup Iteration   3: 11495253.784 ns/op
Iteration   1: 18445484.091 ns/op
Iteration   2: 10537955.705 ns/op
Iteration   3: 10164173.330 ns/op
Iteration   4: 7134138.500 ns/op
Iteration   5: 8287356.902 ns/op

# Run progress: 16.72% complete, ETA 08:08:04
# Fork: 2 of 3
# Warmup Iteration   1: 11270410.189 ns/op
# Warmup Iteration   2: 10117418.733 ns/op
# Warmup Iteration   3: 12933212.557 ns/op
Iteration   1: 8431411.458 ns/op
Iteration   2: 5313098.767 ns/op
Iteration   3: 6494835.484 ns/op
Iteration   4: 5042776.741 ns/op
Iteration   5: 5839624.035 ns/op

# Run progress: 16.74% complete, ETA 08:07:56
# Fork: 3 of 3
# Warmup Iteration   1: 11408466.292 ns/op
# Warmup Iteration   2: 9590661.170 ns/op
# Warmup Iteration   3: 18400904.018 ns/op
Iteration   1: 16733318.750 ns/op
Iteration   2: 11902276.965 ns/op
Iteration   3: 8259715.164 ns/op
Iteration   4: 7784482.884 ns/op
Iteration   5: 9904363.971 ns/op


Result "kotlin_benchmarks.array.fill.Inline64byte.New_to_Val_as_Val_fill":
  9351667.516 ±(99.9%) 4159955.163 ns/op [Average]
  (min, avg, max) = (5042776.741, 9351667.516, 18445484.091), stdev = 3891224.641
  CI (99.9%): [5191712.353, 13511622.680] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline64byte.Ref_to_Ref_as_Ref_arrayfillinst
# Parameters: (size = 100)

# Run progress: 16.76% complete, ETA 08:07:49
# Fork: 1 of 3
# Warmup Iteration   1: 282.910 ns/op
# Warmup Iteration   2: 269.014 ns/op
# Warmup Iteration   3: 288.696 ns/op
Iteration   1: 368.485 ns/op
Iteration   2: 313.517 ns/op
Iteration   3: 254.811 ns/op
Iteration   4: 171.142 ns/op
Iteration   5: 152.046 ns/op

# Run progress: 16.79% complete, ETA 08:07:40
# Fork: 2 of 3
# Warmup Iteration   1: 177.343 ns/op
# Warmup Iteration   2: 325.531 ns/op
# Warmup Iteration   3: 326.566 ns/op
Iteration   1: 274.546 ns/op
Iteration   2: 204.534 ns/op
Iteration   3: 193.433 ns/op
Iteration   4: 172.948 ns/op
Iteration   5: 158.546 ns/op

# Run progress: 16.81% complete, ETA 08:07:31
# Fork: 3 of 3
# Warmup Iteration   1: 145.292 ns/op
# Warmup Iteration   2: 148.753 ns/op
# Warmup Iteration   3: 148.983 ns/op
Iteration   1: 148.763 ns/op
Iteration   2: 147.749 ns/op
Iteration   3: 147.460 ns/op
Iteration   4: 148.287 ns/op
Iteration   5: 168.028 ns/op


Result "kotlin_benchmarks.array.fill.Inline64byte.Ref_to_Ref_as_Ref_arrayfillinst":
  201.620 ±(99.9%) 74.096 ns/op [Average]
  (min, avg, max) = (147.460, 201.620, 368.485), stdev = 69.310
  CI (99.9%): [127.523, 275.716] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline64byte.Ref_to_Ref_as_Ref_arrayfillinst
# Parameters: (size = 1000000)

# Run progress: 16.84% complete, ETA 08:07:21
# Fork: 1 of 3
# Warmup Iteration   1: 41224078.320 ns/op
# Warmup Iteration   2: 70482886.133 ns/op
# Warmup Iteration   3: 50776597.900 ns/op
Iteration   1: 38171834.889 ns/op
Iteration   2: 43071003.458 ns/op
Iteration   3: 40788348.360 ns/op
Iteration   4: 50022382.952 ns/op
Iteration   5: 58359354.167 ns/op

# Run progress: 16.86% complete, ETA 08:07:14
# Fork: 2 of 3
# Warmup Iteration   1: 36042109.207 ns/op
# Warmup Iteration   2: 36105577.393 ns/op
# Warmup Iteration   3: 34922435.345 ns/op
Iteration   1: 37999635.815 ns/op
Iteration   2: 36966492.571 ns/op
Iteration   3: 35114288.793 ns/op
Iteration   4: 32873783.844 ns/op
Iteration   5: 39318549.692 ns/op

# Run progress: 16.89% complete, ETA 08:07:05
# Fork: 3 of 3
# Warmup Iteration   1: 43855679.348 ns/op
# Warmup Iteration   2: 54632432.053 ns/op
# Warmup Iteration   3: 49064390.857 ns/op
Iteration   1: 36129258.621 ns/op
Iteration   2: 34008295.833 ns/op
Iteration   3: 36282905.172 ns/op
Iteration   4: 33105211.032 ns/op
Iteration   5: 29932464.471 ns/op


Result "kotlin_benchmarks.array.fill.Inline64byte.Ref_to_Ref_as_Ref_arrayfillinst":
  38809587.311 ±(99.9%) 7727969.297 ns/op [Average]
  (min, avg, max) = (29932464.471, 38809587.311, 58359354.167), stdev = 7228747.276
  CI (99.9%): [31081618.014, 46537556.609] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline64byte.Ref_to_Ref_as_Ref_arrayfillstat
# Parameters: (size = 100)

# Run progress: 16.91% complete, ETA 08:06:56
# Fork: 1 of 3
# Warmup Iteration   1: 115.986 ns/op
# Warmup Iteration   2: 119.639 ns/op
# Warmup Iteration   3: 117.257 ns/op
Iteration   1: 120.513 ns/op
Iteration   2: 130.810 ns/op
Iteration   3: 148.490 ns/op
Iteration   4: 233.583 ns/op
Iteration   5: 316.140 ns/op

# Run progress: 16.94% complete, ETA 08:06:46
# Fork: 2 of 3
# Warmup Iteration   1: 214.329 ns/op
# Warmup Iteration   2: 176.089 ns/op
# Warmup Iteration   3: 167.744 ns/op
Iteration   1: 145.872 ns/op
Iteration   2: 136.280 ns/op
Iteration   3: 122.009 ns/op
Iteration   4: 119.326 ns/op
Iteration   5: 126.593 ns/op

# Run progress: 16.96% complete, ETA 08:06:37
# Fork: 3 of 3
# Warmup Iteration   1: 212.859 ns/op
# Warmup Iteration   2: 281.221 ns/op
# Warmup Iteration   3: 245.361 ns/op
Iteration   1: 175.206 ns/op
Iteration   2: 156.473 ns/op
Iteration   3: 171.582 ns/op
Iteration   4: 220.146 ns/op
Iteration   5: 195.479 ns/op


Result "kotlin_benchmarks.array.fill.Inline64byte.Ref_to_Ref_as_Ref_arrayfillstat":
  167.900 ±(99.9%) 58.298 ns/op [Average]
  (min, avg, max) = (119.326, 167.900, 316.140), stdev = 54.532
  CI (99.9%): [109.602, 226.198] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline64byte.Ref_to_Ref_as_Ref_arrayfillstat
# Parameters: (size = 1000000)

# Run progress: 16.99% complete, ETA 08:06:27
# Fork: 1 of 3
# Warmup Iteration   1: 43125525.000 ns/op
# Warmup Iteration   2: 55791879.421 ns/op
# Warmup Iteration   3: 36351255.964 ns/op
Iteration   1: 36474173.862 ns/op
Iteration   2: 33378455.645 ns/op
Iteration   3: 34874615.267 ns/op
Iteration   4: 37522589.481 ns/op
Iteration   5: 37323604.926 ns/op

# Run progress: 17.01% complete, ETA 08:06:20
# Fork: 2 of 3
# Warmup Iteration   1: 35582360.621 ns/op
# Warmup Iteration   2: 37573881.185 ns/op
# Warmup Iteration   3: 39423057.692 ns/op
Iteration   1: 33926363.900 ns/op
Iteration   2: 37190552.107 ns/op
Iteration   3: 36604668.143 ns/op
Iteration   4: 45801708.348 ns/op
Iteration   5: 56783490.778 ns/op

# Run progress: 17.03% complete, ETA 08:06:10
# Fork: 3 of 3
# Warmup Iteration   1: 72648309.500 ns/op
# Warmup Iteration   2: 42552262.125 ns/op
# Warmup Iteration   3: 33325924.710 ns/op
Iteration   1: 38611907.038 ns/op
Iteration   2: 33015619.613 ns/op
Iteration   3: 34351062.500 ns/op
Iteration   4: 32527147.839 ns/op
Iteration   5: 32221196.594 ns/op


Result "kotlin_benchmarks.array.fill.Inline64byte.Ref_to_Ref_as_Ref_arrayfillstat":
  37373810.403 ±(99.9%) 6779548.179 ns/op [Average]
  (min, avg, max) = (32221196.594, 37373810.403, 56783490.778), stdev = 6341593.573
  CI (99.9%): [30594262.224, 44153358.582] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline64byte.Ref_to_Ref_as_Ref_fillinst
# Parameters: (size = 100)

# Run progress: 17.06% complete, ETA 08:06:02
# Fork: 1 of 3
# Warmup Iteration   1: 135.528 ns/op
# Warmup Iteration   2: 131.750 ns/op
# Warmup Iteration   3: 139.017 ns/op
Iteration   1: 186.004 ns/op
Iteration   2: 210.139 ns/op
Iteration   3: 205.366 ns/op
Iteration   4: 204.536 ns/op
Iteration   5: 176.925 ns/op

# Run progress: 17.08% complete, ETA 08:05:52
# Fork: 2 of 3
# Warmup Iteration   1: 161.295 ns/op
# Warmup Iteration   2: 158.301 ns/op
# Warmup Iteration   3: 152.450 ns/op
Iteration   1: 146.909 ns/op
Iteration   2: 147.593 ns/op
Iteration   3: 149.736 ns/op
Iteration   4: 151.389 ns/op
Iteration   5: 149.032 ns/op

# Run progress: 17.11% complete, ETA 08:05:42
# Fork: 3 of 3
# Warmup Iteration   1: 150.538 ns/op
# Warmup Iteration   2: 164.409 ns/op
# Warmup Iteration   3: 238.328 ns/op
Iteration   1: 362.000 ns/op
Iteration   2: 259.373 ns/op
Iteration   3: 236.308 ns/op
Iteration   4: 324.747 ns/op
Iteration   5: 342.828 ns/op


Result "kotlin_benchmarks.array.fill.Inline64byte.Ref_to_Ref_as_Ref_fillinst":
  216.859 ±(99.9%) 79.138 ns/op [Average]
  (min, avg, max) = (146.909, 216.859, 362.000), stdev = 74.026
  CI (99.9%): [137.721, 295.998] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline64byte.Ref_to_Ref_as_Ref_fillinst
# Parameters: (size = 1000000)

# Run progress: 17.13% complete, ETA 08:05:32
# Fork: 1 of 3
# Warmup Iteration   1: 17434333.333 ns/op
# Warmup Iteration   2: 53217502.100 ns/op
# Warmup Iteration   3: 34297234.733 ns/op
Iteration   1: 33156568.548 ns/op
Iteration   2: 31018714.667 ns/op
Iteration   3: 34101059.733 ns/op
Iteration   4: 33829509.733 ns/op
Iteration   5: 33546493.290 ns/op

# Run progress: 17.16% complete, ETA 08:05:25
# Fork: 2 of 3
# Warmup Iteration   1: 24836464.415 ns/op
# Warmup Iteration   2: 24800361.119 ns/op
# Warmup Iteration   3: 31399192.719 ns/op
Iteration   1: 35173418.103 ns/op
Iteration   2: 41014713.154 ns/op
Iteration   3: 31554306.000 ns/op
Iteration   4: 34603083.333 ns/op
Iteration   5: 32698658.613 ns/op

# Run progress: 17.18% complete, ETA 08:05:16
# Fork: 3 of 3
# Warmup Iteration   1: 30574870.118 ns/op
# Warmup Iteration   2: 28805254.639 ns/op
# Warmup Iteration   3: 31699291.688 ns/op
Iteration   1: 34988326.138 ns/op
Iteration   2: 33203022.871 ns/op
Iteration   3: 34104537.500 ns/op
Iteration   4: 24542312.500 ns/op
Iteration   5: 28770540.500 ns/op


Result "kotlin_benchmarks.array.fill.Inline64byte.Ref_to_Ref_as_Ref_fillinst":
  33087017.646 ±(99.9%) 3773010.174 ns/op [Average]
  (min, avg, max) = (24542312.500, 33087017.646, 41014713.154), stdev = 3529276.058
  CI (99.9%): [29314007.471, 36860027.820] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline64byte.Ref_to_Ref_as_Ref_fillstat
# Parameters: (size = 100)

# Run progress: 17.21% complete, ETA 08:05:07
# Fork: 1 of 3
# Warmup Iteration   1: 204.212 ns/op
# Warmup Iteration   2: 309.152 ns/op
# Warmup Iteration   3: 334.566 ns/op
Iteration   1: 256.562 ns/op
Iteration   2: 197.988 ns/op
Iteration   3: 215.943 ns/op
Iteration   4: 308.579 ns/op
Iteration   5: 309.924 ns/op

# Run progress: 17.23% complete, ETA 08:04:57
# Fork: 2 of 3
# Warmup Iteration   1: 323.018 ns/op
# Warmup Iteration   2: 288.370 ns/op
# Warmup Iteration   3: 189.414 ns/op
Iteration   1: 156.668 ns/op
Iteration   2: 148.380 ns/op
Iteration   3: 141.223 ns/op
Iteration   4: 146.681 ns/op
Iteration   5: 183.317 ns/op

# Run progress: 17.25% complete, ETA 08:04:49
# Fork: 3 of 3
# Warmup Iteration   1: 297.792 ns/op
# Warmup Iteration   2: 326.511 ns/op
# Warmup Iteration   3: 280.783 ns/op
Iteration   1: 210.490 ns/op
Iteration   2: 210.871 ns/op
Iteration   3: 196.549 ns/op
Iteration   4: 171.875 ns/op
Iteration   5: 157.072 ns/op


Result "kotlin_benchmarks.array.fill.Inline64byte.Ref_to_Ref_as_Ref_fillstat":
  200.808 ±(99.9%) 58.074 ns/op [Average]
  (min, avg, max) = (141.223, 200.808, 309.924), stdev = 54.322
  CI (99.9%): [142.735, 258.882] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline64byte.Ref_to_Ref_as_Ref_fillstat
# Parameters: (size = 1000000)

# Run progress: 17.28% complete, ETA 08:04:40
# Fork: 1 of 3
# Warmup Iteration   1: 32625294.355 ns/op
# Warmup Iteration   2: 35807056.034 ns/op
# Warmup Iteration   3: 27259362.947 ns/op
Iteration   1: 33758223.600 ns/op
Iteration   2: 28515435.167 ns/op
Iteration   3: 35072698.276 ns/op
Iteration   4: 24117921.643 ns/op
Iteration   5: 6659586.921 ns/op

# Run progress: 17.30% complete, ETA 08:04:31
# Fork: 2 of 3
# Warmup Iteration   1: 8065754.302 ns/op
# Warmup Iteration   2: 52541383.350 ns/op
# Warmup Iteration   3: 45130519.957 ns/op
Iteration   1: 39200280.889 ns/op
Iteration   2: 40573934.269 ns/op
Iteration   3: 35789400.000 ns/op
Iteration   4: 54165217.105 ns/op
Iteration   5: 6257546.037 ns/op

# Run progress: 17.33% complete, ETA 08:04:26
# Fork: 3 of 3
# Warmup Iteration   1: 10354531.049 ns/op
# Warmup Iteration   2: 63700390.625 ns/op
# Warmup Iteration   3: 42536944.458 ns/op
Iteration   1: 31114063.121 ns/op
Iteration   2: 36324897.321 ns/op
Iteration   3: 53931432.000 ns/op
Iteration   4: 45997513.273 ns/op
Iteration   5: 48868952.381 ns/op


Result "kotlin_benchmarks.array.fill.Inline64byte.Ref_to_Ref_as_Ref_fillstat":
  34689806.800 ±(99.9%) 15373323.733 ns/op [Average]
  (min, avg, max) = (6257546.037, 34689806.800, 54165217.105), stdev = 14380216.560
  CI (99.9%): [19316483.067, 50063130.533] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline64byte.Ref_to_Val_as_Val_arrayfillinst
# Parameters: (size = 100)

# Run progress: 17.35% complete, ETA 08:04:19
# Fork: 1 of 3
# Warmup Iteration   1: 218.721 ns/op
# Warmup Iteration   2: 222.221 ns/op
# Warmup Iteration   3: 223.302 ns/op
Iteration   1: 209.031 ns/op
Iteration   2: 193.704 ns/op
Iteration   3: 179.172 ns/op
Iteration   4: 193.240 ns/op
Iteration   5: 194.724 ns/op

# Run progress: 17.38% complete, ETA 08:04:10
# Fork: 2 of 3
# Warmup Iteration   1: 219.972 ns/op
# Warmup Iteration   2: 222.830 ns/op
# Warmup Iteration   3: 259.930 ns/op
Iteration   1: 319.210 ns/op
Iteration   2: 364.440 ns/op
Iteration   3: 301.622 ns/op
Iteration   4: 315.453 ns/op
Iteration   5: 268.533 ns/op

# Run progress: 17.40% complete, ETA 08:04:00
# Fork: 3 of 3
# Warmup Iteration   1: 269.298 ns/op
# Warmup Iteration   2: 248.363 ns/op
# Warmup Iteration   3: 252.137 ns/op
Iteration   1: 243.589 ns/op
Iteration   2: 278.216 ns/op
Iteration   3: 324.310 ns/op
Iteration   4: 300.034 ns/op
Iteration   5: 263.123 ns/op


Result "kotlin_benchmarks.array.fill.Inline64byte.Ref_to_Val_as_Val_arrayfillinst":
  263.227 ±(99.9%) 62.422 ns/op [Average]
  (min, avg, max) = (179.172, 263.227, 364.440), stdev = 58.390
  CI (99.9%): [200.805, 325.649] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline64byte.Ref_to_Val_as_Val_arrayfillinst
# Parameters: (size = 1000000)

# Run progress: 17.43% complete, ETA 08:03:53
# Fork: 1 of 3
# Warmup Iteration   1: 54467480.263 ns/op
# Warmup Iteration   2: 34149872.233 ns/op
# Warmup Iteration   3: 25760719.026 ns/op
Iteration   1: 21482843.979 ns/op
Iteration   2: 2899799.712 ns/op
Iteration   3: 2656405.781 ns/op
Iteration   4: 13792158.000 ns/op
Iteration   5: 56604159.722 ns/op

# Run progress: 17.45% complete, ETA 08:03:44
# Fork: 2 of 3
# Warmup Iteration   1: 46624651.500 ns/op
# Warmup Iteration   2: 38719425.926 ns/op
# Warmup Iteration   3: 60457426.471 ns/op
Iteration   1: 67408125.000 ns/op
Iteration   2: 35074260.069 ns/op
Iteration   3: 38539674.370 ns/op
Iteration   4: 41574298.320 ns/op
Iteration   5: 43939503.609 ns/op

# Run progress: 17.48% complete, ETA 08:03:36
# Fork: 3 of 3
# Warmup Iteration   1: 37167648.821 ns/op
# Warmup Iteration   2: 18442850.000 ns/op
# Warmup Iteration   3: 4073142.302 ns/op
Iteration   1: 5900075.590 ns/op
Iteration   2: 3597756.819 ns/op
Iteration   3: 7915622.727 ns/op
Iteration   4: 12166896.084 ns/op
Iteration   5: 3965031.863 ns/op


Result "kotlin_benchmarks.array.fill.Inline64byte.Ref_to_Val_as_Val_arrayfillinst":
  23834440.776 ±(99.9%) 23110825.111 ns/op [Average]
  (min, avg, max) = (2656405.781, 23834440.776, 67408125.000), stdev = 21617880.150
  CI (99.9%): [723615.665, 46945265.887] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline64byte.Ref_to_Val_as_Val_arrayfillstat
# Parameters: (size = 100)

# Run progress: 17.50% complete, ETA 08:03:27
# Fork: 1 of 3
# Warmup Iteration   1: 266.121 ns/op
# Warmup Iteration   2: 276.483 ns/op
# Warmup Iteration   3: 288.316 ns/op
Iteration   1: 316.448 ns/op
Iteration   2: 319.999 ns/op
Iteration   3: 264.135 ns/op
Iteration   4: 202.368 ns/op
Iteration   5: 217.419 ns/op

# Run progress: 17.52% complete, ETA 08:03:20
# Fork: 2 of 3
# Warmup Iteration   1: 308.947 ns/op
# Warmup Iteration   2: 388.984 ns/op
# Warmup Iteration   3: 288.584 ns/op
Iteration   1: 303.700 ns/op
Iteration   2: 319.177 ns/op
Iteration   3: 270.909 ns/op
Iteration   4: 258.589 ns/op
Iteration   5: 280.707 ns/op

# Run progress: 17.55% complete, ETA 08:03:12
# Fork: 3 of 3
# Warmup Iteration   1: 260.630 ns/op
# Warmup Iteration   2: 301.589 ns/op
# Warmup Iteration   3: 311.099 ns/op
Iteration   1: 216.211 ns/op
Iteration   2: 193.363 ns/op
Iteration   3: 199.669 ns/op
Iteration   4: 233.280 ns/op
Iteration   5: 310.090 ns/op


Result "kotlin_benchmarks.array.fill.Inline64byte.Ref_to_Val_as_Val_arrayfillstat":
  260.404 ±(99.9%) 50.401 ns/op [Average]
  (min, avg, max) = (193.363, 260.404, 319.999), stdev = 47.146
  CI (99.9%): [210.003, 310.806] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline64byte.Ref_to_Val_as_Val_arrayfillstat
# Parameters: (size = 1000000)

# Run progress: 17.57% complete, ETA 08:03:03
# Fork: 1 of 3
# Warmup Iteration   1: 3402605.360 ns/op
# Warmup Iteration   2: 8882000.728 ns/op
# Warmup Iteration   3: 33943913.900 ns/op
Iteration   1: 34611576.400 ns/op
Iteration   2: 49561938.476 ns/op
Iteration   3: 40100008.320 ns/op
Iteration   4: 5479020.380 ns/op
Iteration   5: 3757166.358 ns/op

# Run progress: 17.60% complete, ETA 08:02:57
# Fork: 2 of 3
# Warmup Iteration   1: 7196808.387 ns/op
# Warmup Iteration   2: 6358617.543 ns/op
# Warmup Iteration   3: 5730442.705 ns/op
Iteration   1: 11503338.660 ns/op
Iteration   2: 66348078.125 ns/op
Iteration   3: 41900123.250 ns/op
Iteration   4: 29813172.629 ns/op
Iteration   5: 6988482.931 ns/op

# Run progress: 17.62% complete, ETA 08:02:52
# Fork: 3 of 3
# Warmup Iteration   1: 2707684.636 ns/op
# Warmup Iteration   2: 9075456.858 ns/op
# Warmup Iteration   3: 78060266.077 ns/op
Iteration   1: 51914477.100 ns/op
Iteration   2: 42035223.958 ns/op
Iteration   3: 65681130.250 ns/op
Iteration   4: 73204000.000 ns/op
Iteration   5: 53363177.632 ns/op


Result "kotlin_benchmarks.array.fill.Inline64byte.Ref_to_Val_as_Val_arrayfillstat":
  38417394.298 ±(99.9%) 24542315.516 ns/op [Average]
  (min, avg, max) = (3757166.358, 38417394.298, 73204000.000), stdev = 22956897.162
  CI (99.9%): [13875078.782, 62959709.814] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline64byte.Ref_to_Val_as_Val_fillinst
# Parameters: (size = 100)

# Run progress: 17.65% complete, ETA 08:02:45
# Fork: 1 of 3
# Warmup Iteration   1: 172.126 ns/op
# Warmup Iteration   2: 198.399 ns/op
# Warmup Iteration   3: 262.470 ns/op
Iteration   1: 296.669 ns/op
Iteration   2: 354.665 ns/op
Iteration   3: 347.600 ns/op
Iteration   4: 339.234 ns/op
Iteration   5: 368.961 ns/op

# Run progress: 17.67% complete, ETA 08:02:35
# Fork: 2 of 3
# Warmup Iteration   1: 350.799 ns/op
# Warmup Iteration   2: 360.087 ns/op
# Warmup Iteration   3: 351.664 ns/op
Iteration   1: 277.052 ns/op
Iteration   2: 330.959 ns/op
Iteration   3: 389.444 ns/op
Iteration   4: 340.118 ns/op
Iteration   5: 325.005 ns/op

# Run progress: 17.70% complete, ETA 08:02:28
# Fork: 3 of 3
# Warmup Iteration   1: 357.449 ns/op
# Warmup Iteration   2: 331.906 ns/op
# Warmup Iteration   3: 332.470 ns/op
Iteration   1: 320.430 ns/op
Iteration   2: 295.699 ns/op
Iteration   3: 322.466 ns/op
Iteration   4: 365.321 ns/op
Iteration   5: 405.970 ns/op


Result "kotlin_benchmarks.array.fill.Inline64byte.Ref_to_Val_as_Val_fillinst":
  338.640 ±(99.9%) 37.604 ns/op [Average]
  (min, avg, max) = (277.052, 338.640, 405.970), stdev = 35.175
  CI (99.9%): [301.035, 376.244] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline64byte.Ref_to_Val_as_Val_fillinst
# Parameters: (size = 1000000)

# Run progress: 17.72% complete, ETA 08:02:20
# Fork: 1 of 3
# Warmup Iteration   1: 34373298.387 ns/op
# Warmup Iteration   2: 41352353.320 ns/op
# Warmup Iteration   3: 35747337.786 ns/op
Iteration   1: 42910971.680 ns/op
Iteration   2: 54830660.105 ns/op
Iteration   3: 52769141.650 ns/op
Iteration   4: 34038668.033 ns/op
Iteration   5: 32805338.710 ns/op

# Run progress: 17.75% complete, ETA 08:02:14
# Fork: 2 of 3
# Warmup Iteration   1: 32946385.742 ns/op
# Warmup Iteration   2: 39749878.074 ns/op
# Warmup Iteration   3: 35030458.333 ns/op
Iteration   1: 33672985.194 ns/op
Iteration   2: 7904126.969 ns/op
Iteration   3: 4249353.466 ns/op
Iteration   4: 5152470.000 ns/op
Iteration   5: 45832657.182 ns/op

# Run progress: 17.77% complete, ETA 08:02:06
# Fork: 3 of 3
# Warmup Iteration   1: 47111189.409 ns/op
# Warmup Iteration   2: 44746342.391 ns/op
# Warmup Iteration   3: 51125470.238 ns/op
Iteration   1: 45881498.250 ns/op
Iteration   2: 50651606.250 ns/op
Iteration   3: 22425331.489 ns/op
Iteration   4: 50902947.900 ns/op
Iteration   5: 6518366.935 ns/op


Result "kotlin_benchmarks.array.fill.Inline64byte.Ref_to_Val_as_Val_fillinst":
  32703074.921 ±(99.9%) 20149866.984 ns/op [Average]
  (min, avg, max) = (4249353.466, 32703074.921, 54830660.105), stdev = 18848198.080
  CI (99.9%): [12553207.937, 52852941.905] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline64byte.Ref_to_Val_as_Val_fillstat
# Parameters: (size = 100)

# Run progress: 17.79% complete, ETA 08:01:58
# Fork: 1 of 3
# Warmup Iteration   1: 292.088 ns/op
# Warmup Iteration   2: 286.231 ns/op
# Warmup Iteration   3: 222.639 ns/op
Iteration   1: 267.687 ns/op
Iteration   2: 361.174 ns/op
Iteration   3: 310.862 ns/op
Iteration   4: 287.955 ns/op
Iteration   5: 219.537 ns/op

# Run progress: 17.82% complete, ETA 08:01:50
# Fork: 2 of 3
# Warmup Iteration   1: 261.923 ns/op
# Warmup Iteration   2: 252.872 ns/op
# Warmup Iteration   3: 208.334 ns/op
Iteration   1: 184.513 ns/op
Iteration   2: 170.312 ns/op
Iteration   3: 169.421 ns/op
Iteration   4: 174.663 ns/op
Iteration   5: 195.099 ns/op

# Run progress: 17.84% complete, ETA 08:01:41
# Fork: 3 of 3
# Warmup Iteration   1: 220.903 ns/op
# Warmup Iteration   2: 231.618 ns/op
# Warmup Iteration   3: 294.306 ns/op
Iteration   1: 312.694 ns/op
Iteration   2: 302.659 ns/op
Iteration   3: 316.907 ns/op
Iteration   4: 236.896 ns/op
Iteration   5: 204.759 ns/op


Result "kotlin_benchmarks.array.fill.Inline64byte.Ref_to_Val_as_Val_fillstat":
  247.676 ±(99.9%) 68.741 ns/op [Average]
  (min, avg, max) = (169.421, 247.676, 361.174), stdev = 64.301
  CI (99.9%): [178.934, 316.417] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline64byte.Ref_to_Val_as_Val_fillstat
# Parameters: (size = 1000000)

# Run progress: 17.87% complete, ETA 08:01:32
# Fork: 1 of 3
# Warmup Iteration   1: 41199203.538 ns/op
# Warmup Iteration   2: 48899335.333 ns/op
# Warmup Iteration   3: 40750440.000 ns/op
Iteration   1: 33833186.100 ns/op
Iteration   2: 35357932.483 ns/op
Iteration   3: 35483136.483 ns/op
Iteration   4: 31371849.727 ns/op
Iteration   5: 30682237.364 ns/op

# Run progress: 17.89% complete, ETA 08:01:23
# Fork: 2 of 3
# Warmup Iteration   1: 32124266.906 ns/op
# Warmup Iteration   2: 29766300.235 ns/op
# Warmup Iteration   3: 4819670.656 ns/op
Iteration   1: 4038229.249 ns/op
Iteration   2: 7284582.143 ns/op
Iteration   3: 13753800.000 ns/op
Iteration   4: 16629200.258 ns/op
Iteration   5: 11824521.802 ns/op

# Run progress: 17.92% complete, ETA 08:01:14
# Fork: 3 of 3
# Warmup Iteration   1: 10383733.000 ns/op
# Warmup Iteration   2: 45001757.261 ns/op
# Warmup Iteration   3: 35034360.655 ns/op
Iteration   1: 41582955.115 ns/op
Iteration   2: 38946416.654 ns/op
Iteration   3: 32946252.625 ns/op
Iteration   4: 29109955.943 ns/op
Iteration   5: 32370678.375 ns/op


Result "kotlin_benchmarks.array.fill.Inline64byte.Ref_to_Val_as_Val_fillstat":
  26347662.288 ±(99.9%) 12993389.437 ns/op [Average]
  (min, avg, max) = (4038229.249, 26347662.288, 41582955.115), stdev = 12154024.542
  CI (99.9%): [13354272.851, 39341051.725] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline64byte.Val_to_Ref_as_Ref_arrayfillinst
# Parameters: (size = 100)

# Run progress: 17.94% complete, ETA 08:01:07
# Fork: 1 of 3
# Warmup Iteration   1: 153.787 ns/op
# Warmup Iteration   2: 257.479 ns/op
# Warmup Iteration   3: 230.723 ns/op
Iteration   1: 329.428 ns/op
Iteration   2: 247.609 ns/op
Iteration   3: 238.029 ns/op
Iteration   4: 317.606 ns/op
Iteration   5: 276.534 ns/op

# Run progress: 17.97% complete, ETA 08:00:58
# Fork: 2 of 3
# Warmup Iteration   1: 294.620 ns/op
# Warmup Iteration   2: 296.728 ns/op
# Warmup Iteration   3: 257.826 ns/op
Iteration   1: 176.438 ns/op
Iteration   2: 152.194 ns/op
Iteration   3: 146.535 ns/op
Iteration   4: 147.624 ns/op
Iteration   5: 172.334 ns/op

# Run progress: 17.99% complete, ETA 08:00:50
# Fork: 3 of 3
# Warmup Iteration   1: 291.190 ns/op
# Warmup Iteration   2: 297.891 ns/op
# Warmup Iteration   3: 282.718 ns/op
Iteration   1: 203.034 ns/op
Iteration   2: 193.338 ns/op
Iteration   3: 193.631 ns/op
Iteration   4: 174.225 ns/op
Iteration   5: 161.581 ns/op


Result "kotlin_benchmarks.array.fill.Inline64byte.Val_to_Ref_as_Ref_arrayfillinst":
  208.676 ±(99.9%) 64.186 ns/op [Average]
  (min, avg, max) = (146.535, 208.676, 329.428), stdev = 60.039
  CI (99.9%): [144.490, 272.862] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline64byte.Val_to_Ref_as_Ref_arrayfillinst
# Parameters: (size = 1000000)

# Run progress: 18.01% complete, ETA 08:00:41
# Fork: 1 of 3
# Warmup Iteration   1: 34140956.933 ns/op
# Warmup Iteration   2: 37533143.519 ns/op
# Warmup Iteration   3: 37729350.333 ns/op
Iteration   1: 33791066.667 ns/op
Iteration   2: 40210870.000 ns/op
Iteration   3: 32149003.906 ns/op
Iteration   4: 23057030.295 ns/op
Iteration   5: 45520923.913 ns/op

# Run progress: 18.04% complete, ETA 08:00:31
# Fork: 2 of 3
# Warmup Iteration   1: 42365428.833 ns/op
# Warmup Iteration   2: 33009485.226 ns/op
# Warmup Iteration   3: 30656954.771 ns/op
Iteration   1: 48076626.952 ns/op
Iteration   2: 40623395.000 ns/op
Iteration   3: 52073564.550 ns/op
Iteration   4: 55209767.526 ns/op
Iteration   5: 60060050.889 ns/op

# Run progress: 18.06% complete, ETA 08:00:24
# Fork: 3 of 3
# Warmup Iteration   1: 36484267.857 ns/op
# Warmup Iteration   2: 36863044.643 ns/op
# Warmup Iteration   3: 34350027.767 ns/op
Iteration   1: 38866421.296 ns/op
Iteration   2: 30170689.971 ns/op
Iteration   3: 22034683.870 ns/op
Iteration   4: 57102884.278 ns/op
Iteration   5: 54024958.368 ns/op


Result "kotlin_benchmarks.array.fill.Inline64byte.Val_to_Ref_as_Ref_arrayfillinst":
  42198129.165 ±(99.9%) 13094191.042 ns/op [Average]
  (min, avg, max) = (22034683.870, 42198129.165, 60060050.889), stdev = 12248314.425
  CI (99.9%): [29103938.124, 55292320.207] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline64byte.Val_to_Ref_as_Ref_arrayfillstat
# Parameters: (size = 100)

# Run progress: 18.09% complete, ETA 08:00:15
# Fork: 1 of 3
# Warmup Iteration   1: 220.148 ns/op
# Warmup Iteration   2: 212.214 ns/op
# Warmup Iteration   3: 183.100 ns/op
Iteration   1: 166.593 ns/op
Iteration   2: 159.535 ns/op
Iteration   3: 161.109 ns/op
Iteration   4: 167.381 ns/op
Iteration   5: 160.863 ns/op

# Run progress: 18.11% complete, ETA 08:00:06
# Fork: 2 of 3
# Warmup Iteration   1: 164.479 ns/op
# Warmup Iteration   2: 165.173 ns/op
# Warmup Iteration   3: 163.825 ns/op
Iteration   1: 175.079 ns/op
Iteration   2: 201.200 ns/op
Iteration   3: 292.593 ns/op
Iteration   4: 318.548 ns/op
Iteration   5: 310.652 ns/op

# Run progress: 18.14% complete, ETA 07:59:56
# Fork: 3 of 3
# Warmup Iteration   1: 260.071 ns/op
# Warmup Iteration   2: 311.909 ns/op
# Warmup Iteration   3: 305.036 ns/op
Iteration   1: 298.111 ns/op
Iteration   2: 376.147 ns/op
Iteration   3: 314.943 ns/op
Iteration   4: 311.229 ns/op
Iteration   5: 200.368 ns/op


Result "kotlin_benchmarks.array.fill.Inline64byte.Val_to_Ref_as_Ref_arrayfillstat":
  240.957 ±(99.9%) 82.528 ns/op [Average]
  (min, avg, max) = (159.535, 240.957, 376.147), stdev = 77.197
  CI (99.9%): [158.429, 323.485] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline64byte.Val_to_Ref_as_Ref_arrayfillstat
# Parameters: (size = 1000000)

# Run progress: 18.16% complete, ETA 07:59:47
# Fork: 1 of 3
# Warmup Iteration   1: 31699655.303 ns/op
# Warmup Iteration   2: 44772007.261 ns/op
# Warmup Iteration   3: 36830023.821 ns/op
Iteration   1: 25583634.375 ns/op
Iteration   2: 42034421.875 ns/op
Iteration   3: 61705460.765 ns/op
Iteration   4: 47025765.182 ns/op
Iteration   5: 43181930.542 ns/op

# Run progress: 18.19% complete, ETA 07:59:39
# Fork: 2 of 3
# Warmup Iteration   1: 46129346.591 ns/op
# Warmup Iteration   2: 41503396.640 ns/op
# Warmup Iteration   3: 37804799.370 ns/op
Iteration   1: 36213976.179 ns/op
Iteration   2: 35489607.759 ns/op
Iteration   3: 29444596.056 ns/op
Iteration   4: 34018266.667 ns/op
Iteration   5: 35076951.172 ns/op

# Run progress: 18.21% complete, ETA 07:59:30
# Fork: 3 of 3
# Warmup Iteration   1: 23014908.159 ns/op
# Warmup Iteration   2: 20621772.959 ns/op
# Warmup Iteration   3: 31828045.594 ns/op
Iteration   1: 27885766.194 ns/op
Iteration   2: 10531136.480 ns/op
Iteration   3: 19443406.453 ns/op
Iteration   4: 22456256.489 ns/op
Iteration   5: 13726396.959 ns/op


Result "kotlin_benchmarks.array.fill.Inline64byte.Val_to_Ref_as_Ref_arrayfillstat":
  32254504.876 ±(99.9%) 14241947.341 ns/op [Average]
  (min, avg, max) = (10531136.480, 32254504.876, 61705460.765), stdev = 13321926.380
  CI (99.9%): [18012557.536, 46496452.217] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline64byte.Val_to_Ref_as_Ref_fillinst
# Parameters: (size = 100)

# Run progress: 18.24% complete, ETA 07:59:21
# Fork: 1 of 3
# Warmup Iteration   1: 336.060 ns/op
# Warmup Iteration   2: 312.190 ns/op
# Warmup Iteration   3: 308.969 ns/op
Iteration   1: 339.026 ns/op
Iteration   2: 317.685 ns/op
Iteration   3: 207.792 ns/op
Iteration   4: 179.695 ns/op
Iteration   5: 170.286 ns/op

# Run progress: 18.26% complete, ETA 07:59:12
# Fork: 2 of 3
# Warmup Iteration   1: 172.490 ns/op
# Warmup Iteration   2: 192.843 ns/op
# Warmup Iteration   3: 278.315 ns/op
Iteration   1: 353.289 ns/op
Iteration   2: 339.847 ns/op
Iteration   3: 337.087 ns/op
Iteration   4: 246.823 ns/op
Iteration   5: 233.830 ns/op

# Run progress: 18.28% complete, ETA 07:59:03
# Fork: 3 of 3
# Warmup Iteration   1: 380.568 ns/op
# Warmup Iteration   2: 359.171 ns/op
# Warmup Iteration   3: 339.552 ns/op
Iteration   1: 350.267 ns/op
Iteration   2: 334.520 ns/op
Iteration   3: 343.176 ns/op
Iteration   4: 216.972 ns/op
Iteration   5: 177.110 ns/op


Result "kotlin_benchmarks.array.fill.Inline64byte.Val_to_Ref_as_Ref_fillinst":
  276.494 ±(99.9%) 77.690 ns/op [Average]
  (min, avg, max) = (170.286, 276.494, 353.289), stdev = 72.672
  CI (99.9%): [198.803, 354.184] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline64byte.Val_to_Ref_as_Ref_fillinst
# Parameters: (size = 1000000)

# Run progress: 18.31% complete, ETA 07:58:54
# Fork: 1 of 3
# Warmup Iteration   1: 37998993.815 ns/op
# Warmup Iteration   2: 28793850.000 ns/op
# Warmup Iteration   3: 26283972.925 ns/op
Iteration   1: 55605958.368 ns/op
Iteration   2: 64551105.353 ns/op
Iteration   3: 45513065.217 ns/op
Iteration   4: 49959444.429 ns/op
Iteration   5: 52054064.600 ns/op

# Run progress: 18.33% complete, ETA 07:58:46
# Fork: 2 of 3
# Warmup Iteration   1: 33440676.065 ns/op
# Warmup Iteration   2: 32664416.677 ns/op
# Warmup Iteration   3: 37622950.593 ns/op
Iteration   1: 33537950.258 ns/op
Iteration   2: 35651318.966 ns/op
Iteration   3: 35331890.793 ns/op
Iteration   4: 37711941.370 ns/op
Iteration   5: 31528296.875 ns/op

# Run progress: 18.36% complete, ETA 07:58:37
# Fork: 3 of 3
# Warmup Iteration   1: 38906804.500 ns/op
# Warmup Iteration   2: 5883177.920 ns/op
# Warmup Iteration   3: 4810562.201 ns/op
Iteration   1: 8423963.200 ns/op
Iteration   2: 59030967.556 ns/op
Iteration   3: 19172474.057 ns/op
Iteration   4: 37613876.500 ns/op
Iteration   5: 6446931.622 ns/op


Result "kotlin_benchmarks.array.fill.Inline64byte.Val_to_Ref_as_Ref_fillinst":
  38142216.611 ±(99.9%) 18413650.845 ns/op [Average]
  (min, avg, max) = (6446931.622, 38142216.611, 64551105.353), stdev = 17224140.426
  CI (99.9%): [19728565.766, 56555867.456] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline64byte.Val_to_Ref_as_Ref_fillstat
# Parameters: (size = 100)

# Run progress: 18.38% complete, ETA 07:58:28
# Fork: 1 of 3
# Warmup Iteration   1: 320.944 ns/op
# Warmup Iteration   2: 313.612 ns/op
# Warmup Iteration   3: 308.189 ns/op
Iteration   1: 209.288 ns/op
Iteration   2: 171.334 ns/op
Iteration   3: 170.526 ns/op
Iteration   4: 188.473 ns/op
Iteration   5: 256.531 ns/op

# Run progress: 18.41% complete, ETA 07:58:21
# Fork: 2 of 3
# Warmup Iteration   1: 290.586 ns/op
# Warmup Iteration   2: 324.586 ns/op
# Warmup Iteration   3: 316.484 ns/op
Iteration   1: 230.862 ns/op
Iteration   2: 205.758 ns/op
Iteration   3: 223.263 ns/op
Iteration   4: 287.563 ns/op
Iteration   5: 232.213 ns/op

# Run progress: 18.43% complete, ETA 07:58:12
# Fork: 3 of 3
# Warmup Iteration   1: 196.028 ns/op
# Warmup Iteration   2: 192.397 ns/op
# Warmup Iteration   3: 217.677 ns/op
Iteration   1: 220.620 ns/op
Iteration   2: 215.381 ns/op
Iteration   3: 225.023 ns/op
Iteration   4: 280.470 ns/op
Iteration   5: 319.008 ns/op


Result "kotlin_benchmarks.array.fill.Inline64byte.Val_to_Ref_as_Ref_fillstat":
  229.087 ±(99.9%) 44.788 ns/op [Average]
  (min, avg, max) = (170.526, 229.087, 319.008), stdev = 41.895
  CI (99.9%): [184.300, 273.875] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline64byte.Val_to_Ref_as_Ref_fillstat
# Parameters: (size = 1000000)

# Run progress: 18.46% complete, ETA 07:58:03
# Fork: 1 of 3
# Warmup Iteration   1: 19329874.208 ns/op
# Warmup Iteration   2: 9288030.202 ns/op
# Warmup Iteration   3: 15071779.851 ns/op
Iteration   1: 21160647.563 ns/op
Iteration   2: 5934328.182 ns/op
Iteration   3: 11293813.889 ns/op
Iteration   4: 8170800.734 ns/op
Iteration   5: 6782364.309 ns/op

# Run progress: 18.48% complete, ETA 07:57:56
# Fork: 2 of 3
# Warmup Iteration   1: 42349910.000 ns/op
# Warmup Iteration   2: 53196760.400 ns/op
# Warmup Iteration   3: 57852905.056 ns/op
Iteration   1: 44488905.783 ns/op
Iteration   2: 35987106.310 ns/op
Iteration   3: 34206594.433 ns/op
Iteration   4: 34700034.483 ns/op
Iteration   5: 4972813.535 ns/op

# Run progress: 18.50% complete, ETA 07:57:49
# Fork: 3 of 3
# Warmup Iteration   1: 4240402.368 ns/op
# Warmup Iteration   2: 24262785.860 ns/op
# Warmup Iteration   3: 53305500.000 ns/op
Iteration   1: 45563943.182 ns/op
Iteration   2: 52407004.150 ns/op
Iteration   3: 52606295.850 ns/op
Iteration   4: 44190134.087 ns/op
Iteration   5: 22606243.533 ns/op


Result "kotlin_benchmarks.array.fill.Inline64byte.Val_to_Ref_as_Ref_fillstat":
  28338068.668 ±(99.9%) 18962445.511 ns/op [Average]
  (min, avg, max) = (4972813.535, 28338068.668, 52606295.850), stdev = 17737483.298
  CI (99.9%): [9375623.157, 47300514.179] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline64byte.Val_to_Val_as_Val_arrayfillinst
# Parameters: (size = 100)

# Run progress: 18.53% complete, ETA 07:57:43
# Fork: 1 of 3
# Warmup Iteration   1: 259.244 ns/op
# Warmup Iteration   2: 229.788 ns/op
# Warmup Iteration   3: 264.003 ns/op
Iteration   1: 314.537 ns/op
Iteration   2: 316.874 ns/op
Iteration   3: 321.284 ns/op
Iteration   4: 283.749 ns/op
Iteration   5: 281.348 ns/op

# Run progress: 18.55% complete, ETA 07:57:35
# Fork: 2 of 3
# Warmup Iteration   1: 313.897 ns/op
# Warmup Iteration   2: 278.485 ns/op
# Warmup Iteration   3: 261.287 ns/op
Iteration   1: 291.517 ns/op
Iteration   2: 326.456 ns/op
Iteration   3: 328.994 ns/op
Iteration   4: 278.662 ns/op
Iteration   5: 202.987 ns/op

# Run progress: 18.58% complete, ETA 07:57:27
# Fork: 3 of 3
# Warmup Iteration   1: 169.547 ns/op
# Warmup Iteration   2: 188.607 ns/op
# Warmup Iteration   3: 228.998 ns/op
Iteration   1: 301.364 ns/op
Iteration   2: 337.526 ns/op
Iteration   3: 261.912 ns/op
Iteration   4: 335.343 ns/op
Iteration   5: 309.921 ns/op


Result "kotlin_benchmarks.array.fill.Inline64byte.Val_to_Val_as_Val_arrayfillinst":
  299.498 ±(99.9%) 37.521 ns/op [Average]
  (min, avg, max) = (202.987, 299.498, 337.526), stdev = 35.097
  CI (99.9%): [261.978, 337.019] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline64byte.Val_to_Val_as_Val_arrayfillinst
# Parameters: (size = 1000000)

# Run progress: 18.60% complete, ETA 07:57:18
# Fork: 1 of 3
# Warmup Iteration   1: 44931596.000 ns/op
# Warmup Iteration   2: 11467066.284 ns/op
# Warmup Iteration   3: 3517119.686 ns/op
Iteration   1: 5276161.943 ns/op
Iteration   2: 4501412.763 ns/op
Iteration   3: 4286145.034 ns/op
Iteration   4: 6052135.976 ns/op
Iteration   5: 4654761.574 ns/op

# Run progress: 18.63% complete, ETA 07:57:11
# Fork: 2 of 3
# Warmup Iteration   1: 56214357.474 ns/op
# Warmup Iteration   2: 56246185.222 ns/op
# Warmup Iteration   3: 44830931.174 ns/op
Iteration   1: 32490202.968 ns/op
Iteration   2: 7463725.615 ns/op
Iteration   3: 2689947.834 ns/op
Iteration   4: 3960033.784 ns/op
Iteration   5: 27760875.000 ns/op

# Run progress: 18.65% complete, ETA 07:57:03
# Fork: 3 of 3
# Warmup Iteration   1: 49141057.524 ns/op
# Warmup Iteration   2: 52966804.200 ns/op
# Warmup Iteration   3: 52910067.947 ns/op
Iteration   1: 73118550.571 ns/op
Iteration   2: 64021099.000 ns/op
Iteration   3: 52154577.100 ns/op
Iteration   4: 45736230.087 ns/op
Iteration   5: 43544746.542 ns/op


Result "kotlin_benchmarks.array.fill.Inline64byte.Val_to_Val_as_Val_arrayfillinst":
  25180707.053 ±(99.9%) 26606699.633 ns/op [Average]
  (min, avg, max) = (2689947.834, 25180707.053, 73118550.571), stdev = 24887923.346
  CI (99.9%): [≈ 0, 51787406.685] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline64byte.Val_to_Val_as_Val_arrayfillstat
# Parameters: (size = 100)

# Run progress: 18.68% complete, ETA 07:56:56
# Fork: 1 of 3
# Warmup Iteration   1: 140.843 ns/op
# Warmup Iteration   2: 185.646 ns/op
# Warmup Iteration   3: 311.805 ns/op
Iteration   1: 429.684 ns/op
Iteration   2: 331.689 ns/op
Iteration   3: 393.908 ns/op
Iteration   4: 332.454 ns/op
Iteration   5: 351.191 ns/op

# Run progress: 18.70% complete, ETA 07:56:46
# Fork: 2 of 3
# Warmup Iteration   1: 255.997 ns/op
# Warmup Iteration   2: 286.017 ns/op
# Warmup Iteration   3: 293.096 ns/op
Iteration   1: 300.640 ns/op
Iteration   2: 284.163 ns/op
Iteration   3: 307.603 ns/op
Iteration   4: 319.365 ns/op
Iteration   5: 268.164 ns/op

# Run progress: 18.73% complete, ETA 07:56:38
# Fork: 3 of 3
# Warmup Iteration   1: 324.076 ns/op
# Warmup Iteration   2: 301.992 ns/op
# Warmup Iteration   3: 314.472 ns/op
Iteration   1: 324.318 ns/op
Iteration   2: 313.909 ns/op
Iteration   3: 316.732 ns/op
Iteration   4: 294.287 ns/op
Iteration   5: 224.395 ns/op


Result "kotlin_benchmarks.array.fill.Inline64byte.Val_to_Val_as_Val_arrayfillstat":
  319.500 ±(99.9%) 51.999 ns/op [Average]
  (min, avg, max) = (224.395, 319.500, 429.684), stdev = 48.640
  CI (99.9%): [267.501, 371.499] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline64byte.Val_to_Val_as_Val_arrayfillstat
# Parameters: (size = 1000000)

# Run progress: 18.75% complete, ETA 07:56:29
# Fork: 1 of 3
# Warmup Iteration   1: 37755757.741 ns/op
# Warmup Iteration   2: 71647133.333 ns/op
# Warmup Iteration   3: 59776776.941 ns/op
Iteration   1: 46182967.391 ns/op
Iteration   2: 37776739.185 ns/op
Iteration   3: 39597373.385 ns/op
Iteration   4: 39683407.038 ns/op
Iteration   5: 37576050.607 ns/op

# Run progress: 18.77% complete, ETA 07:56:22
# Fork: 2 of 3
# Warmup Iteration   1: 9953304.894 ns/op
# Warmup Iteration   2: 6699536.113 ns/op
# Warmup Iteration   3: 5102135.313 ns/op
Iteration   1: 5100332.529 ns/op
Iteration   2: 16174487.226 ns/op
Iteration   3: 6200842.791 ns/op
Iteration   4: 6427175.633 ns/op
Iteration   5: 4828199.052 ns/op

# Run progress: 18.80% complete, ETA 07:56:13
# Fork: 3 of 3
# Warmup Iteration   1: 14770048.704 ns/op
# Warmup Iteration   2: 61305683.824 ns/op
# Warmup Iteration   3: 36485052.071 ns/op
Iteration   1: 40992473.360 ns/op
Iteration   2: 47834683.727 ns/op
Iteration   3: 42394631.958 ns/op
Iteration   4: 34245951.367 ns/op
Iteration   5: 34888869.241 ns/op


Result "kotlin_benchmarks.array.fill.Inline64byte.Val_to_Val_as_Val_arrayfillstat":
  29326945.633 ±(99.9%) 17520269.587 ns/op [Average]
  (min, avg, max) = (4828199.052, 29326945.633, 47834683.727), stdev = 16388471.043
  CI (99.9%): [11806676.046, 46847215.220] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline64byte.Val_to_Val_as_Val_fillinst
# Parameters: (size = 100)

# Run progress: 18.82% complete, ETA 07:56:06
# Fork: 1 of 3
# Warmup Iteration   1: 370.243 ns/op
# Warmup Iteration   2: 287.088 ns/op
# Warmup Iteration   3: 377.572 ns/op
Iteration   1: 316.210 ns/op
Iteration   2: 250.253 ns/op
Iteration   3: 290.644 ns/op
Iteration   4: 330.053 ns/op
Iteration   5: 290.391 ns/op

# Run progress: 18.85% complete, ETA 07:55:58
# Fork: 2 of 3
# Warmup Iteration   1: 344.584 ns/op
# Warmup Iteration   2: 328.922 ns/op
# Warmup Iteration   3: 326.207 ns/op
Iteration   1: 317.294 ns/op
Iteration   2: 324.155 ns/op
Iteration   3: 331.622 ns/op
Iteration   4: 295.919 ns/op
Iteration   5: 343.945 ns/op

# Run progress: 18.87% complete, ETA 07:55:50
# Fork: 3 of 3
# Warmup Iteration   1: 348.979 ns/op
# Warmup Iteration   2: 359.883 ns/op
# Warmup Iteration   3: 286.201 ns/op
Iteration   1: 256.819 ns/op
Iteration   2: 389.743 ns/op
Iteration   3: 400.067 ns/op
Iteration   4: 369.239 ns/op
Iteration   5: 321.012 ns/op


Result "kotlin_benchmarks.array.fill.Inline64byte.Val_to_Val_as_Val_fillinst":
  321.824 ±(99.9%) 45.781 ns/op [Average]
  (min, avg, max) = (250.253, 321.824, 400.067), stdev = 42.823
  CI (99.9%): [276.044, 367.605] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline64byte.Val_to_Val_as_Val_fillinst
# Parameters: (size = 1000000)

# Run progress: 18.90% complete, ETA 07:55:43
# Fork: 1 of 3
# Warmup Iteration   1: 7880253.906 ns/op
# Warmup Iteration   2: 5768626.920 ns/op
# Warmup Iteration   3: 23609616.477 ns/op
Iteration   1: 43251732.625 ns/op
Iteration   2: 36239730.679 ns/op
Iteration   3: 39300737.192 ns/op
Iteration   4: 14570864.130 ns/op
Iteration   5: 8253574.107 ns/op

# Run progress: 18.92% complete, ETA 07:55:36
# Fork: 2 of 3
# Warmup Iteration   1: 22288315.596 ns/op
# Warmup Iteration   2: 40841268.320 ns/op
# Warmup Iteration   3: 35127341.966 ns/op
Iteration   1: 66486224.000 ns/op
Iteration   2: 54645956.158 ns/op
Iteration   3: 41349633.320 ns/op
Iteration   4: 37789300.926 ns/op
Iteration   5: 35165617.828 ns/op

# Run progress: 18.95% complete, ETA 07:55:29
# Fork: 3 of 3
# Warmup Iteration   1: 32803285.156 ns/op
# Warmup Iteration   2: 41929973.320 ns/op
# Warmup Iteration   3: 38368587.963 ns/op
Iteration   1: 31702739.909 ns/op
Iteration   2: 7852486.109 ns/op
Iteration   3: 4745723.863 ns/op
Iteration   4: 7501957.732 ns/op
Iteration   5: 13365041.139 ns/op


Result "kotlin_benchmarks.array.fill.Inline64byte.Val_to_Val_as_Val_fillinst":
  29481421.314 ±(99.9%) 20358099.010 ns/op [Average]
  (min, avg, max) = (4745723.863, 29481421.314, 66486224.000), stdev = 19042978.447
  CI (99.9%): [9123322.304, 49839520.324] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline64byte.Val_to_Val_as_Val_fillstat
# Parameters: (size = 100)

# Run progress: 18.97% complete, ETA 07:55:21
# Fork: 1 of 3
# Warmup Iteration   1: 269.116 ns/op
# Warmup Iteration   2: 283.901 ns/op
# Warmup Iteration   3: 292.050 ns/op
Iteration   1: 287.160 ns/op
Iteration   2: 294.250 ns/op
Iteration   3: 307.803 ns/op
Iteration   4: 321.634 ns/op
Iteration   5: 319.128 ns/op

# Run progress: 19.00% complete, ETA 07:55:12
# Fork: 2 of 3
# Warmup Iteration   1: 290.676 ns/op
# Warmup Iteration   2: 219.953 ns/op
# Warmup Iteration   3: 278.938 ns/op
Iteration   1: 429.538 ns/op
Iteration   2: 314.579 ns/op
Iteration   3: 322.599 ns/op
Iteration   4: 316.038 ns/op
Iteration   5: 294.014 ns/op

# Run progress: 19.02% complete, ETA 07:55:04
# Fork: 3 of 3
# Warmup Iteration   1: 262.941 ns/op
# Warmup Iteration   2: 290.290 ns/op
# Warmup Iteration   3: 323.989 ns/op
Iteration   1: 311.305 ns/op
Iteration   2: 350.081 ns/op
Iteration   3: 316.159 ns/op
Iteration   4: 231.626 ns/op
Iteration   5: 174.991 ns/op


Result "kotlin_benchmarks.array.fill.Inline64byte.Val_to_Val_as_Val_fillstat":
  306.060 ±(99.9%) 58.232 ns/op [Average]
  (min, avg, max) = (174.991, 306.060, 429.538), stdev = 54.470
  CI (99.9%): [247.829, 364.292] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline64byte.Val_to_Val_as_Val_fillstat
# Parameters: (size = 1000000)

# Run progress: 19.04% complete, ETA 07:54:55
# Fork: 1 of 3
# Warmup Iteration   1: 34754600.000 ns/op
# Warmup Iteration   2: 40093753.192 ns/op
# Warmup Iteration   3: 8245082.311 ns/op
Iteration   1: 5007444.239 ns/op
Iteration   2: 34895071.226 ns/op
Iteration   3: 39425983.962 ns/op
Iteration   4: 41012969.577 ns/op
Iteration   5: 44472876.750 ns/op

# Run progress: 19.07% complete, ETA 07:54:47
# Fork: 2 of 3
# Warmup Iteration   1: 4538078.125 ns/op
# Warmup Iteration   2: 9659696.209 ns/op
# Warmup Iteration   3: 43282645.833 ns/op
Iteration   1: 22930454.545 ns/op
Iteration   2: 9638384.346 ns/op
Iteration   3: 69605686.067 ns/op
Iteration   4: 48912011.905 ns/op
Iteration   5: 26651816.256 ns/op

# Run progress: 19.09% complete, ETA 07:54:40
# Fork: 3 of 3
# Warmup Iteration   1: 31641779.938 ns/op
# Warmup Iteration   2: 3480222.269 ns/op
# Warmup Iteration   3: 7302922.535 ns/op
Iteration   1: 74323217.286 ns/op
Iteration   2: 49585525.762 ns/op
Iteration   3: 43455024.292 ns/op
Iteration   4: 52926539.600 ns/op
Iteration   5: 51825818.750 ns/op


Result "kotlin_benchmarks.array.fill.Inline64byte.Val_to_Val_as_Val_fillstat":
  40977921.637 ±(99.9%) 20590960.584 ns/op [Average]
  (min, avg, max) = (5007444.239, 40977921.637, 74323217.286), stdev = 19260797.307
  CI (99.9%): [20386961.054, 61568882.221] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline64int.Def_to_Ref_as_Ref_arrayfill
# Parameters: (size = 100)

# Run progress: 19.12% complete, ETA 07:54:32
# Fork: 1 of 3
# Warmup Iteration   1: 158.742 ns/op
# Warmup Iteration   2: 171.437 ns/op
# Warmup Iteration   3: 191.532 ns/op
Iteration   1: 226.178 ns/op
Iteration   2: 266.264 ns/op
Iteration   3: 268.924 ns/op
Iteration   4: 335.959 ns/op
Iteration   5: 375.516 ns/op

# Run progress: 19.14% complete, ETA 07:54:22
# Fork: 2 of 3
# Warmup Iteration   1: 398.964 ns/op
# Warmup Iteration   2: 390.104 ns/op
# Warmup Iteration   3: 376.558 ns/op
Iteration   1: 331.849 ns/op
Iteration   2: 345.098 ns/op
Iteration   3: 334.481 ns/op
Iteration   4: 342.216 ns/op
Iteration   5: 340.987 ns/op

# Run progress: 19.17% complete, ETA 07:54:15
# Fork: 3 of 3
# Warmup Iteration   1: 378.369 ns/op
# Warmup Iteration   2: 368.324 ns/op
# Warmup Iteration   3: 337.567 ns/op
Iteration   1: 314.045 ns/op
Iteration   2: 265.601 ns/op
Iteration   3: 274.417 ns/op
Iteration   4: 390.846 ns/op
Iteration   5: 429.235 ns/op


Result "kotlin_benchmarks.array.fill.Inline64int.Def_to_Ref_as_Ref_arrayfill":
  322.774 ±(99.9%) 58.176 ns/op [Average]
  (min, avg, max) = (226.178, 322.774, 429.235), stdev = 54.418
  CI (99.9%): [264.599, 380.950] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline64int.Def_to_Ref_as_Ref_arrayfill
# Parameters: (size = 1000000)

# Run progress: 19.19% complete, ETA 07:54:06
# Fork: 1 of 3
# Warmup Iteration   1: 42773005.208 ns/op
# Warmup Iteration   2: 33427852.767 ns/op
# Warmup Iteration   3: 33025267.484 ns/op
Iteration   1: 38922536.885 ns/op
Iteration   2: 44731184.783 ns/op
Iteration   3: 47907038.043 ns/op
Iteration   4: 44249579.739 ns/op
Iteration   5: 36221662.379 ns/op

# Run progress: 19.22% complete, ETA 07:54:00
# Fork: 2 of 3
# Warmup Iteration   1: 34998904.167 ns/op
# Warmup Iteration   2: 35763992.793 ns/op
# Warmup Iteration   3: 37518966.037 ns/op
Iteration   1: 30771762.636 ns/op
Iteration   2: 39924870.192 ns/op
Iteration   3: 5078791.668 ns/op
Iteration   4: 5787214.520 ns/op
Iteration   5: 12646930.556 ns/op

# Run progress: 19.24% complete, ETA 07:53:51
# Fork: 3 of 3
# Warmup Iteration   1: 5208280.344 ns/op
# Warmup Iteration   2: 4551169.873 ns/op
# Warmup Iteration   3: 17857250.700 ns/op
Iteration   1: 7064164.973 ns/op
Iteration   2: 8287651.000 ns/op
Iteration   3: 54119436.421 ns/op
Iteration   4: 47915666.667 ns/op
Iteration   5: 48143952.682 ns/op


Result "kotlin_benchmarks.array.fill.Inline64int.Def_to_Ref_as_Ref_arrayfill":
  31451496.210 ±(99.9%) 19513529.838 ns/op [Average]
  (min, avg, max) = (5078791.668, 31451496.210, 54119436.421), stdev = 18252967.919
  CI (99.9%): [11937966.371, 50965026.048] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline64int.Def_to_Ref_as_Ref_fill
# Parameters: (size = 100)

# Run progress: 19.26% complete, ETA 07:53:43
# Fork: 1 of 3
# Warmup Iteration   1: 497.390 ns/op
# Warmup Iteration   2: 440.169 ns/op
# Warmup Iteration   3: 593.646 ns/op
Iteration   1: 841.057 ns/op
Iteration   2: 916.326 ns/op
Iteration   3: 990.526 ns/op
Iteration   4: 853.968 ns/op
Iteration   5: 830.098 ns/op

# Run progress: 19.29% complete, ETA 07:53:34
# Fork: 2 of 3
# Warmup Iteration   1: 1061.847 ns/op
# Warmup Iteration   2: 618.615 ns/op
# Warmup Iteration   3: 657.750 ns/op
Iteration   1: 693.810 ns/op
Iteration   2: 843.474 ns/op
Iteration   3: 963.840 ns/op
Iteration   4: 969.459 ns/op
Iteration   5: 806.374 ns/op

# Run progress: 19.31% complete, ETA 07:53:27
# Fork: 3 of 3
# Warmup Iteration   1: 1000.559 ns/op
# Warmup Iteration   2: 753.720 ns/op
# Warmup Iteration   3: 826.603 ns/op
Iteration   1: 962.950 ns/op
Iteration   2: 756.832 ns/op
Iteration   3: 1005.619 ns/op
Iteration   4: 823.122 ns/op
Iteration   5: 886.266 ns/op


Result "kotlin_benchmarks.array.fill.Inline64int.Def_to_Ref_as_Ref_fill":
  876.248 ±(99.9%) 97.131 ns/op [Average]
  (min, avg, max) = (693.810, 876.248, 1005.619), stdev = 90.856
  CI (99.9%): [779.117, 973.379] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline64int.Def_to_Ref_as_Ref_fill
# Parameters: (size = 1000000)

# Run progress: 19.34% complete, ETA 07:53:18
# Fork: 1 of 3
# Warmup Iteration   1: 10941007.172 ns/op
# Warmup Iteration   2: 8196958.333 ns/op
# Warmup Iteration   3: 7498903.604 ns/op
Iteration   1: 7675504.417 ns/op
Iteration   2: 10018137.782 ns/op
Iteration   3: 8835635.504 ns/op
Iteration   4: 6179662.854 ns/op
Iteration   5: 4892221.282 ns/op

# Run progress: 19.36% complete, ETA 07:53:11
# Fork: 2 of 3
# Warmup Iteration   1: 7654314.712 ns/op
# Warmup Iteration   2: 6230324.846 ns/op
# Warmup Iteration   3: 7288468.230 ns/op
Iteration   1: 10463602.865 ns/op
Iteration   2: 13014683.756 ns/op
Iteration   3: 10149586.670 ns/op
Iteration   4: 9029766.741 ns/op
Iteration   5: 9730006.404 ns/op

# Run progress: 19.39% complete, ETA 07:53:02
# Fork: 3 of 3
# Warmup Iteration   1: 11571793.586 ns/op
# Warmup Iteration   2: 10449461.306 ns/op
# Warmup Iteration   3: 16382196.242 ns/op
Iteration   1: 10950653.076 ns/op
Iteration   2: 8086678.328 ns/op
Iteration   3: 9824577.618 ns/op
Iteration   4: 8971246.319 ns/op
Iteration   5: 6015402.443 ns/op


Result "kotlin_benchmarks.array.fill.Inline64int.Def_to_Ref_as_Ref_fill":
  8922491.071 ±(99.9%) 2247914.298 ns/op [Average]
  (min, avg, max) = (4892221.282, 8922491.071, 13014683.756), stdev = 2102700.429
  CI (99.9%): [6674576.773, 11170405.368] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline64int.Def_to_Val_as_Val_arrayfill
# Parameters: (size = 100)

# Run progress: 19.41% complete, ETA 07:52:54
# Fork: 1 of 3
# Warmup Iteration   1: 317.440 ns/op
# Warmup Iteration   2: 360.555 ns/op
# Warmup Iteration   3: 373.943 ns/op
Iteration   1: 377.625 ns/op
Iteration   2: 405.840 ns/op
Iteration   3: 377.553 ns/op
Iteration   4: 321.125 ns/op
Iteration   5: 260.175 ns/op

# Run progress: 19.44% complete, ETA 07:52:45
# Fork: 2 of 3
# Warmup Iteration   1: 288.301 ns/op
# Warmup Iteration   2: 362.416 ns/op
# Warmup Iteration   3: 272.096 ns/op
Iteration   1: 220.236 ns/op
Iteration   2: 210.150 ns/op
Iteration   3: 213.995 ns/op
Iteration   4: 242.709 ns/op
Iteration   5: 278.666 ns/op

# Run progress: 19.46% complete, ETA 07:52:36
# Fork: 3 of 3
# Warmup Iteration   1: 249.198 ns/op
# Warmup Iteration   2: 308.249 ns/op
# Warmup Iteration   3: 348.762 ns/op
Iteration   1: 369.315 ns/op
Iteration   2: 358.758 ns/op
Iteration   3: 356.371 ns/op
Iteration   4: 337.555 ns/op
Iteration   5: 311.757 ns/op


Result "kotlin_benchmarks.array.fill.Inline64int.Def_to_Val_as_Val_arrayfill":
  309.455 ±(99.9%) 71.422 ns/op [Average]
  (min, avg, max) = (210.150, 309.455, 405.840), stdev = 66.808
  CI (99.9%): [238.034, 380.877] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline64int.Def_to_Val_as_Val_arrayfill
# Parameters: (size = 1000000)

# Run progress: 19.49% complete, ETA 07:52:27
# Fork: 1 of 3
# Warmup Iteration   1: 6131738.408 ns/op
# Warmup Iteration   2: 5640895.365 ns/op
# Warmup Iteration   3: 8974787.752 ns/op
Iteration   1: 53825504.421 ns/op
Iteration   2: 57559960.667 ns/op
Iteration   3: 44362338.783 ns/op
Iteration   4: 68107455.533 ns/op
Iteration   5: 44148967.391 ns/op

# Run progress: 19.51% complete, ETA 07:52:19
# Fork: 2 of 3
# Warmup Iteration   1: 37019568.464 ns/op
# Warmup Iteration   2: 37334668.179 ns/op
# Warmup Iteration   3: 5118799.066 ns/op
Iteration   1: 3855373.885 ns/op
Iteration   2: 3467430.791 ns/op
Iteration   3: 65526473.938 ns/op
Iteration   4: 53423848.684 ns/op
Iteration   5: 40794380.000 ns/op

# Run progress: 19.53% complete, ETA 07:52:10
# Fork: 3 of 3
# Warmup Iteration   1: 48481869.048 ns/op
# Warmup Iteration   2: 51521058.300 ns/op
# Warmup Iteration   3: 51656239.550 ns/op
Iteration   1: 3637984.168 ns/op
Iteration   2: 5568979.746 ns/op
Iteration   3: 13474642.213 ns/op
Iteration   4: 19971384.615 ns/op
Iteration   5: 47880145.818 ns/op


Result "kotlin_benchmarks.array.fill.Inline64int.Def_to_Val_as_Val_arrayfill":
  35040324.710 ±(99.9%) 25722307.131 ns/op [Average]
  (min, avg, max) = (3467430.791, 35040324.710, 68107455.533), stdev = 24060662.051
  CI (99.9%): [9318017.579, 60762631.841] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline64int.Def_to_Val_as_Val_fill
# Parameters: (size = 100)

# Run progress: 19.56% complete, ETA 07:52:01
# Fork: 1 of 3
# Warmup Iteration   1: 590.044 ns/op
# Warmup Iteration   2: 682.947 ns/op
# Warmup Iteration   3: 1094.672 ns/op
Iteration   1: 831.896 ns/op
Iteration   2: 834.324 ns/op
Iteration   3: 570.932 ns/op
Iteration   4: 608.541 ns/op
Iteration   5: 617.859 ns/op

# Run progress: 19.58% complete, ETA 07:51:52
# Fork: 2 of 3
# Warmup Iteration   1: 982.195 ns/op
# Warmup Iteration   2: 879.425 ns/op
# Warmup Iteration   3: 787.637 ns/op
Iteration   1: 595.467 ns/op
Iteration   2: 488.111 ns/op
Iteration   3: 487.772 ns/op
Iteration   4: 530.652 ns/op
Iteration   5: 761.094 ns/op

# Run progress: 19.61% complete, ETA 07:51:44
# Fork: 3 of 3
# Warmup Iteration   1: 1042.538 ns/op
# Warmup Iteration   2: 762.652 ns/op
# Warmup Iteration   3: 867.077 ns/op
Iteration   1: 910.016 ns/op
Iteration   2: 911.582 ns/op
Iteration   3: 770.793 ns/op
Iteration   4: 754.645 ns/op
Iteration   5: 744.638 ns/op


Result "kotlin_benchmarks.array.fill.Inline64int.Def_to_Val_as_Val_fill":
  694.555 ±(99.9%) 156.209 ns/op [Average]
  (min, avg, max) = (487.772, 694.555, 911.582), stdev = 146.118
  CI (99.9%): [538.346, 850.763] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline64int.Def_to_Val_as_Val_fill
# Parameters: (size = 1000000)

# Run progress: 19.63% complete, ETA 07:51:36
# Fork: 1 of 3
# Warmup Iteration   1: 14295290.493 ns/op
# Warmup Iteration   2: 10210597.636 ns/op
# Warmup Iteration   3: 16441772.177 ns/op
Iteration   1: 11849859.318 ns/op
Iteration   2: 5925536.491 ns/op
Iteration   3: 6307831.522 ns/op
Iteration   4: 8055994.706 ns/op
Iteration   5: 8597361.585 ns/op

# Run progress: 19.66% complete, ETA 07:51:29
# Fork: 2 of 3
# Warmup Iteration   1: 10818468.634 ns/op
# Warmup Iteration   2: 8652540.239 ns/op
# Warmup Iteration   3: 15211810.313 ns/op
Iteration   1: 9485665.112 ns/op
Iteration   2: 7299223.324 ns/op
Iteration   3: 7045857.517 ns/op
Iteration   4: 8159839.379 ns/op
Iteration   5: 8959839.239 ns/op

# Run progress: 19.68% complete, ETA 07:51:21
# Fork: 3 of 3
# Warmup Iteration   1: 12057234.619 ns/op
# Warmup Iteration   2: 9678777.644 ns/op
# Warmup Iteration   3: 14544040.471 ns/op
Iteration   1: 19506655.442 ns/op
Iteration   2: 8367733.124 ns/op
Iteration   3: 7179510.414 ns/op
Iteration   4: 5265855.147 ns/op
Iteration   5: 6673776.039 ns/op


Result "kotlin_benchmarks.array.fill.Inline64int.Def_to_Val_as_Val_fill":
  8578702.557 ±(99.9%) 3662619.605 ns/op [Average]
  (min, avg, max) = (5265855.147, 8578702.557, 19506655.442), stdev = 3426016.651
  CI (99.9%): [4916082.953, 12241322.162] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline64int.New_to_Ref_as_Ref_arrayfill
# Parameters: (size = 100)

# Run progress: 19.71% complete, ETA 07:51:13
# Fork: 1 of 3
# Warmup Iteration   1: 544.325 ns/op
# Warmup Iteration   2: 600.103 ns/op
# Warmup Iteration   3: 381.312 ns/op
Iteration   1: 343.167 ns/op
Iteration   2: 278.239 ns/op
Iteration   3: 306.393 ns/op
Iteration   4: 359.981 ns/op
Iteration   5: 373.783 ns/op

# Run progress: 19.73% complete, ETA 07:51:06
# Fork: 2 of 3
# Warmup Iteration   1: 534.797 ns/op
# Warmup Iteration   2: 413.782 ns/op
# Warmup Iteration   3: 229.977 ns/op
Iteration   1: 231.386 ns/op
Iteration   2: 261.435 ns/op
Iteration   3: 346.603 ns/op
Iteration   4: 392.472 ns/op
Iteration   5: 453.210 ns/op

# Run progress: 19.75% complete, ETA 07:50:58
# Fork: 3 of 3
# Warmup Iteration   1: 511.597 ns/op
# Warmup Iteration   2: 542.276 ns/op
# Warmup Iteration   3: 433.472 ns/op
Iteration   1: 434.520 ns/op
Iteration   2: 406.953 ns/op
Iteration   3: 334.479 ns/op
Iteration   4: 366.687 ns/op
Iteration   5: 350.243 ns/op


Result "kotlin_benchmarks.array.fill.Inline64int.New_to_Ref_as_Ref_arrayfill":
  349.303 ±(99.9%) 65.804 ns/op [Average]
  (min, avg, max) = (231.386, 349.303, 453.210), stdev = 61.553
  CI (99.9%): [283.499, 415.108] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline64int.New_to_Ref_as_Ref_arrayfill
# Parameters: (size = 1000000)

# Run progress: 19.78% complete, ETA 07:50:50
# Fork: 1 of 3
# Warmup Iteration   1: 49092748.048 ns/op
# Warmup Iteration   2: 46610024.636 ns/op
# Warmup Iteration   3: 42565753.500 ns/op
Iteration   1: 31615172.970 ns/op
Iteration   2: 33739268.806 ns/op
Iteration   3: 51579672.900 ns/op
Iteration   4: 50696133.350 ns/op
Iteration   5: 16332082.000 ns/op

# Run progress: 19.80% complete, ETA 07:50:42
# Fork: 2 of 3
# Warmup Iteration   1: 20136821.078 ns/op
# Warmup Iteration   2: 63916375.000 ns/op
# Warmup Iteration   3: 41986569.458 ns/op
Iteration   1: 33045811.806 ns/op
Iteration   2: 3008120.883 ns/op
Iteration   3: 3536692.982 ns/op
Iteration   4: 5778086.612 ns/op
Iteration   5: 11719546.140 ns/op

# Run progress: 19.83% complete, ETA 07:50:35
# Fork: 3 of 3
# Warmup Iteration   1: 7022355.442 ns/op
# Warmup Iteration   2: 7164675.532 ns/op
# Warmup Iteration   3: 10253413.427 ns/op
Iteration   1: 55808613.444 ns/op
Iteration   2: 48032829.545 ns/op
Iteration   3: 57214101.833 ns/op
Iteration   4: 6973685.917 ns/op
Iteration   5: 26023873.975 ns/op


Result "kotlin_benchmarks.array.fill.Inline64int.New_to_Ref_as_Ref_arrayfill":
  29006912.878 ±(99.9%) 21608211.550 ns/op [Average]
  (min, avg, max) = (3008120.883, 29006912.878, 57214101.833), stdev = 20212334.493
  CI (99.9%): [7398701.327, 50615124.428] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline64int.New_to_Ref_as_Ref_fill
# Parameters: (size = 100)

# Run progress: 19.85% complete, ETA 07:50:28
# Fork: 1 of 3
# Warmup Iteration   1: 1593.075 ns/op
# Warmup Iteration   2: 1238.716 ns/op
# Warmup Iteration   3: 672.953 ns/op
Iteration   1: 775.901 ns/op
Iteration   2: 759.631 ns/op
Iteration   3: 790.765 ns/op
Iteration   4: 758.043 ns/op
Iteration   5: 822.167 ns/op

# Run progress: 19.88% complete, ETA 07:50:20
# Fork: 2 of 3
# Warmup Iteration   1: 1250.666 ns/op
# Warmup Iteration   2: 1312.102 ns/op
# Warmup Iteration   3: 866.934 ns/op
Iteration   1: 733.319 ns/op
Iteration   2: 776.089 ns/op
Iteration   3: 933.432 ns/op
Iteration   4: 1014.044 ns/op
Iteration   5: 928.992 ns/op

# Run progress: 19.90% complete, ETA 07:50:12
# Fork: 3 of 3
# Warmup Iteration   1: 1275.495 ns/op
# Warmup Iteration   2: 1207.502 ns/op
# Warmup Iteration   3: 839.065 ns/op
Iteration   1: 850.608 ns/op
Iteration   2: 668.115 ns/op
Iteration   3: 820.100 ns/op
Iteration   4: 1078.993 ns/op
Iteration   5: 818.078 ns/op


Result "kotlin_benchmarks.array.fill.Inline64int.New_to_Ref_as_Ref_fill":
  835.218 ±(99.9%) 117.715 ns/op [Average]
  (min, avg, max) = (668.115, 835.218, 1078.993), stdev = 110.111
  CI (99.9%): [717.503, 952.934] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline64int.New_to_Ref_as_Ref_fill
# Parameters: (size = 1000000)

# Run progress: 19.93% complete, ETA 07:50:04
# Fork: 1 of 3
# Warmup Iteration   1: 16402094.758 ns/op
# Warmup Iteration   2: 13542349.453 ns/op
# Warmup Iteration   3: 18860116.519 ns/op
Iteration   1: 19562260.423 ns/op
Iteration   2: 33267995.968 ns/op
Iteration   3: 33324497.375 ns/op
Iteration   4: 36507255.964 ns/op
Iteration   5: 16178975.129 ns/op

# Run progress: 19.95% complete, ETA 07:49:58
# Fork: 2 of 3
# Warmup Iteration   1: 16889447.917 ns/op
# Warmup Iteration   2: 12941254.215 ns/op
# Warmup Iteration   3: 11495162.875 ns/op
Iteration   1: 12702633.962 ns/op
Iteration   2: 6921389.842 ns/op
Iteration   3: 8366022.388 ns/op
Iteration   4: 10042648.099 ns/op
Iteration   5: 7945476.563 ns/op

# Run progress: 19.98% complete, ETA 07:49:52
# Fork: 3 of 3
# Warmup Iteration   1: 15883370.438 ns/op
# Warmup Iteration   2: 10445794.247 ns/op
# Warmup Iteration   3: 12000065.976 ns/op
Iteration   1: 12004486.261 ns/op
Iteration   2: 9788919.097 ns/op
Iteration   3: 12028302.583 ns/op
Iteration   4: 9342018.130 ns/op
Iteration   5: 9767130.615 ns/op


Result "kotlin_benchmarks.array.fill.Inline64int.New_to_Ref_as_Ref_fill":
  15850000.827 ±(99.9%) 10829762.654 ns/op [Average]
  (min, avg, max) = (6921389.842, 15850000.827, 36507255.964), stdev = 10130166.706
  CI (99.9%): [5020238.173, 26679763.480] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline64int.New_to_Val_as_Val_arrayfill
# Parameters: (size = 100)

# Run progress: 20.00% complete, ETA 07:49:45
# Fork: 1 of 3
# Warmup Iteration   1: 507.291 ns/op
# Warmup Iteration   2: 504.917 ns/op
# Warmup Iteration   3: 341.121 ns/op
Iteration   1: 350.075 ns/op
Iteration   2: 365.869 ns/op
Iteration   3: 366.286 ns/op
Iteration   4: 422.468 ns/op
Iteration   5: 376.093 ns/op

# Run progress: 20.02% complete, ETA 07:49:37
# Fork: 2 of 3
# Warmup Iteration   1: 704.554 ns/op
# Warmup Iteration   2: 570.825 ns/op
# Warmup Iteration   3: 380.757 ns/op
Iteration   1: 366.601 ns/op
Iteration   2: 343.045 ns/op
Iteration   3: 359.452 ns/op
Iteration   4: 338.591 ns/op
Iteration   5: 327.095 ns/op

# Run progress: 20.05% complete, ETA 07:49:29
# Fork: 3 of 3
# Warmup Iteration   1: 493.213 ns/op
# Warmup Iteration   2: 472.755 ns/op
# Warmup Iteration   3: 336.502 ns/op
Iteration   1: 351.736 ns/op
Iteration   2: 351.462 ns/op
Iteration   3: 354.601 ns/op
Iteration   4: 348.817 ns/op
Iteration   5: 334.946 ns/op


Result "kotlin_benchmarks.array.fill.Inline64int.New_to_Val_as_Val_arrayfill":
  357.143 ±(99.9%) 23.917 ns/op [Average]
  (min, avg, max) = (327.095, 357.143, 422.468), stdev = 22.372
  CI (99.9%): [333.226, 381.059] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline64int.New_to_Val_as_Val_arrayfill
# Parameters: (size = 1000000)

# Run progress: 20.07% complete, ETA 07:49:21
# Fork: 1 of 3
# Warmup Iteration   1: 4718489.486 ns/op
# Warmup Iteration   2: 5055338.146 ns/op
# Warmup Iteration   3: 11285977.427 ns/op
Iteration   1: 53358392.579 ns/op
Iteration   2: 50860402.762 ns/op
Iteration   3: 52843862.500 ns/op
Iteration   4: 65091919.250 ns/op
Iteration   5: 44564284.391 ns/op

# Run progress: 20.10% complete, ETA 07:49:14
# Fork: 2 of 3
# Warmup Iteration   1: 3244243.054 ns/op
# Warmup Iteration   2: 3712266.144 ns/op
# Warmup Iteration   3: 9369274.179 ns/op
Iteration   1: 9609107.543 ns/op
Iteration   2: 3231495.324 ns/op
Iteration   3: 5561165.978 ns/op
Iteration   4: 55764118.421 ns/op
Iteration   5: 31125810.606 ns/op

# Run progress: 20.12% complete, ETA 07:49:06
# Fork: 3 of 3
# Warmup Iteration   1: 7891502.116 ns/op
# Warmup Iteration   2: 67994231.750 ns/op
# Warmup Iteration   3: 68646188.867 ns/op
Iteration   1: 46722433.682 ns/op
Iteration   2: 50576406.250 ns/op
Iteration   3: 64575734.375 ns/op
Iteration   4: 57891820.158 ns/op
Iteration   5: 67580847.267 ns/op


Result "kotlin_benchmarks.array.fill.Inline64int.New_to_Val_as_Val_arrayfill":
  43957186.739 ±(99.9%) 23048764.270 ns/op [Average]
  (min, avg, max) = (3231495.324, 43957186.739, 67580847.267), stdev = 21559828.401
  CI (99.9%): [20908422.469, 67005951.009] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline64int.New_to_Val_as_Val_fill
# Parameters: (size = 100)

# Run progress: 20.15% complete, ETA 07:49:00
# Fork: 1 of 3
# Warmup Iteration   1: 542.400 ns/op
# Warmup Iteration   2: 663.707 ns/op
# Warmup Iteration   3: 631.459 ns/op
Iteration   1: 704.709 ns/op
Iteration   2: 939.572 ns/op
Iteration   3: 988.799 ns/op
Iteration   4: 968.766 ns/op
Iteration   5: 848.755 ns/op

# Run progress: 20.17% complete, ETA 07:48:50
# Fork: 2 of 3
# Warmup Iteration   1: 1305.752 ns/op
# Warmup Iteration   2: 1245.492 ns/op
# Warmup Iteration   3: 841.067 ns/op
Iteration   1: 790.988 ns/op
Iteration   2: 774.317 ns/op
Iteration   3: 787.275 ns/op
Iteration   4: 848.503 ns/op
Iteration   5: 772.389 ns/op

# Run progress: 20.20% complete, ETA 07:48:43
# Fork: 3 of 3
# Warmup Iteration   1: 1224.916 ns/op
# Warmup Iteration   2: 1218.441 ns/op
# Warmup Iteration   3: 762.286 ns/op
Iteration   1: 869.582 ns/op
Iteration   2: 885.640 ns/op
Iteration   3: 862.851 ns/op
Iteration   4: 879.128 ns/op
Iteration   5: 842.277 ns/op


Result "kotlin_benchmarks.array.fill.Inline64int.New_to_Val_as_Val_fill":
  850.903 ±(99.9%) 83.001 ns/op [Average]
  (min, avg, max) = (704.709, 850.903, 988.799), stdev = 77.639
  CI (99.9%): [767.903, 933.904] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline64int.New_to_Val_as_Val_fill
# Parameters: (size = 1000000)

# Run progress: 20.22% complete, ETA 07:48:35
# Fork: 1 of 3
# Warmup Iteration   1: 15116636.194 ns/op
# Warmup Iteration   2: 10777465.426 ns/op
# Warmup Iteration   3: 11883600.988 ns/op
Iteration   1: 18754267.759 ns/op
Iteration   2: 11013011.326 ns/op
Iteration   3: 7121696.303 ns/op
Iteration   4: 10096252.853 ns/op
Iteration   5: 13424702.227 ns/op

# Run progress: 20.25% complete, ETA 07:48:28
# Fork: 2 of 3
# Warmup Iteration   1: 14135913.764 ns/op
# Warmup Iteration   2: 10239539.566 ns/op
# Warmup Iteration   3: 15050625.612 ns/op
Iteration   1: 18484157.582 ns/op
Iteration   2: 13624854.730 ns/op
Iteration   3: 10904420.699 ns/op
Iteration   4: 8651326.871 ns/op
Iteration   5: 12019207.333 ns/op

# Run progress: 20.27% complete, ETA 07:48:21
# Fork: 3 of 3
# Warmup Iteration   1: 16320308.468 ns/op
# Warmup Iteration   2: 10886429.656 ns/op
# Warmup Iteration   3: 15898804.047 ns/op
Iteration   1: 14875414.221 ns/op
Iteration   2: 12376659.975 ns/op
Iteration   3: 8834299.278 ns/op
Iteration   4: 8263932.252 ns/op
Iteration   5: 7966003.276 ns/op


Result "kotlin_benchmarks.array.fill.Inline64int.New_to_Val_as_Val_fill":
  11760680.446 ±(99.9%) 3843403.664 ns/op [Average]
  (min, avg, max) = (7121696.303, 11760680.446, 18754267.759), stdev = 3595122.172
  CI (99.9%): [7917276.781, 15604084.110] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline64int.Ref_to_Ref_as_Ref_arrayfillinst
# Parameters: (size = 100)

# Run progress: 20.29% complete, ETA 07:48:14
# Fork: 1 of 3
# Warmup Iteration   1: 313.905 ns/op
# Warmup Iteration   2: 315.970 ns/op
# Warmup Iteration   3: 320.660 ns/op
Iteration   1: 309.393 ns/op
Iteration   2: 311.849 ns/op
Iteration   3: 285.424 ns/op
Iteration   4: 292.473 ns/op
Iteration   5: 259.625 ns/op

# Run progress: 20.32% complete, ETA 07:48:05
# Fork: 2 of 3
# Warmup Iteration   1: 274.067 ns/op
# Warmup Iteration   2: 246.736 ns/op
# Warmup Iteration   3: 256.893 ns/op
Iteration   1: 295.313 ns/op
Iteration   2: 286.222 ns/op
Iteration   3: 247.188 ns/op
Iteration   4: 308.312 ns/op
Iteration   5: 288.312 ns/op

# Run progress: 20.34% complete, ETA 07:47:56
# Fork: 3 of 3
# Warmup Iteration   1: 239.099 ns/op
# Warmup Iteration   2: 243.802 ns/op
# Warmup Iteration   3: 292.118 ns/op
Iteration   1: 319.250 ns/op
Iteration   2: 283.756 ns/op
Iteration   3: 275.865 ns/op
Iteration   4: 317.609 ns/op
Iteration   5: 277.240 ns/op


Result "kotlin_benchmarks.array.fill.Inline64int.Ref_to_Ref_as_Ref_arrayfillinst":
  290.522 ±(99.9%) 22.191 ns/op [Average]
  (min, avg, max) = (247.188, 290.522, 319.250), stdev = 20.757
  CI (99.9%): [268.331, 312.713] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline64int.Ref_to_Ref_as_Ref_arrayfillinst
# Parameters: (size = 1000000)

# Run progress: 20.37% complete, ETA 07:47:48
# Fork: 1 of 3
# Warmup Iteration   1: 48593579.333 ns/op
# Warmup Iteration   2: 41026923.320 ns/op
# Warmup Iteration   3: 3766131.687 ns/op
Iteration   1: 5041840.000 ns/op
Iteration   2: 8309647.484 ns/op
Iteration   3: 21075940.104 ns/op
Iteration   4: 6484911.624 ns/op
Iteration   5: 13483808.769 ns/op

# Run progress: 20.39% complete, ETA 07:47:39
# Fork: 2 of 3
# Warmup Iteration   1: 56327173.611 ns/op
# Warmup Iteration   2: 39915056.077 ns/op
# Warmup Iteration   3: 31528690.125 ns/op
Iteration   1: 11565770.598 ns/op
Iteration   2: 3543955.986 ns/op
Iteration   3: 18718316.214 ns/op
Iteration   4: 53846504.368 ns/op
Iteration   5: 53959796.053 ns/op

# Run progress: 20.42% complete, ETA 07:47:31
# Fork: 3 of 3
# Warmup Iteration   1: 50991583.350 ns/op
# Warmup Iteration   2: 72409755.929 ns/op
# Warmup Iteration   3: 63227671.875 ns/op
Iteration   1: 62678960.938 ns/op
Iteration   2: 34998137.931 ns/op
Iteration   3: 39182879.808 ns/op
Iteration   4: 36531194.929 ns/op
Iteration   5: 36459155.172 ns/op


Result "kotlin_benchmarks.array.fill.Inline64int.Ref_to_Ref_as_Ref_arrayfillinst":
  27058721.332 ±(99.9%) 21074217.180 ns/op [Average]
  (min, avg, max) = (3543955.986, 27058721.332, 62678960.938), stdev = 19712835.827
  CI (99.9%): [5984504.152, 48132938.512] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline64int.Ref_to_Ref_as_Ref_arrayfillstat
# Parameters: (size = 100)

# Run progress: 20.44% complete, ETA 07:47:22
# Fork: 1 of 3
# Warmup Iteration   1: 155.660 ns/op
# Warmup Iteration   2: 287.260 ns/op
# Warmup Iteration   3: 582.213 ns/op
Iteration   1: 446.926 ns/op
Iteration   2: 417.301 ns/op
Iteration   3: 323.737 ns/op
Iteration   4: 310.794 ns/op
Iteration   5: 289.552 ns/op

# Run progress: 20.47% complete, ETA 07:47:12
# Fork: 2 of 3
# Warmup Iteration   1: 261.997 ns/op
# Warmup Iteration   2: 293.799 ns/op
# Warmup Iteration   3: 300.827 ns/op
Iteration   1: 228.764 ns/op
Iteration   2: 217.593 ns/op
Iteration   3: 233.119 ns/op
Iteration   4: 205.977 ns/op
Iteration   5: 210.701 ns/op

# Run progress: 20.49% complete, ETA 07:47:04
# Fork: 3 of 3
# Warmup Iteration   1: 303.648 ns/op
# Warmup Iteration   2: 329.725 ns/op
# Warmup Iteration   3: 355.166 ns/op
Iteration   1: 318.164 ns/op
Iteration   2: 307.425 ns/op
Iteration   3: 230.221 ns/op
Iteration   4: 219.717 ns/op
Iteration   5: 286.250 ns/op


Result "kotlin_benchmarks.array.fill.Inline64int.Ref_to_Ref_as_Ref_arrayfillstat":
  283.083 ±(99.9%) 79.224 ns/op [Average]
  (min, avg, max) = (205.977, 283.083, 446.926), stdev = 74.106
  CI (99.9%): [203.858, 362.307] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline64int.Ref_to_Ref_as_Ref_arrayfillstat
# Parameters: (size = 1000000)

# Run progress: 20.51% complete, ETA 07:46:55
# Fork: 1 of 3
# Warmup Iteration   1: 5008415.493 ns/op
# Warmup Iteration   2: 8118273.855 ns/op
# Warmup Iteration   3: 32974568.548 ns/op
Iteration   1: 7009384.549 ns/op
Iteration   2: 9533345.123 ns/op
Iteration   3: 68131179.688 ns/op
Iteration   4: 43905607.625 ns/op
Iteration   5: 39038846.154 ns/op

# Run progress: 20.54% complete, ETA 07:46:49
# Fork: 2 of 3
# Warmup Iteration   1: 13147552.481 ns/op
# Warmup Iteration   2: 10008738.861 ns/op
# Warmup Iteration   3: 39003111.111 ns/op
Iteration   1: 63146132.813 ns/op
Iteration   2: 48305717.818 ns/op
Iteration   3: 50742268.750 ns/op
Iteration   4: 45020668.478 ns/op
Iteration   5: 43583006.958 ns/op

# Run progress: 20.56% complete, ETA 07:46:41
# Fork: 3 of 3
# Warmup Iteration   1: 57068138.889 ns/op
# Warmup Iteration   2: 44741882.261 ns/op
# Warmup Iteration   3: 41696481.680 ns/op
Iteration   1: 40787258.320 ns/op
Iteration   2: 34926264.379 ns/op
Iteration   3: 32477139.313 ns/op
Iteration   4: 10696047.426 ns/op
Iteration   5: 4208088.542 ns/op


Result "kotlin_benchmarks.array.fill.Inline64int.Ref_to_Ref_as_Ref_arrayfillstat":
  36100730.396 ±(99.9%) 21337226.480 ns/op [Average]
  (min, avg, max) = (4208088.542, 36100730.396, 68131179.688), stdev = 19958854.890
  CI (99.9%): [14763503.915, 57437956.876] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline64int.Ref_to_Ref_as_Ref_fillinst
# Parameters: (size = 100)

# Run progress: 20.59% complete, ETA 07:46:32
# Fork: 1 of 3
# Warmup Iteration   1: 373.085 ns/op
# Warmup Iteration   2: 349.377 ns/op
# Warmup Iteration   3: 345.966 ns/op
Iteration   1: 321.943 ns/op
Iteration   2: 315.839 ns/op
Iteration   3: 348.493 ns/op
Iteration   4: 323.297 ns/op
Iteration   5: 254.140 ns/op

# Run progress: 20.61% complete, ETA 07:46:24
# Fork: 2 of 3
# Warmup Iteration   1: 302.129 ns/op
# Warmup Iteration   2: 357.751 ns/op
# Warmup Iteration   3: 269.665 ns/op
Iteration   1: 210.195 ns/op
Iteration   2: 196.957 ns/op
Iteration   3: 229.029 ns/op
Iteration   4: 325.348 ns/op
Iteration   5: 315.871 ns/op

# Run progress: 20.64% complete, ETA 07:46:15
# Fork: 3 of 3
# Warmup Iteration   1: 367.783 ns/op
# Warmup Iteration   2: 358.524 ns/op
# Warmup Iteration   3: 362.432 ns/op
Iteration   1: 336.088 ns/op
Iteration   2: 299.355 ns/op
Iteration   3: 324.933 ns/op
Iteration   4: 314.334 ns/op
Iteration   5: 308.722 ns/op


Result "kotlin_benchmarks.array.fill.Inline64int.Ref_to_Ref_as_Ref_fillinst":
  294.970 ±(99.9%) 51.247 ns/op [Average]
  (min, avg, max) = (196.957, 294.970, 348.493), stdev = 47.936
  CI (99.9%): [243.723, 346.216] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline64int.Ref_to_Ref_as_Ref_fillinst
# Parameters: (size = 1000000)

# Run progress: 20.66% complete, ETA 07:46:07
# Fork: 1 of 3
# Warmup Iteration   1: 8732957.259 ns/op
# Warmup Iteration   2: 10392328.843 ns/op
# Warmup Iteration   3: 65180979.188 ns/op
Iteration   1: 39326802.885 ns/op
Iteration   2: 37740712.963 ns/op
Iteration   3: 48387793.619 ns/op
Iteration   4: 8306226.779 ns/op
Iteration   5: 17534965.407 ns/op

# Run progress: 20.69% complete, ETA 07:45:59
# Fork: 2 of 3
# Warmup Iteration   1: 50670177.100 ns/op
# Warmup Iteration   2: 46546948.864 ns/op
# Warmup Iteration   3: 9470908.802 ns/op
Iteration   1: 6405009.571 ns/op
Iteration   2: 27483779.297 ns/op
Iteration   3: 48089055.524 ns/op
Iteration   4: 32187627.594 ns/op
Iteration   5: 73174925.643 ns/op

# Run progress: 20.71% complete, ETA 07:45:52
# Fork: 3 of 3
# Warmup Iteration   1: 47539100.409 ns/op
# Warmup Iteration   2: 37417635.815 ns/op
# Warmup Iteration   3: 34099665.267 ns/op
Iteration   1: 32864938.194 ns/op
Iteration   2: 8476824.580 ns/op
Iteration   3: 4113994.267 ns/op
Iteration   4: 20256277.250 ns/op
Iteration   5: 79933701.923 ns/op


Result "kotlin_benchmarks.array.fill.Inline64int.Ref_to_Ref_as_Ref_fillinst":
  32285509.033 ±(99.9%) 24779627.834 ns/op [Average]
  (min, avg, max) = (4113994.267, 32285509.033, 79933701.923), stdev = 23178879.252
  CI (99.9%): [7505881.199, 57065136.867] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline64int.Ref_to_Ref_as_Ref_fillstat
# Parameters: (size = 100)

# Run progress: 20.74% complete, ETA 07:45:43
# Fork: 1 of 3
# Warmup Iteration   1: 186.507 ns/op
# Warmup Iteration   2: 200.950 ns/op
# Warmup Iteration   3: 220.633 ns/op
Iteration   1: 193.139 ns/op
Iteration   2: 191.680 ns/op
Iteration   3: 197.922 ns/op
Iteration   4: 226.165 ns/op
Iteration   5: 277.830 ns/op

# Run progress: 20.76% complete, ETA 07:45:34
# Fork: 2 of 3
# Warmup Iteration   1: 278.231 ns/op
# Warmup Iteration   2: 280.519 ns/op
# Warmup Iteration   3: 282.613 ns/op
Iteration   1: 306.099 ns/op
Iteration   2: 297.187 ns/op
Iteration   3: 357.311 ns/op
Iteration   4: 407.871 ns/op
Iteration   5: 336.574 ns/op

# Run progress: 20.78% complete, ETA 07:45:25
# Fork: 3 of 3
# Warmup Iteration   1: 266.411 ns/op
# Warmup Iteration   2: 294.538 ns/op
# Warmup Iteration   3: 317.053 ns/op
Iteration   1: 297.704 ns/op
Iteration   2: 222.360 ns/op
Iteration   3: 220.109 ns/op
Iteration   4: 241.401 ns/op
Iteration   5: 202.164 ns/op


Result "kotlin_benchmarks.array.fill.Inline64int.Ref_to_Ref_as_Ref_fillstat":
  265.035 ±(99.9%) 71.659 ns/op [Average]
  (min, avg, max) = (191.680, 265.035, 407.871), stdev = 67.030
  CI (99.9%): [193.376, 336.693] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline64int.Ref_to_Ref_as_Ref_fillstat
# Parameters: (size = 1000000)

# Run progress: 20.81% complete, ETA 07:45:16
# Fork: 1 of 3
# Warmup Iteration   1: 38956475.962 ns/op
# Warmup Iteration   2: 32014143.250 ns/op
# Warmup Iteration   3: 29690213.086 ns/op
Iteration   1: 10776275.266 ns/op
Iteration   2: 3684581.964 ns/op
Iteration   3: 25182143.293 ns/op
Iteration   4: 53812041.684 ns/op
Iteration   5: 33372764.774 ns/op

# Run progress: 20.83% complete, ETA 07:45:08
# Fork: 2 of 3
# Warmup Iteration   1: 5632996.972 ns/op
# Warmup Iteration   2: 6114514.222 ns/op
# Warmup Iteration   3: 23573291.674 ns/op
Iteration   1: 39126190.692 ns/op
Iteration   2: 53710952.100 ns/op
Iteration   3: 57492384.278 ns/op
Iteration   4: 51616014.600 ns/op
Iteration   5: 39302758.038 ns/op

# Run progress: 20.86% complete, ETA 07:45:00
# Fork: 3 of 3
# Warmup Iteration   1: 30888338.364 ns/op
# Warmup Iteration   2: 20396033.340 ns/op
# Warmup Iteration   3: 5142290.388 ns/op
Iteration   1: 3829235.687 ns/op
Iteration   2: 6473401.373 ns/op
Iteration   3: 63128644.588 ns/op
Iteration   4: 45439289.870 ns/op
Iteration   5: 43315595.500 ns/op


Result "kotlin_benchmarks.array.fill.Inline64int.Ref_to_Ref_as_Ref_fillstat":
  35350818.247 ±(99.9%) 22022388.867 ns/op [Average]
  (min, avg, max) = (3684581.964, 35350818.247, 63128644.588), stdev = 20599756.212
  CI (99.9%): [13328429.380, 57373207.114] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline64int.Ref_to_Val_as_Val_arrayfillinst
# Parameters: (size = 100)

# Run progress: 20.88% complete, ETA 07:44:51
# Fork: 1 of 3
# Warmup Iteration   1: 290.597 ns/op
# Warmup Iteration   2: 216.145 ns/op
# Warmup Iteration   3: 269.069 ns/op
Iteration   1: 321.960 ns/op
Iteration   2: 281.870 ns/op
Iteration   3: 272.134 ns/op
Iteration   4: 301.247 ns/op
Iteration   5: 231.984 ns/op

# Run progress: 20.91% complete, ETA 07:44:42
# Fork: 2 of 3
# Warmup Iteration   1: 275.278 ns/op
# Warmup Iteration   2: 306.198 ns/op
# Warmup Iteration   3: 289.473 ns/op
Iteration   1: 290.916 ns/op
Iteration   2: 313.244 ns/op
Iteration   3: 233.202 ns/op
Iteration   4: 233.825 ns/op
Iteration   5: 260.170 ns/op

# Run progress: 20.93% complete, ETA 07:44:33
# Fork: 3 of 3
# Warmup Iteration   1: 320.450 ns/op
# Warmup Iteration   2: 322.759 ns/op
# Warmup Iteration   3: 267.269 ns/op
Iteration   1: 192.497 ns/op
Iteration   2: 172.717 ns/op
Iteration   3: 172.743 ns/op
Iteration   4: 237.877 ns/op
Iteration   5: 344.849 ns/op


Result "kotlin_benchmarks.array.fill.Inline64int.Ref_to_Val_as_Val_arrayfillinst":
  257.416 ±(99.9%) 56.801 ns/op [Average]
  (min, avg, max) = (172.717, 257.416, 344.849), stdev = 53.132
  CI (99.9%): [200.614, 314.217] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline64int.Ref_to_Val_as_Val_arrayfillinst
# Parameters: (size = 1000000)

# Run progress: 20.96% complete, ETA 07:44:24
# Fork: 1 of 3
# Warmup Iteration   1: 4250177.743 ns/op
# Warmup Iteration   2: 11989218.629 ns/op
# Warmup Iteration   3: 7636040.710 ns/op
Iteration   1: 6170828.341 ns/op
Iteration   2: 5177571.005 ns/op
Iteration   3: 15244278.986 ns/op
Iteration   4: 69876558.333 ns/op
Iteration   5: 51449256.250 ns/op

# Run progress: 20.98% complete, ETA 07:44:18
# Fork: 2 of 3
# Warmup Iteration   1: 53210956.105 ns/op
# Warmup Iteration   2: 56947057.889 ns/op
# Warmup Iteration   3: 59720032.444 ns/op
Iteration   1: 70761688.867 ns/op
Iteration   2: 49974418.667 ns/op
Iteration   3: 39559062.500 ns/op
Iteration   4: 40103716.680 ns/op
Iteration   5: 7387212.316 ns/op

# Run progress: 21.00% complete, ETA 07:44:10
# Fork: 3 of 3
# Warmup Iteration   1: 3165271.944 ns/op
# Warmup Iteration   2: 6762708.069 ns/op
# Warmup Iteration   3: 74359797.643 ns/op
Iteration   1: 37644625.000 ns/op
Iteration   2: 5269699.219 ns/op
Iteration   3: 3055045.848 ns/op
Iteration   4: 4445556.485 ns/op
Iteration   5: 6284903.205 ns/op


Result "kotlin_benchmarks.array.fill.Inline64int.Ref_to_Val_as_Val_arrayfillinst":
  27493628.113 ±(99.9%) 26702805.298 ns/op [Average]
  (min, avg, max) = (3055045.848, 27493628.113, 70761688.867), stdev = 24977820.646
  CI (99.9%): [790822.815, 54196433.412] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline64int.Ref_to_Val_as_Val_arrayfillstat
# Parameters: (size = 100)

# Run progress: 21.03% complete, ETA 07:44:04
# Fork: 1 of 3
# Warmup Iteration   1: 269.558 ns/op
# Warmup Iteration   2: 322.799 ns/op
# Warmup Iteration   3: 244.223 ns/op
Iteration   1: 228.782 ns/op
Iteration   2: 301.905 ns/op
Iteration   3: 278.146 ns/op
Iteration   4: 350.733 ns/op
Iteration   5: 324.335 ns/op

# Run progress: 21.05% complete, ETA 07:43:56
# Fork: 2 of 3
# Warmup Iteration   1: 275.020 ns/op
# Warmup Iteration   2: 249.330 ns/op
# Warmup Iteration   3: 257.934 ns/op
Iteration   1: 308.367 ns/op
Iteration   2: 286.190 ns/op
Iteration   3: 263.944 ns/op
Iteration   4: 303.820 ns/op
Iteration   5: 300.817 ns/op

# Run progress: 21.08% complete, ETA 07:43:48
# Fork: 3 of 3
# Warmup Iteration   1: 278.590 ns/op
# Warmup Iteration   2: 363.240 ns/op
# Warmup Iteration   3: 310.732 ns/op
Iteration   1: 376.391 ns/op
Iteration   2: 324.744 ns/op
Iteration   3: 328.880 ns/op
Iteration   4: 314.985 ns/op
Iteration   5: 317.058 ns/op


Result "kotlin_benchmarks.array.fill.Inline64int.Ref_to_Val_as_Val_arrayfillstat":
  307.273 ±(99.9%) 37.579 ns/op [Average]
  (min, avg, max) = (228.782, 307.273, 376.391), stdev = 35.152
  CI (99.9%): [269.694, 344.853] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline64int.Ref_to_Val_as_Val_arrayfillstat
# Parameters: (size = 1000000)

# Run progress: 21.10% complete, ETA 07:43:39
# Fork: 1 of 3
# Warmup Iteration   1: 74350752.929 ns/op
# Warmup Iteration   2: 50392262.500 ns/op
# Warmup Iteration   3: 51953391.650 ns/op
Iteration   1: 7908114.173 ns/op
Iteration   2: 2772802.282 ns/op
Iteration   3: 2768015.710 ns/op
Iteration   4: 6228262.673 ns/op
Iteration   5: 10230993.687 ns/op

# Run progress: 21.13% complete, ETA 07:43:31
# Fork: 2 of 3
# Warmup Iteration   1: 4539881.819 ns/op
# Warmup Iteration   2: 16573500.641 ns/op
# Warmup Iteration   3: 51411512.500 ns/op
Iteration   1: 29785506.118 ns/op
Iteration   2: 4614848.553 ns/op
Iteration   3: 10758698.980 ns/op
Iteration   4: 72039497.200 ns/op
Iteration   5: 42857166.667 ns/op

# Run progress: 21.15% complete, ETA 07:43:25
# Fork: 3 of 3
# Warmup Iteration   1: 48788600.364 ns/op
# Warmup Iteration   2: 57711976.833 ns/op
# Warmup Iteration   3: 61202113.389 ns/op
Iteration   1: 69142613.933 ns/op
Iteration   2: 46425172.318 ns/op
Iteration   3: 41404905.000 ns/op
Iteration   4: 46966965.909 ns/op
Iteration   5: 44363316.000 ns/op


Result "kotlin_benchmarks.array.fill.Inline64int.Ref_to_Val_as_Val_arrayfillstat":
  29217791.947 ±(99.9%) 26016349.922 ns/op [Average]
  (min, avg, max) = (2768015.710, 29217791.947, 72039497.200), stdev = 24335709.861
  CI (99.9%): [3201442.025, 55234141.869] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline64int.Ref_to_Val_as_Val_fillinst
# Parameters: (size = 100)

# Run progress: 21.18% complete, ETA 07:43:17
# Fork: 1 of 3
# Warmup Iteration   1: 197.912 ns/op
# Warmup Iteration   2: 329.698 ns/op
# Warmup Iteration   3: 419.087 ns/op
Iteration   1: 491.532 ns/op
Iteration   2: 371.472 ns/op
Iteration   3: 334.529 ns/op
Iteration   4: 311.571 ns/op
Iteration   5: 302.755 ns/op

# Run progress: 21.20% complete, ETA 07:43:07
# Fork: 2 of 3
# Warmup Iteration   1: 317.782 ns/op
# Warmup Iteration   2: 305.305 ns/op
# Warmup Iteration   3: 303.896 ns/op
Iteration   1: 320.564 ns/op
Iteration   2: 361.321 ns/op
Iteration   3: 271.764 ns/op
Iteration   4: 277.496 ns/op
Iteration   5: 325.430 ns/op

# Run progress: 21.23% complete, ETA 07:42:59
# Fork: 3 of 3
# Warmup Iteration   1: 345.046 ns/op
# Warmup Iteration   2: 393.315 ns/op
# Warmup Iteration   3: 359.949 ns/op
Iteration   1: 354.756 ns/op
Iteration   2: 361.298 ns/op
Iteration   3: 304.152 ns/op
Iteration   4: 255.959 ns/op
Iteration   5: 318.530 ns/op


Result "kotlin_benchmarks.array.fill.Inline64int.Ref_to_Val_as_Val_fillinst":
  330.875 ±(99.9%) 59.944 ns/op [Average]
  (min, avg, max) = (255.959, 330.875, 491.532), stdev = 56.072
  CI (99.9%): [270.931, 390.819] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline64int.Ref_to_Val_as_Val_fillinst
# Parameters: (size = 1000000)

# Run progress: 21.25% complete, ETA 07:42:51
# Fork: 1 of 3
# Warmup Iteration   1: 5268055.552 ns/op
# Warmup Iteration   2: 7122273.479 ns/op
# Warmup Iteration   3: 10514307.080 ns/op
Iteration   1: 13136618.506 ns/op
Iteration   2: 7529486.313 ns/op
Iteration   3: 10056067.757 ns/op
Iteration   4: 57074960.667 ns/op
Iteration   5: 41933828.320 ns/op

# Run progress: 21.27% complete, ETA 07:42:45
# Fork: 2 of 3
# Warmup Iteration   1: 20405724.667 ns/op
# Warmup Iteration   2: 6379510.748 ns/op
# Warmup Iteration   3: 8950362.088 ns/op
Iteration   1: 44259336.792 ns/op
Iteration   2: 47813509.455 ns/op
Iteration   3: 35608929.621 ns/op
Iteration   4: 41234933.320 ns/op
Iteration   5: 29784900.735 ns/op

# Run progress: 21.30% complete, ETA 07:42:36
# Fork: 3 of 3
# Warmup Iteration   1: 3900843.467 ns/op
# Warmup Iteration   2: 4360162.177 ns/op
# Warmup Iteration   3: 8755785.922 ns/op
Iteration   1: 10598814.240 ns/op
Iteration   2: 7634148.459 ns/op
Iteration   3: 8899318.119 ns/op
Iteration   4: 43397649.292 ns/op
Iteration   5: 48497484.143 ns/op


Result "kotlin_benchmarks.array.fill.Inline64int.Ref_to_Val_as_Val_fillinst":
  29830665.716 ±(99.9%) 19344655.216 ns/op [Average]
  (min, avg, max) = (7529486.313, 29830665.716, 57074960.667), stdev = 18095002.492
  CI (99.9%): [10486010.500, 49175320.931] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline64int.Ref_to_Val_as_Val_fillstat
# Parameters: (size = 100)

# Run progress: 21.32% complete, ETA 07:42:29
# Fork: 1 of 3
# Warmup Iteration   1: 304.095 ns/op
# Warmup Iteration   2: 336.387 ns/op
# Warmup Iteration   3: 323.255 ns/op
Iteration   1: 257.926 ns/op
Iteration   2: 230.547 ns/op
Iteration   3: 254.998 ns/op
Iteration   4: 281.342 ns/op
Iteration   5: 321.148 ns/op

# Run progress: 21.35% complete, ETA 07:42:21
# Fork: 2 of 3
# Warmup Iteration   1: 228.495 ns/op
# Warmup Iteration   2: 192.355 ns/op
# Warmup Iteration   3: 209.746 ns/op
Iteration   1: 219.806 ns/op
Iteration   2: 228.112 ns/op
Iteration   3: 294.775 ns/op
Iteration   4: 314.795 ns/op
Iteration   5: 330.322 ns/op

# Run progress: 21.37% complete, ETA 07:42:12
# Fork: 3 of 3
# Warmup Iteration   1: 289.627 ns/op
# Warmup Iteration   2: 351.894 ns/op
# Warmup Iteration   3: 299.185 ns/op
Iteration   1: 287.368 ns/op
Iteration   2: 290.982 ns/op
Iteration   3: 294.980 ns/op
Iteration   4: 289.988 ns/op
Iteration   5: 292.667 ns/op


Result "kotlin_benchmarks.array.fill.Inline64int.Ref_to_Val_as_Val_fillstat":
  279.317 ±(99.9%) 36.346 ns/op [Average]
  (min, avg, max) = (219.806, 279.317, 330.322), stdev = 33.998
  CI (99.9%): [242.971, 315.663] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline64int.Ref_to_Val_as_Val_fillstat
# Parameters: (size = 1000000)

# Run progress: 21.40% complete, ETA 07:42:04
# Fork: 1 of 3
# Warmup Iteration   1: 54136500.000 ns/op
# Warmup Iteration   2: 55938078.947 ns/op
# Warmup Iteration   3: 44124365.957 ns/op
Iteration   1: 63584671.588 ns/op
Iteration   2: 38350520.074 ns/op
Iteration   3: 40691621.680 ns/op
Iteration   4: 20621561.224 ns/op
Iteration   5: 4002274.964 ns/op

# Run progress: 21.42% complete, ETA 07:41:57
# Fork: 2 of 3
# Warmup Iteration   1: 16796740.234 ns/op
# Warmup Iteration   2: 67200565.125 ns/op
# Warmup Iteration   3: 44650565.958 ns/op
Iteration   1: 44683076.087 ns/op
Iteration   2: 4008172.290 ns/op
Iteration   3: 4169032.198 ns/op
Iteration   4: 6622677.362 ns/op
Iteration   5: 18132545.375 ns/op

# Run progress: 21.45% complete, ETA 07:41:50
# Fork: 3 of 3
# Warmup Iteration   1: 9638845.629 ns/op
# Warmup Iteration   2: 67932872.267 ns/op
# Warmup Iteration   3: 20075361.118 ns/op
Iteration   1: 32596274.194 ns/op
Iteration   2: 35544350.586 ns/op
Iteration   3: 6686234.272 ns/op
Iteration   4: 3386289.704 ns/op
Iteration   5: 5228386.876 ns/op


Result "kotlin_benchmarks.array.fill.Inline64int.Ref_to_Val_as_Val_fillstat":
  21887179.232 ±(99.9%) 20677053.609 ns/op [Average]
  (min, avg, max) = (3386289.704, 21887179.232, 63584671.588), stdev = 19341328.776
  CI (99.9%): [1210125.623, 42564232.840] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline64int.Val_to_Ref_as_Ref_arrayfillinst
# Parameters: (size = 100)

# Run progress: 21.47% complete, ETA 07:41:43
# Fork: 1 of 3
# Warmup Iteration   1: 311.415 ns/op
# Warmup Iteration   2: 289.880 ns/op
# Warmup Iteration   3: 275.365 ns/op
Iteration   1: 320.633 ns/op
Iteration   2: 302.451 ns/op
Iteration   3: 275.191 ns/op
Iteration   4: 257.520 ns/op
Iteration   5: 250.126 ns/op

# Run progress: 21.50% complete, ETA 07:41:34
# Fork: 2 of 3
# Warmup Iteration   1: 279.487 ns/op
# Warmup Iteration   2: 278.609 ns/op
# Warmup Iteration   3: 322.183 ns/op
Iteration   1: 317.448 ns/op
Iteration   2: 268.195 ns/op
Iteration   3: 336.664 ns/op
Iteration   4: 323.133 ns/op
Iteration   5: 319.717 ns/op

# Run progress: 21.52% complete, ETA 07:41:26
# Fork: 3 of 3
# Warmup Iteration   1: 353.906 ns/op
# Warmup Iteration   2: 317.990 ns/op
# Warmup Iteration   3: 323.538 ns/op
Iteration   1: 318.442 ns/op
Iteration   2: 411.902 ns/op
Iteration   3: 275.376 ns/op
Iteration   4: 266.209 ns/op
Iteration   5: 270.306 ns/op


Result "kotlin_benchmarks.array.fill.Inline64int.Val_to_Ref_as_Ref_arrayfillinst":
  300.887 ±(99.9%) 44.634 ns/op [Average]
  (min, avg, max) = (250.126, 300.887, 411.902), stdev = 41.751
  CI (99.9%): [256.254, 345.521] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline64int.Val_to_Ref_as_Ref_arrayfillinst
# Parameters: (size = 1000000)

# Run progress: 21.54% complete, ETA 07:41:17
# Fork: 1 of 3
# Warmup Iteration   1: 7573359.023 ns/op
# Warmup Iteration   2: 5061873.547 ns/op
# Warmup Iteration   3: 3773035.581 ns/op
Iteration   1: 15413886.194 ns/op
Iteration   2: 41477420.000 ns/op
Iteration   3: 59006316.176 ns/op
Iteration   4: 54250910.105 ns/op
Iteration   5: 61887794.118 ns/op

# Run progress: 21.57% complete, ETA 07:41:10
# Fork: 2 of 3
# Warmup Iteration   1: 48102569.476 ns/op
# Warmup Iteration   2: 58552296.053 ns/op
# Warmup Iteration   3: 55789995.632 ns/op
Iteration   1: 57488733.778 ns/op
Iteration   2: 40326816.680 ns/op
Iteration   3: 38859513.889 ns/op
Iteration   4: 36758201.172 ns/op
Iteration   5: 35954739.966 ns/op

# Run progress: 21.59% complete, ETA 07:41:02
# Fork: 3 of 3
# Warmup Iteration   1: 9250454.890 ns/op
# Warmup Iteration   2: 4479920.187 ns/op
# Warmup Iteration   3: 4090086.538 ns/op
Iteration   1: 4157781.919 ns/op
Iteration   2: 29650503.676 ns/op
Iteration   3: 19508567.308 ns/op
Iteration   4: 6403424.842 ns/op
Iteration   5: 4202059.280 ns/op


Result "kotlin_benchmarks.array.fill.Inline64int.Val_to_Ref_as_Ref_arrayfillinst":
  33689777.940 ±(99.9%) 21398034.398 ns/op [Average]
  (min, avg, max) = (4157781.919, 33689777.940, 61887794.118), stdev = 20015734.654
  CI (99.9%): [12291743.542, 55087812.338] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline64int.Val_to_Ref_as_Ref_arrayfillstat
# Parameters: (size = 100)

# Run progress: 21.62% complete, ETA 07:40:53
# Fork: 1 of 3
# Warmup Iteration   1: 304.404 ns/op
# Warmup Iteration   2: 256.371 ns/op
# Warmup Iteration   3: 234.141 ns/op
Iteration   1: 266.616 ns/op
Iteration   2: 285.170 ns/op
Iteration   3: 210.469 ns/op
Iteration   4: 183.390 ns/op
Iteration   5: 213.916 ns/op

# Run progress: 21.64% complete, ETA 07:40:44
# Fork: 2 of 3
# Warmup Iteration   1: 302.483 ns/op
# Warmup Iteration   2: 301.798 ns/op
# Warmup Iteration   3: 321.877 ns/op
Iteration   1: 289.445 ns/op
Iteration   2: 224.248 ns/op
Iteration   3: 302.851 ns/op
Iteration   4: 289.257 ns/op
Iteration   5: 292.900 ns/op

# Run progress: 21.67% complete, ETA 07:40:36
# Fork: 3 of 3
# Warmup Iteration   1: 271.718 ns/op
# Warmup Iteration   2: 281.603 ns/op
# Warmup Iteration   3: 296.077 ns/op
Iteration   1: 328.374 ns/op
Iteration   2: 232.478 ns/op
Iteration   3: 176.727 ns/op
Iteration   4: 200.200 ns/op
Iteration   5: 262.180 ns/op


Result "kotlin_benchmarks.array.fill.Inline64int.Val_to_Ref_as_Ref_arrayfillstat":
  250.548 ±(99.9%) 50.831 ns/op [Average]
  (min, avg, max) = (176.727, 250.548, 328.374), stdev = 47.548
  CI (99.9%): [199.717, 301.379] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline64int.Val_to_Ref_as_Ref_arrayfillstat
# Parameters: (size = 1000000)

# Run progress: 21.69% complete, ETA 07:40:27
# Fork: 1 of 3
# Warmup Iteration   1: 3855665.875 ns/op
# Warmup Iteration   2: 10226667.500 ns/op
# Warmup Iteration   3: 70549083.333 ns/op
Iteration   1: 48947785.714 ns/op
Iteration   2: 46060585.227 ns/op
Iteration   3: 25983525.641 ns/op
Iteration   4: 2719515.921 ns/op
Iteration   5: 5335748.455 ns/op

# Run progress: 21.72% complete, ETA 07:40:20
# Fork: 2 of 3
# Warmup Iteration   1: 12812189.342 ns/op
# Warmup Iteration   2: 8515601.695 ns/op
# Warmup Iteration   3: 10350409.786 ns/op
Iteration   1: 57837143.500 ns/op
Iteration   2: 39037421.462 ns/op
Iteration   3: 35826662.179 ns/op
Iteration   4: 36437488.071 ns/op
Iteration   5: 5432964.189 ns/op

# Run progress: 21.74% complete, ETA 07:40:12
# Fork: 3 of 3
# Warmup Iteration   1: 19925334.135 ns/op
# Warmup Iteration   2: 50763992.095 ns/op
# Warmup Iteration   3: 43484366.333 ns/op
Iteration   1: 42536305.583 ns/op
Iteration   2: 52392627.100 ns/op
Iteration   3: 55768784.722 ns/op
Iteration   4: 44532856.870 ns/op
Iteration   5: 46212094.682 ns/op


Result "kotlin_benchmarks.array.fill.Inline64int.Val_to_Ref_as_Ref_arrayfillstat":
  36337433.954 ±(99.9%) 19619861.799 ns/op [Average]
  (min, avg, max) = (2719515.921, 36337433.954, 57837143.500), stdev = 18352430.901
  CI (99.9%): [16717572.156, 55957295.753] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline64int.Val_to_Ref_as_Ref_fillinst
# Parameters: (size = 100)

# Run progress: 21.76% complete, ETA 07:40:05
# Fork: 1 of 3
# Warmup Iteration   1: 331.473 ns/op
# Warmup Iteration   2: 333.804 ns/op
# Warmup Iteration   3: 323.591 ns/op
Iteration   1: 364.896 ns/op
Iteration   2: 321.264 ns/op
Iteration   3: 327.005 ns/op
Iteration   4: 327.775 ns/op
Iteration   5: 347.105 ns/op

# Run progress: 21.79% complete, ETA 07:39:57
# Fork: 2 of 3
# Warmup Iteration   1: 369.015 ns/op
# Warmup Iteration   2: 358.766 ns/op
# Warmup Iteration   3: 347.808 ns/op
Iteration   1: 360.863 ns/op
Iteration   2: 361.300 ns/op
Iteration   3: 363.834 ns/op
Iteration   4: 290.744 ns/op
Iteration   5: 225.332 ns/op

# Run progress: 21.81% complete, ETA 07:39:48
# Fork: 3 of 3
# Warmup Iteration   1: 216.016 ns/op
# Warmup Iteration   2: 216.452 ns/op
# Warmup Iteration   3: 255.431 ns/op
Iteration   1: 337.787 ns/op
Iteration   2: 336.646 ns/op
Iteration   3: 392.489 ns/op
Iteration   4: 381.950 ns/op
Iteration   5: 366.847 ns/op


Result "kotlin_benchmarks.array.fill.Inline64int.Val_to_Ref_as_Ref_fillinst":
  340.389 ±(99.9%) 43.913 ns/op [Average]
  (min, avg, max) = (225.332, 340.389, 392.489), stdev = 41.076
  CI (99.9%): [296.477, 384.302] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline64int.Val_to_Ref_as_Ref_fillinst
# Parameters: (size = 1000000)

# Run progress: 21.84% complete, ETA 07:39:39
# Fork: 1 of 3
# Warmup Iteration   1: 14249491.789 ns/op
# Warmup Iteration   2: 7025947.917 ns/op
# Warmup Iteration   3: 9278286.142 ns/op
Iteration   1: 29485622.629 ns/op
Iteration   2: 8951565.473 ns/op
Iteration   3: 16656835.262 ns/op
Iteration   4: 49984452.381 ns/op
Iteration   5: 44607951.087 ns/op

# Run progress: 21.86% complete, ETA 07:39:31
# Fork: 2 of 3
# Warmup Iteration   1: 56342859.632 ns/op
# Warmup Iteration   2: 50983981.250 ns/op
# Warmup Iteration   3: 40693315.000 ns/op
Iteration   1: 40846376.680 ns/op
Iteration   2: 18078726.196 ns/op
Iteration   3: 5721369.318 ns/op
Iteration   4: 9446253.782 ns/op
Iteration   5: 56577991.263 ns/op

# Run progress: 21.89% complete, ETA 07:39:23
# Fork: 3 of 3
# Warmup Iteration   1: 45577246.348 ns/op
# Warmup Iteration   2: 34777172.414 ns/op
# Warmup Iteration   3: 4891737.923 ns/op
Iteration   1: 5620182.411 ns/op
Iteration   2: 15367177.817 ns/op
Iteration   3: 20595772.102 ns/op
Iteration   4: 7506316.052 ns/op
Iteration   5: 6885445.833 ns/op


Result "kotlin_benchmarks.array.fill.Inline64int.Val_to_Ref_as_Ref_fillinst":
  22422135.886 ±(99.9%) 18709637.083 ns/op [Average]
  (min, avg, max) = (5620182.411, 22422135.886, 56577991.263), stdev = 17501006.137
  CI (99.9%): [3712498.803, 41131772.969] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline64int.Val_to_Ref_as_Ref_fillstat
# Parameters: (size = 100)

# Run progress: 21.91% complete, ETA 07:39:15
# Fork: 1 of 3
# Warmup Iteration   1: 241.785 ns/op
# Warmup Iteration   2: 223.029 ns/op
# Warmup Iteration   3: 243.622 ns/op
Iteration   1: 302.661 ns/op
Iteration   2: 326.391 ns/op
Iteration   3: 315.388 ns/op
Iteration   4: 314.613 ns/op
Iteration   5: 242.492 ns/op

# Run progress: 21.94% complete, ETA 07:39:07
# Fork: 2 of 3
# Warmup Iteration   1: 248.070 ns/op
# Warmup Iteration   2: 258.800 ns/op
# Warmup Iteration   3: 303.312 ns/op
Iteration   1: 291.962 ns/op
Iteration   2: 301.384 ns/op
Iteration   3: 302.318 ns/op
Iteration   4: 292.008 ns/op
Iteration   5: 296.624 ns/op

# Run progress: 21.96% complete, ETA 07:38:58
# Fork: 3 of 3
# Warmup Iteration   1: 286.717 ns/op
# Warmup Iteration   2: 388.569 ns/op
# Warmup Iteration   3: 322.660 ns/op
Iteration   1: 322.741 ns/op
Iteration   2: 317.611 ns/op
Iteration   3: 322.037 ns/op
Iteration   4: 291.154 ns/op
Iteration   5: 270.924 ns/op


Result "kotlin_benchmarks.array.fill.Inline64int.Val_to_Ref_as_Ref_fillstat":
  300.687 ±(99.9%) 23.626 ns/op [Average]
  (min, avg, max) = (242.492, 300.687, 326.391), stdev = 22.100
  CI (99.9%): [277.061, 324.313] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline64int.Val_to_Ref_as_Ref_fillstat
# Parameters: (size = 1000000)

# Run progress: 21.99% complete, ETA 07:38:50
# Fork: 1 of 3
# Warmup Iteration   1: 41444550.000 ns/op
# Warmup Iteration   2: 6214951.006 ns/op
# Warmup Iteration   3: 6421328.000 ns/op
Iteration   1: 6244719.389 ns/op
Iteration   2: 7176134.752 ns/op
Iteration   3: 22772734.244 ns/op
Iteration   4: 6741825.833 ns/op
Iteration   5: 7116514.085 ns/op

# Run progress: 22.01% complete, ETA 07:38:42
# Fork: 2 of 3
# Warmup Iteration   1: 41317773.360 ns/op
# Warmup Iteration   2: 33735275.000 ns/op
# Warmup Iteration   3: 21183097.208 ns/op
Iteration   1: 5092081.468 ns/op
Iteration   2: 25393720.825 ns/op
Iteration   3: 56836944.444 ns/op
Iteration   4: 50200271.810 ns/op
Iteration   5: 47261420.455 ns/op

# Run progress: 22.03% complete, ETA 07:38:35
# Fork: 3 of 3
# Warmup Iteration   1: 48902377.000 ns/op
# Warmup Iteration   2: 60211088.235 ns/op
# Warmup Iteration   3: 61223144.588 ns/op
Iteration   1: 56260747.842 ns/op
Iteration   2: 40463309.308 ns/op
Iteration   3: 36168144.357 ns/op
Iteration   4: 28302498.833 ns/op
Iteration   5: 34812865.267 ns/op


Result "kotlin_benchmarks.array.fill.Inline64int.Val_to_Ref_as_Ref_fillstat":
  28722928.861 ±(99.9%) 20421694.626 ns/op [Average]
  (min, avg, max) = (5092081.468, 28722928.861, 56836944.444), stdev = 19102465.826
  CI (99.9%): [8301234.234, 49144623.487] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline64int.Val_to_Val_as_Val_arrayfillinst
# Parameters: (size = 100)

# Run progress: 22.06% complete, ETA 07:38:26
# Fork: 1 of 3
# Warmup Iteration   1: 614.891 ns/op
# Warmup Iteration   2: 447.069 ns/op
# Warmup Iteration   3: 294.462 ns/op
Iteration   1: 315.335 ns/op
Iteration   2: 276.870 ns/op
Iteration   3: 278.134 ns/op
Iteration   4: 254.551 ns/op
Iteration   5: 282.853 ns/op

# Run progress: 22.08% complete, ETA 07:38:18
# Fork: 2 of 3
# Warmup Iteration   1: 284.373 ns/op
# Warmup Iteration   2: 240.342 ns/op
# Warmup Iteration   3: 260.350 ns/op
Iteration   1: 288.690 ns/op
Iteration   2: 318.323 ns/op
Iteration   3: 314.341 ns/op
Iteration   4: 318.980 ns/op
Iteration   5: 318.695 ns/op

# Run progress: 22.11% complete, ETA 07:38:09
# Fork: 3 of 3
# Warmup Iteration   1: 331.276 ns/op
# Warmup Iteration   2: 290.546 ns/op
# Warmup Iteration   3: 300.153 ns/op
Iteration   1: 304.085 ns/op
Iteration   2: 318.005 ns/op
Iteration   3: 265.943 ns/op
Iteration   4: 275.955 ns/op
Iteration   5: 265.125 ns/op


Result "kotlin_benchmarks.array.fill.Inline64int.Val_to_Val_as_Val_arrayfillinst":
  293.059 ±(99.9%) 24.842 ns/op [Average]
  (min, avg, max) = (254.551, 293.059, 318.980), stdev = 23.237
  CI (99.9%): [268.217, 317.901] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline64int.Val_to_Val_as_Val_arrayfillinst
# Parameters: (size = 1000000)

# Run progress: 22.13% complete, ETA 07:38:01
# Fork: 1 of 3
# Warmup Iteration   1: 7520644.903 ns/op
# Warmup Iteration   2: 3984435.366 ns/op
# Warmup Iteration   3: 6260938.141 ns/op
Iteration   1: 51416354.200 ns/op
Iteration   2: 56554631.944 ns/op
Iteration   3: 50938214.550 ns/op
Iteration   4: 33326923.387 ns/op
Iteration   5: 48333220.238 ns/op

# Run progress: 22.16% complete, ETA 07:37:53
# Fork: 2 of 3
# Warmup Iteration   1: 3696605.839 ns/op
# Warmup Iteration   2: 8200550.664 ns/op
# Warmup Iteration   3: 71732327.357 ns/op
Iteration   1: 60001350.471 ns/op
Iteration   2: 44558447.478 ns/op
Iteration   3: 4471680.929 ns/op
Iteration   4: 3276117.144 ns/op
Iteration   5: 3898336.069 ns/op

# Run progress: 22.18% complete, ETA 07:37:46
# Fork: 3 of 3
# Warmup Iteration   1: 9549497.619 ns/op
# Warmup Iteration   2: 6032605.411 ns/op
# Warmup Iteration   3: 11956369.624 ns/op
Iteration   1: 54201614.000 ns/op
Iteration   2: 42123976.680 ns/op
Iteration   3: 44005728.261 ns/op
Iteration   4: 8874854.167 ns/op
Iteration   5: 2569860.262 ns/op


Result "kotlin_benchmarks.array.fill.Inline64int.Val_to_Val_as_Val_arrayfillinst":
  33903420.652 ±(99.9%) 23917868.253 ns/op [Average]
  (min, avg, max) = (2569860.262, 33903420.652, 60001350.471), stdev = 22372788.805
  CI (99.9%): [9985552.399, 57821288.905] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline64int.Val_to_Val_as_Val_arrayfillstat
# Parameters: (size = 100)

# Run progress: 22.21% complete, ETA 07:37:38
# Fork: 1 of 3
# Warmup Iteration   1: 316.658 ns/op
# Warmup Iteration   2: 285.581 ns/op
# Warmup Iteration   3: 238.655 ns/op
Iteration   1: 248.832 ns/op
Iteration   2: 279.402 ns/op
Iteration   3: 289.459 ns/op
Iteration   4: 278.921 ns/op
Iteration   5: 336.888 ns/op

# Run progress: 22.23% complete, ETA 07:37:30
# Fork: 2 of 3
# Warmup Iteration   1: 260.425 ns/op
# Warmup Iteration   2: 301.149 ns/op
# Warmup Iteration   3: 329.647 ns/op
Iteration   1: 322.617 ns/op
Iteration   2: 343.226 ns/op
Iteration   3: 324.357 ns/op
Iteration   4: 326.421 ns/op
Iteration   5: 325.596 ns/op

# Run progress: 22.25% complete, ETA 07:37:22
# Fork: 3 of 3
# Warmup Iteration   1: 318.633 ns/op
# Warmup Iteration   2: 264.916 ns/op
# Warmup Iteration   3: 253.923 ns/op
Iteration   1: 257.981 ns/op
Iteration   2: 287.279 ns/op
Iteration   3: 320.050 ns/op
Iteration   4: 324.722 ns/op
Iteration   5: 258.423 ns/op


Result "kotlin_benchmarks.array.fill.Inline64int.Val_to_Val_as_Val_arrayfillstat":
  301.612 ±(99.9%) 33.704 ns/op [Average]
  (min, avg, max) = (248.832, 301.612, 343.226), stdev = 31.527
  CI (99.9%): [267.907, 335.316] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline64int.Val_to_Val_as_Val_arrayfillstat
# Parameters: (size = 1000000)

# Run progress: 22.28% complete, ETA 07:37:14
# Fork: 1 of 3
# Warmup Iteration   1: 53630949.526 ns/op
# Warmup Iteration   2: 41225328.538 ns/op
# Warmup Iteration   3: 5800524.425 ns/op
Iteration   1: 2750984.221 ns/op
Iteration   2: 4396693.839 ns/op
Iteration   3: 17751748.544 ns/op
Iteration   4: 8959846.348 ns/op
Iteration   5: 3913440.799 ns/op

# Run progress: 22.30% complete, ETA 07:37:05
# Fork: 2 of 3
# Warmup Iteration   1: 6398780.280 ns/op
# Warmup Iteration   2: 8720954.379 ns/op
# Warmup Iteration   3: 17405982.759 ns/op
Iteration   1: 53119131.250 ns/op
Iteration   2: 34183894.433 ns/op
Iteration   3: 39303463.154 ns/op
Iteration   4: 38532408.963 ns/op
Iteration   5: 6395447.185 ns/op

# Run progress: 22.33% complete, ETA 07:36:58
# Fork: 3 of 3
# Warmup Iteration   1: 5292797.120 ns/op
# Warmup Iteration   2: 7062766.608 ns/op
# Warmup Iteration   3: 6246009.873 ns/op
Iteration   1: 6427624.732 ns/op
Iteration   2: 19017168.204 ns/op
Iteration   3: 11936416.667 ns/op
Iteration   4: 5622911.806 ns/op
Iteration   5: 16615431.016 ns/op


Result "kotlin_benchmarks.array.fill.Inline64int.Val_to_Val_as_Val_arrayfillstat":
  17928440.744 ±(99.9%) 16975401.353 ns/op [Average]
  (min, avg, max) = (2750984.221, 17928440.744, 53119131.250), stdev = 15878800.959
  CI (99.9%): [953039.391, 34903842.097] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline64int.Val_to_Val_as_Val_fillinst
# Parameters: (size = 100)

# Run progress: 22.35% complete, ETA 07:36:51
# Fork: 1 of 3
# Warmup Iteration   1: 363.447 ns/op
# Warmup Iteration   2: 346.665 ns/op
# Warmup Iteration   3: 362.669 ns/op
Iteration   1: 340.082 ns/op
Iteration   2: 305.739 ns/op
Iteration   3: 297.168 ns/op
Iteration   4: 308.621 ns/op
Iteration   5: 320.638 ns/op

# Run progress: 22.38% complete, ETA 07:36:43
# Fork: 2 of 3
# Warmup Iteration   1: 436.202 ns/op
# Warmup Iteration   2: 306.905 ns/op
# Warmup Iteration   3: 318.660 ns/op
Iteration   1: 360.808 ns/op
Iteration   2: 362.068 ns/op
Iteration   3: 392.750 ns/op
Iteration   4: 314.199 ns/op
Iteration   5: 358.102 ns/op

# Run progress: 22.40% complete, ETA 07:36:35
# Fork: 3 of 3
# Warmup Iteration   1: 365.607 ns/op
# Warmup Iteration   2: 305.579 ns/op
# Warmup Iteration   3: 292.980 ns/op
Iteration   1: 301.067 ns/op
Iteration   2: 370.374 ns/op
Iteration   3: 386.677 ns/op
Iteration   4: 309.307 ns/op
Iteration   5: 325.380 ns/op


Result "kotlin_benchmarks.array.fill.Inline64int.Val_to_Val_as_Val_fillinst":
  336.865 ±(99.9%) 34.629 ns/op [Average]
  (min, avg, max) = (297.168, 336.865, 392.750), stdev = 32.392
  CI (99.9%): [302.236, 371.494] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline64int.Val_to_Val_as_Val_fillinst
# Parameters: (size = 1000000)

# Run progress: 22.43% complete, ETA 07:36:27
# Fork: 1 of 3
# Warmup Iteration   1: 6421089.063 ns/op
# Warmup Iteration   2: 20831709.184 ns/op
# Warmup Iteration   3: 6785420.000 ns/op
Iteration   1: 6612459.425 ns/op
Iteration   2: 12910203.313 ns/op
Iteration   3: 40251187.500 ns/op
Iteration   4: 26341737.179 ns/op
Iteration   5: 53435780.684 ns/op

# Run progress: 22.45% complete, ETA 07:36:19
# Fork: 2 of 3
# Warmup Iteration   1: 59559448.529 ns/op
# Warmup Iteration   2: 48727761.905 ns/op
# Warmup Iteration   3: 24680373.976 ns/op
Iteration   1: 41574120.000 ns/op
Iteration   2: 45830447.000 ns/op
Iteration   3: 50643091.650 ns/op
Iteration   4: 6423903.577 ns/op
Iteration   5: 3757377.022 ns/op

# Run progress: 22.48% complete, ETA 07:36:11
# Fork: 3 of 3
# Warmup Iteration   1: 17244634.169 ns/op
# Warmup Iteration   2: 5636239.525 ns/op
# Warmup Iteration   3: 5459690.383 ns/op
Iteration   1: 11765385.764 ns/op
Iteration   2: 71744922.200 ns/op
Iteration   3: 55677756.579 ns/op
Iteration   4: 60334781.882 ns/op
Iteration   5: 53525217.105 ns/op


Result "kotlin_benchmarks.array.fill.Inline64int.Val_to_Val_as_Val_fillinst":
  36055224.725 ±(99.9%) 24277812.625 ns/op [Average]
  (min, avg, max) = (3757377.022, 36055224.725, 71744922.200), stdev = 22709480.995
  CI (99.9%): [11777412.100, 60333037.351] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline64int.Val_to_Val_as_Val_fillstat
# Parameters: (size = 100)

# Run progress: 22.50% complete, ETA 07:36:05
# Fork: 1 of 3
# Warmup Iteration   1: 244.425 ns/op
# Warmup Iteration   2: 319.069 ns/op
# Warmup Iteration   3: 293.595 ns/op
Iteration   1: 403.559 ns/op
Iteration   2: 343.255 ns/op
Iteration   3: 316.819 ns/op
Iteration   4: 246.354 ns/op
Iteration   5: 292.337 ns/op

# Run progress: 22.52% complete, ETA 07:35:55
# Fork: 2 of 3
# Warmup Iteration   1: 365.237 ns/op
# Warmup Iteration   2: 398.981 ns/op
# Warmup Iteration   3: 382.729 ns/op
Iteration   1: 325.400 ns/op
Iteration   2: 307.087 ns/op
Iteration   3: 295.478 ns/op
Iteration   4: 296.448 ns/op
Iteration   5: 292.238 ns/op

# Run progress: 22.55% complete, ETA 07:35:48
# Fork: 3 of 3
# Warmup Iteration   1: 257.853 ns/op
# Warmup Iteration   2: 312.279 ns/op
# Warmup Iteration   3: 319.813 ns/op
Iteration   1: 314.927 ns/op
Iteration   2: 295.595 ns/op
Iteration   3: 321.199 ns/op
Iteration   4: 325.905 ns/op
Iteration   5: 308.996 ns/op


Result "kotlin_benchmarks.array.fill.Inline64int.Val_to_Val_as_Val_fillstat":
  312.373 ±(99.9%) 35.858 ns/op [Average]
  (min, avg, max) = (246.354, 312.373, 403.559), stdev = 33.542
  CI (99.9%): [276.515, 348.232] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Inline64int.Val_to_Val_as_Val_fillstat
# Parameters: (size = 1000000)

# Run progress: 22.57% complete, ETA 07:35:39
# Fork: 1 of 3
# Warmup Iteration   1: 52974927.100 ns/op
# Warmup Iteration   2: 28690563.086 ns/op
# Warmup Iteration   3: 51333240.048 ns/op
Iteration   1: 36204058.036 ns/op
Iteration   2: 12182105.422 ns/op
Iteration   3: 12178646.069 ns/op
Iteration   4: 61519625.000 ns/op
Iteration   5: 58662131.944 ns/op

# Run progress: 22.60% complete, ETA 07:35:32
# Fork: 2 of 3
# Warmup Iteration   1: 5155367.879 ns/op
# Warmup Iteration   2: 7323327.297 ns/op
# Warmup Iteration   3: 43574132.261 ns/op
Iteration   1: 53242162.263 ns/op
Iteration   2: 48845930.571 ns/op
Iteration   3: 42441503.320 ns/op
Iteration   4: 10515338.979 ns/op
Iteration   5: 4339209.034 ns/op

# Run progress: 22.62% complete, ETA 07:35:25
# Fork: 3 of 3
# Warmup Iteration   1: 37700615.741 ns/op
# Warmup Iteration   2: 40971365.000 ns/op
# Warmup Iteration   3: 39682310.885 ns/op
Iteration   1: 6075880.777 ns/op
Iteration   2: 3682859.339 ns/op
Iteration   3: 4340611.290 ns/op
Iteration   4: 6116537.348 ns/op
Iteration   5: 5474298.649 ns/op


Result "kotlin_benchmarks.array.fill.Inline64int.Val_to_Val_as_Val_fillstat":
  24388059.869 ±(99.9%) 24243580.229 ns/op [Average]
  (min, avg, max) = (3682859.339, 24388059.869, 61519625.000), stdev = 22677459.990
  CI (99.9%): [144479.640, 48631640.099] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.InlineOpt.Def_to_Ref_as_Ref_arrayfill
# Parameters: (size = 100)

# Run progress: 22.65% complete, ETA 07:35:18
# Fork: 1 of 3
# Warmup Iteration   1: 165.906 ns/op
# Warmup Iteration   2: 169.549 ns/op
# Warmup Iteration   3: 282.847 ns/op
Iteration   1: 189.594 ns/op
Iteration   2: 192.095 ns/op
Iteration   3: 196.141 ns/op
Iteration   4: 182.680 ns/op
Iteration   5: 190.506 ns/op

# Run progress: 22.67% complete, ETA 07:35:10
# Fork: 2 of 3
# Warmup Iteration   1: 198.023 ns/op
# Warmup Iteration   2: 198.842 ns/op
# Warmup Iteration   3: 191.890 ns/op
Iteration   1: 170.890 ns/op
Iteration   2: 164.500 ns/op
Iteration   3: 161.472 ns/op
Iteration   4: 156.993 ns/op
Iteration   5: 184.330 ns/op

# Run progress: 22.70% complete, ETA 07:35:02
# Fork: 3 of 3
# Warmup Iteration   1: 176.315 ns/op
# Warmup Iteration   2: 170.103 ns/op
# Warmup Iteration   3: 177.371 ns/op
Iteration   1: 191.231 ns/op
Iteration   2: 189.345 ns/op
Iteration   3: 188.843 ns/op
Iteration   4: 192.076 ns/op
Iteration   5: 192.239 ns/op


Result "kotlin_benchmarks.array.fill.InlineOpt.Def_to_Ref_as_Ref_arrayfill":
  182.862 ±(99.9%) 13.689 ns/op [Average]
  (min, avg, max) = (156.993, 182.862, 196.141), stdev = 12.805
  CI (99.9%): [169.174, 196.551] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.InlineOpt.Def_to_Ref_as_Ref_arrayfill
# Parameters: (size = 1000000)

# Run progress: 22.72% complete, ETA 07:34:53
# Fork: 1 of 3
# Warmup Iteration   1: 61384924.059 ns/op
# Warmup Iteration   2: 46819251.864 ns/op
# Warmup Iteration   3: 29676717.857 ns/op
Iteration   1: 3099167.692 ns/op
Iteration   2: 2986726.688 ns/op
Iteration   3: 2842595.645 ns/op
Iteration   4: 6016732.841 ns/op
Iteration   5: 8408686.000 ns/op

# Run progress: 22.75% complete, ETA 07:34:45
# Fork: 2 of 3
# Warmup Iteration   1: 5380598.137 ns/op
# Warmup Iteration   2: 5859095.714 ns/op
# Warmup Iteration   3: 32698252.625 ns/op
Iteration   1: 68061227.800 ns/op
Iteration   2: 69149350.000 ns/op
Iteration   3: 68981833.333 ns/op
Iteration   4: 70068430.533 ns/op
Iteration   5: 53488763.158 ns/op

# Run progress: 22.77% complete, ETA 07:34:38
# Fork: 3 of 3
# Warmup Iteration   1: 42735635.000 ns/op
# Warmup Iteration   2: 64352441.176 ns/op
# Warmup Iteration   3: 66017026.000 ns/op
Iteration   1: 57680446.778 ns/op
Iteration   2: 3856808.523 ns/op
Iteration   3: 2782283.862 ns/op
Iteration   4: 5417099.516 ns/op
Iteration   5: 8710159.129 ns/op


Result "kotlin_benchmarks.array.fill.InlineOpt.Def_to_Ref_as_Ref_arrayfill":
  28770020.767 ±(99.9%) 32721630.574 ns/op [Average]
  (min, avg, max) = (2782283.862, 28770020.767, 70068430.533), stdev = 30607833.544
  CI (99.9%): [≈ 0, 61491651.341] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.InlineOpt.Def_to_Ref_as_Ref_fill
# Parameters: (size = 100)

# Run progress: 22.79% complete, ETA 07:34:29
# Fork: 1 of 3
# Warmup Iteration   1: 186.434 ns/op
# Warmup Iteration   2: 178.695 ns/op
# Warmup Iteration   3: 191.285 ns/op
Iteration   1: 198.724 ns/op
Iteration   2: 192.187 ns/op
Iteration   3: 172.632 ns/op
Iteration   4: 144.428 ns/op
Iteration   5: 151.037 ns/op

# Run progress: 22.82% complete, ETA 07:34:21
# Fork: 2 of 3
# Warmup Iteration   1: 218.923 ns/op
# Warmup Iteration   2: 229.789 ns/op
# Warmup Iteration   3: 204.146 ns/op
Iteration   1: 159.179 ns/op
Iteration   2: 121.433 ns/op
Iteration   3: 116.984 ns/op
Iteration   4: 163.280 ns/op
Iteration   5: 220.533 ns/op

# Run progress: 22.84% complete, ETA 07:34:12
# Fork: 3 of 3
# Warmup Iteration   1: 257.045 ns/op
# Warmup Iteration   2: 187.494 ns/op
# Warmup Iteration   3: 162.592 ns/op
Iteration   1: 170.002 ns/op
Iteration   2: 171.316 ns/op
Iteration   3: 156.675 ns/op
Iteration   4: 164.191 ns/op
Iteration   5: 191.862 ns/op


Result "kotlin_benchmarks.array.fill.InlineOpt.Def_to_Ref_as_Ref_fill":
  166.298 ±(99.9%) 29.566 ns/op [Average]
  (min, avg, max) = (116.984, 166.298, 220.533), stdev = 27.657
  CI (99.9%): [136.731, 195.864] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.InlineOpt.Def_to_Ref_as_Ref_fill
# Parameters: (size = 1000000)

# Run progress: 22.87% complete, ETA 07:34:04
# Fork: 1 of 3
# Warmup Iteration   1: 52793737.500 ns/op
# Warmup Iteration   2: 52808852.050 ns/op
# Warmup Iteration   3: 57577460.611 ns/op
Iteration   1: 52283456.250 ns/op
Iteration   2: 51172066.650 ns/op
Iteration   3: 53254581.158 ns/op
Iteration   4: 8324978.139 ns/op
Iteration   5: 3472917.379 ns/op

# Run progress: 22.89% complete, ETA 07:33:56
# Fork: 2 of 3
# Warmup Iteration   1: 50402089.286 ns/op
# Warmup Iteration   2: 43326989.583 ns/op
# Warmup Iteration   3: 3701799.300 ns/op
Iteration   1: 3755476.610 ns/op
Iteration   2: 10050544.097 ns/op
Iteration   3: 10192567.308 ns/op
Iteration   4: 4253558.122 ns/op
Iteration   5: 8603687.000 ns/op

# Run progress: 22.92% complete, ETA 07:33:49
# Fork: 3 of 3
# Warmup Iteration   1: 65770307.313 ns/op
# Warmup Iteration   2: 53630177.632 ns/op
# Warmup Iteration   3: 48220238.095 ns/op
Iteration   1: 48175878.952 ns/op
Iteration   2: 4142661.157 ns/op
Iteration   3: 3866411.420 ns/op
Iteration   4: 24158505.435 ns/op
Iteration   5: 65870294.313 ns/op


Result "kotlin_benchmarks.array.fill.InlineOpt.Def_to_Ref_as_Ref_fill":
  23438505.599 ±(99.9%) 24934205.960 ns/op [Average]
  (min, avg, max) = (3472917.379, 23438505.599, 65870294.313), stdev = 23323471.727
  CI (99.9%): [≈ 0, 48372711.559] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.InlineOpt.Def_to_Val_as_Val_arrayfill
# Parameters: (size = 100)

# Run progress: 22.94% complete, ETA 07:33:42
# Fork: 1 of 3
# Warmup Iteration   1: 175.071 ns/op
# Warmup Iteration   2: 160.288 ns/op
# Warmup Iteration   3: 159.985 ns/op
Iteration   1: 165.147 ns/op
Iteration   2: 165.466 ns/op
Iteration   3: 165.059 ns/op
Iteration   4: 160.942 ns/op
Iteration   5: 193.237 ns/op

# Run progress: 22.97% complete, ETA 07:33:32
# Fork: 2 of 3
# Warmup Iteration   1: 211.830 ns/op
# Warmup Iteration   2: 173.562 ns/op
# Warmup Iteration   3: 187.385 ns/op
Iteration   1: 190.711 ns/op
Iteration   2: 197.967 ns/op
Iteration   3: 156.809 ns/op
Iteration   4: 128.242 ns/op
Iteration   5: 151.206 ns/op

# Run progress: 22.99% complete, ETA 07:33:24
# Fork: 3 of 3
# Warmup Iteration   1: 179.613 ns/op
# Warmup Iteration   2: 157.640 ns/op
# Warmup Iteration   3: 202.676 ns/op
Iteration   1: 206.126 ns/op
Iteration   2: 178.655 ns/op
Iteration   3: 173.712 ns/op
Iteration   4: 177.960 ns/op
Iteration   5: 181.395 ns/op


Result "kotlin_benchmarks.array.fill.InlineOpt.Def_to_Val_as_Val_arrayfill":
  172.842 ±(99.9%) 21.454 ns/op [Average]
  (min, avg, max) = (128.242, 172.842, 206.126), stdev = 20.068
  CI (99.9%): [151.388, 194.296] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.InlineOpt.Def_to_Val_as_Val_arrayfill
# Parameters: (size = 1000000)

# Run progress: 23.01% complete, ETA 07:33:16
# Fork: 1 of 3
# Warmup Iteration   1: 56150052.632 ns/op
# Warmup Iteration   2: 51073833.300 ns/op
# Warmup Iteration   3: 5164638.887 ns/op
Iteration   1: 4609726.876 ns/op
Iteration   2: 26744992.513 ns/op
Iteration   3: 68864316.667 ns/op
Iteration   4: 55330366.263 ns/op
Iteration   5: 36752299.107 ns/op

# Run progress: 23.04% complete, ETA 07:33:08
# Fork: 2 of 3
# Warmup Iteration   1: 4352012.481 ns/op
# Warmup Iteration   2: 3851364.824 ns/op
# Warmup Iteration   3: 3086938.899 ns/op
Iteration   1: 6435485.103 ns/op
Iteration   2: 13587575.446 ns/op
Iteration   3: 3920781.814 ns/op
Iteration   4: 4572628.018 ns/op
Iteration   5: 5495793.449 ns/op

# Run progress: 23.06% complete, ETA 07:32:59
# Fork: 3 of 3
# Warmup Iteration   1: 54785456.158 ns/op
# Warmup Iteration   2: 25609526.025 ns/op
# Warmup Iteration   3: 50312253.952 ns/op
Iteration   1: 64697205.688 ns/op
Iteration   2: 56553763.889 ns/op
Iteration   3: 49383551.619 ns/op
Iteration   4: 53563039.474 ns/op
Iteration   5: 6551680.281 ns/op


Result "kotlin_benchmarks.array.fill.InlineOpt.Def_to_Val_as_Val_arrayfill":
  30470880.414 ±(99.9%) 27092288.547 ns/op [Average]
  (min, avg, max) = (3920781.814, 30470880.414, 68864316.667), stdev = 25342143.518
  CI (99.9%): [3378591.867, 57563168.960] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.InlineOpt.Def_to_Val_as_Val_fill
# Parameters: (size = 100)

# Run progress: 23.09% complete, ETA 07:32:51
# Fork: 1 of 3
# Warmup Iteration   1: 166.725 ns/op
# Warmup Iteration   2: 188.568 ns/op
# Warmup Iteration   3: 171.899 ns/op
Iteration   1: 180.997 ns/op
Iteration   2: 174.546 ns/op
Iteration   3: 173.196 ns/op
Iteration   4: 191.381 ns/op
Iteration   5: 145.676 ns/op

# Run progress: 23.11% complete, ETA 07:32:43
# Fork: 2 of 3
# Warmup Iteration   1: 200.817 ns/op
# Warmup Iteration   2: 180.966 ns/op
# Warmup Iteration   3: 171.592 ns/op
Iteration   1: 203.811 ns/op
Iteration   2: 188.754 ns/op
Iteration   3: 144.818 ns/op
Iteration   4: 172.790 ns/op
Iteration   5: 161.122 ns/op

# Run progress: 23.14% complete, ETA 07:32:34
# Fork: 3 of 3
# Warmup Iteration   1: 163.008 ns/op
# Warmup Iteration   2: 164.936 ns/op
# Warmup Iteration   3: 164.112 ns/op
Iteration   1: 165.206 ns/op
Iteration   2: 161.324 ns/op
Iteration   3: 183.152 ns/op
Iteration   4: 190.376 ns/op
Iteration   5: 160.418 ns/op


Result "kotlin_benchmarks.array.fill.InlineOpt.Def_to_Val_as_Val_fill":
  173.171 ±(99.9%) 18.169 ns/op [Average]
  (min, avg, max) = (144.818, 173.171, 203.811), stdev = 16.995
  CI (99.9%): [155.002, 191.340] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.InlineOpt.Def_to_Val_as_Val_fill
# Parameters: (size = 1000000)

# Run progress: 23.16% complete, ETA 07:32:26
# Fork: 1 of 3
# Warmup Iteration   1: 7630684.526 ns/op
# Warmup Iteration   2: 6325700.994 ns/op
# Warmup Iteration   3: 21398049.306 ns/op
Iteration   1: 51483550.000 ns/op
Iteration   2: 65621372.375 ns/op
Iteration   3: 45971520.864 ns/op
Iteration   4: 8141679.435 ns/op
Iteration   5: 3171648.978 ns/op

# Run progress: 23.19% complete, ETA 07:32:18
# Fork: 2 of 3
# Warmup Iteration   1: 5451202.703 ns/op
# Warmup Iteration   2: 20560928.922 ns/op
# Warmup Iteration   3: 11026261.968 ns/op
Iteration   1: 10370394.980 ns/op
Iteration   2: 12985830.793 ns/op
Iteration   3: 60093585.765 ns/op
Iteration   4: 48205795.619 ns/op
Iteration   5: 54140858.350 ns/op

# Run progress: 23.21% complete, ETA 07:32:11
# Fork: 3 of 3
# Warmup Iteration   1: 2978177.608 ns/op
# Warmup Iteration   2: 8253709.302 ns/op
# Warmup Iteration   3: 69653944.467 ns/op
Iteration   1: 56425571.778 ns/op
Iteration   2: 48323002.000 ns/op
Iteration   3: 44705675.739 ns/op
Iteration   4: 4992117.262 ns/op
Iteration   5: 2986306.664 ns/op


Result "kotlin_benchmarks.array.fill.InlineOpt.Def_to_Val_as_Val_fill":
  34507927.373 ±(99.9%) 25520807.738 ns/op [Average]
  (min, avg, max) = (2986306.664, 34507927.373, 65621372.375), stdev = 23872179.394
  CI (99.9%): [8987119.635, 60028735.111] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.InlineOpt.New_to_Ref_as_Ref_arrayfill
# Parameters: (size = 100)

# Run progress: 23.24% complete, ETA 07:32:03
# Fork: 1 of 3
# Warmup Iteration   1: 235.796 ns/op
# Warmup Iteration   2: 241.501 ns/op
# Warmup Iteration   3: 380.746 ns/op
Iteration   1: 392.020 ns/op
Iteration   2: 373.723 ns/op
Iteration   3: 445.979 ns/op
Iteration   4: 466.837 ns/op
Iteration   5: 417.670 ns/op

# Run progress: 23.26% complete, ETA 07:31:56
# Fork: 2 of 3
# Warmup Iteration   1: 258.233 ns/op
# Warmup Iteration   2: 259.140 ns/op
# Warmup Iteration   3: 464.422 ns/op
Iteration   1: 467.587 ns/op
Iteration   2: 464.110 ns/op
Iteration   3: 451.079 ns/op
Iteration   4: 417.809 ns/op
Iteration   5: 464.921 ns/op

# Run progress: 23.28% complete, ETA 07:31:47
# Fork: 3 of 3
# Warmup Iteration   1: 246.644 ns/op
# Warmup Iteration   2: 248.487 ns/op
# Warmup Iteration   3: 392.133 ns/op
Iteration   1: 363.621 ns/op
Iteration   2: 438.444 ns/op
Iteration   3: 350.950 ns/op
Iteration   4: 397.210 ns/op
Iteration   5: 451.330 ns/op


Result "kotlin_benchmarks.array.fill.InlineOpt.New_to_Ref_as_Ref_arrayfill":
  424.219 ±(99.9%) 42.875 ns/op [Average]
  (min, avg, max) = (350.950, 424.219, 467.587), stdev = 40.105
  CI (99.9%): [381.344, 467.094] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.InlineOpt.New_to_Ref_as_Ref_arrayfill
# Parameters: (size = 1000000)

# Run progress: 23.31% complete, ETA 07:31:39
# Fork: 1 of 3
# Warmup Iteration   1: 66397791.688 ns/op
# Warmup Iteration   2: 63653820.313 ns/op
# Warmup Iteration   3: 51215877.100 ns/op
Iteration   1: 49923930.524 ns/op
Iteration   2: 48636386.905 ns/op
Iteration   3: 4078191.702 ns/op
Iteration   4: 2706438.508 ns/op
Iteration   5: 2926259.876 ns/op

# Run progress: 23.33% complete, ETA 07:31:32
# Fork: 2 of 3
# Warmup Iteration   1: 19123838.038 ns/op
# Warmup Iteration   2: 9817071.194 ns/op
# Warmup Iteration   3: 5967995.341 ns/op
Iteration   1: 4500669.085 ns/op
Iteration   2: 9130253.881 ns/op
Iteration   3: 50629989.550 ns/op
Iteration   4: 11936107.353 ns/op
Iteration   5: 64836372.375 ns/op

# Run progress: 23.36% complete, ETA 07:31:24
# Fork: 3 of 3
# Warmup Iteration   1: 60296911.765 ns/op
# Warmup Iteration   2: 57629717.611 ns/op
# Warmup Iteration   3: 51800466.700 ns/op
Iteration   1: 63767515.625 ns/op
Iteration   2: 62264661.765 ns/op
Iteration   3: 54156837.684 ns/op
Iteration   4: 13651856.973 ns/op
Iteration   5: 2662282.652 ns/op


Result "kotlin_benchmarks.array.fill.InlineOpt.New_to_Ref_as_Ref_arrayfill":
  29720516.964 ±(99.9%) 28174256.999 ns/op [Average]
  (min, avg, max) = (2662282.652, 29720516.964, 64836372.375), stdev = 26354217.480
  CI (99.9%): [1546259.964, 57894773.963] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.InlineOpt.New_to_Ref_as_Ref_fill
# Parameters: (size = 100)

# Run progress: 23.38% complete, ETA 07:31:16
# Fork: 1 of 3
# Warmup Iteration   1: 1119.508 ns/op
# Warmup Iteration   2: 651.674 ns/op
# Warmup Iteration   3: 541.411 ns/op
Iteration   1: 655.973 ns/op
Iteration   2: 631.089 ns/op
Iteration   3: 593.969 ns/op
Iteration   4: 618.317 ns/op
Iteration   5: 597.446 ns/op

# Run progress: 23.41% complete, ETA 07:31:08
# Fork: 2 of 3
# Warmup Iteration   1: 617.624 ns/op
# Warmup Iteration   2: 569.424 ns/op
# Warmup Iteration   3: 555.041 ns/op
Iteration   1: 587.830 ns/op
Iteration   2: 577.905 ns/op
Iteration   3: 545.549 ns/op
Iteration   4: 702.190 ns/op
Iteration   5: 655.447 ns/op

# Run progress: 23.43% complete, ETA 07:31:00
# Fork: 3 of 3
# Warmup Iteration   1: 669.424 ns/op
# Warmup Iteration   2: 552.911 ns/op
# Warmup Iteration   3: 583.360 ns/op
Iteration   1: 815.971 ns/op
Iteration   2: 650.254 ns/op
Iteration   3: 706.515 ns/op
Iteration   4: 621.891 ns/op
Iteration   5: 679.713 ns/op


Result "kotlin_benchmarks.array.fill.InlineOpt.New_to_Ref_as_Ref_fill":
  642.671 ±(99.9%) 70.932 ns/op [Average]
  (min, avg, max) = (545.549, 642.671, 815.971), stdev = 66.350
  CI (99.9%): [571.739, 713.603] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.InlineOpt.New_to_Ref_as_Ref_fill
# Parameters: (size = 1000000)

# Run progress: 23.46% complete, ETA 07:30:52
# Fork: 1 of 3
# Warmup Iteration   1: 11303866.200 ns/op
# Warmup Iteration   2: 10635650.442 ns/op
# Warmup Iteration   3: 7282498.525 ns/op
Iteration   1: 10274481.286 ns/op
Iteration   2: 7429110.912 ns/op
Iteration   3: 6078240.819 ns/op
Iteration   4: 5826806.442 ns/op
Iteration   5: 7077148.176 ns/op

# Run progress: 23.48% complete, ETA 07:30:44
# Fork: 2 of 3
# Warmup Iteration   1: 12275936.988 ns/op
# Warmup Iteration   2: 8586966.458 ns/op
# Warmup Iteration   3: 8807221.009 ns/op
Iteration   1: 10566594.615 ns/op
Iteration   2: 11471373.596 ns/op
Iteration   3: 7963666.016 ns/op
Iteration   4: 6831536.737 ns/op
Iteration   5: 6658757.671 ns/op

# Run progress: 23.50% complete, ETA 07:30:37
# Fork: 3 of 3
# Warmup Iteration   1: 11098992.293 ns/op
# Warmup Iteration   2: 7935633.197 ns/op
# Warmup Iteration   3: 8522730.395 ns/op
Iteration   1: 14708222.232 ns/op
Iteration   2: 14499462.500 ns/op
Iteration   3: 7029890.625 ns/op
Iteration   4: 5549005.720 ns/op
Iteration   5: 5803724.760 ns/op


Result "kotlin_benchmarks.array.fill.InlineOpt.New_to_Ref_as_Ref_fill":
  8517868.140 ±(99.9%) 3277213.625 ns/op [Average]
  (min, avg, max) = (5549005.720, 8517868.140, 14708222.232), stdev = 3065507.659
  CI (99.9%): [5240654.515, 11795081.766] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.InlineOpt.New_to_Val_as_Val_arrayfill
# Parameters: (size = 100)

# Run progress: 23.53% complete, ETA 07:30:29
# Fork: 1 of 3
# Warmup Iteration   1: 243.359 ns/op
# Warmup Iteration   2: 249.525 ns/op
# Warmup Iteration   3: 428.339 ns/op
Iteration   1: 459.394 ns/op
Iteration   2: 379.342 ns/op
Iteration   3: 411.510 ns/op
Iteration   4: 438.254 ns/op
Iteration   5: 346.895 ns/op

# Run progress: 23.55% complete, ETA 07:30:21
# Fork: 2 of 3
# Warmup Iteration   1: 238.209 ns/op
# Warmup Iteration   2: 234.877 ns/op
# Warmup Iteration   3: 358.391 ns/op
Iteration   1: 335.162 ns/op
Iteration   2: 347.755 ns/op
Iteration   3: 416.734 ns/op
Iteration   4: 438.382 ns/op
Iteration   5: 413.815 ns/op

# Run progress: 23.58% complete, ETA 07:30:13
# Fork: 3 of 3
# Warmup Iteration   1: 255.327 ns/op
# Warmup Iteration   2: 260.640 ns/op
# Warmup Iteration   3: 468.875 ns/op
Iteration   1: 393.154 ns/op
Iteration   2: 392.903 ns/op
Iteration   3: 452.962 ns/op
Iteration   4: 385.212 ns/op
Iteration   5: 338.833 ns/op


Result "kotlin_benchmarks.array.fill.InlineOpt.New_to_Val_as_Val_arrayfill":
  396.687 ±(99.9%) 44.213 ns/op [Average]
  (min, avg, max) = (335.162, 396.687, 459.394), stdev = 41.357
  CI (99.9%): [352.474, 440.900] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.InlineOpt.New_to_Val_as_Val_arrayfill
# Parameters: (size = 1000000)

# Run progress: 23.60% complete, ETA 07:30:04
# Fork: 1 of 3
# Warmup Iteration   1: 5444163.741 ns/op
# Warmup Iteration   2: 4409331.892 ns/op
# Warmup Iteration   3: 4763263.955 ns/op
Iteration   1: 5228528.933 ns/op
Iteration   2: 3976903.051 ns/op
Iteration   3: 5339604.487 ns/op
Iteration   4: 53300717.105 ns/op
Iteration   5: 42893673.583 ns/op

# Run progress: 23.63% complete, ETA 07:29:56
# Fork: 2 of 3
# Warmup Iteration   1: 47350282.182 ns/op
# Warmup Iteration   2: 54875179.200 ns/op
# Warmup Iteration   3: 5898707.849 ns/op
Iteration   1: 54684372.789 ns/op
Iteration   2: 56569754.421 ns/op
Iteration   3: 50521735.400 ns/op
Iteration   4: 5086721.734 ns/op
Iteration   5: 3250872.581 ns/op

# Run progress: 23.65% complete, ETA 07:29:48
# Fork: 3 of 3
# Warmup Iteration   1: 4240485.703 ns/op
# Warmup Iteration   2: 4370329.004 ns/op
# Warmup Iteration   3: 3894611.868 ns/op
Iteration   1: 3489565.231 ns/op
Iteration   2: 17043363.200 ns/op
Iteration   3: 54527673.263 ns/op
Iteration   4: 46392401.500 ns/op
Iteration   5: 56199451.389 ns/op


Result "kotlin_benchmarks.array.fill.InlineOpt.New_to_Val_as_Val_arrayfill":
  30567022.578 ±(99.9%) 25719925.107 ns/op [Average]
  (min, avg, max) = (3250872.581, 30567022.578, 56569754.421), stdev = 24058433.905
  CI (99.9%): [4847097.470, 56286947.685] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.InlineOpt.New_to_Val_as_Val_fill
# Parameters: (size = 100)

# Run progress: 23.68% complete, ETA 07:29:41
# Fork: 1 of 3
# Warmup Iteration   1: 331.456 ns/op
# Warmup Iteration   2: 321.560 ns/op
# Warmup Iteration   3: 605.541 ns/op
Iteration   1: 850.173 ns/op
Iteration   2: 819.198 ns/op
Iteration   3: 609.641 ns/op
Iteration   4: 528.348 ns/op
Iteration   5: 627.527 ns/op

# Run progress: 23.70% complete, ETA 07:29:32
# Fork: 2 of 3
# Warmup Iteration   1: 629.602 ns/op
# Warmup Iteration   2: 553.901 ns/op
# Warmup Iteration   3: 511.345 ns/op
Iteration   1: 632.996 ns/op
Iteration   2: 617.342 ns/op
Iteration   3: 640.758 ns/op
Iteration   4: 667.699 ns/op
Iteration   5: 556.653 ns/op

# Run progress: 23.73% complete, ETA 07:29:24
# Fork: 3 of 3
# Warmup Iteration   1: 612.253 ns/op
# Warmup Iteration   2: 547.222 ns/op
# Warmup Iteration   3: 520.798 ns/op
Iteration   1: 668.011 ns/op
Iteration   2: 609.647 ns/op
Iteration   3: 586.600 ns/op
Iteration   4: 587.038 ns/op
Iteration   5: 560.134 ns/op


Result "kotlin_benchmarks.array.fill.InlineOpt.New_to_Val_as_Val_fill":
  637.451 ±(99.9%) 95.512 ns/op [Average]
  (min, avg, max) = (528.348, 637.451, 850.173), stdev = 89.342
  CI (99.9%): [541.939, 732.963] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.InlineOpt.New_to_Val_as_Val_fill
# Parameters: (size = 1000000)

# Run progress: 23.75% complete, ETA 07:29:16
# Fork: 1 of 3
# Warmup Iteration   1: 11037337.870 ns/op
# Warmup Iteration   2: 9572821.429 ns/op
# Warmup Iteration   3: 9273633.404 ns/op
Iteration   1: 11057930.396 ns/op
Iteration   2: 13317307.566 ns/op
Iteration   3: 7345332.423 ns/op
Iteration   4: 7232393.486 ns/op
Iteration   5: 6666480.960 ns/op

# Run progress: 23.77% complete, ETA 07:29:08
# Fork: 2 of 3
# Warmup Iteration   1: 11431585.674 ns/op
# Warmup Iteration   2: 8173894.492 ns/op
# Warmup Iteration   3: 9732020.837 ns/op
Iteration   1: 15206968.284 ns/op
Iteration   2: 14000067.125 ns/op
Iteration   3: 12768606.250 ns/op
Iteration   4: 9073202.009 ns/op
Iteration   5: 7032221.063 ns/op

# Run progress: 23.80% complete, ETA 07:29:01
# Fork: 3 of 3
# Warmup Iteration   1: 13302115.684 ns/op
# Warmup Iteration   2: 6812197.500 ns/op
# Warmup Iteration   3: 8591046.610 ns/op
Iteration   1: 11259876.844 ns/op
Iteration   2: 9161107.200 ns/op
Iteration   3: 6398849.158 ns/op
Iteration   4: 6719231.788 ns/op
Iteration   5: 6138074.902 ns/op


Result "kotlin_benchmarks.array.fill.InlineOpt.New_to_Val_as_Val_fill":
  9558509.964 ±(99.9%) 3336935.278 ns/op [Average]
  (min, avg, max) = (6138074.902, 9558509.964, 15206968.284), stdev = 3121371.330
  CI (99.9%): [6221574.686, 12895445.242] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.InlineOpt.Ref_to_Ref_as_Ref_arrayfillinst
# Parameters: (size = 100)

# Run progress: 23.82% complete, ETA 07:28:53
# Fork: 1 of 3
# Warmup Iteration   1: 165.701 ns/op
# Warmup Iteration   2: 186.854 ns/op
# Warmup Iteration   3: 222.977 ns/op
Iteration   1: 165.084 ns/op
Iteration   2: 176.326 ns/op
Iteration   3: 191.144 ns/op
Iteration   4: 193.292 ns/op
Iteration   5: 192.246 ns/op

# Run progress: 23.85% complete, ETA 07:28:45
# Fork: 2 of 3
# Warmup Iteration   1: 192.535 ns/op
# Warmup Iteration   2: 189.796 ns/op
# Warmup Iteration   3: 201.130 ns/op
Iteration   1: 250.039 ns/op
Iteration   2: 165.697 ns/op
Iteration   3: 165.224 ns/op
Iteration   4: 188.977 ns/op
Iteration   5: 183.111 ns/op

# Run progress: 23.87% complete, ETA 07:28:37
# Fork: 3 of 3
# Warmup Iteration   1: 158.398 ns/op
# Warmup Iteration   2: 175.824 ns/op
# Warmup Iteration   3: 208.952 ns/op
Iteration   1: 179.954 ns/op
Iteration   2: 151.246 ns/op
Iteration   3: 162.118 ns/op
Iteration   4: 178.980 ns/op
Iteration   5: 169.527 ns/op


Result "kotlin_benchmarks.array.fill.InlineOpt.Ref_to_Ref_as_Ref_arrayfillinst":
  180.864 ±(99.9%) 24.498 ns/op [Average]
  (min, avg, max) = (151.246, 180.864, 250.039), stdev = 22.915
  CI (99.9%): [156.367, 205.362] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.InlineOpt.Ref_to_Ref_as_Ref_arrayfillinst
# Parameters: (size = 1000000)

# Run progress: 23.90% complete, ETA 07:28:28
# Fork: 1 of 3
# Warmup Iteration   1: 18568034.214 ns/op
# Warmup Iteration   2: 5031766.916 ns/op
# Warmup Iteration   3: 5684829.074 ns/op
Iteration   1: 3274406.553 ns/op
Iteration   2: 4265857.169 ns/op
Iteration   3: 6255864.079 ns/op
Iteration   4: 3858670.816 ns/op
Iteration   5: 5429396.531 ns/op

# Run progress: 23.92% complete, ETA 07:28:21
# Fork: 2 of 3
# Warmup Iteration   1: 73956175.643 ns/op
# Warmup Iteration   2: 58382696.722 ns/op
# Warmup Iteration   3: 43725345.500 ns/op
Iteration   1: 48437861.095 ns/op
Iteration   2: 42666190.000 ns/op
Iteration   3: 10380621.990 ns/op
Iteration   4: 3980846.510 ns/op
Iteration   5: 6979852.612 ns/op

# Run progress: 23.95% complete, ETA 07:28:13
# Fork: 3 of 3
# Warmup Iteration   1: 5173552.564 ns/op
# Warmup Iteration   2: 5871067.826 ns/op
# Warmup Iteration   3: 5647346.917 ns/op
Iteration   1: 4823748.087 ns/op
Iteration   2: 7277209.532 ns/op
Iteration   3: 3554437.937 ns/op
Iteration   4: 3661184.025 ns/op
Iteration   5: 15980973.077 ns/op


Result "kotlin_benchmarks.array.fill.InlineOpt.Ref_to_Ref_as_Ref_arrayfillinst":
  11388474.668 ±(99.9%) 15289467.053 ns/op [Average]
  (min, avg, max) = (3274406.553, 11388474.668, 48437861.095), stdev = 14301776.969
  CI (99.9%): [≈ 0, 26677941.721] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.InlineOpt.Ref_to_Ref_as_Ref_arrayfillstat
# Parameters: (size = 100)

# Run progress: 23.97% complete, ETA 07:28:05
# Fork: 1 of 3
# Warmup Iteration   1: 224.689 ns/op
# Warmup Iteration   2: 191.222 ns/op
# Warmup Iteration   3: 258.050 ns/op
Iteration   1: 172.666 ns/op
Iteration   2: 193.601 ns/op
Iteration   3: 224.758 ns/op
Iteration   4: 191.740 ns/op
Iteration   5: 173.207 ns/op

# Run progress: 24.00% complete, ETA 07:27:56
# Fork: 2 of 3
# Warmup Iteration   1: 169.314 ns/op
# Warmup Iteration   2: 161.968 ns/op
# Warmup Iteration   3: 165.632 ns/op
Iteration   1: 166.077 ns/op
Iteration   2: 158.064 ns/op
Iteration   3: 177.262 ns/op
Iteration   4: 191.990 ns/op
Iteration   5: 167.326 ns/op

# Run progress: 24.02% complete, ETA 07:27:48
# Fork: 3 of 3
# Warmup Iteration   1: 225.035 ns/op
# Warmup Iteration   2: 195.705 ns/op
# Warmup Iteration   3: 201.739 ns/op
Iteration   1: 218.544 ns/op
Iteration   2: 181.287 ns/op
Iteration   3: 177.517 ns/op
Iteration   4: 163.689 ns/op
Iteration   5: 158.175 ns/op


Result "kotlin_benchmarks.array.fill.InlineOpt.Ref_to_Ref_as_Ref_arrayfillstat":
  181.060 ±(99.9%) 21.442 ns/op [Average]
  (min, avg, max) = (158.064, 181.060, 224.758), stdev = 20.057
  CI (99.9%): [159.618, 202.502] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.InlineOpt.Ref_to_Ref_as_Ref_arrayfillstat
# Parameters: (size = 1000000)

# Run progress: 24.04% complete, ETA 07:27:39
# Fork: 1 of 3
# Warmup Iteration   1: 5186846.222 ns/op
# Warmup Iteration   2: 9169573.198 ns/op
# Warmup Iteration   3: 4104791.837 ns/op
Iteration   1: 3824088.068 ns/op
Iteration   2: 7712326.969 ns/op
Iteration   3: 70054152.800 ns/op
Iteration   4: 61556463.235 ns/op
Iteration   5: 53306037.500 ns/op

# Run progress: 24.07% complete, ETA 07:27:31
# Fork: 2 of 3
# Warmup Iteration   1: 58026784.722 ns/op
# Warmup Iteration   2: 40240618.577 ns/op
# Warmup Iteration   3: 63870598.938 ns/op
Iteration   1: 61014046.588 ns/op
Iteration   2: 58183471.526 ns/op
Iteration   3: 32323332.031 ns/op
Iteration   4: 64225411.500 ns/op
Iteration   5: 10456760.854 ns/op

# Run progress: 24.09% complete, ETA 07:27:24
# Fork: 3 of 3
# Warmup Iteration   1: 3373610.649 ns/op
# Warmup Iteration   2: 4596228.261 ns/op
# Warmup Iteration   3: 4939313.314 ns/op
Iteration   1: 6506261.091 ns/op
Iteration   2: 3614401.680 ns/op
Iteration   3: 6285640.284 ns/op
Iteration   4: 57442631.944 ns/op
Iteration   5: 64921975.471 ns/op


Result "kotlin_benchmarks.array.fill.InlineOpt.Ref_to_Ref_as_Ref_arrayfillstat":
  37428466.770 ±(99.9%) 29410365.641 ns/op [Average]
  (min, avg, max) = (3614401.680, 37428466.770, 70054152.800), stdev = 27510474.271
  CI (99.9%): [8018101.128, 66838832.411] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.InlineOpt.Ref_to_Ref_as_Ref_fillinst
# Parameters: (size = 100)

# Run progress: 24.12% complete, ETA 07:27:16
# Fork: 1 of 3
# Warmup Iteration   1: 196.368 ns/op
# Warmup Iteration   2: 201.674 ns/op
# Warmup Iteration   3: 222.815 ns/op
Iteration   1: 201.400 ns/op
Iteration   2: 181.971 ns/op
Iteration   3: 203.268 ns/op
Iteration   4: 179.571 ns/op
Iteration   5: 189.168 ns/op

# Run progress: 24.14% complete, ETA 07:27:08
# Fork: 2 of 3
# Warmup Iteration   1: 168.625 ns/op
# Warmup Iteration   2: 169.460 ns/op
# Warmup Iteration   3: 176.550 ns/op
Iteration   1: 178.126 ns/op
Iteration   2: 168.740 ns/op
Iteration   3: 171.098 ns/op
Iteration   4: 198.142 ns/op
Iteration   5: 210.721 ns/op

# Run progress: 24.17% complete, ETA 07:26:59
# Fork: 3 of 3
# Warmup Iteration   1: 208.836 ns/op
# Warmup Iteration   2: 210.305 ns/op
# Warmup Iteration   3: 197.754 ns/op
Iteration   1: 201.548 ns/op
Iteration   2: 193.390 ns/op
Iteration   3: 203.037 ns/op
Iteration   4: 180.975 ns/op
Iteration   5: 169.559 ns/op


Result "kotlin_benchmarks.array.fill.InlineOpt.Ref_to_Ref_as_Ref_fillinst":
  188.714 ±(99.9%) 14.888 ns/op [Average]
  (min, avg, max) = (168.740, 188.714, 210.721), stdev = 13.926
  CI (99.9%): [173.826, 203.602] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.InlineOpt.Ref_to_Ref_as_Ref_fillinst
# Parameters: (size = 1000000)

# Run progress: 24.19% complete, ETA 07:26:51
# Fork: 1 of 3
# Warmup Iteration   1: 4573808.258 ns/op
# Warmup Iteration   2: 5248042.099 ns/op
# Warmup Iteration   3: 12396169.483 ns/op
Iteration   1: 4940679.534 ns/op
Iteration   2: 4257453.764 ns/op
Iteration   3: 7415123.214 ns/op
Iteration   4: 59669830.882 ns/op
Iteration   5: 57001048.611 ns/op

# Run progress: 24.22% complete, ETA 07:26:43
# Fork: 2 of 3
# Warmup Iteration   1: 49707066.273 ns/op
# Warmup Iteration   2: 6662973.232 ns/op
# Warmup Iteration   3: 4044558.233 ns/op
Iteration   1: 11481192.281 ns/op
Iteration   2: 76711372.071 ns/op
Iteration   3: 50787729.150 ns/op
Iteration   4: 4619794.725 ns/op
Iteration   5: 3036072.853 ns/op

# Run progress: 24.24% complete, ETA 07:26:36
# Fork: 3 of 3
# Warmup Iteration   1: 7841871.124 ns/op
# Warmup Iteration   2: 6257469.648 ns/op
# Warmup Iteration   3: 9406686.364 ns/op
Iteration   1: 57154162.000 ns/op
Iteration   2: 57291969.889 ns/op
Iteration   3: 57720263.889 ns/op
Iteration   4: 54333793.842 ns/op
Iteration   5: 48328603.190 ns/op


Result "kotlin_benchmarks.array.fill.InlineOpt.Ref_to_Ref_as_Ref_fillinst":
  36983272.660 ±(99.9%) 28835647.758 ns/op [Average]
  (min, avg, max) = (3036072.853, 36983272.660, 76711372.071), stdev = 26972882.806
  CI (99.9%): [8147624.902, 65818920.417] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.InlineOpt.Ref_to_Ref_as_Ref_fillstat
# Parameters: (size = 100)

# Run progress: 24.26% complete, ETA 07:26:28
# Fork: 1 of 3
# Warmup Iteration   1: 180.096 ns/op
# Warmup Iteration   2: 149.826 ns/op
# Warmup Iteration   3: 205.583 ns/op
Iteration   1: 248.261 ns/op
Iteration   2: 270.018 ns/op
Iteration   3: 179.748 ns/op
Iteration   4: 179.364 ns/op
Iteration   5: 183.714 ns/op

# Run progress: 24.29% complete, ETA 07:26:19
# Fork: 2 of 3
# Warmup Iteration   1: 165.750 ns/op
# Warmup Iteration   2: 172.765 ns/op
# Warmup Iteration   3: 162.389 ns/op
Iteration   1: 168.947 ns/op
Iteration   2: 190.436 ns/op
Iteration   3: 190.470 ns/op
Iteration   4: 189.924 ns/op
Iteration   5: 189.846 ns/op

# Run progress: 24.31% complete, ETA 07:26:11
# Fork: 3 of 3
# Warmup Iteration   1: 200.256 ns/op
# Warmup Iteration   2: 197.588 ns/op
# Warmup Iteration   3: 186.518 ns/op
Iteration   1: 172.710 ns/op
Iteration   2: 171.872 ns/op
Iteration   3: 163.274 ns/op
Iteration   4: 168.586 ns/op
Iteration   5: 170.661 ns/op


Result "kotlin_benchmarks.array.fill.InlineOpt.Ref_to_Ref_as_Ref_fillstat":
  189.189 ±(99.9%) 32.152 ns/op [Average]
  (min, avg, max) = (163.274, 189.189, 270.018), stdev = 30.075
  CI (99.9%): [157.037, 221.341] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.InlineOpt.Ref_to_Ref_as_Ref_fillstat
# Parameters: (size = 1000000)

# Run progress: 24.34% complete, ETA 07:26:03
# Fork: 1 of 3
# Warmup Iteration   1: 5259737.630 ns/op
# Warmup Iteration   2: 5165890.306 ns/op
# Warmup Iteration   3: 9429485.982 ns/op
Iteration   1: 60803553.882 ns/op
Iteration   2: 48480303.571 ns/op
Iteration   3: 52065258.350 ns/op
Iteration   4: 60058594.889 ns/op
Iteration   5: 21869348.739 ns/op

# Run progress: 24.36% complete, ETA 07:25:55
# Fork: 2 of 3
# Warmup Iteration   1: 4625807.151 ns/op
# Warmup Iteration   2: 21250339.160 ns/op
# Warmup Iteration   3: 54513100.895 ns/op
Iteration   1: 45865644.913 ns/op
Iteration   2: 18767709.093 ns/op
Iteration   3: 2969612.675 ns/op
Iteration   4: 2916159.058 ns/op
Iteration   5: 3813531.169 ns/op

# Run progress: 24.39% complete, ETA 07:25:48
# Fork: 3 of 3
# Warmup Iteration   1: 5880476.988 ns/op
# Warmup Iteration   2: 5005409.861 ns/op
# Warmup Iteration   3: 4780743.276 ns/op
Iteration   1: 13024245.718 ns/op
Iteration   2: 30686537.879 ns/op
Iteration   3: 55685903.474 ns/op
Iteration   4: 50905881.250 ns/op
Iteration   5: 6174504.317 ns/op


Result "kotlin_benchmarks.array.fill.InlineOpt.Ref_to_Ref_as_Ref_fillstat":
  31605785.932 ±(99.9%) 24225689.441 ns/op [Average]
  (min, avg, max) = (2916159.058, 31605785.932, 60803553.882), stdev = 22660724.936
  CI (99.9%): [7380096.491, 55831475.373] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.InlineOpt.Ref_to_Val_as_Val_arrayfillinst
# Parameters: (size = 100)

# Run progress: 24.41% complete, ETA 07:25:39
# Fork: 1 of 3
# Warmup Iteration   1: 190.190 ns/op
# Warmup Iteration   2: 198.239 ns/op
# Warmup Iteration   3: 192.183 ns/op
Iteration   1: 191.512 ns/op
Iteration   2: 167.439 ns/op
Iteration   3: 159.640 ns/op
Iteration   4: 160.752 ns/op
Iteration   5: 161.102 ns/op

# Run progress: 24.44% complete, ETA 07:25:31
# Fork: 2 of 3
# Warmup Iteration   1: 176.869 ns/op
# Warmup Iteration   2: 163.487 ns/op
# Warmup Iteration   3: 172.572 ns/op
Iteration   1: 188.330 ns/op
Iteration   2: 193.463 ns/op
Iteration   3: 190.805 ns/op
Iteration   4: 175.800 ns/op
Iteration   5: 214.269 ns/op

# Run progress: 24.46% complete, ETA 07:25:23
# Fork: 3 of 3
# Warmup Iteration   1: 200.777 ns/op
# Warmup Iteration   2: 184.011 ns/op
# Warmup Iteration   3: 173.630 ns/op
Iteration   1: 167.302 ns/op
Iteration   2: 170.582 ns/op
Iteration   3: 167.111 ns/op
Iteration   4: 164.733 ns/op
Iteration   5: 163.059 ns/op


Result "kotlin_benchmarks.array.fill.InlineOpt.Ref_to_Val_as_Val_arrayfillinst":
  175.726 ±(99.9%) 17.271 ns/op [Average]
  (min, avg, max) = (159.640, 175.726, 214.269), stdev = 16.156
  CI (99.9%): [158.455, 192.998] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.InlineOpt.Ref_to_Val_as_Val_arrayfillinst
# Parameters: (size = 1000000)

# Run progress: 24.49% complete, ETA 07:25:14
# Fork: 1 of 3
# Warmup Iteration   1: 4645772.078 ns/op
# Warmup Iteration   2: 4896370.951 ns/op
# Warmup Iteration   3: 16813132.387 ns/op
Iteration   1: 39009015.407 ns/op
Iteration   2: 80804891.000 ns/op
Iteration   3: 57505569.444 ns/op
Iteration   4: 54386907.895 ns/op
Iteration   5: 66083614.625 ns/op

# Run progress: 24.51% complete, ETA 07:25:07
# Fork: 2 of 3
# Warmup Iteration   1: 5220449.742 ns/op
# Warmup Iteration   2: 3415389.264 ns/op
# Warmup Iteration   3: 3370314.443 ns/op
Iteration   1: 4064821.787 ns/op
Iteration   2: 4600150.828 ns/op
Iteration   3: 4442054.645 ns/op
Iteration   4: 8345601.145 ns/op
Iteration   5: 6020745.240 ns/op

# Run progress: 24.53% complete, ETA 07:24:59
# Fork: 3 of 3
# Warmup Iteration   1: 49289617.095 ns/op
# Warmup Iteration   2: 58483421.278 ns/op
# Warmup Iteration   3: 59049310.167 ns/op
Iteration   1: 5214006.015 ns/op
Iteration   2: 4163213.153 ns/op
Iteration   3: 9583272.769 ns/op
Iteration   4: 58266581.000 ns/op
Iteration   5: 52398747.900 ns/op


Result "kotlin_benchmarks.array.fill.InlineOpt.Ref_to_Val_as_Val_arrayfillinst":
  30325946.190 ±(99.9%) 30410371.987 ns/op [Average]
  (min, avg, max) = (4064821.787, 30325946.190, 80804891.000), stdev = 28445880.827
  CI (99.9%): [≈ 0, 60736318.177] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.InlineOpt.Ref_to_Val_as_Val_arrayfillstat
# Parameters: (size = 100)

# Run progress: 24.56% complete, ETA 07:24:51
# Fork: 1 of 3
# Warmup Iteration   1: 161.483 ns/op
# Warmup Iteration   2: 181.035 ns/op
# Warmup Iteration   3: 163.559 ns/op
Iteration   1: 168.726 ns/op
Iteration   2: 160.591 ns/op
Iteration   3: 161.763 ns/op
Iteration   4: 178.513 ns/op
Iteration   5: 182.391 ns/op

# Run progress: 24.58% complete, ETA 07:24:42
# Fork: 2 of 3
# Warmup Iteration   1: 198.084 ns/op
# Warmup Iteration   2: 177.323 ns/op
# Warmup Iteration   3: 187.838 ns/op
Iteration   1: 191.228 ns/op
Iteration   2: 188.304 ns/op
Iteration   3: 192.111 ns/op
Iteration   4: 191.436 ns/op
Iteration   5: 170.416 ns/op

# Run progress: 24.61% complete, ETA 07:24:34
# Fork: 3 of 3
# Warmup Iteration   1: 173.364 ns/op
# Warmup Iteration   2: 161.509 ns/op
# Warmup Iteration   3: 170.221 ns/op
Iteration   1: 161.353 ns/op
Iteration   2: 161.059 ns/op
Iteration   3: 184.579 ns/op
Iteration   4: 191.444 ns/op
Iteration   5: 191.294 ns/op


Result "kotlin_benchmarks.array.fill.InlineOpt.Ref_to_Val_as_Val_arrayfillstat":
  178.347 ±(99.9%) 13.861 ns/op [Average]
  (min, avg, max) = (160.591, 178.347, 192.111), stdev = 12.966
  CI (99.9%): [164.486, 192.209] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.InlineOpt.Ref_to_Val_as_Val_arrayfillstat
# Parameters: (size = 1000000)

# Run progress: 24.63% complete, ETA 07:24:26
# Fork: 1 of 3
# Warmup Iteration   1: 5321411.021 ns/op
# Warmup Iteration   2: 21042159.729 ns/op
# Warmup Iteration   3: 23030182.750 ns/op
Iteration   1: 31626003.906 ns/op
Iteration   2: 34272827.767 ns/op
Iteration   3: 63532007.813 ns/op
Iteration   4: 3770002.179 ns/op
Iteration   5: 3872287.851 ns/op

# Run progress: 24.66% complete, ETA 07:24:18
# Fork: 2 of 3
# Warmup Iteration   1: 3725808.734 ns/op
# Warmup Iteration   2: 4019932.104 ns/op
# Warmup Iteration   3: 3584123.221 ns/op
Iteration   1: 3930865.686 ns/op
Iteration   2: 9874874.224 ns/op
Iteration   3: 51334612.500 ns/op
Iteration   4: 56892057.889 ns/op
Iteration   5: 40388288.462 ns/op

# Run progress: 24.68% complete, ETA 07:24:10
# Fork: 3 of 3
# Warmup Iteration   1: 14684154.594 ns/op
# Warmup Iteration   2: 4774320.038 ns/op
# Warmup Iteration   3: 4376524.961 ns/op
Iteration   1: 22529948.596 ns/op
Iteration   2: 44643335.130 ns/op
Iteration   3: 5535764.192 ns/op
Iteration   4: 3158256.160 ns/op
Iteration   5: 3620230.665 ns/op


Result "kotlin_benchmarks.array.fill.InlineOpt.Ref_to_Val_as_Val_arrayfillstat":
  25265424.201 ±(99.9%) 23622729.945 ns/op [Average]
  (min, avg, max) = (3158256.160, 25265424.201, 63532007.813), stdev = 22096716.249
  CI (99.9%): [1642694.256, 48888154.147] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.InlineOpt.Ref_to_Val_as_Val_fillinst
# Parameters: (size = 100)

# Run progress: 24.71% complete, ETA 07:24:02
# Fork: 1 of 3
# Warmup Iteration   1: 164.299 ns/op
# Warmup Iteration   2: 168.953 ns/op
# Warmup Iteration   3: 172.344 ns/op
Iteration   1: 191.064 ns/op
Iteration   2: 202.358 ns/op
Iteration   3: 202.156 ns/op
Iteration   4: 253.235 ns/op
Iteration   5: 212.125 ns/op

# Run progress: 24.73% complete, ETA 07:23:53
# Fork: 2 of 3
# Warmup Iteration   1: 207.740 ns/op
# Warmup Iteration   2: 196.759 ns/op
# Warmup Iteration   3: 200.476 ns/op
Iteration   1: 190.217 ns/op
Iteration   2: 172.294 ns/op
Iteration   3: 170.549 ns/op
Iteration   4: 167.079 ns/op
Iteration   5: 169.148 ns/op

# Run progress: 24.75% complete, ETA 07:23:45
# Fork: 3 of 3
# Warmup Iteration   1: 178.618 ns/op
# Warmup Iteration   2: 178.067 ns/op
# Warmup Iteration   3: 174.746 ns/op
Iteration   1: 203.939 ns/op
Iteration   2: 190.924 ns/op
Iteration   3: 200.872 ns/op
Iteration   4: 203.754 ns/op
Iteration   5: 218.442 ns/op


Result "kotlin_benchmarks.array.fill.InlineOpt.Ref_to_Val_as_Val_fillinst":
  196.544 ±(99.9%) 24.094 ns/op [Average]
  (min, avg, max) = (167.079, 196.544, 253.235), stdev = 22.537
  CI (99.9%): [172.450, 220.637] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.InlineOpt.Ref_to_Val_as_Val_fillinst
# Parameters: (size = 1000000)

# Run progress: 24.78% complete, ETA 07:23:37
# Fork: 1 of 3
# Warmup Iteration   1: 24040077.636 ns/op
# Warmup Iteration   2: 40125166.640 ns/op
# Warmup Iteration   3: 33540670.833 ns/op
Iteration   1: 7391356.752 ns/op
Iteration   2: 5130421.954 ns/op
Iteration   3: 4208778.594 ns/op
Iteration   4: 6684449.781 ns/op
Iteration   5: 6984744.507 ns/op

# Run progress: 24.80% complete, ETA 07:23:29
# Fork: 2 of 3
# Warmup Iteration   1: 5689537.475 ns/op
# Warmup Iteration   2: 8185960.672 ns/op
# Warmup Iteration   3: 22590945.378 ns/op
Iteration   1: 16811398.617 ns/op
Iteration   2: 8865781.070 ns/op
Iteration   3: 8822909.052 ns/op
Iteration   4: 4402319.204 ns/op
Iteration   5: 4084980.016 ns/op

# Run progress: 24.83% complete, ETA 07:23:21
# Fork: 3 of 3
# Warmup Iteration   1: 8175984.756 ns/op
# Warmup Iteration   2: 8430923.617 ns/op
# Warmup Iteration   3: 7532881.481 ns/op
Iteration   1: 10932158.511 ns/op
Iteration   2: 11028755.891 ns/op
Iteration   3: 11764925.384 ns/op
Iteration   4: 9816122.573 ns/op
Iteration   5: 8931415.939 ns/op


Result "kotlin_benchmarks.array.fill.InlineOpt.Ref_to_Val_as_Val_fillinst":
  8390701.190 ±(99.9%) 3691186.344 ns/op [Average]
  (min, avg, max) = (4084980.016, 8390701.190, 16811398.617), stdev = 3452737.997
  CI (99.9%): [4699514.846, 12081887.534] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.InlineOpt.Ref_to_Val_as_Val_fillstat
# Parameters: (size = 100)

# Run progress: 24.85% complete, ETA 07:23:13
# Fork: 1 of 3
# Warmup Iteration   1: 194.611 ns/op
# Warmup Iteration   2: 164.373 ns/op
# Warmup Iteration   3: 144.233 ns/op
Iteration   1: 173.477 ns/op
Iteration   2: 211.474 ns/op
Iteration   3: 220.887 ns/op
Iteration   4: 256.718 ns/op
Iteration   5: 181.650 ns/op

# Run progress: 24.88% complete, ETA 07:23:04
# Fork: 2 of 3
# Warmup Iteration   1: 163.280 ns/op
# Warmup Iteration   2: 190.322 ns/op
# Warmup Iteration   3: 186.522 ns/op
Iteration   1: 180.144 ns/op
Iteration   2: 167.528 ns/op
Iteration   3: 189.905 ns/op
Iteration   4: 185.567 ns/op
Iteration   5: 140.238 ns/op

# Run progress: 24.90% complete, ETA 07:22:56
# Fork: 3 of 3
# Warmup Iteration   1: 160.707 ns/op
# Warmup Iteration   2: 181.267 ns/op
# Warmup Iteration   3: 173.972 ns/op
Iteration   1: 182.894 ns/op
Iteration   2: 192.847 ns/op
Iteration   3: 156.421 ns/op
Iteration   4: 182.258 ns/op
Iteration   5: 187.767 ns/op


Result "kotlin_benchmarks.array.fill.InlineOpt.Ref_to_Val_as_Val_fillstat":
  187.318 ±(99.9%) 29.208 ns/op [Average]
  (min, avg, max) = (140.238, 187.318, 256.718), stdev = 27.321
  CI (99.9%): [158.110, 216.527] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.InlineOpt.Ref_to_Val_as_Val_fillstat
# Parameters: (size = 1000000)

# Run progress: 24.93% complete, ETA 07:22:47
# Fork: 1 of 3
# Warmup Iteration   1: 12452566.358 ns/op
# Warmup Iteration   2: 11479067.239 ns/op
# Warmup Iteration   3: 10310865.653 ns/op
Iteration   1: 10059624.580 ns/op
Iteration   2: 10042033.832 ns/op
Iteration   3: 10295804.847 ns/op
Iteration   4: 9625124.200 ns/op
Iteration   5: 9487332.160 ns/op

# Run progress: 24.95% complete, ETA 07:22:39
# Fork: 2 of 3
# Warmup Iteration   1: 45455880.435 ns/op
# Warmup Iteration   2: 57159122.842 ns/op
# Warmup Iteration   3: 32505646.485 ns/op
Iteration   1: 57477921.278 ns/op
Iteration   2: 50651245.800 ns/op
Iteration   3: 48936452.381 ns/op
Iteration   4: 45527809.783 ns/op
Iteration   5: 54096934.211 ns/op

# Run progress: 24.98% complete, ETA 07:22:38
# Fork: 3 of 3
# Warmup Iteration   1: 43194828.125 ns/op
# Warmup Iteration   2: 49046765.857 ns/op
# Warmup Iteration   3: 51269631.250 ns/op
Iteration   1: 46995100.364 ns/op
Iteration   2: 42807375.000 ns/op
Iteration   3: 54476258.789 ns/op
Iteration   4: 46990956.455 ns/op
Iteration   5: 53436574.526 ns/op


Result "kotlin_benchmarks.array.fill.InlineOpt.Ref_to_Val_as_Val_fillstat":
  36727103.214 ±(99.9%) 21367998.957 ns/op [Average]
  (min, avg, max) = (9487332.160, 36727103.214, 57477921.278), stdev = 19987639.483
  CI (99.9%): [15359104.257, 58095102.170] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.InlineOpt.Val_to_Ref_as_Ref_arrayfillinst
# Parameters: (size = 100)

# Run progress: 25.00% complete, ETA 07:22:29
# Fork: 1 of 3
# Warmup Iteration   1: 71.986 ns/op
# Warmup Iteration   2: 71.990 ns/op
# Warmup Iteration   3: 69.660 ns/op
Iteration   1: 69.624 ns/op
Iteration   2: 69.767 ns/op
Iteration   3: 69.889 ns/op
Iteration   4: 70.348 ns/op
Iteration   5: 71.090 ns/op

# Run progress: 25.02% complete, ETA 07:22:20
# Fork: 2 of 3
# Warmup Iteration   1: 71.551 ns/op
# Warmup Iteration   2: 72.029 ns/op
# Warmup Iteration   3: 70.718 ns/op
Iteration   1: 70.798 ns/op
Iteration   2: 71.269 ns/op
Iteration   3: 71.798 ns/op
Iteration   4: 70.982 ns/op
Iteration   5: 70.852 ns/op

# Run progress: 25.05% complete, ETA 07:22:10
# Fork: 3 of 3
# Warmup Iteration   1: 71.855 ns/op
# Warmup Iteration   2: 71.414 ns/op
# Warmup Iteration   3: 69.930 ns/op
Iteration   1: 69.638 ns/op
Iteration   2: 69.615 ns/op
Iteration   3: 70.931 ns/op
Iteration   4: 70.807 ns/op
Iteration   5: 70.468 ns/op


Result "kotlin_benchmarks.array.fill.InlineOpt.Val_to_Ref_as_Ref_arrayfillinst":
  70.525 ±(99.9%) 0.732 ns/op [Average]
  (min, avg, max) = (69.615, 70.525, 71.798), stdev = 0.685
  CI (99.9%): [69.793, 71.257] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.InlineOpt.Val_to_Ref_as_Ref_arrayfillinst
# Parameters: (size = 1000000)

# Run progress: 25.07% complete, ETA 07:22:00
# Fork: 1 of 3
# Warmup Iteration   1: 40340336.538 ns/op
# Warmup Iteration   2: 34932837.655 ns/op
# Warmup Iteration   3: 53191491.211 ns/op
Iteration   1: 31548386.719 ns/op
Iteration   2: 20233886.431 ns/op
Iteration   3: 42274201.680 ns/op
Iteration   4: 46154077.636 ns/op
Iteration   5: 33609191.667 ns/op

# Run progress: 25.10% complete, ETA 07:21:51
# Fork: 2 of 3
# Warmup Iteration   1: 23945141.857 ns/op
# Warmup Iteration   2: 40697716.680 ns/op
# Warmup Iteration   3: 47236452.636 ns/op
Iteration   1: 18448186.750 ns/op
Iteration   2: 38710061.741 ns/op
Iteration   3: 32609061.839 ns/op
Iteration   4: 49370299.619 ns/op
Iteration   5: 44668735.522 ns/op

# Run progress: 25.12% complete, ETA 07:21:42
# Fork: 3 of 3
# Warmup Iteration   1: 41729720.500 ns/op
# Warmup Iteration   2: 47033240.545 ns/op
# Warmup Iteration   3: 56203335.526 ns/op
Iteration   1: 52555543.750 ns/op
Iteration   2: 32919966.419 ns/op
Iteration   3: 24911733.732 ns/op
Iteration   4: 32629179.688 ns/op
Iteration   5: 26536532.051 ns/op


Result "kotlin_benchmarks.array.fill.InlineOpt.Val_to_Ref_as_Ref_arrayfillinst":
  35145269.683 ±(99.9%) 11043226.081 ns/op [Average]
  (min, avg, max) = (18448186.750, 35145269.683, 52555543.750), stdev = 10329840.528
  CI (99.9%): [24102043.602, 46188495.764] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.InlineOpt.Val_to_Ref_as_Ref_arrayfillstat
# Parameters: (size = 100)

# Run progress: 25.15% complete, ETA 07:21:32
# Fork: 1 of 3
# Warmup Iteration   1: 70.188 ns/op
# Warmup Iteration   2: 71.620 ns/op
# Warmup Iteration   3: 69.527 ns/op
Iteration   1: 70.491 ns/op
Iteration   2: 70.530 ns/op
Iteration   3: 70.496 ns/op
Iteration   4: 70.393 ns/op
Iteration   5: 70.253 ns/op

# Run progress: 25.17% complete, ETA 07:21:23
# Fork: 2 of 3
# Warmup Iteration   1: 70.431 ns/op
# Warmup Iteration   2: 71.352 ns/op
# Warmup Iteration   3: 70.890 ns/op
Iteration   1: 70.118 ns/op
Iteration   2: 70.892 ns/op
Iteration   3: 69.776 ns/op
Iteration   4: 70.266 ns/op
Iteration   5: 69.862 ns/op

# Run progress: 25.20% complete, ETA 07:21:13
# Fork: 3 of 3
# Warmup Iteration   1: 69.753 ns/op
# Warmup Iteration   2: 71.151 ns/op
# Warmup Iteration   3: 69.239 ns/op
Iteration   1: 69.517 ns/op
Iteration   2: 69.566 ns/op
Iteration   3: 69.637 ns/op
Iteration   4: 70.260 ns/op
Iteration   5: 69.897 ns/op


Result "kotlin_benchmarks.array.fill.InlineOpt.Val_to_Ref_as_Ref_arrayfillstat":
  70.130 ±(99.9%) 0.435 ns/op [Average]
  (min, avg, max) = (69.517, 70.130, 70.892), stdev = 0.407
  CI (99.9%): [69.695, 70.565] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.InlineOpt.Val_to_Ref_as_Ref_arrayfillstat
# Parameters: (size = 1000000)

# Run progress: 25.22% complete, ETA 07:21:03
# Fork: 1 of 3
# Warmup Iteration   1: 34560406.933 ns/op
# Warmup Iteration   2: 35552468.414 ns/op
# Warmup Iteration   3: 36204962.786 ns/op
Iteration   1: 35247129.310 ns/op
Iteration   2: 32358225.281 ns/op
Iteration   3: 35334576.138 ns/op
Iteration   4: 32712849.452 ns/op
Iteration   5: 32599159.935 ns/op

# Run progress: 25.25% complete, ETA 07:20:54
# Fork: 2 of 3
# Warmup Iteration   1: 20579370.755 ns/op
# Warmup Iteration   2: 36671691.964 ns/op
# Warmup Iteration   3: 35727050.310 ns/op
Iteration   1: 37011285.714 ns/op
Iteration   2: 34907346.276 ns/op
Iteration   3: 38368983.037 ns/op
Iteration   4: 32137631.500 ns/op
Iteration   5: 36126895.821 ns/op

# Run progress: 25.27% complete, ETA 07:20:45
# Fork: 3 of 3
# Warmup Iteration   1: 36038867.571 ns/op
# Warmup Iteration   2: 33464031.967 ns/op
# Warmup Iteration   3: 20144229.569 ns/op
Iteration   1: 33313387.097 ns/op
Iteration   2: 19619177.096 ns/op
Iteration   3: 21497127.660 ns/op
Iteration   4: 16066235.444 ns/op
Iteration   5: 9640898.410 ns/op


Result "kotlin_benchmarks.array.fill.InlineOpt.Val_to_Ref_as_Ref_arrayfillstat":
  29796060.545 ±(99.9%) 9302813.987 ns/op [Average]
  (min, avg, max) = (9640898.410, 29796060.545, 38368983.037), stdev = 8701857.976
  CI (99.9%): [20493246.558, 39098874.532] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.InlineOpt.Val_to_Ref_as_Ref_fillinst
# Parameters: (size = 100)

# Run progress: 25.29% complete, ETA 07:20:35
# Fork: 1 of 3
# Warmup Iteration   1: 73.499 ns/op
# Warmup Iteration   2: 73.509 ns/op
# Warmup Iteration   3: 75.405 ns/op
Iteration   1: 74.331 ns/op
Iteration   2: 73.655 ns/op
Iteration   3: 74.049 ns/op
Iteration   4: 74.162 ns/op
Iteration   5: 74.873 ns/op

# Run progress: 25.32% complete, ETA 07:20:26
# Fork: 2 of 3
# Warmup Iteration   1: 74.985 ns/op
# Warmup Iteration   2: 74.772 ns/op
# Warmup Iteration   3: 74.378 ns/op
Iteration   1: 74.770 ns/op
Iteration   2: 74.208 ns/op
Iteration   3: 73.473 ns/op
Iteration   4: 73.446 ns/op
Iteration   5: 73.360 ns/op

# Run progress: 25.34% complete, ETA 07:20:16
# Fork: 3 of 3
# Warmup Iteration   1: 73.357 ns/op
# Warmup Iteration   2: 73.180 ns/op
# Warmup Iteration   3: 74.445 ns/op
Iteration   1: 74.593 ns/op
Iteration   2: 74.438 ns/op
Iteration   3: 74.498 ns/op
Iteration   4: 74.256 ns/op
Iteration   5: 74.521 ns/op


Result "kotlin_benchmarks.array.fill.InlineOpt.Val_to_Ref_as_Ref_fillinst":
  74.176 ±(99.9%) 0.520 ns/op [Average]
  (min, avg, max) = (73.360, 74.176, 74.873), stdev = 0.487
  CI (99.9%): [73.655, 74.696] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.InlineOpt.Val_to_Ref_as_Ref_fillinst
# Parameters: (size = 1000000)

# Run progress: 25.37% complete, ETA 07:20:06
# Fork: 1 of 3
# Warmup Iteration   1: 34063851.367 ns/op
# Warmup Iteration   2: 38589057.074 ns/op
# Warmup Iteration   3: 35946534.483 ns/op
Iteration   1: 30180786.765 ns/op
Iteration   2: 37416146.593 ns/op
Iteration   3: 34539348.129 ns/op
Iteration   4: 36498680.071 ns/op
Iteration   5: 32288916.656 ns/op

# Run progress: 25.39% complete, ETA 07:19:57
# Fork: 2 of 3
# Warmup Iteration   1: 33653412.613 ns/op
# Warmup Iteration   2: 37143486.607 ns/op
# Warmup Iteration   3: 29544925.000 ns/op
Iteration   1: 37893171.296 ns/op
Iteration   2: 39909128.192 ns/op
Iteration   3: 35125288.793 ns/op
Iteration   4: 35999311.036 ns/op
Iteration   5: 32520592.742 ns/op

# Run progress: 25.42% complete, ETA 07:19:48
# Fork: 3 of 3
# Warmup Iteration   1: 27763961.730 ns/op
# Warmup Iteration   2: 34246472.233 ns/op
# Warmup Iteration   3: 33594888.452 ns/op
Iteration   1: 37229855.679 ns/op
Iteration   2: 37674061.741 ns/op
Iteration   3: 29850566.176 ns/op
Iteration   4: 34453122.233 ns/op
Iteration   5: 37371625.000 ns/op


Result "kotlin_benchmarks.array.fill.InlineOpt.Val_to_Ref_as_Ref_fillinst":
  35263373.407 ±(99.9%) 3156190.744 ns/op [Average]
  (min, avg, max) = (29850566.176, 35263373.407, 39909128.192), stdev = 2952302.780
  CI (99.9%): [32107182.663, 38419564.151] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.InlineOpt.Val_to_Ref_as_Ref_fillstat
# Parameters: (size = 100)

# Run progress: 25.44% complete, ETA 07:19:39
# Fork: 1 of 3
# Warmup Iteration   1: 70.285 ns/op
# Warmup Iteration   2: 71.288 ns/op
# Warmup Iteration   3: 70.643 ns/op
Iteration   1: 70.739 ns/op
Iteration   2: 70.499 ns/op
Iteration   3: 69.785 ns/op
Iteration   4: 70.107 ns/op
Iteration   5: 70.460 ns/op

# Run progress: 25.47% complete, ETA 07:19:29
# Fork: 2 of 3
# Warmup Iteration   1: 69.988 ns/op
# Warmup Iteration   2: 71.071 ns/op
# Warmup Iteration   3: 69.645 ns/op
Iteration   1: 69.666 ns/op
Iteration   2: 69.595 ns/op
Iteration   3: 69.470 ns/op
Iteration   4: 69.510 ns/op
Iteration   5: 69.792 ns/op

# Run progress: 25.49% complete, ETA 07:19:20
# Fork: 3 of 3
# Warmup Iteration   1: 70.692 ns/op
# Warmup Iteration   2: 71.438 ns/op
# Warmup Iteration   3: 69.853 ns/op
Iteration   1: 69.489 ns/op
Iteration   2: 69.491 ns/op
Iteration   3: 69.760 ns/op
Iteration   4: 69.563 ns/op
Iteration   5: 69.728 ns/op


Result "kotlin_benchmarks.array.fill.InlineOpt.Val_to_Ref_as_Ref_fillstat":
  69.844 ±(99.9%) 0.441 ns/op [Average]
  (min, avg, max) = (69.470, 69.844, 70.739), stdev = 0.412
  CI (99.9%): [69.403, 70.284] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.InlineOpt.Val_to_Ref_as_Ref_fillstat
# Parameters: (size = 1000000)

# Run progress: 25.51% complete, ETA 07:19:10
# Fork: 1 of 3
# Warmup Iteration   1: 31523444.031 ns/op
# Warmup Iteration   2: 37946481.481 ns/op
# Warmup Iteration   3: 37613516.357 ns/op
Iteration   1: 40405376.640 ns/op
Iteration   2: 35050387.500 ns/op
Iteration   3: 34884682.483 ns/op
Iteration   4: 36431608.643 ns/op
Iteration   5: 38964152.269 ns/op

# Run progress: 25.54% complete, ETA 07:19:01
# Fork: 2 of 3
# Warmup Iteration   1: 36938700.893 ns/op
# Warmup Iteration   2: 37489627.964 ns/op
# Warmup Iteration   3: 36109908.034 ns/op
Iteration   1: 37987699.074 ns/op
Iteration   2: 35446356.310 ns/op
Iteration   3: 36441255.929 ns/op
Iteration   4: 37501461.321 ns/op
Iteration   5: 30399454.647 ns/op

# Run progress: 25.56% complete, ETA 07:18:52
# Fork: 3 of 3
# Warmup Iteration   1: 37422804.000 ns/op
# Warmup Iteration   2: 38097172.852 ns/op
# Warmup Iteration   3: 35620566.667 ns/op
Iteration   1: 37700546.143 ns/op
Iteration   2: 37761709.852 ns/op
Iteration   3: 39100201.923 ns/op
Iteration   4: 41337708.360 ns/op
Iteration   5: 40949070.000 ns/op


Result "kotlin_benchmarks.array.fill.InlineOpt.Val_to_Ref_as_Ref_fillstat":
  37357444.740 ±(99.9%) 2990498.179 ns/op [Average]
  (min, avg, max) = (30399454.647, 37357444.740, 41337708.360), stdev = 2797313.852
  CI (99.9%): [34366946.561, 40347942.918] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.InlineOpt.Val_to_Val_as_Val_arrayfillinst
# Parameters: (size = 100)

# Run progress: 25.59% complete, ETA 07:18:43
# Fork: 1 of 3
# Warmup Iteration   1: 72.074 ns/op
# Warmup Iteration   2: 71.742 ns/op
# Warmup Iteration   3: 70.988 ns/op
Iteration   1: 71.416 ns/op
Iteration   2: 70.847 ns/op
Iteration   3: 70.898 ns/op
Iteration   4: 69.970 ns/op
Iteration   5: 70.015 ns/op

# Run progress: 25.61% complete, ETA 07:18:33
# Fork: 2 of 3
# Warmup Iteration   1: 71.640 ns/op
# Warmup Iteration   2: 71.399 ns/op
# Warmup Iteration   3: 69.879 ns/op
Iteration   1: 69.764 ns/op
Iteration   2: 71.270 ns/op
Iteration   3: 70.144 ns/op
Iteration   4: 70.113 ns/op
Iteration   5: 70.326 ns/op

# Run progress: 25.64% complete, ETA 07:18:24
# Fork: 3 of 3
# Warmup Iteration   1: 72.845 ns/op
# Warmup Iteration   2: 71.887 ns/op
# Warmup Iteration   3: 70.069 ns/op
Iteration   1: 69.988 ns/op
Iteration   2: 69.991 ns/op
Iteration   3: 69.715 ns/op
Iteration   4: 69.878 ns/op
Iteration   5: 69.757 ns/op


Result "kotlin_benchmarks.array.fill.InlineOpt.Val_to_Val_as_Val_arrayfillinst":
  70.273 ±(99.9%) 0.598 ns/op [Average]
  (min, avg, max) = (69.715, 70.273, 71.416), stdev = 0.559
  CI (99.9%): [69.675, 70.871] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.InlineOpt.Val_to_Val_as_Val_arrayfillinst
# Parameters: (size = 1000000)

# Run progress: 25.66% complete, ETA 07:18:14
# Fork: 1 of 3
# Warmup Iteration   1: 34599141.667 ns/op
# Warmup Iteration   2: 37893469.111 ns/op
# Warmup Iteration   3: 36157102.034 ns/op
Iteration   1: 37310694.964 ns/op
Iteration   2: 37753009.259 ns/op
Iteration   3: 33889784.700 ns/op
Iteration   4: 35861823.276 ns/op
Iteration   5: 36433495.536 ns/op

# Run progress: 25.69% complete, ETA 07:18:05
# Fork: 2 of 3
# Warmup Iteration   1: 37474625.000 ns/op
# Warmup Iteration   2: 39171004.808 ns/op
# Warmup Iteration   3: 32508110.688 ns/op
Iteration   1: 37718101.852 ns/op
Iteration   2: 35019209.793 ns/op
Iteration   3: 32184092.182 ns/op
Iteration   4: 36731040.179 ns/op
Iteration   5: 34301245.833 ns/op

# Run progress: 25.71% complete, ETA 07:17:56
# Fork: 3 of 3
# Warmup Iteration   1: 31104407.848 ns/op
# Warmup Iteration   2: 36338581.857 ns/op
# Warmup Iteration   3: 37382104.143 ns/op
Iteration   1: 36383810.345 ns/op
Iteration   2: 37095014.893 ns/op
Iteration   3: 37272148.148 ns/op
Iteration   4: 37832259.259 ns/op
Iteration   5: 36865696.429 ns/op


Result "kotlin_benchmarks.array.fill.InlineOpt.Val_to_Val_as_Val_arrayfillinst":
  36176761.776 ±(99.9%) 1760100.182 ns/op [Average]
  (min, avg, max) = (32184092.182, 36176761.776, 37832259.259), stdev = 1646398.802
  CI (99.9%): [34416661.595, 37936861.958] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.InlineOpt.Val_to_Val_as_Val_arrayfillstat
# Parameters: (size = 100)

# Run progress: 25.74% complete, ETA 07:17:47
# Fork: 1 of 3
# Warmup Iteration   1: 70.642 ns/op
# Warmup Iteration   2: 72.359 ns/op
# Warmup Iteration   3: 70.216 ns/op
Iteration   1: 69.576 ns/op
Iteration   2: 73.081 ns/op
Iteration   3: 69.683 ns/op
Iteration   4: 69.544 ns/op
Iteration   5: 69.625 ns/op

# Run progress: 25.76% complete, ETA 07:17:37
# Fork: 2 of 3
# Warmup Iteration   1: 70.396 ns/op
# Warmup Iteration   2: 71.608 ns/op
# Warmup Iteration   3: 69.593 ns/op
Iteration   1: 69.473 ns/op
Iteration   2: 69.704 ns/op
Iteration   3: 70.493 ns/op
Iteration   4: 70.435 ns/op
Iteration   5: 71.217 ns/op

# Run progress: 25.78% complete, ETA 07:17:28
# Fork: 3 of 3
# Warmup Iteration   1: 71.463 ns/op
# Warmup Iteration   2: 72.102 ns/op
# Warmup Iteration   3: 69.555 ns/op
Iteration   1: 69.501 ns/op
Iteration   2: 69.652 ns/op
Iteration   3: 69.675 ns/op
Iteration   4: 69.739 ns/op
Iteration   5: 69.615 ns/op


Result "kotlin_benchmarks.array.fill.InlineOpt.Val_to_Val_as_Val_arrayfillstat":
  70.068 ±(99.9%) 1.031 ns/op [Average]
  (min, avg, max) = (69.473, 70.068, 73.081), stdev = 0.964
  CI (99.9%): [69.037, 71.099] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.InlineOpt.Val_to_Val_as_Val_arrayfillstat
# Parameters: (size = 1000000)

# Run progress: 25.81% complete, ETA 07:17:18
# Fork: 1 of 3
# Warmup Iteration   1: 36004145.103 ns/op
# Warmup Iteration   2: 24023832.333 ns/op
# Warmup Iteration   3: 32726822.938 ns/op
Iteration   1: 27701906.541 ns/op
Iteration   2: 34275438.900 ns/op
Iteration   3: 34900459.700 ns/op
Iteration   4: 30607552.676 ns/op
Iteration   5: 37590032.750 ns/op

# Run progress: 25.83% complete, ETA 07:17:09
# Fork: 2 of 3
# Warmup Iteration   1: 35198681.034 ns/op
# Warmup Iteration   2: 32197049.469 ns/op
# Warmup Iteration   3: 17293475.569 ns/op
Iteration   1: 34637208.345 ns/op
Iteration   2: 38605804.037 ns/op
Iteration   3: 39215535.269 ns/op
Iteration   4: 36241942.552 ns/op
Iteration   5: 37793310.185 ns/op

# Run progress: 25.86% complete, ETA 07:17:00
# Fork: 3 of 3
# Warmup Iteration   1: 35959511.517 ns/op
# Warmup Iteration   2: 39152160.269 ns/op
# Warmup Iteration   3: 37484873.481 ns/op
Iteration   1: 37742058.667 ns/op
Iteration   2: 39082361.111 ns/op
Iteration   3: 36127997.036 ns/op
Iteration   4: 35736225.586 ns/op
Iteration   5: 37094351.179 ns/op


Result "kotlin_benchmarks.array.fill.InlineOpt.Val_to_Val_as_Val_arrayfillstat":
  35823478.969 ±(99.9%) 3383823.850 ns/op [Average]
  (min, avg, max) = (27701906.541, 35823478.969, 39215535.269), stdev = 3165230.929
  CI (99.9%): [32439655.119, 39207302.819] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.InlineOpt.Val_to_Val_as_Val_fillinst
# Parameters: (size = 100)

# Run progress: 25.88% complete, ETA 07:16:51
# Fork: 1 of 3
# Warmup Iteration   1: 73.965 ns/op
# Warmup Iteration   2: 73.418 ns/op
# Warmup Iteration   3: 99.053 ns/op
Iteration   1: 98.962 ns/op
Iteration   2: 98.995 ns/op
Iteration   3: 98.948 ns/op
Iteration   4: 98.894 ns/op
Iteration   5: 98.652 ns/op

# Run progress: 25.91% complete, ETA 07:16:41
# Fork: 2 of 3
# Warmup Iteration   1: 73.845 ns/op
# Warmup Iteration   2: 73.880 ns/op
# Warmup Iteration   3: 74.156 ns/op
Iteration   1: 73.503 ns/op
Iteration   2: 74.611 ns/op
Iteration   3: 74.854 ns/op
Iteration   4: 75.125 ns/op
Iteration   5: 74.651 ns/op

# Run progress: 25.93% complete, ETA 07:16:32
# Fork: 3 of 3
# Warmup Iteration   1: 74.049 ns/op
# Warmup Iteration   2: 73.319 ns/op
# Warmup Iteration   3: 73.738 ns/op
Iteration   1: 73.720 ns/op
Iteration   2: 73.216 ns/op
Iteration   3: 73.467 ns/op
Iteration   4: 73.076 ns/op
Iteration   5: 73.451 ns/op


Result "kotlin_benchmarks.array.fill.InlineOpt.Val_to_Val_as_Val_fillinst":
  82.275 ±(99.9%) 13.017 ns/op [Average]
  (min, avg, max) = (73.076, 82.275, 98.995), stdev = 12.177
  CI (99.9%): [69.257, 95.292] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.InlineOpt.Val_to_Val_as_Val_fillinst
# Parameters: (size = 1000000)

# Run progress: 25.96% complete, ETA 07:16:22
# Fork: 1 of 3
# Warmup Iteration   1: 34810000.000 ns/op
# Warmup Iteration   2: 31401778.206 ns/op
# Warmup Iteration   3: 36185860.107 ns/op
Iteration   1: 36426927.107 ns/op
Iteration   2: 34836541.667 ns/op
Iteration   3: 37501131.185 ns/op
Iteration   4: 34014037.500 ns/op
Iteration   5: 37588614.222 ns/op

# Run progress: 25.98% complete, ETA 07:16:13
# Fork: 2 of 3
# Warmup Iteration   1: 38614836.407 ns/op
# Warmup Iteration   2: 38229621.926 ns/op
# Warmup Iteration   3: 30772433.091 ns/op
Iteration   1: 36470279.750 ns/op
Iteration   2: 35723308.931 ns/op
Iteration   3: 31281272.727 ns/op
Iteration   4: 32712409.968 ns/op
Iteration   5: 32372165.375 ns/op

# Run progress: 26.00% complete, ETA 07:16:04
# Fork: 3 of 3
# Warmup Iteration   1: 27509867.342 ns/op
# Warmup Iteration   2: 30242071.059 ns/op
# Warmup Iteration   3: 37607683.667 ns/op
Iteration   1: 28882611.914 ns/op
Iteration   2: 36132665.179 ns/op
Iteration   3: 35639590.517 ns/op
Iteration   4: 21525268.617 ns/op
Iteration   5: 19909236.365 ns/op


Result "kotlin_benchmarks.array.fill.InlineOpt.Val_to_Val_as_Val_fillinst":
  32734404.068 ±(99.9%) 5827985.052 ns/op [Average]
  (min, avg, max) = (19909236.365, 32734404.068, 37588614.222), stdev = 5451500.834
  CI (99.9%): [26906419.017, 38562389.120] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.InlineOpt.Val_to_Val_as_Val_fillstat
# Parameters: (size = 100)

# Run progress: 26.03% complete, ETA 07:15:55
# Fork: 1 of 3
# Warmup Iteration   1: 69.942 ns/op
# Warmup Iteration   2: 69.642 ns/op
# Warmup Iteration   3: 69.686 ns/op
Iteration   1: 69.557 ns/op
Iteration   2: 69.427 ns/op
Iteration   3: 70.949 ns/op
Iteration   4: 71.175 ns/op
Iteration   5: 71.245 ns/op

# Run progress: 26.05% complete, ETA 07:15:45
# Fork: 2 of 3
# Warmup Iteration   1: 71.638 ns/op
# Warmup Iteration   2: 71.798 ns/op
# Warmup Iteration   3: 70.988 ns/op
Iteration   1: 70.896 ns/op
Iteration   2: 71.046 ns/op
Iteration   3: 69.711 ns/op
Iteration   4: 69.560 ns/op
Iteration   5: 69.621 ns/op

# Run progress: 26.08% complete, ETA 07:15:36
# Fork: 3 of 3
# Warmup Iteration   1: 70.035 ns/op
# Warmup Iteration   2: 71.159 ns/op
# Warmup Iteration   3: 69.483 ns/op
Iteration   1: 69.862 ns/op
Iteration   2: 69.514 ns/op
Iteration   3: 69.550 ns/op
Iteration   4: 69.594 ns/op
Iteration   5: 70.046 ns/op


Result "kotlin_benchmarks.array.fill.InlineOpt.Val_to_Val_as_Val_fillstat":
  70.117 ±(99.9%) 0.761 ns/op [Average]
  (min, avg, max) = (69.427, 70.117, 71.245), stdev = 0.712
  CI (99.9%): [69.356, 70.878] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.InlineOpt.Val_to_Val_as_Val_fillstat
# Parameters: (size = 1000000)

# Run progress: 26.10% complete, ETA 07:15:26
# Fork: 1 of 3
# Warmup Iteration   1: 36777572.929 ns/op
# Warmup Iteration   2: 37540708.321 ns/op
# Warmup Iteration   3: 37140564.000 ns/op
Iteration   1: 38733080.222 ns/op
Iteration   2: 36803010.429 ns/op
Iteration   3: 33543983.871 ns/op
Iteration   4: 38741206.731 ns/op
Iteration   5: 33018918.000 ns/op

# Run progress: 26.13% complete, ETA 07:15:17
# Fork: 2 of 3
# Warmup Iteration   1: 35350533.333 ns/op
# Warmup Iteration   2: 39355748.423 ns/op
# Warmup Iteration   3: 35748043.103 ns/op
Iteration   1: 36061794.643 ns/op
Iteration   2: 40417653.846 ns/op
Iteration   3: 50495829.381 ns/op
Iteration   4: 57058854.167 ns/op
Iteration   5: 53307140.316 ns/op

# Run progress: 26.15% complete, ETA 07:15:08
# Fork: 3 of 3
# Warmup Iteration   1: 44042704.696 ns/op
# Warmup Iteration   2: 54609315.789 ns/op
# Warmup Iteration   3: 51447179.150 ns/op
Iteration   1: 43479986.083 ns/op
Iteration   2: 44484920.304 ns/op
Iteration   3: 44178534.391 ns/op
Iteration   4: 48051416.667 ns/op
Iteration   5: 50228983.300 ns/op


Result "kotlin_benchmarks.array.fill.InlineOpt.Val_to_Val_as_Val_fillstat":
  43240354.157 ±(99.9%) 7873609.198 ns/op [Average]
  (min, avg, max) = (33018918.000, 43240354.157, 57058854.167), stdev = 7364978.929
  CI (99.9%): [35366744.959, 51113963.355] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Primitive64.arrayfill
# Parameters: (size = 100)

# Run progress: 26.18% complete, ETA 07:14:59
# Fork: 1 of 3
# Warmup Iteration   1: 18.463 ns/op
# Warmup Iteration   2: 18.289 ns/op
# Warmup Iteration   3: 18.275 ns/op
Iteration   1: 18.309 ns/op
Iteration   2: 18.895 ns/op
Iteration   3: 18.431 ns/op
Iteration   4: 18.185 ns/op
Iteration   5: 18.487 ns/op

# Run progress: 26.20% complete, ETA 07:14:50
# Fork: 2 of 3
# Warmup Iteration   1: 18.640 ns/op
# Warmup Iteration   2: 18.253 ns/op
# Warmup Iteration   3: 18.192 ns/op
Iteration   1: 18.232 ns/op
Iteration   2: 20.181 ns/op
Iteration   3: 22.447 ns/op
Iteration   4: 26.172 ns/op
Iteration   5: 36.910 ns/op

# Run progress: 26.23% complete, ETA 07:14:42
# Fork: 3 of 3
# Warmup Iteration   1: 38.729 ns/op
# Warmup Iteration   2: 36.792 ns/op
# Warmup Iteration   3: 26.435 ns/op
Iteration   1: 23.476 ns/op
Iteration   2: 27.384 ns/op
Iteration   3: 37.643 ns/op
Iteration   4: 30.617 ns/op
Iteration   5: 31.299 ns/op


Result "kotlin_benchmarks.array.fill.Primitive64.arrayfill":
  24.444 ±(99.9%) 7.380 ns/op [Average]
  (min, avg, max) = (18.185, 24.444, 37.643), stdev = 6.904
  CI (99.9%): [17.064, 31.825] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Primitive64.arrayfill
# Parameters: (size = 1000000)

# Run progress: 26.25% complete, ETA 07:14:34
# Fork: 1 of 3
# Warmup Iteration   1: 626607.295 ns/op
# Warmup Iteration   2: 549523.700 ns/op
# Warmup Iteration   3: 701751.335 ns/op
Iteration   1: 582689.804 ns/op
Iteration   2: 584779.755 ns/op
Iteration   3: 507049.618 ns/op
Iteration   4: 439293.508 ns/op
Iteration   5: 527782.567 ns/op

# Run progress: 26.27% complete, ETA 07:14:26
# Fork: 2 of 3
# Warmup Iteration   1: 839339.444 ns/op
# Warmup Iteration   2: 732195.733 ns/op
# Warmup Iteration   3: 543942.316 ns/op
Iteration   1: 564401.024 ns/op
Iteration   2: 577843.577 ns/op
Iteration   3: 805283.233 ns/op
Iteration   4: 810716.486 ns/op
Iteration   5: 636070.491 ns/op

# Run progress: 26.30% complete, ETA 07:14:18
# Fork: 3 of 3
# Warmup Iteration   1: 587681.875 ns/op
# Warmup Iteration   2: 606069.244 ns/op
# Warmup Iteration   3: 882996.485 ns/op
Iteration   1: 689788.042 ns/op
Iteration   2: 569825.272 ns/op
Iteration   3: 546379.275 ns/op
Iteration   4: 568333.684 ns/op
Iteration   5: 503091.356 ns/op


Result "kotlin_benchmarks.array.fill.Primitive64.arrayfill":
  594221.846 ±(99.9%) 111230.665 ns/op [Average]
  (min, avg, max) = (439293.508, 594221.846, 810716.486), stdev = 104045.233
  CI (99.9%): [482991.181, 705452.512] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Primitive64.fill0
# Parameters: (size = 100)

# Run progress: 26.32% complete, ETA 07:14:11
# Fork: 1 of 3
# Warmup Iteration   1: 40.211 ns/op
# Warmup Iteration   2: 29.308 ns/op
# Warmup Iteration   3: 48.230 ns/op
Iteration   1: 50.951 ns/op
Iteration   2: 39.256 ns/op
Iteration   3: 39.105 ns/op
Iteration   4: 28.658 ns/op
Iteration   5: 24.674 ns/op

# Run progress: 26.35% complete, ETA 07:14:03
# Fork: 2 of 3
# Warmup Iteration   1: 24.325 ns/op
# Warmup Iteration   2: 24.107 ns/op
# Warmup Iteration   3: 26.012 ns/op
Iteration   1: 26.316 ns/op
Iteration   2: 26.907 ns/op
Iteration   3: 29.667 ns/op
Iteration   4: 33.737 ns/op
Iteration   5: 31.249 ns/op

# Run progress: 26.37% complete, ETA 07:13:54
# Fork: 3 of 3
# Warmup Iteration   1: 42.397 ns/op
# Warmup Iteration   2: 36.098 ns/op
# Warmup Iteration   3: 35.049 ns/op
Iteration   1: 36.429 ns/op
Iteration   2: 36.699 ns/op
Iteration   3: 36.310 ns/op
Iteration   4: 42.149 ns/op
Iteration   5: 35.729 ns/op


Result "kotlin_benchmarks.array.fill.Primitive64.fill0":
  34.522 ±(99.9%) 7.429 ns/op [Average]
  (min, avg, max) = (24.674, 34.522, 50.951), stdev = 6.949
  CI (99.9%): [27.093, 41.952] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Primitive64.fill0
# Parameters: (size = 1000000)

# Run progress: 26.40% complete, ETA 07:13:47
# Fork: 1 of 3
# Warmup Iteration   1: 586227.789 ns/op
# Warmup Iteration   2: 613244.206 ns/op
# Warmup Iteration   3: 645847.652 ns/op
Iteration   1: 600816.890 ns/op
Iteration   2: 732694.201 ns/op
Iteration   3: 782825.361 ns/op
Iteration   4: 676963.752 ns/op
Iteration   5: 723656.543 ns/op

# Run progress: 26.42% complete, ETA 07:13:39
# Fork: 2 of 3
# Warmup Iteration   1: 583252.428 ns/op
# Warmup Iteration   2: 576601.646 ns/op
# Warmup Iteration   3: 581834.635 ns/op
Iteration   1: 583499.855 ns/op
Iteration   2: 652121.043 ns/op
Iteration   3: 652290.805 ns/op
Iteration   4: 650392.477 ns/op
Iteration   5: 651484.526 ns/op

# Run progress: 26.45% complete, ETA 07:13:31
# Fork: 3 of 3
# Warmup Iteration   1: 596036.532 ns/op
# Warmup Iteration   2: 580547.079 ns/op
# Warmup Iteration   3: 565842.520 ns/op
Iteration   1: 566358.474 ns/op
Iteration   2: 604927.427 ns/op
Iteration   3: 627735.902 ns/op
Iteration   4: 681702.417 ns/op
Iteration   5: 708256.204 ns/op


Result "kotlin_benchmarks.array.fill.Primitive64.fill0":
  659715.059 ±(99.9%) 63884.003 ns/op [Average]
  (min, avg, max) = (566358.474, 659715.059, 782825.361), stdev = 59757.136
  CI (99.9%): [595831.055, 723599.062] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Primitive64.fill1
# Parameters: (size = 100)

# Run progress: 26.47% complete, ETA 07:13:24
# Fork: 1 of 3
# Warmup Iteration   1: 41.887 ns/op
# Warmup Iteration   2: 36.154 ns/op
# Warmup Iteration   3: 33.587 ns/op
Iteration   1: 33.649 ns/op
Iteration   2: 39.877 ns/op
Iteration   3: 47.201 ns/op
Iteration   4: 41.457 ns/op
Iteration   5: 42.829 ns/op

# Run progress: 26.50% complete, ETA 07:13:16
# Fork: 2 of 3
# Warmup Iteration   1: 53.072 ns/op
# Warmup Iteration   2: 56.277 ns/op
# Warmup Iteration   3: 46.093 ns/op
Iteration   1: 46.982 ns/op
Iteration   2: 44.628 ns/op
Iteration   3: 41.962 ns/op
Iteration   4: 43.441 ns/op
Iteration   5: 41.622 ns/op

# Run progress: 26.52% complete, ETA 07:13:08
# Fork: 3 of 3
# Warmup Iteration   1: 40.853 ns/op
# Warmup Iteration   2: 38.349 ns/op
# Warmup Iteration   3: 42.240 ns/op
Iteration   1: 41.892 ns/op
Iteration   2: 48.857 ns/op
Iteration   3: 34.954 ns/op
Iteration   4: 35.739 ns/op
Iteration   5: 41.422 ns/op


Result "kotlin_benchmarks.array.fill.Primitive64.fill1":
  41.767 ±(99.9%) 4.709 ns/op [Average]
  (min, avg, max) = (33.649, 41.767, 48.857), stdev = 4.405
  CI (99.9%): [37.058, 46.476] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.fill.Primitive64.fill1
# Parameters: (size = 1000000)

# Run progress: 26.54% complete, ETA 07:13:01
# Fork: 1 of 3
# Warmup Iteration   1: 647247.631 ns/op
# Warmup Iteration   2: 727234.183 ns/op
# Warmup Iteration   3: 651321.564 ns/op
Iteration   1: 698071.574 ns/op
Iteration   2: 602088.598 ns/op
Iteration   3: 551254.800 ns/op
Iteration   4: 581135.435 ns/op
Iteration   5: 594390.906 ns/op

# Run progress: 26.57% complete, ETA 07:12:52
# Fork: 2 of 3
# Warmup Iteration   1: 543769.203 ns/op
# Warmup Iteration   2: 542440.515 ns/op
# Warmup Iteration   3: 561429.336 ns/op
Iteration   1: 551616.512 ns/op
Iteration   2: 572045.521 ns/op
Iteration   3: 620653.664 ns/op
Iteration   4: 705316.399 ns/op
Iteration   5: 756466.616 ns/op

# Run progress: 26.59% complete, ETA 07:12:45
# Fork: 3 of 3
# Warmup Iteration   1: 545924.339 ns/op
# Warmup Iteration   2: 577104.560 ns/op
# Warmup Iteration   3: 561492.300 ns/op
Iteration   1: 712084.885 ns/op
Iteration   2: 582850.793 ns/op
Iteration   3: 556339.671 ns/op
Iteration   4: 663566.963 ns/op
Iteration   5: 580039.368 ns/op


Result "kotlin_benchmarks.array.fill.Primitive64.fill1":
  621861.447 ±(99.9%) 72022.506 ns/op [Average]
  (min, avg, max) = (551254.800, 621861.447, 756466.616), stdev = 67369.897
  CI (99.9%): [549838.941, 693883.953] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.read.Inline128int.Val_as_Int_to_Int_read
# Parameters: (size = 100)

# Run progress: 26.62% complete, ETA 07:12:37
# Fork: 1 of 3
# Warmup Iteration   1: 3.386 ns/op
# Warmup Iteration   2: 2.916 ns/op
# Warmup Iteration   3: 2.906 ns/op
Iteration   1: 2.921 ns/op
Iteration   2: 2.500 ns/op
Iteration   3: 2.389 ns/op
Iteration   4: 2.336 ns/op
Iteration   5: 2.063 ns/op

# Run progress: 26.64% complete, ETA 07:12:29
# Fork: 2 of 3
# Warmup Iteration   1: 2.123 ns/op
# Warmup Iteration   2: 2.243 ns/op
# Warmup Iteration   3: 2.206 ns/op
Iteration   1: 2.105 ns/op
Iteration   2: 2.650 ns/op
Iteration   3: 3.107 ns/op
Iteration   4: 2.531 ns/op
Iteration   5: 2.311 ns/op

# Run progress: 26.67% complete, ETA 07:12:21
# Fork: 3 of 3
# Warmup Iteration   1: 2.265 ns/op
# Warmup Iteration   2: 2.372 ns/op
# Warmup Iteration   3: 2.375 ns/op
Iteration   1: 3.101 ns/op
Iteration   2: 2.351 ns/op
Iteration   3: 2.296 ns/op
Iteration   4: 2.237 ns/op
Iteration   5: 2.165 ns/op


Result "kotlin_benchmarks.array.read.Inline128int.Val_as_Int_to_Int_read":
  2.471 ±(99.9%) 0.360 ns/op [Average]
  (min, avg, max) = (2.063, 2.471, 3.107), stdev = 0.336
  CI (99.9%): [2.111, 2.830] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.read.Inline128int.Val_as_Int_to_Int_read
# Parameters: (size = 1000000)

# Run progress: 26.69% complete, ETA 07:12:13
# Fork: 1 of 3
# Warmup Iteration   1: 2.108 ns/op
# Warmup Iteration   2: 2.070 ns/op
# Warmup Iteration   3: 2.137 ns/op
Iteration   1: 2.306 ns/op
Iteration   2: 2.685 ns/op
Iteration   3: 2.142 ns/op
Iteration   4: 2.178 ns/op
Iteration   5: 2.404 ns/op

# Run progress: 26.72% complete, ETA 07:12:05
# Fork: 2 of 3
# Warmup Iteration   1: 2.173 ns/op
# Warmup Iteration   2: 1.885 ns/op
# Warmup Iteration   3: 1.955 ns/op
Iteration   1: 2.123 ns/op
Iteration   2: 2.170 ns/op
Iteration   3: 2.273 ns/op
Iteration   4: 2.184 ns/op
Iteration   5: 2.131 ns/op

# Run progress: 26.74% complete, ETA 07:11:57
# Fork: 3 of 3
# Warmup Iteration   1: 1.570 ns/op
# Warmup Iteration   2: 2.101 ns/op
# Warmup Iteration   3: 2.157 ns/op
Iteration   1: 2.165 ns/op
Iteration   2: 2.168 ns/op
Iteration   3: 2.161 ns/op
Iteration   4: 2.176 ns/op
Iteration   5: 2.422 ns/op


Result "kotlin_benchmarks.array.read.Inline128int.Val_as_Int_to_Int_read":
  2.246 ±(99.9%) 0.164 ns/op [Average]
  (min, avg, max) = (2.123, 2.246, 2.685), stdev = 0.154
  CI (99.9%): [2.081, 2.410] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.read.Inline128int.Val_as_Ref_to_Int_read
# Parameters: (size = 100)

# Run progress: 26.76% complete, ETA 07:11:49
# Fork: 1 of 3
# Warmup Iteration   1: 2.026 ns/op
# Warmup Iteration   2: 1.787 ns/op
# Warmup Iteration   3: 2.237 ns/op
Iteration   1: 2.543 ns/op
Iteration   2: 2.545 ns/op
Iteration   3: 2.533 ns/op
Iteration   4: 2.463 ns/op
Iteration   5: 2.445 ns/op

# Run progress: 26.79% complete, ETA 07:11:40
# Fork: 2 of 3
# Warmup Iteration   1: 2.524 ns/op
# Warmup Iteration   2: 2.519 ns/op
# Warmup Iteration   3: 2.484 ns/op
Iteration   1: 2.482 ns/op
Iteration   2: 1.777 ns/op
Iteration   3: 1.369 ns/op
Iteration   4: 1.195 ns/op
Iteration   5: 1.109 ns/op

# Run progress: 26.81% complete, ETA 07:11:32
# Fork: 3 of 3
# Warmup Iteration   1: 1.238 ns/op
# Warmup Iteration   2: 1.679 ns/op
# Warmup Iteration   3: 2.318 ns/op
Iteration   1: 1.913 ns/op
Iteration   2: 1.577 ns/op
Iteration   3: 2.100 ns/op
Iteration   4: 2.545 ns/op
Iteration   5: 2.554 ns/op


Result "kotlin_benchmarks.array.read.Inline128int.Val_as_Ref_to_Int_read":
  2.077 ±(99.9%) 0.580 ns/op [Average]
  (min, avg, max) = (1.109, 2.077, 2.554), stdev = 0.543
  CI (99.9%): [1.497, 2.657] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.read.Inline128int.Val_as_Ref_to_Int_read
# Parameters: (size = 1000000)

# Run progress: 26.84% complete, ETA 07:11:23
# Fork: 1 of 3
# Warmup Iteration   1: 2.673 ns/op
# Warmup Iteration   2: 1.787 ns/op
# Warmup Iteration   3: 1.266 ns/op
Iteration   1: 1.119 ns/op
Iteration   2: 1.009 ns/op
Iteration   3: 0.952 ns/op
Iteration   4: 0.996 ns/op
Iteration   5: 1.110 ns/op

# Run progress: 26.86% complete, ETA 07:11:14
# Fork: 2 of 3
# Warmup Iteration   1: 1.587 ns/op
# Warmup Iteration   2: 2.202 ns/op
# Warmup Iteration   3: 1.945 ns/op
Iteration   1: 1.493 ns/op
Iteration   2: 1.502 ns/op
Iteration   3: 1.949 ns/op
Iteration   4: 2.090 ns/op
Iteration   5: 2.252 ns/op

# Run progress: 26.89% complete, ETA 07:11:05
# Fork: 3 of 3
# Warmup Iteration   1: 1.444 ns/op
# Warmup Iteration   2: 1.157 ns/op
# Warmup Iteration   3: 0.995 ns/op
Iteration   1: 0.947 ns/op
Iteration   2: 0.947 ns/op
Iteration   3: 0.947 ns/op
Iteration   4: 1.045 ns/op
Iteration   5: 1.276 ns/op


Result "kotlin_benchmarks.array.read.Inline128int.Val_as_Ref_to_Int_read":
  1.309 ±(99.9%) 0.481 ns/op [Average]
  (min, avg, max) = (0.947, 1.309, 2.252), stdev = 0.450
  CI (99.9%): [0.828, 1.790] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.read.Inline128int.Val_as_Ref_to_Ref_read
# Parameters: (size = 100)

# Run progress: 26.91% complete, ETA 07:10:56
# Fork: 1 of 3
# Warmup Iteration   1: 2.036 ns/op
# Warmup Iteration   2: 2.189 ns/op
# Warmup Iteration   3: 2.292 ns/op
Iteration   1: 2.091 ns/op
Iteration   2: 2.081 ns/op
Iteration   3: 1.761 ns/op
Iteration   4: 1.358 ns/op
Iteration   5: 1.161 ns/op

# Run progress: 26.94% complete, ETA 07:10:47
# Fork: 2 of 3
# Warmup Iteration   1: 0.941 ns/op
# Warmup Iteration   2: 0.927 ns/op
# Warmup Iteration   3: 0.929 ns/op
Iteration   1: 0.933 ns/op
Iteration   2: 0.930 ns/op
Iteration   3: 0.986 ns/op
Iteration   4: 1.197 ns/op
Iteration   5: 1.706 ns/op

# Run progress: 26.96% complete, ETA 07:10:37
# Fork: 3 of 3
# Warmup Iteration   1: 1.771 ns/op
# Warmup Iteration   2: 2.094 ns/op
# Warmup Iteration   3: 2.021 ns/op
Iteration   1: 1.978 ns/op
Iteration   2: 1.830 ns/op
Iteration   3: 1.444 ns/op
Iteration   4: 1.164 ns/op
Iteration   5: 0.991 ns/op


Result "kotlin_benchmarks.array.read.Inline128int.Val_as_Ref_to_Ref_read":
  1.441 ±(99.9%) 0.460 ns/op [Average]
  (min, avg, max) = (0.930, 1.441, 2.091), stdev = 0.430
  CI (99.9%): [0.981, 1.901] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.read.Inline128int.Val_as_Ref_to_Ref_read
# Parameters: (size = 1000000)

# Run progress: 26.99% complete, ETA 07:10:28
# Fork: 1 of 3
# Warmup Iteration   1: 1.026 ns/op
# Warmup Iteration   2: 0.980 ns/op
# Warmup Iteration   3: 0.941 ns/op
Iteration   1: 0.943 ns/op
Iteration   2: 1.030 ns/op
Iteration   3: 1.215 ns/op
Iteration   4: 1.749 ns/op
Iteration   5: 1.742 ns/op

# Run progress: 27.01% complete, ETA 07:10:18
# Fork: 2 of 3
# Warmup Iteration   1: 2.017 ns/op
# Warmup Iteration   2: 1.976 ns/op
# Warmup Iteration   3: 2.002 ns/op
Iteration   1: 1.967 ns/op
Iteration   2: 1.531 ns/op
Iteration   3: 1.200 ns/op
Iteration   4: 1.024 ns/op
Iteration   5: 0.932 ns/op

# Run progress: 27.03% complete, ETA 07:10:09
# Fork: 3 of 3
# Warmup Iteration   1: 0.945 ns/op
# Warmup Iteration   2: 0.969 ns/op
# Warmup Iteration   3: 0.962 ns/op
Iteration   1: 1.032 ns/op
Iteration   2: 1.171 ns/op
Iteration   3: 1.638 ns/op
Iteration   4: 1.850 ns/op
Iteration   5: 1.903 ns/op


Result "kotlin_benchmarks.array.read.Inline128int.Val_as_Ref_to_Ref_read":
  1.395 ±(99.9%) 0.410 ns/op [Average]
  (min, avg, max) = (0.932, 1.395, 1.967), stdev = 0.383
  CI (99.9%): [0.985, 1.805] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.read.Inline128int.Val_as_Ref_to_Val_read
# Parameters: (size = 100)

# Run progress: 27.06% complete, ETA 07:10:00
# Fork: 1 of 3
# Warmup Iteration   1: 2.135 ns/op
# Warmup Iteration   2: 2.099 ns/op
# Warmup Iteration   3: 2.081 ns/op
Iteration   1: 1.694 ns/op
Iteration   2: 1.312 ns/op
Iteration   3: 1.092 ns/op
Iteration   4: 0.950 ns/op
Iteration   5: 0.939 ns/op

# Run progress: 27.08% complete, ETA 07:09:51
# Fork: 2 of 3
# Warmup Iteration   1: 0.950 ns/op
# Warmup Iteration   2: 0.954 ns/op
# Warmup Iteration   3: 1.034 ns/op
Iteration   1: 1.330 ns/op
Iteration   2: 1.991 ns/op
Iteration   3: 2.549 ns/op
Iteration   4: 2.284 ns/op
Iteration   5: 1.784 ns/op

# Run progress: 27.11% complete, ETA 07:09:41
# Fork: 3 of 3
# Warmup Iteration   1: 2.119 ns/op
# Warmup Iteration   2: 2.159 ns/op
# Warmup Iteration   3: 2.384 ns/op
Iteration   1: 2.036 ns/op
Iteration   2: 1.504 ns/op
Iteration   3: 1.199 ns/op
Iteration   4: 1.087 ns/op
Iteration   5: 0.988 ns/op


Result "kotlin_benchmarks.array.read.Inline128int.Val_as_Ref_to_Val_read":
  1.516 ±(99.9%) 0.552 ns/op [Average]
  (min, avg, max) = (0.939, 1.516, 2.549), stdev = 0.516
  CI (99.9%): [0.964, 2.068] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.read.Inline128int.Val_as_Ref_to_Val_read
# Parameters: (size = 1000000)

# Run progress: 27.13% complete, ETA 07:09:32
# Fork: 1 of 3
# Warmup Iteration   1: 0.987 ns/op
# Warmup Iteration   2: 1.013 ns/op
# Warmup Iteration   3: 1.192 ns/op
Iteration   1: 1.725 ns/op
Iteration   2: 2.329 ns/op
Iteration   3: 1.837 ns/op
Iteration   4: 1.940 ns/op
Iteration   5: 2.485 ns/op

# Run progress: 27.16% complete, ETA 07:09:23
# Fork: 2 of 3
# Warmup Iteration   1: 2.629 ns/op
# Warmup Iteration   2: 2.572 ns/op
# Warmup Iteration   3: 2.315 ns/op
Iteration   1: 1.703 ns/op
Iteration   2: 1.328 ns/op
Iteration   3: 1.172 ns/op
Iteration   4: 1.125 ns/op
Iteration   5: 1.080 ns/op

# Run progress: 27.18% complete, ETA 07:09:15
# Fork: 3 of 3
# Warmup Iteration   1: 1.123 ns/op
# Warmup Iteration   2: 1.334 ns/op
# Warmup Iteration   3: 2.059 ns/op
Iteration   1: 2.544 ns/op
Iteration   2: 2.570 ns/op
Iteration   3: 2.170 ns/op
Iteration   4: 2.274 ns/op
Iteration   5: 2.570 ns/op


Result "kotlin_benchmarks.array.read.Inline128int.Val_as_Ref_to_Val_read":
  1.924 ±(99.9%) 0.589 ns/op [Average]
  (min, avg, max) = (1.080, 1.924, 2.570), stdev = 0.551
  CI (99.9%): [1.335, 2.512] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.read.Inline128int.Val_as_Val_to_Int_read
# Parameters: (size = 100)

# Run progress: 27.21% complete, ETA 07:09:05
# Fork: 1 of 3
# Warmup Iteration   1: 2.606 ns/op
# Warmup Iteration   2: 2.410 ns/op
# Warmup Iteration   3: 2.496 ns/op
Iteration   1: 2.129 ns/op
Iteration   2: 1.610 ns/op
Iteration   3: 1.400 ns/op
Iteration   4: 1.384 ns/op
Iteration   5: 1.306 ns/op

# Run progress: 27.23% complete, ETA 07:08:57
# Fork: 2 of 3
# Warmup Iteration   1: 1.598 ns/op
# Warmup Iteration   2: 2.289 ns/op
# Warmup Iteration   3: 2.752 ns/op
Iteration   1: 2.522 ns/op
Iteration   2: 2.495 ns/op
Iteration   3: 2.338 ns/op
Iteration   4: 2.354 ns/op
Iteration   5: 2.302 ns/op

# Run progress: 27.25% complete, ETA 07:08:48
# Fork: 3 of 3
# Warmup Iteration   1: 2.310 ns/op
# Warmup Iteration   2: 2.230 ns/op
# Warmup Iteration   3: 2.531 ns/op
Iteration   1: 2.398 ns/op
Iteration   2: 1.810 ns/op
Iteration   3: 1.882 ns/op
Iteration   4: 1.958 ns/op
Iteration   5: 2.084 ns/op


Result "kotlin_benchmarks.array.read.Inline128int.Val_as_Val_to_Int_read":
  1.998 ±(99.9%) 0.448 ns/op [Average]
  (min, avg, max) = (1.306, 1.998, 2.522), stdev = 0.419
  CI (99.9%): [1.551, 2.446] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.read.Inline128int.Val_as_Val_to_Int_read
# Parameters: (size = 1000000)

# Run progress: 27.28% complete, ETA 07:08:39
# Fork: 1 of 3
# Warmup Iteration   1: 2.516 ns/op
# Warmup Iteration   2: 2.529 ns/op
# Warmup Iteration   3: 2.581 ns/op
Iteration   1: 2.600 ns/op
Iteration   2: 2.378 ns/op
Iteration   3: 2.312 ns/op
Iteration   4: 2.278 ns/op
Iteration   5: 2.242 ns/op

# Run progress: 27.30% complete, ETA 07:08:31
# Fork: 2 of 3
# Warmup Iteration   1: 2.270 ns/op
# Warmup Iteration   2: 2.303 ns/op
# Warmup Iteration   3: 2.265 ns/op
Iteration   1: 2.429 ns/op
Iteration   2: 2.607 ns/op
Iteration   3: 2.582 ns/op
Iteration   4: 2.558 ns/op
Iteration   5: 2.539 ns/op

# Run progress: 27.33% complete, ETA 07:08:22
# Fork: 3 of 3
# Warmup Iteration   1: 2.465 ns/op
# Warmup Iteration   2: 2.686 ns/op
# Warmup Iteration   3: 2.657 ns/op
Iteration   1: 2.513 ns/op
Iteration   2: 2.459 ns/op
Iteration   3: 2.517 ns/op
Iteration   4: 2.391 ns/op
Iteration   5: 2.255 ns/op


Result "kotlin_benchmarks.array.read.Inline128int.Val_as_Val_to_Int_read":
  2.444 ±(99.9%) 0.137 ns/op [Average]
  (min, avg, max) = (2.242, 2.444, 2.607), stdev = 0.129
  CI (99.9%): [2.307, 2.581] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.read.Inline128int.Val_as_Val_to_Ref_read
# Parameters: (size = 100)

# Run progress: 27.35% complete, ETA 07:08:14
# Fork: 1 of 3
# Warmup Iteration   1: 2.304 ns/op
# Warmup Iteration   2: 2.265 ns/op
# Warmup Iteration   3: 2.231 ns/op
Iteration   1: 2.228 ns/op
Iteration   2: 2.537 ns/op
Iteration   3: 2.586 ns/op
Iteration   4: 2.569 ns/op
Iteration   5: 2.520 ns/op

# Run progress: 27.38% complete, ETA 07:08:06
# Fork: 2 of 3
# Warmup Iteration   1: 2.535 ns/op
# Warmup Iteration   2: 2.480 ns/op
# Warmup Iteration   3: 2.605 ns/op
Iteration   1: 2.592 ns/op
Iteration   2: 2.456 ns/op
Iteration   3: 2.397 ns/op
Iteration   4: 2.586 ns/op
Iteration   5: 2.850 ns/op

# Run progress: 27.40% complete, ETA 07:07:57
# Fork: 3 of 3
# Warmup Iteration   1: 2.946 ns/op
# Warmup Iteration   2: 3.993 ns/op
# Warmup Iteration   3: 2.717 ns/op
Iteration   1: 2.600 ns/op
Iteration   2: 2.497 ns/op
Iteration   3: 2.766 ns/op
Iteration   4: 2.479 ns/op
Iteration   5: 2.830 ns/op


Result "kotlin_benchmarks.array.read.Inline128int.Val_as_Val_to_Ref_read":
  2.566 ±(99.9%) 0.172 ns/op [Average]
  (min, avg, max) = (2.228, 2.566, 2.850), stdev = 0.161
  CI (99.9%): [2.394, 2.738] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.read.Inline128int.Val_as_Val_to_Ref_read
# Parameters: (size = 1000000)

# Run progress: 27.43% complete, ETA 07:07:49
# Fork: 1 of 3
# Warmup Iteration   1: 2.421 ns/op
# Warmup Iteration   2: 2.325 ns/op
# Warmup Iteration   3: 2.536 ns/op
Iteration   1: 2.763 ns/op
Iteration   2: 3.103 ns/op
Iteration   3: 2.842 ns/op
Iteration   4: 2.665 ns/op
Iteration   5: 2.591 ns/op

# Run progress: 27.45% complete, ETA 07:07:41
# Fork: 2 of 3
# Warmup Iteration   1: 2.642 ns/op
# Warmup Iteration   2: 2.669 ns/op
# Warmup Iteration   3: 2.675 ns/op
Iteration   1: 2.599 ns/op
Iteration   2: 2.705 ns/op
Iteration   3: 2.958 ns/op
Iteration   4: 2.774 ns/op
Iteration   5: 3.020 ns/op

# Run progress: 27.48% complete, ETA 07:07:34
# Fork: 3 of 3
# Warmup Iteration   1: 2.165 ns/op
# Warmup Iteration   2: 2.137 ns/op
# Warmup Iteration   3: 3.723 ns/op
Iteration   1: 2.682 ns/op
Iteration   2: 2.736 ns/op
Iteration   3: 2.802 ns/op
Iteration   4: 2.754 ns/op
Iteration   5: 2.590 ns/op


Result "kotlin_benchmarks.array.read.Inline128int.Val_as_Val_to_Ref_read":
  2.772 ±(99.9%) 0.165 ns/op [Average]
  (min, avg, max) = (2.590, 2.772, 3.103), stdev = 0.154
  CI (99.9%): [2.607, 2.937] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.read.Inline128int.Val_as_Val_to_Val_read
# Parameters: (size = 100)

# Run progress: 27.50% complete, ETA 07:07:26
# Fork: 1 of 3
# Warmup Iteration   1: 2.518 ns/op
# Warmup Iteration   2: 3.055 ns/op
# Warmup Iteration   3: 3.734 ns/op
Iteration   1: 2.579 ns/op
Iteration   2: 2.212 ns/op
Iteration   3: 2.355 ns/op
Iteration   4: 2.731 ns/op
Iteration   5: 2.759 ns/op

# Run progress: 27.52% complete, ETA 07:07:18
# Fork: 2 of 3
# Warmup Iteration   1: 2.603 ns/op
# Warmup Iteration   2: 2.495 ns/op
# Warmup Iteration   3: 2.991 ns/op
Iteration   1: 2.529 ns/op
Iteration   2: 2.641 ns/op
Iteration   3: 2.592 ns/op
Iteration   4: 2.651 ns/op
Iteration   5: 2.842 ns/op

# Run progress: 27.55% complete, ETA 07:07:10
# Fork: 3 of 3
# Warmup Iteration   1: 3.225 ns/op
# Warmup Iteration   2: 3.129 ns/op
# Warmup Iteration   3: 2.620 ns/op
Iteration   1: 2.622 ns/op
Iteration   2: 2.631 ns/op
Iteration   3: 2.240 ns/op
Iteration   4: 2.556 ns/op
Iteration   5: 2.361 ns/op


Result "kotlin_benchmarks.array.read.Inline128int.Val_as_Val_to_Val_read":
  2.553 ±(99.9%) 0.198 ns/op [Average]
  (min, avg, max) = (2.212, 2.553, 2.842), stdev = 0.185
  CI (99.9%): [2.356, 2.751] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.read.Inline128int.Val_as_Val_to_Val_read
# Parameters: (size = 1000000)

# Run progress: 27.57% complete, ETA 07:07:03
# Fork: 1 of 3
# Warmup Iteration   1: 2.449 ns/op
# Warmup Iteration   2: 2.702 ns/op
# Warmup Iteration   3: 2.411 ns/op
Iteration   1: 2.544 ns/op
Iteration   2: 2.200 ns/op
Iteration   3: 2.129 ns/op
Iteration   4: 2.936 ns/op
Iteration   5: 3.140 ns/op

# Run progress: 27.60% complete, ETA 07:06:55
# Fork: 2 of 3
# Warmup Iteration   1: 2.769 ns/op
# Warmup Iteration   2: 2.694 ns/op
# Warmup Iteration   3: 4.180 ns/op
Iteration   1: 2.646 ns/op
Iteration   2: 2.573 ns/op
Iteration   3: 2.500 ns/op
Iteration   4: 2.424 ns/op
Iteration   5: 3.293 ns/op

# Run progress: 27.62% complete, ETA 07:06:48
# Fork: 3 of 3
# Warmup Iteration   1: 2.937 ns/op
# Warmup Iteration   2: 2.767 ns/op
# Warmup Iteration   3: 2.699 ns/op
Iteration   1: 2.604 ns/op
Iteration   2: 2.905 ns/op
Iteration   3: 2.646 ns/op
Iteration   4: 2.566 ns/op
Iteration   5: 2.876 ns/op


Result "kotlin_benchmarks.array.read.Inline128int.Val_as_Val_to_Val_read":
  2.665 ±(99.9%) 0.341 ns/op [Average]
  (min, avg, max) = (2.129, 2.665, 3.293), stdev = 0.319
  CI (99.9%): [2.325, 3.006] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.read.Inline32int.Val_as_Int_to_Int_read
# Parameters: (size = 100)

# Run progress: 27.65% complete, ETA 07:06:40
# Fork: 1 of 3
# Warmup Iteration   1: 2.387 ns/op
# Warmup Iteration   2: 2.660 ns/op
# Warmup Iteration   3: 2.374 ns/op
Iteration   1: 2.900 ns/op
Iteration   2: 2.389 ns/op
Iteration   3: 2.595 ns/op
Iteration   4: 2.923 ns/op
Iteration   5: 2.557 ns/op

# Run progress: 27.67% complete, ETA 07:06:32
# Fork: 2 of 3
# Warmup Iteration   1: 2.118 ns/op
# Warmup Iteration   2: 2.104 ns/op
# Warmup Iteration   3: 2.136 ns/op
Iteration   1: 2.250 ns/op
Iteration   2: 2.512 ns/op
Iteration   3: 2.169 ns/op
Iteration   4: 2.208 ns/op
Iteration   5: 2.147 ns/op

# Run progress: 27.70% complete, ETA 07:06:24
# Fork: 3 of 3
# Warmup Iteration   1: 2.549 ns/op
# Warmup Iteration   2: 2.354 ns/op
# Warmup Iteration   3: 2.365 ns/op
Iteration   1: 2.225 ns/op
Iteration   2: 2.221 ns/op
Iteration   3: 2.208 ns/op
Iteration   4: 2.265 ns/op
Iteration   5: 2.284 ns/op


Result "kotlin_benchmarks.array.read.Inline32int.Val_as_Int_to_Int_read":
  2.390 ±(99.9%) 0.272 ns/op [Average]
  (min, avg, max) = (2.147, 2.390, 2.923), stdev = 0.254
  CI (99.9%): [2.118, 2.662] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.read.Inline32int.Val_as_Int_to_Int_read
# Parameters: (size = 1000000)

# Run progress: 27.72% complete, ETA 07:06:16
# Fork: 1 of 3
# Warmup Iteration   1: 2.672 ns/op
# Warmup Iteration   2: 2.228 ns/op
# Warmup Iteration   3: 2.469 ns/op
Iteration   1: 2.519 ns/op
Iteration   2: 2.455 ns/op
Iteration   3: 2.381 ns/op
Iteration   4: 2.151 ns/op
Iteration   5: 2.313 ns/op

# Run progress: 27.75% complete, ETA 07:06:08
# Fork: 2 of 3
# Warmup Iteration   1: 2.392 ns/op
# Warmup Iteration   2: 2.342 ns/op
# Warmup Iteration   3: 2.401 ns/op
Iteration   1: 2.324 ns/op
Iteration   2: 2.498 ns/op
Iteration   3: 2.204 ns/op
Iteration   4: 2.468 ns/op
Iteration   5: 2.342 ns/op

# Run progress: 27.77% complete, ETA 07:05:59
# Fork: 3 of 3
# Warmup Iteration   1: 2.185 ns/op
# Warmup Iteration   2: 2.456 ns/op
# Warmup Iteration   3: 2.264 ns/op
Iteration   1: 2.221 ns/op
Iteration   2: 2.290 ns/op
Iteration   3: 2.416 ns/op
Iteration   4: 2.347 ns/op
Iteration   5: 2.369 ns/op


Result "kotlin_benchmarks.array.read.Inline32int.Val_as_Int_to_Int_read":
  2.353 ±(99.9%) 0.116 ns/op [Average]
  (min, avg, max) = (2.151, 2.353, 2.519), stdev = 0.108
  CI (99.9%): [2.237, 2.469] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.read.Inline32int.Val_as_Ref_to_Int_read
# Parameters: (size = 100)

# Run progress: 27.79% complete, ETA 07:05:51
# Fork: 1 of 3
# Warmup Iteration   1: 2.214 ns/op
# Warmup Iteration   2: 2.059 ns/op
# Warmup Iteration   3: 2.117 ns/op
Iteration   1: 2.110 ns/op
Iteration   2: 2.118 ns/op
Iteration   3: 2.138 ns/op
Iteration   4: 2.372 ns/op
Iteration   5: 2.275 ns/op

# Run progress: 27.82% complete, ETA 07:05:43
# Fork: 2 of 3
# Warmup Iteration   1: 2.119 ns/op
# Warmup Iteration   2: 2.158 ns/op
# Warmup Iteration   3: 2.128 ns/op
Iteration   1: 2.066 ns/op
Iteration   2: 1.890 ns/op
Iteration   3: 2.125 ns/op
Iteration   4: 2.203 ns/op
Iteration   5: 2.728 ns/op

# Run progress: 27.84% complete, ETA 07:05:34
# Fork: 3 of 3
# Warmup Iteration   1: 2.349 ns/op
# Warmup Iteration   2: 2.211 ns/op
# Warmup Iteration   3: 2.249 ns/op
Iteration   1: 2.243 ns/op
Iteration   2: 2.193 ns/op
Iteration   3: 2.288 ns/op
Iteration   4: 2.213 ns/op
Iteration   5: 2.140 ns/op


Result "kotlin_benchmarks.array.read.Inline32int.Val_as_Ref_to_Int_read":
  2.207 ±(99.9%) 0.195 ns/op [Average]
  (min, avg, max) = (1.890, 2.207, 2.728), stdev = 0.182
  CI (99.9%): [2.012, 2.402] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.read.Inline32int.Val_as_Ref_to_Int_read
# Parameters: (size = 1000000)

# Run progress: 27.87% complete, ETA 07:05:26
# Fork: 1 of 3
# Warmup Iteration   1: 2.203 ns/op
# Warmup Iteration   2: 2.160 ns/op
# Warmup Iteration   3: 2.145 ns/op
Iteration   1: 2.672 ns/op
Iteration   2: 2.307 ns/op
Iteration   3: 2.135 ns/op
Iteration   4: 2.128 ns/op
Iteration   5: 2.121 ns/op

# Run progress: 27.89% complete, ETA 07:05:17
# Fork: 2 of 3
# Warmup Iteration   1: 2.214 ns/op
# Warmup Iteration   2: 2.287 ns/op
# Warmup Iteration   3: 2.245 ns/op
Iteration   1: 2.225 ns/op
Iteration   2: 2.450 ns/op
Iteration   3: 2.191 ns/op
Iteration   4: 2.188 ns/op
Iteration   5: 2.138 ns/op

# Run progress: 27.92% complete, ETA 07:05:09
# Fork: 3 of 3
# Warmup Iteration   1: 2.239 ns/op
# Warmup Iteration   2: 2.130 ns/op
# Warmup Iteration   3: 2.182 ns/op
Iteration   1: 2.153 ns/op
Iteration   2: 2.157 ns/op
Iteration   3: 2.121 ns/op
Iteration   4: 2.140 ns/op
Iteration   5: 2.125 ns/op


Result "kotlin_benchmarks.array.read.Inline32int.Val_as_Ref_to_Int_read":
  2.217 ±(99.9%) 0.165 ns/op [Average]
  (min, avg, max) = (2.121, 2.217, 2.672), stdev = 0.154
  CI (99.9%): [2.052, 2.381] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.read.Inline32int.Val_as_Ref_to_Ref_read
# Parameters: (size = 100)

# Run progress: 27.94% complete, ETA 07:05:00
# Fork: 1 of 3
# Warmup Iteration   1: 2.156 ns/op
# Warmup Iteration   2: 2.121 ns/op
# Warmup Iteration   3: 2.078 ns/op
Iteration   1: 2.095 ns/op
Iteration   2: 2.138 ns/op
Iteration   3: 2.261 ns/op
Iteration   4: 2.139 ns/op
Iteration   5: 2.151 ns/op

# Run progress: 27.97% complete, ETA 07:04:51
# Fork: 2 of 3
# Warmup Iteration   1: 2.191 ns/op
# Warmup Iteration   2: 2.160 ns/op
# Warmup Iteration   3: 2.024 ns/op
Iteration   1: 1.532 ns/op
Iteration   2: 1.555 ns/op
Iteration   3: 1.737 ns/op
Iteration   4: 1.702 ns/op
Iteration   5: 1.763 ns/op

# Run progress: 27.99% complete, ETA 07:04:43
# Fork: 3 of 3
# Warmup Iteration   1: 2.320 ns/op
# Warmup Iteration   2: 2.539 ns/op
# Warmup Iteration   3: 2.246 ns/op
Iteration   1: 2.238 ns/op
Iteration   2: 2.252 ns/op
Iteration   3: 2.217 ns/op
Iteration   4: 2.190 ns/op
Iteration   5: 2.216 ns/op


Result "kotlin_benchmarks.array.read.Inline32int.Val_as_Ref_to_Ref_read":
  2.012 ±(99.9%) 0.288 ns/op [Average]
  (min, avg, max) = (1.532, 2.012, 2.261), stdev = 0.270
  CI (99.9%): [1.724, 2.301] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.read.Inline32int.Val_as_Ref_to_Ref_read
# Parameters: (size = 1000000)

# Run progress: 28.01% complete, ETA 07:04:34
# Fork: 1 of 3
# Warmup Iteration   1: 1.935 ns/op
# Warmup Iteration   2: 1.394 ns/op
# Warmup Iteration   3: 1.443 ns/op
Iteration   1: 1.483 ns/op
Iteration   2: 1.290 ns/op
Iteration   3: 1.459 ns/op
Iteration   4: 1.631 ns/op
Iteration   5: 2.078 ns/op

# Run progress: 28.04% complete, ETA 07:04:25
# Fork: 2 of 3
# Warmup Iteration   1: 2.221 ns/op
# Warmup Iteration   2: 2.197 ns/op
# Warmup Iteration   3: 2.168 ns/op
Iteration   1: 2.141 ns/op
Iteration   2: 2.156 ns/op
Iteration   3: 2.113 ns/op
Iteration   4: 2.127 ns/op
Iteration   5: 2.145 ns/op

# Run progress: 28.06% complete, ETA 07:04:17
# Fork: 3 of 3
# Warmup Iteration   1: 1.942 ns/op
# Warmup Iteration   2: 1.480 ns/op
# Warmup Iteration   3: 1.478 ns/op
Iteration   1: 1.287 ns/op
Iteration   2: 1.371 ns/op
Iteration   3: 1.606 ns/op
Iteration   4: 2.088 ns/op
Iteration   5: 2.213 ns/op


Result "kotlin_benchmarks.array.read.Inline32int.Val_as_Ref_to_Ref_read":
  1.813 ±(99.9%) 0.392 ns/op [Average]
  (min, avg, max) = (1.287, 1.813, 2.213), stdev = 0.367
  CI (99.9%): [1.420, 2.205] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.read.Inline32int.Val_as_Ref_to_Val_read
# Parameters: (size = 100)

# Run progress: 28.09% complete, ETA 07:04:09
# Fork: 1 of 3
# Warmup Iteration   1: 2.259 ns/op
# Warmup Iteration   2: 2.170 ns/op
# Warmup Iteration   3: 2.180 ns/op
Iteration   1: 2.232 ns/op
Iteration   2: 2.142 ns/op
Iteration   3: 2.211 ns/op
Iteration   4: 2.159 ns/op
Iteration   5: 1.971 ns/op

# Run progress: 28.11% complete, ETA 07:04:00
# Fork: 2 of 3
# Warmup Iteration   1: 1.399 ns/op
# Warmup Iteration   2: 1.410 ns/op
# Warmup Iteration   3: 1.285 ns/op
Iteration   1: 1.294 ns/op
Iteration   2: 1.541 ns/op
Iteration   3: 2.036 ns/op
Iteration   4: 2.195 ns/op
Iteration   5: 2.148 ns/op

# Run progress: 28.14% complete, ETA 07:03:51
# Fork: 3 of 3
# Warmup Iteration   1: 2.143 ns/op
# Warmup Iteration   2: 2.110 ns/op
# Warmup Iteration   3: 2.124 ns/op
Iteration   1: 2.151 ns/op
Iteration   2: 2.173 ns/op
Iteration   3: 2.145 ns/op
Iteration   4: 1.718 ns/op
Iteration   5: 1.314 ns/op


Result "kotlin_benchmarks.array.read.Inline32int.Val_as_Ref_to_Val_read":
  1.962 ±(99.9%) 0.352 ns/op [Average]
  (min, avg, max) = (1.294, 1.962, 2.232), stdev = 0.329
  CI (99.9%): [1.610, 2.314] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.read.Inline32int.Val_as_Ref_to_Val_read
# Parameters: (size = 1000000)

# Run progress: 28.16% complete, ETA 07:03:42
# Fork: 1 of 3
# Warmup Iteration   1: 1.508 ns/op
# Warmup Iteration   2: 1.328 ns/op
# Warmup Iteration   3: 1.317 ns/op
Iteration   1: 1.492 ns/op
Iteration   2: 1.867 ns/op
Iteration   3: 2.341 ns/op
Iteration   4: 2.169 ns/op
Iteration   5: 2.161 ns/op

# Run progress: 28.19% complete, ETA 07:03:33
# Fork: 2 of 3
# Warmup Iteration   1: 2.340 ns/op
# Warmup Iteration   2: 2.284 ns/op
# Warmup Iteration   3: 2.238 ns/op
Iteration   1: 2.253 ns/op
Iteration   2: 2.275 ns/op
Iteration   3: 2.174 ns/op
Iteration   4: 2.261 ns/op
Iteration   5: 2.279 ns/op

# Run progress: 28.21% complete, ETA 07:03:24
# Fork: 3 of 3
# Warmup Iteration   1: 2.171 ns/op
# Warmup Iteration   2: 2.207 ns/op
# Warmup Iteration   3: 1.827 ns/op
Iteration   1: 1.723 ns/op
Iteration   2: 2.064 ns/op
Iteration   3: 2.386 ns/op
Iteration   4: 2.219 ns/op
Iteration   5: 2.623 ns/op


Result "kotlin_benchmarks.array.read.Inline32int.Val_as_Ref_to_Val_read":
  2.153 ±(99.9%) 0.297 ns/op [Average]
  (min, avg, max) = (1.492, 2.153, 2.623), stdev = 0.278
  CI (99.9%): [1.856, 2.449] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.read.Inline32int.Val_as_Val_to_Int_read
# Parameters: (size = 100)

# Run progress: 28.24% complete, ETA 07:03:16
# Fork: 1 of 3
# Warmup Iteration   1: 2.105 ns/op
# Warmup Iteration   2: 2.060 ns/op
# Warmup Iteration   3: 2.162 ns/op
Iteration   1: 2.121 ns/op
Iteration   2: 2.135 ns/op
Iteration   3: 1.967 ns/op
Iteration   4: 1.613 ns/op
Iteration   5: 1.670 ns/op

# Run progress: 28.26% complete, ETA 07:03:07
# Fork: 2 of 3
# Warmup Iteration   1: 1.759 ns/op
# Warmup Iteration   2: 1.756 ns/op
# Warmup Iteration   3: 1.839 ns/op
Iteration   1: 2.171 ns/op
Iteration   2: 2.290 ns/op
Iteration   3: 2.724 ns/op
Iteration   4: 2.146 ns/op
Iteration   5: 2.396 ns/op

# Run progress: 28.28% complete, ETA 07:02:58
# Fork: 3 of 3
# Warmup Iteration   1: 2.162 ns/op
# Warmup Iteration   2: 2.139 ns/op
# Warmup Iteration   3: 2.117 ns/op
Iteration   1: 2.152 ns/op
Iteration   2: 2.190 ns/op
Iteration   3: 2.132 ns/op
Iteration   4: 2.132 ns/op
Iteration   5: 1.975 ns/op


Result "kotlin_benchmarks.array.read.Inline32int.Val_as_Val_to_Int_read":
  2.121 ±(99.9%) 0.283 ns/op [Average]
  (min, avg, max) = (1.613, 2.121, 2.724), stdev = 0.265
  CI (99.9%): [1.838, 2.404] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.read.Inline32int.Val_as_Val_to_Int_read
# Parameters: (size = 1000000)

# Run progress: 28.31% complete, ETA 07:02:50
# Fork: 1 of 3
# Warmup Iteration   1: 1.738 ns/op
# Warmup Iteration   2: 2.037 ns/op
# Warmup Iteration   3: 2.224 ns/op
Iteration   1: 2.581 ns/op
Iteration   2: 3.073 ns/op
Iteration   3: 2.624 ns/op
Iteration   4: 2.197 ns/op
Iteration   5: 2.475 ns/op

# Run progress: 28.33% complete, ETA 07:02:41
# Fork: 2 of 3
# Warmup Iteration   1: 2.580 ns/op
# Warmup Iteration   2: 2.324 ns/op
# Warmup Iteration   3: 2.548 ns/op
Iteration   1: 2.327 ns/op
Iteration   2: 2.301 ns/op
Iteration   3: 2.220 ns/op
Iteration   4: 2.242 ns/op
Iteration   5: 2.332 ns/op

# Run progress: 28.36% complete, ETA 07:02:32
# Fork: 3 of 3
# Warmup Iteration   1: 2.200 ns/op
# Warmup Iteration   2: 2.133 ns/op
# Warmup Iteration   3: 2.281 ns/op
Iteration   1: 2.138 ns/op
Iteration   2: 2.389 ns/op
Iteration   3: 2.313 ns/op
Iteration   4: 2.391 ns/op
Iteration   5: 2.370 ns/op


Result "kotlin_benchmarks.array.read.Inline32int.Val_as_Val_to_Int_read":
  2.398 ±(99.9%) 0.245 ns/op [Average]
  (min, avg, max) = (2.138, 2.398, 3.073), stdev = 0.229
  CI (99.9%): [2.153, 2.643] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.read.Inline32int.Val_as_Val_to_Ref_read
# Parameters: (size = 100)

# Run progress: 28.38% complete, ETA 07:02:24
# Fork: 1 of 3
# Warmup Iteration   1: 2.158 ns/op
# Warmup Iteration   2: 2.151 ns/op
# Warmup Iteration   3: 2.127 ns/op
Iteration   1: 2.115 ns/op
Iteration   2: 2.127 ns/op
Iteration   3: 2.123 ns/op
Iteration   4: 2.184 ns/op
Iteration   5: 2.306 ns/op

# Run progress: 28.41% complete, ETA 07:02:16
# Fork: 2 of 3
# Warmup Iteration   1: 2.165 ns/op
# Warmup Iteration   2: 2.133 ns/op
# Warmup Iteration   3: 1.938 ns/op
Iteration   1: 2.003 ns/op
Iteration   2: 2.126 ns/op
Iteration   3: 2.669 ns/op
Iteration   4: 2.422 ns/op
Iteration   5: 2.358 ns/op

# Run progress: 28.43% complete, ETA 07:02:07
# Fork: 3 of 3
# Warmup Iteration   1: 2.097 ns/op
# Warmup Iteration   2: 2.487 ns/op
# Warmup Iteration   3: 2.191 ns/op
Iteration   1: 2.882 ns/op
Iteration   2: 2.189 ns/op
Iteration   3: 2.287 ns/op
Iteration   4: 2.306 ns/op
Iteration   5: 2.275 ns/op


Result "kotlin_benchmarks.array.read.Inline32int.Val_as_Val_to_Ref_read":
  2.291 ±(99.9%) 0.245 ns/op [Average]
  (min, avg, max) = (2.003, 2.291, 2.882), stdev = 0.229
  CI (99.9%): [2.047, 2.536] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.read.Inline32int.Val_as_Val_to_Ref_read
# Parameters: (size = 1000000)

# Run progress: 28.46% complete, ETA 07:01:59
# Fork: 1 of 3
# Warmup Iteration   1: 2.298 ns/op
# Warmup Iteration   2: 2.457 ns/op
# Warmup Iteration   3: 2.219 ns/op
Iteration   1: 2.125 ns/op
Iteration   2: 2.311 ns/op
Iteration   3: 2.378 ns/op
Iteration   4: 2.335 ns/op
Iteration   5: 2.318 ns/op

# Run progress: 28.48% complete, ETA 07:01:50
# Fork: 2 of 3
# Warmup Iteration   1: 2.425 ns/op
# Warmup Iteration   2: 2.175 ns/op
# Warmup Iteration   3: 2.249 ns/op
Iteration   1: 2.501 ns/op
Iteration   2: 2.266 ns/op
Iteration   3: 2.337 ns/op
Iteration   4: 2.168 ns/op
Iteration   5: 2.123 ns/op

# Run progress: 28.50% complete, ETA 07:01:42
# Fork: 3 of 3
# Warmup Iteration   1: 2.231 ns/op
# Warmup Iteration   2: 2.234 ns/op
# Warmup Iteration   3: 2.208 ns/op
Iteration   1: 2.357 ns/op
Iteration   2: 2.401 ns/op
Iteration   3: 2.250 ns/op
Iteration   4: 2.186 ns/op
Iteration   5: 2.427 ns/op


Result "kotlin_benchmarks.array.read.Inline32int.Val_as_Val_to_Ref_read":
  2.299 ±(99.9%) 0.119 ns/op [Average]
  (min, avg, max) = (2.123, 2.299, 2.501), stdev = 0.112
  CI (99.9%): [2.179, 2.418] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.read.Inline32int.Val_as_Val_to_Val_read
# Parameters: (size = 100)

# Run progress: 28.53% complete, ETA 07:01:34
# Fork: 1 of 3
# Warmup Iteration   1: 2.386 ns/op
# Warmup Iteration   2: 2.407 ns/op
# Warmup Iteration   3: 2.412 ns/op
Iteration   1: 2.353 ns/op
Iteration   2: 2.297 ns/op
Iteration   3: 2.372 ns/op
Iteration   4: 2.446 ns/op
Iteration   5: 2.711 ns/op

# Run progress: 28.55% complete, ETA 07:01:26
# Fork: 2 of 3
# Warmup Iteration   1: 2.436 ns/op
# Warmup Iteration   2: 2.374 ns/op
# Warmup Iteration   3: 2.167 ns/op
Iteration   1: 2.127 ns/op
Iteration   2: 2.213 ns/op
Iteration   3: 2.166 ns/op
Iteration   4: 2.188 ns/op
Iteration   5: 2.133 ns/op

# Run progress: 28.58% complete, ETA 07:01:17
# Fork: 3 of 3
# Warmup Iteration   1: 2.448 ns/op
# Warmup Iteration   2: 2.282 ns/op
# Warmup Iteration   3: 2.341 ns/op
Iteration   1: 2.989 ns/op
Iteration   2: 2.702 ns/op
Iteration   3: 2.582 ns/op
Iteration   4: 2.621 ns/op
Iteration   5: 2.653 ns/op


Result "kotlin_benchmarks.array.read.Inline32int.Val_as_Val_to_Val_read":
  2.437 ±(99.9%) 0.279 ns/op [Average]
  (min, avg, max) = (2.127, 2.437, 2.989), stdev = 0.261
  CI (99.9%): [2.157, 2.716] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.read.Inline32int.Val_as_Val_to_Val_read
# Parameters: (size = 1000000)

# Run progress: 28.60% complete, ETA 07:01:09
# Fork: 1 of 3
# Warmup Iteration   1: 2.393 ns/op
# Warmup Iteration   2: 2.381 ns/op
# Warmup Iteration   3: 2.472 ns/op
Iteration   1: 2.629 ns/op
Iteration   2: 2.270 ns/op
Iteration   3: 2.266 ns/op
Iteration   4: 2.481 ns/op
Iteration   5: 2.693 ns/op

# Run progress: 28.63% complete, ETA 07:01:01
# Fork: 2 of 3
# Warmup Iteration   1: 2.341 ns/op
# Warmup Iteration   2: 2.181 ns/op
# Warmup Iteration   3: 2.262 ns/op
Iteration   1: 2.199 ns/op
Iteration   2: 2.144 ns/op
Iteration   3: 2.239 ns/op
Iteration   4: 2.280 ns/op
Iteration   5: 2.205 ns/op

# Run progress: 28.65% complete, ETA 07:00:53
# Fork: 3 of 3
# Warmup Iteration   1: 2.467 ns/op
# Warmup Iteration   2: 2.430 ns/op
# Warmup Iteration   3: 2.454 ns/op
Iteration   1: 2.474 ns/op
Iteration   2: 2.478 ns/op
Iteration   3: 2.471 ns/op
Iteration   4: 2.421 ns/op
Iteration   5: 2.422 ns/op


Result "kotlin_benchmarks.array.read.Inline32int.Val_as_Val_to_Val_read":
  2.378 ±(99.9%) 0.175 ns/op [Average]
  (min, avg, max) = (2.144, 2.378, 2.693), stdev = 0.164
  CI (99.9%): [2.203, 2.553] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.read.Inline64byte.Val_as_Int_to_Int_read
# Parameters: (size = 100)

# Run progress: 28.68% complete, ETA 07:00:44
# Fork: 1 of 3
# Warmup Iteration   1: 2.382 ns/op
# Warmup Iteration   2: 2.391 ns/op
# Warmup Iteration   3: 2.455 ns/op
Iteration   1: 2.369 ns/op
Iteration   2: 2.720 ns/op
Iteration   3: 2.721 ns/op
Iteration   4: 2.413 ns/op
Iteration   5: 2.387 ns/op

# Run progress: 28.70% complete, ETA 07:00:36
# Fork: 2 of 3
# Warmup Iteration   1: 2.415 ns/op
# Warmup Iteration   2: 2.087 ns/op
# Warmup Iteration   3: 2.125 ns/op
Iteration   1: 2.103 ns/op
Iteration   2: 2.128 ns/op
Iteration   3: 2.224 ns/op
Iteration   4: 2.497 ns/op
Iteration   5: 2.203 ns/op

# Run progress: 28.73% complete, ETA 07:00:28
# Fork: 3 of 3
# Warmup Iteration   1: 2.468 ns/op
# Warmup Iteration   2: 2.394 ns/op
# Warmup Iteration   3: 2.424 ns/op
Iteration   1: 2.440 ns/op
Iteration   2: 2.383 ns/op
Iteration   3: 2.357 ns/op
Iteration   4: 2.332 ns/op
Iteration   5: 2.335 ns/op


Result "kotlin_benchmarks.array.read.Inline64byte.Val_as_Int_to_Int_read":
  2.374 ±(99.9%) 0.192 ns/op [Average]
  (min, avg, max) = (2.103, 2.374, 2.721), stdev = 0.180
  CI (99.9%): [2.182, 2.566] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.read.Inline64byte.Val_as_Int_to_Int_read
# Parameters: (size = 1000000)

# Run progress: 28.75% complete, ETA 07:00:20
# Fork: 1 of 3
# Warmup Iteration   1: 2.372 ns/op
# Warmup Iteration   2: 2.345 ns/op
# Warmup Iteration   3: 2.344 ns/op
Iteration   1: 2.234 ns/op
Iteration   2: 2.233 ns/op
Iteration   3: 2.363 ns/op
Iteration   4: 3.020 ns/op
Iteration   5: 3.066 ns/op

# Run progress: 28.77% complete, ETA 07:00:12
# Fork: 2 of 3
# Warmup Iteration   1: 2.235 ns/op
# Warmup Iteration   2: 2.486 ns/op
# Warmup Iteration   3: 2.182 ns/op
Iteration   1: 2.155 ns/op
Iteration   2: 2.240 ns/op
Iteration   3: 2.244 ns/op
Iteration   4: 2.158 ns/op
Iteration   5: 2.495 ns/op

# Run progress: 28.80% complete, ETA 07:00:03
# Fork: 3 of 3
# Warmup Iteration   1: 2.343 ns/op
# Warmup Iteration   2: 2.335 ns/op
# Warmup Iteration   3: 2.353 ns/op
Iteration   1: 2.382 ns/op
Iteration   2: 2.364 ns/op
Iteration   3: 2.265 ns/op
Iteration   4: 2.401 ns/op
Iteration   5: 2.235 ns/op


Result "kotlin_benchmarks.array.read.Inline64byte.Val_as_Int_to_Int_read":
  2.390 ±(99.9%) 0.301 ns/op [Average]
  (min, avg, max) = (2.155, 2.390, 3.066), stdev = 0.281
  CI (99.9%): [2.089, 2.691] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.read.Inline64byte.Val_as_Ref_to_Int_read
# Parameters: (size = 100)

# Run progress: 28.82% complete, ETA 06:59:55
# Fork: 1 of 3
# Warmup Iteration   1: 3.082 ns/op
# Warmup Iteration   2: 3.457 ns/op
# Warmup Iteration   3: 3.135 ns/op
Iteration   1: 3.203 ns/op
Iteration   2: 3.062 ns/op
Iteration   3: 3.008 ns/op
Iteration   4: 3.212 ns/op
Iteration   5: 2.838 ns/op

# Run progress: 28.85% complete, ETA 06:59:48
# Fork: 2 of 3
# Warmup Iteration   1: 2.887 ns/op
# Warmup Iteration   2: 2.581 ns/op
# Warmup Iteration   3: 2.349 ns/op
Iteration   1: 2.753 ns/op
Iteration   2: 3.146 ns/op
Iteration   3: 2.890 ns/op
Iteration   4: 2.721 ns/op
Iteration   5: 2.695 ns/op

# Run progress: 28.87% complete, ETA 06:59:40
# Fork: 3 of 3
# Warmup Iteration   1: 2.616 ns/op
# Warmup Iteration   2: 2.579 ns/op
# Warmup Iteration   3: 2.567 ns/op
Iteration   1: 2.583 ns/op
Iteration   2: 2.984 ns/op
Iteration   3: 3.234 ns/op
Iteration   4: 4.977 ns/op
Iteration   5: 4.383 ns/op


Result "kotlin_benchmarks.array.read.Inline64byte.Val_as_Ref_to_Int_read":
  3.179 ±(99.9%) 0.697 ns/op [Average]
  (min, avg, max) = (2.583, 3.179, 4.977), stdev = 0.652
  CI (99.9%): [2.482, 3.876] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.read.Inline64byte.Val_as_Ref_to_Int_read
# Parameters: (size = 1000000)

# Run progress: 28.90% complete, ETA 06:59:31
# Fork: 1 of 3
# Warmup Iteration   1: 4.142 ns/op
# Warmup Iteration   2: 3.417 ns/op
# Warmup Iteration   3: 2.852 ns/op
Iteration   1: 2.219 ns/op
Iteration   2: 2.221 ns/op
Iteration   3: 2.640 ns/op
Iteration   4: 2.620 ns/op
Iteration   5: 2.634 ns/op

# Run progress: 28.92% complete, ETA 06:59:24
# Fork: 2 of 3
# Warmup Iteration   1: 2.618 ns/op
# Warmup Iteration   2: 2.566 ns/op
# Warmup Iteration   3: 2.220 ns/op
Iteration   1: 2.453 ns/op
Iteration   2: 2.561 ns/op
Iteration   3: 2.401 ns/op
Iteration   4: 2.340 ns/op
Iteration   5: 2.969 ns/op

# Run progress: 28.95% complete, ETA 06:59:16
# Fork: 3 of 3
# Warmup Iteration   1: 2.691 ns/op
# Warmup Iteration   2: 2.337 ns/op
# Warmup Iteration   3: 2.433 ns/op
Iteration   1: 2.292 ns/op
Iteration   2: 2.220 ns/op
Iteration   3: 2.277 ns/op
Iteration   4: 2.252 ns/op
Iteration   5: 2.267 ns/op


Result "kotlin_benchmarks.array.read.Inline64byte.Val_as_Ref_to_Int_read":
  2.424 ±(99.9%) 0.234 ns/op [Average]
  (min, avg, max) = (2.219, 2.424, 2.969), stdev = 0.219
  CI (99.9%): [2.190, 2.658] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.read.Inline64byte.Val_as_Ref_to_Ref_read
# Parameters: (size = 100)

# Run progress: 28.97% complete, ETA 06:59:08
# Fork: 1 of 3
# Warmup Iteration   1: 2.594 ns/op
# Warmup Iteration   2: 2.574 ns/op
# Warmup Iteration   3: 2.522 ns/op
Iteration   1: 2.548 ns/op
Iteration   2: 2.928 ns/op
Iteration   3: 2.568 ns/op
Iteration   4: 2.555 ns/op
Iteration   5: 2.558 ns/op

# Run progress: 29.00% complete, ETA 06:58:59
# Fork: 2 of 3
# Warmup Iteration   1: 2.993 ns/op
# Warmup Iteration   2: 2.644 ns/op
# Warmup Iteration   3: 2.778 ns/op
Iteration   1: 2.679 ns/op
Iteration   2: 2.263 ns/op
Iteration   3: 2.303 ns/op
Iteration   4: 2.428 ns/op
Iteration   5: 2.360 ns/op

# Run progress: 29.02% complete, ETA 06:58:50
# Fork: 3 of 3
# Warmup Iteration   1: 2.636 ns/op
# Warmup Iteration   2: 2.565 ns/op
# Warmup Iteration   3: 2.555 ns/op
Iteration   1: 2.215 ns/op
Iteration   2: 2.086 ns/op
Iteration   3: 2.420 ns/op
Iteration   4: 2.635 ns/op
Iteration   5: 2.729 ns/op


Result "kotlin_benchmarks.array.read.Inline64byte.Val_as_Ref_to_Ref_read":
  2.485 ±(99.9%) 0.235 ns/op [Average]
  (min, avg, max) = (2.086, 2.485, 2.928), stdev = 0.220
  CI (99.9%): [2.250, 2.720] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.read.Inline64byte.Val_as_Ref_to_Ref_read
# Parameters: (size = 1000000)

# Run progress: 29.04% complete, ETA 06:58:42
# Fork: 1 of 3
# Warmup Iteration   1: 2.708 ns/op
# Warmup Iteration   2: 2.631 ns/op
# Warmup Iteration   3: 3.251 ns/op
Iteration   1: 2.508 ns/op
Iteration   2: 2.581 ns/op
Iteration   3: 2.379 ns/op
Iteration   4: 2.381 ns/op
Iteration   5: 2.361 ns/op

# Run progress: 29.07% complete, ETA 06:58:33
# Fork: 2 of 3
# Warmup Iteration   1: 2.275 ns/op
# Warmup Iteration   2: 2.303 ns/op
# Warmup Iteration   3: 2.486 ns/op
Iteration   1: 2.546 ns/op
Iteration   2: 2.720 ns/op
Iteration   3: 2.644 ns/op
Iteration   4: 2.419 ns/op
Iteration   5: 2.553 ns/op

# Run progress: 29.09% complete, ETA 06:58:25
# Fork: 3 of 3
# Warmup Iteration   1: 2.495 ns/op
# Warmup Iteration   2: 2.257 ns/op
# Warmup Iteration   3: 2.308 ns/op
Iteration   1: 2.313 ns/op
Iteration   2: 2.504 ns/op
Iteration   3: 2.880 ns/op
Iteration   4: 2.364 ns/op
Iteration   5: 2.996 ns/op


Result "kotlin_benchmarks.array.read.Inline64byte.Val_as_Ref_to_Ref_read":
  2.543 ±(99.9%) 0.212 ns/op [Average]
  (min, avg, max) = (2.313, 2.543, 2.996), stdev = 0.198
  CI (99.9%): [2.331, 2.755] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.read.Inline64byte.Val_as_Ref_to_Val_read
# Parameters: (size = 100)

# Run progress: 29.12% complete, ETA 06:58:17
# Fork: 1 of 3
# Warmup Iteration   1: 2.822 ns/op
# Warmup Iteration   2: 2.597 ns/op
# Warmup Iteration   3: 2.584 ns/op
Iteration   1: 2.613 ns/op
Iteration   2: 2.575 ns/op
Iteration   3: 2.336 ns/op
Iteration   4: 1.777 ns/op
Iteration   5: 2.033 ns/op

# Run progress: 29.14% complete, ETA 06:58:08
# Fork: 2 of 3
# Warmup Iteration   1: 2.358 ns/op
# Warmup Iteration   2: 2.634 ns/op
# Warmup Iteration   3: 2.449 ns/op
Iteration   1: 2.657 ns/op
Iteration   2: 2.726 ns/op
Iteration   3: 2.424 ns/op
Iteration   4: 2.432 ns/op
Iteration   5: 2.560 ns/op

# Run progress: 29.17% complete, ETA 06:57:59
# Fork: 3 of 3
# Warmup Iteration   1: 2.571 ns/op
# Warmup Iteration   2: 2.641 ns/op
# Warmup Iteration   3: 2.555 ns/op
Iteration   1: 1.979 ns/op
Iteration   2: 2.016 ns/op
Iteration   3: 2.312 ns/op
Iteration   4: 2.281 ns/op
Iteration   5: 2.336 ns/op


Result "kotlin_benchmarks.array.read.Inline64byte.Val_as_Ref_to_Val_read":
  2.337 ±(99.9%) 0.299 ns/op [Average]
  (min, avg, max) = (1.777, 2.337, 2.726), stdev = 0.279
  CI (99.9%): [2.038, 2.636] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.read.Inline64byte.Val_as_Ref_to_Val_read
# Parameters: (size = 1000000)

# Run progress: 29.19% complete, ETA 06:57:51
# Fork: 1 of 3
# Warmup Iteration   1: 2.372 ns/op
# Warmup Iteration   2: 2.878 ns/op
# Warmup Iteration   3: 2.449 ns/op
Iteration   1: 2.558 ns/op
Iteration   2: 2.243 ns/op
Iteration   3: 2.090 ns/op
Iteration   4: 2.439 ns/op
Iteration   5: 2.464 ns/op

# Run progress: 29.22% complete, ETA 06:57:42
# Fork: 2 of 3
# Warmup Iteration   1: 2.479 ns/op
# Warmup Iteration   2: 1.922 ns/op
# Warmup Iteration   3: 2.502 ns/op
Iteration   1: 2.318 ns/op
Iteration   2: 2.301 ns/op
Iteration   3: 2.366 ns/op
Iteration   4: 2.303 ns/op
Iteration   5: 2.333 ns/op

# Run progress: 29.24% complete, ETA 06:57:34
# Fork: 3 of 3
# Warmup Iteration   1: 2.661 ns/op
# Warmup Iteration   2: 2.586 ns/op
# Warmup Iteration   3: 2.600 ns/op
Iteration   1: 2.370 ns/op
Iteration   2: 2.347 ns/op
Iteration   3: 2.347 ns/op
Iteration   4: 2.409 ns/op
Iteration   5: 2.553 ns/op


Result "kotlin_benchmarks.array.read.Inline64byte.Val_as_Ref_to_Val_read":
  2.363 ±(99.9%) 0.125 ns/op [Average]
  (min, avg, max) = (2.090, 2.363, 2.558), stdev = 0.117
  CI (99.9%): [2.237, 2.488] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.read.Inline64byte.Val_as_Val_to_Int_read
# Parameters: (size = 100)

# Run progress: 29.26% complete, ETA 06:57:25
# Fork: 1 of 3
# Warmup Iteration   1: 2.581 ns/op
# Warmup Iteration   2: 2.270 ns/op
# Warmup Iteration   3: 2.308 ns/op
Iteration   1: 2.272 ns/op
Iteration   2: 2.312 ns/op
Iteration   3: 2.228 ns/op
Iteration   4: 2.244 ns/op
Iteration   5: 2.451 ns/op

# Run progress: 29.29% complete, ETA 06:57:17
# Fork: 2 of 3
# Warmup Iteration   1: 2.586 ns/op
# Warmup Iteration   2: 2.092 ns/op
# Warmup Iteration   3: 2.301 ns/op
Iteration   1: 2.547 ns/op
Iteration   2: 2.482 ns/op
Iteration   3: 2.369 ns/op
Iteration   4: 2.482 ns/op
Iteration   5: 2.499 ns/op

# Run progress: 29.31% complete, ETA 06:57:08
# Fork: 3 of 3
# Warmup Iteration   1: 2.231 ns/op
# Warmup Iteration   2: 2.543 ns/op
# Warmup Iteration   3: 2.223 ns/op
Iteration   1: 2.263 ns/op
Iteration   2: 2.325 ns/op
Iteration   3: 2.261 ns/op
Iteration   4: 2.229 ns/op
Iteration   5: 2.521 ns/op


Result "kotlin_benchmarks.array.read.Inline64byte.Val_as_Val_to_Int_read":
  2.366 ±(99.9%) 0.127 ns/op [Average]
  (min, avg, max) = (2.228, 2.366, 2.547), stdev = 0.119
  CI (99.9%): [2.239, 2.492] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.read.Inline64byte.Val_as_Val_to_Int_read
# Parameters: (size = 1000000)

# Run progress: 29.34% complete, ETA 06:56:59
# Fork: 1 of 3
# Warmup Iteration   1: 2.259 ns/op
# Warmup Iteration   2: 2.121 ns/op
# Warmup Iteration   3: 2.348 ns/op
Iteration   1: 2.786 ns/op
Iteration   2: 2.819 ns/op
Iteration   3: 2.658 ns/op
Iteration   4: 2.572 ns/op
Iteration   5: 2.695 ns/op

# Run progress: 29.36% complete, ETA 06:56:51
# Fork: 2 of 3
# Warmup Iteration   1: 2.761 ns/op
# Warmup Iteration   2: 2.684 ns/op
# Warmup Iteration   3: 2.537 ns/op
Iteration   1: 2.505 ns/op
Iteration   2: 2.534 ns/op
Iteration   3: 2.476 ns/op
Iteration   4: 2.525 ns/op
Iteration   5: 2.649 ns/op

# Run progress: 29.39% complete, ETA 06:56:42
# Fork: 3 of 3
# Warmup Iteration   1: 2.634 ns/op
# Warmup Iteration   2: 2.575 ns/op
# Warmup Iteration   3: 2.553 ns/op
Iteration   1: 2.570 ns/op
Iteration   2: 2.561 ns/op
Iteration   3: 2.575 ns/op
Iteration   4: 2.563 ns/op
Iteration   5: 2.801 ns/op


Result "kotlin_benchmarks.array.read.Inline64byte.Val_as_Val_to_Int_read":
  2.619 ±(99.9%) 0.118 ns/op [Average]
  (min, avg, max) = (2.476, 2.619, 2.819), stdev = 0.111
  CI (99.9%): [2.501, 2.738] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.read.Inline64byte.Val_as_Val_to_Ref_read
# Parameters: (size = 100)

# Run progress: 29.41% complete, ETA 06:56:34
# Fork: 1 of 3
# Warmup Iteration   1: 2.353 ns/op
# Warmup Iteration   2: 2.487 ns/op
# Warmup Iteration   3: 2.326 ns/op
Iteration   1: 2.266 ns/op
Iteration   2: 2.334 ns/op
Iteration   3: 2.277 ns/op
Iteration   4: 2.233 ns/op
Iteration   5: 2.334 ns/op

# Run progress: 29.44% complete, ETA 06:56:26
# Fork: 2 of 3
# Warmup Iteration   1: 2.616 ns/op
# Warmup Iteration   2: 2.562 ns/op
# Warmup Iteration   3: 2.540 ns/op
Iteration   1: 2.525 ns/op
Iteration   2: 2.560 ns/op
Iteration   3: 2.555 ns/op
Iteration   4: 2.556 ns/op
Iteration   5: 2.793 ns/op

# Run progress: 29.46% complete, ETA 06:56:17
# Fork: 3 of 3
# Warmup Iteration   1: 2.635 ns/op
# Warmup Iteration   2: 2.757 ns/op
# Warmup Iteration   3: 2.559 ns/op
Iteration   1: 2.735 ns/op
Iteration   2: 2.618 ns/op
Iteration   3: 2.693 ns/op
Iteration   4: 2.513 ns/op
Iteration   5: 2.551 ns/op


Result "kotlin_benchmarks.array.read.Inline64byte.Val_as_Val_to_Ref_read":
  2.503 ±(99.9%) 0.189 ns/op [Average]
  (min, avg, max) = (2.233, 2.503, 2.793), stdev = 0.176
  CI (99.9%): [2.314, 2.692] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.read.Inline64byte.Val_as_Val_to_Ref_read
# Parameters: (size = 1000000)

# Run progress: 29.49% complete, ETA 06:56:09
# Fork: 1 of 3
# Warmup Iteration   1: 2.703 ns/op
# Warmup Iteration   2: 2.594 ns/op
# Warmup Iteration   3: 2.554 ns/op
Iteration   1: 2.557 ns/op
Iteration   2: 2.522 ns/op
Iteration   3: 2.569 ns/op
Iteration   4: 2.496 ns/op
Iteration   5: 2.640 ns/op

# Run progress: 29.51% complete, ETA 06:56:00
# Fork: 2 of 3
# Warmup Iteration   1: 2.501 ns/op
# Warmup Iteration   2: 2.390 ns/op
# Warmup Iteration   3: 2.389 ns/op
Iteration   1: 2.380 ns/op
Iteration   2: 2.986 ns/op
Iteration   3: 2.577 ns/op
Iteration   4: 2.592 ns/op
Iteration   5: 2.456 ns/op

# Run progress: 29.53% complete, ETA 06:55:52
# Fork: 3 of 3
# Warmup Iteration   1: 2.671 ns/op
# Warmup Iteration   2: 2.588 ns/op
# Warmup Iteration   3: 2.601 ns/op
Iteration   1: 2.599 ns/op
Iteration   2: 2.716 ns/op
Iteration   3: 2.863 ns/op
Iteration   4: 2.414 ns/op
Iteration   5: 2.508 ns/op


Result "kotlin_benchmarks.array.read.Inline64byte.Val_as_Val_to_Ref_read":
  2.592 ±(99.9%) 0.172 ns/op [Average]
  (min, avg, max) = (2.380, 2.592, 2.986), stdev = 0.161
  CI (99.9%): [2.419, 2.764] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.read.Inline64byte.Val_as_Val_to_Val_read
# Parameters: (size = 100)

# Run progress: 29.56% complete, ETA 06:55:44
# Fork: 1 of 3
# Warmup Iteration   1: 2.609 ns/op
# Warmup Iteration   2: 2.512 ns/op
# Warmup Iteration   3: 2.424 ns/op
Iteration   1: 3.152 ns/op
Iteration   2: 2.357 ns/op
Iteration   3: 2.312 ns/op
Iteration   4: 3.482 ns/op
Iteration   5: 2.763 ns/op

# Run progress: 29.58% complete, ETA 06:55:35
# Fork: 2 of 3
# Warmup Iteration   1: 2.428 ns/op
# Warmup Iteration   2: 2.487 ns/op
# Warmup Iteration   3: 2.301 ns/op
Iteration   1: 2.432 ns/op
Iteration   2: 2.568 ns/op
Iteration   3: 2.560 ns/op
Iteration   4: 2.659 ns/op
Iteration   5: 2.542 ns/op

# Run progress: 29.61% complete, ETA 06:55:27
# Fork: 3 of 3
# Warmup Iteration   1: 2.585 ns/op
# Warmup Iteration   2: 2.561 ns/op
# Warmup Iteration   3: 2.546 ns/op
Iteration   1: 2.300 ns/op
Iteration   2: 2.554 ns/op
Iteration   3: 3.231 ns/op
Iteration   4: 2.871 ns/op
Iteration   5: 2.479 ns/op


Result "kotlin_benchmarks.array.read.Inline64byte.Val_as_Val_to_Val_read":
  2.684 ±(99.9%) 0.379 ns/op [Average]
  (min, avg, max) = (2.300, 2.684, 3.482), stdev = 0.355
  CI (99.9%): [2.305, 3.063] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.read.Inline64byte.Val_as_Val_to_Val_read
# Parameters: (size = 1000000)

# Run progress: 29.63% complete, ETA 06:55:18
# Fork: 1 of 3
# Warmup Iteration   1: 2.981 ns/op
# Warmup Iteration   2: 2.878 ns/op
# Warmup Iteration   3: 2.604 ns/op
Iteration   1: 2.329 ns/op
Iteration   2: 2.599 ns/op
Iteration   3: 2.401 ns/op
Iteration   4: 2.246 ns/op
Iteration   5: 2.224 ns/op

# Run progress: 29.66% complete, ETA 06:55:10
# Fork: 2 of 3
# Warmup Iteration   1: 2.653 ns/op
# Warmup Iteration   2: 2.536 ns/op
# Warmup Iteration   3: 2.561 ns/op
Iteration   1: 2.554 ns/op
Iteration   2: 2.554 ns/op
Iteration   3: 2.557 ns/op
Iteration   4: 2.571 ns/op
Iteration   5: 2.908 ns/op

# Run progress: 29.68% complete, ETA 06:55:02
# Fork: 3 of 3
# Warmup Iteration   1: 2.790 ns/op
# Warmup Iteration   2: 2.554 ns/op
# Warmup Iteration   3: 3.000 ns/op
Iteration   1: 2.667 ns/op
Iteration   2: 2.616 ns/op
Iteration   3: 2.631 ns/op
Iteration   4: 2.532 ns/op
Iteration   5: 2.245 ns/op


Result "kotlin_benchmarks.array.read.Inline64byte.Val_as_Val_to_Val_read":
  2.509 ±(99.9%) 0.201 ns/op [Average]
  (min, avg, max) = (2.224, 2.509, 2.908), stdev = 0.188
  CI (99.9%): [2.308, 2.710] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.read.Inline64int.Val_as_Int_to_Int_read
# Parameters: (size = 100)

# Run progress: 29.71% complete, ETA 06:54:54
# Fork: 1 of 3
# Warmup Iteration   1: 2.185 ns/op
# Warmup Iteration   2: 2.095 ns/op
# Warmup Iteration   3: 2.153 ns/op
Iteration   1: 2.197 ns/op
Iteration   2: 2.169 ns/op
Iteration   3: 2.165 ns/op
Iteration   4: 2.439 ns/op
Iteration   5: 2.359 ns/op

# Run progress: 29.73% complete, ETA 06:54:46
# Fork: 2 of 3
# Warmup Iteration   1: 2.654 ns/op
# Warmup Iteration   2: 2.692 ns/op
# Warmup Iteration   3: 2.605 ns/op
Iteration   1: 2.578 ns/op
Iteration   2: 2.584 ns/op
Iteration   3: 2.558 ns/op
Iteration   4: 2.415 ns/op
Iteration   5: 2.608 ns/op

# Run progress: 29.75% complete, ETA 06:54:37
# Fork: 3 of 3
# Warmup Iteration   1: 2.431 ns/op
# Warmup Iteration   2: 2.365 ns/op
# Warmup Iteration   3: 2.152 ns/op
Iteration   1: 2.106 ns/op
Iteration   2: 2.144 ns/op
Iteration   3: 2.104 ns/op
Iteration   4: 2.118 ns/op
Iteration   5: 2.107 ns/op


Result "kotlin_benchmarks.array.read.Inline64int.Val_as_Int_to_Int_read":
  2.310 ±(99.9%) 0.216 ns/op [Average]
  (min, avg, max) = (2.104, 2.310, 2.608), stdev = 0.202
  CI (99.9%): [2.094, 2.526] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.read.Inline64int.Val_as_Int_to_Int_read
# Parameters: (size = 1000000)

# Run progress: 29.78% complete, ETA 06:54:29
# Fork: 1 of 3
# Warmup Iteration   1: 2.180 ns/op
# Warmup Iteration   2: 2.169 ns/op
# Warmup Iteration   3: 2.138 ns/op
Iteration   1: 2.245 ns/op
Iteration   2: 2.400 ns/op
Iteration   3: 2.334 ns/op
Iteration   4: 2.210 ns/op
Iteration   5: 2.191 ns/op

# Run progress: 29.80% complete, ETA 06:54:21
# Fork: 2 of 3
# Warmup Iteration   1: 2.233 ns/op
# Warmup Iteration   2: 2.154 ns/op
# Warmup Iteration   3: 2.365 ns/op
Iteration   1: 2.188 ns/op
Iteration   2: 2.534 ns/op
Iteration   3: 2.516 ns/op
Iteration   4: 3.111 ns/op
Iteration   5: 2.193 ns/op

# Run progress: 29.83% complete, ETA 06:54:12
# Fork: 3 of 3
# Warmup Iteration   1: 2.117 ns/op
# Warmup Iteration   2: 2.057 ns/op
# Warmup Iteration   3: 2.182 ns/op
Iteration   1: 2.143 ns/op
Iteration   2: 2.258 ns/op
Iteration   3: 2.248 ns/op
Iteration   4: 2.286 ns/op
Iteration   5: 2.131 ns/op


Result "kotlin_benchmarks.array.read.Inline64int.Val_as_Int_to_Int_read":
  2.333 ±(99.9%) 0.265 ns/op [Average]
  (min, avg, max) = (2.131, 2.333, 3.111), stdev = 0.248
  CI (99.9%): [2.068, 2.597] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.read.Inline64int.Val_as_Ref_to_Int_read
# Parameters: (size = 100)

# Run progress: 29.85% complete, ETA 06:54:04
# Fork: 1 of 3
# Warmup Iteration   1: 2.682 ns/op
# Warmup Iteration   2: 2.660 ns/op
# Warmup Iteration   3: 2.574 ns/op
Iteration   1: 2.547 ns/op
Iteration   2: 2.335 ns/op
Iteration   3: 2.433 ns/op
Iteration   4: 2.559 ns/op
Iteration   5: 2.418 ns/op

# Run progress: 29.88% complete, ETA 06:53:56
# Fork: 2 of 3
# Warmup Iteration   1: 3.060 ns/op
# Warmup Iteration   2: 2.587 ns/op
# Warmup Iteration   3: 3.209 ns/op
Iteration   1: 2.572 ns/op
Iteration   2: 2.473 ns/op
Iteration   3: 2.474 ns/op
Iteration   4: 2.213 ns/op
Iteration   5: 2.463 ns/op

# Run progress: 29.90% complete, ETA 06:53:48
# Fork: 3 of 3
# Warmup Iteration   1: 2.616 ns/op
# Warmup Iteration   2: 2.469 ns/op
# Warmup Iteration   3: 2.524 ns/op
Iteration   1: 2.543 ns/op
Iteration   2: 2.282 ns/op
Iteration   3: 2.285 ns/op
Iteration   4: 2.316 ns/op
Iteration   5: 2.238 ns/op


Result "kotlin_benchmarks.array.read.Inline64int.Val_as_Ref_to_Int_read":
  2.410 ±(99.9%) 0.131 ns/op [Average]
  (min, avg, max) = (2.213, 2.410, 2.572), stdev = 0.123
  CI (99.9%): [2.279, 2.541] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.read.Inline64int.Val_as_Ref_to_Int_read
# Parameters: (size = 1000000)

# Run progress: 29.93% complete, ETA 06:53:39
# Fork: 1 of 3
# Warmup Iteration   1: 2.632 ns/op
# Warmup Iteration   2: 2.405 ns/op
# Warmup Iteration   3: 2.558 ns/op
Iteration   1: 2.676 ns/op
Iteration   2: 2.755 ns/op
Iteration   3: 2.672 ns/op
Iteration   4: 2.750 ns/op
Iteration   5: 2.779 ns/op

# Run progress: 29.95% complete, ETA 06:53:31
# Fork: 2 of 3
# Warmup Iteration   1: 2.619 ns/op
# Warmup Iteration   2: 2.348 ns/op
# Warmup Iteration   3: 2.231 ns/op
Iteration   1: 2.313 ns/op
Iteration   2: 2.205 ns/op
Iteration   3: 2.191 ns/op
Iteration   4: 2.277 ns/op
Iteration   5: 2.275 ns/op

# Run progress: 29.98% complete, ETA 06:53:22
# Fork: 3 of 3
# Warmup Iteration   1: 2.357 ns/op
# Warmup Iteration   2: 2.449 ns/op
# Warmup Iteration   3: 2.569 ns/op
Iteration   1: 2.664 ns/op
Iteration   2: 2.617 ns/op
Iteration   3: 2.583 ns/op
Iteration   4: 2.583 ns/op
Iteration   5: 2.575 ns/op


Result "kotlin_benchmarks.array.read.Inline64int.Val_as_Ref_to_Int_read":
  2.528 ±(99.9%) 0.227 ns/op [Average]
  (min, avg, max) = (2.191, 2.528, 2.779), stdev = 0.212
  CI (99.9%): [2.301, 2.755] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.read.Inline64int.Val_as_Ref_to_Ref_read
# Parameters: (size = 100)

# Run progress: 30.00% complete, ETA 06:53:14
# Fork: 1 of 3
# Warmup Iteration   1: 2.615 ns/op
# Warmup Iteration   2: 2.417 ns/op
# Warmup Iteration   3: 2.931 ns/op
Iteration   1: 2.420 ns/op
Iteration   2: 2.324 ns/op
Iteration   3: 2.237 ns/op
Iteration   4: 2.240 ns/op
Iteration   5: 2.331 ns/op

# Run progress: 30.02% complete, ETA 06:53:05
# Fork: 2 of 3
# Warmup Iteration   1: 2.311 ns/op
# Warmup Iteration   2: 2.213 ns/op
# Warmup Iteration   3: 2.452 ns/op
Iteration   1: 2.561 ns/op
Iteration   2: 2.550 ns/op
Iteration   3: 2.132 ns/op
Iteration   4: 2.045 ns/op
Iteration   5: 2.125 ns/op

# Run progress: 30.05% complete, ETA 06:52:57
# Fork: 3 of 3
# Warmup Iteration   1: 2.568 ns/op
# Warmup Iteration   2: 2.542 ns/op
# Warmup Iteration   3: 2.290 ns/op
Iteration   1: 3.093 ns/op
Iteration   2: 3.110 ns/op
Iteration   3: 2.508 ns/op
Iteration   4: 2.534 ns/op
Iteration   5: 2.371 ns/op


Result "kotlin_benchmarks.array.read.Inline64int.Val_as_Ref_to_Ref_read":
  2.439 ±(99.9%) 0.335 ns/op [Average]
  (min, avg, max) = (2.045, 2.439, 3.110), stdev = 0.314
  CI (99.9%): [2.104, 2.774] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.read.Inline64int.Val_as_Ref_to_Ref_read
# Parameters: (size = 1000000)

# Run progress: 30.07% complete, ETA 06:52:48
# Fork: 1 of 3
# Warmup Iteration   1: 2.299 ns/op
# Warmup Iteration   2: 2.308 ns/op
# Warmup Iteration   3: 2.216 ns/op
Iteration   1: 2.561 ns/op
Iteration   2: 2.571 ns/op
Iteration   3: 2.549 ns/op
Iteration   4: 2.484 ns/op
Iteration   5: 2.578 ns/op

# Run progress: 30.10% complete, ETA 06:52:40
# Fork: 2 of 3
# Warmup Iteration   1: 2.636 ns/op
# Warmup Iteration   2: 2.582 ns/op
# Warmup Iteration   3: 2.544 ns/op
Iteration   1: 2.591 ns/op
Iteration   2: 2.714 ns/op
Iteration   3: 2.674 ns/op
Iteration   4: 2.493 ns/op
Iteration   5: 2.585 ns/op

# Run progress: 30.12% complete, ETA 06:52:31
# Fork: 3 of 3
# Warmup Iteration   1: 2.375 ns/op
# Warmup Iteration   2: 2.233 ns/op
# Warmup Iteration   3: 2.303 ns/op
Iteration   1: 2.232 ns/op
Iteration   2: 2.362 ns/op
Iteration   3: 2.484 ns/op
Iteration   4: 2.574 ns/op
Iteration   5: 2.369 ns/op


Result "kotlin_benchmarks.array.read.Inline64int.Val_as_Ref_to_Ref_read":
  2.521 ±(99.9%) 0.133 ns/op [Average]
  (min, avg, max) = (2.232, 2.521, 2.714), stdev = 0.124
  CI (99.9%): [2.389, 2.654] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.read.Inline64int.Val_as_Ref_to_Val_read
# Parameters: (size = 100)

# Run progress: 30.15% complete, ETA 06:52:22
# Fork: 1 of 3
# Warmup Iteration   1: 2.576 ns/op
# Warmup Iteration   2: 2.598 ns/op
# Warmup Iteration   3: 2.822 ns/op
Iteration   1: 2.574 ns/op
Iteration   2: 2.666 ns/op
Iteration   3: 2.672 ns/op
Iteration   4: 2.737 ns/op
Iteration   5: 3.281 ns/op

# Run progress: 30.17% complete, ETA 06:52:13
# Fork: 2 of 3
# Warmup Iteration   1: 2.587 ns/op
# Warmup Iteration   2: 2.576 ns/op
# Warmup Iteration   3: 2.477 ns/op
Iteration   1: 2.488 ns/op
Iteration   2: 2.622 ns/op
Iteration   3: 2.385 ns/op
Iteration   4: 2.573 ns/op
Iteration   5: 2.974 ns/op

# Run progress: 30.20% complete, ETA 06:52:05
# Fork: 3 of 3
# Warmup Iteration   1: 1.983 ns/op
# Warmup Iteration   2: 2.401 ns/op
# Warmup Iteration   3: 2.553 ns/op
Iteration   1: 2.542 ns/op
Iteration   2: 2.558 ns/op
Iteration   3: 2.502 ns/op
Iteration   4: 2.711 ns/op
Iteration   5: 2.698 ns/op


Result "kotlin_benchmarks.array.read.Inline64int.Val_as_Ref_to_Val_read":
  2.666 ±(99.9%) 0.233 ns/op [Average]
  (min, avg, max) = (2.385, 2.666, 3.281), stdev = 0.218
  CI (99.9%): [2.433, 2.899] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.read.Inline64int.Val_as_Ref_to_Val_read
# Parameters: (size = 1000000)

# Run progress: 30.22% complete, ETA 06:51:56
# Fork: 1 of 3
# Warmup Iteration   1: 2.537 ns/op
# Warmup Iteration   2: 2.385 ns/op
# Warmup Iteration   3: 2.513 ns/op
Iteration   1: 2.281 ns/op
Iteration   2: 2.390 ns/op
Iteration   3: 2.329 ns/op
Iteration   4: 2.268 ns/op
Iteration   5: 2.267 ns/op

# Run progress: 30.25% complete, ETA 06:51:48
# Fork: 2 of 3
# Warmup Iteration   1: 2.626 ns/op
# Warmup Iteration   2: 2.567 ns/op
# Warmup Iteration   3: 2.556 ns/op
Iteration   1: 2.472 ns/op
Iteration   2: 2.567 ns/op
Iteration   3: 2.555 ns/op
Iteration   4: 2.572 ns/op
Iteration   5: 2.577 ns/op

# Run progress: 30.27% complete, ETA 06:51:39
# Fork: 3 of 3
# Warmup Iteration   1: 3.421 ns/op
# Warmup Iteration   2: 2.582 ns/op
# Warmup Iteration   3: 2.400 ns/op
Iteration   1: 2.617 ns/op
Iteration   2: 2.410 ns/op
Iteration   3: 2.298 ns/op
Iteration   4: 2.263 ns/op
Iteration   5: 2.295 ns/op


Result "kotlin_benchmarks.array.read.Inline64int.Val_as_Ref_to_Val_read":
  2.411 ±(99.9%) 0.145 ns/op [Average]
  (min, avg, max) = (2.263, 2.411, 2.617), stdev = 0.136
  CI (99.9%): [2.266, 2.556] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.read.Inline64int.Val_as_Val_to_Int_read
# Parameters: (size = 100)

# Run progress: 30.29% complete, ETA 06:51:31
# Fork: 1 of 3
# Warmup Iteration   1: 2.496 ns/op
# Warmup Iteration   2: 2.498 ns/op
# Warmup Iteration   3: 2.556 ns/op
Iteration   1: 2.458 ns/op
Iteration   2: 2.668 ns/op
Iteration   3: 2.527 ns/op
Iteration   4: 2.613 ns/op
Iteration   5: 2.550 ns/op

# Run progress: 30.32% complete, ETA 06:51:22
# Fork: 2 of 3
# Warmup Iteration   1: 2.727 ns/op
# Warmup Iteration   2: 2.719 ns/op
# Warmup Iteration   3: 3.032 ns/op
Iteration   1: 2.677 ns/op
Iteration   2: 2.524 ns/op
Iteration   3: 2.540 ns/op
Iteration   4: 2.480 ns/op
Iteration   5: 2.632 ns/op

# Run progress: 30.34% complete, ETA 06:51:14
# Fork: 3 of 3
# Warmup Iteration   1: 2.319 ns/op
# Warmup Iteration   2: 2.248 ns/op
# Warmup Iteration   3: 2.501 ns/op
Iteration   1: 2.582 ns/op
Iteration   2: 2.668 ns/op
Iteration   3: 2.637 ns/op
Iteration   4: 2.556 ns/op
Iteration   5: 2.556 ns/op


Result "kotlin_benchmarks.array.read.Inline64int.Val_as_Val_to_Int_read":
  2.578 ±(99.9%) 0.074 ns/op [Average]
  (min, avg, max) = (2.458, 2.578, 2.677), stdev = 0.069
  CI (99.9%): [2.504, 2.651] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.read.Inline64int.Val_as_Val_to_Int_read
# Parameters: (size = 1000000)

# Run progress: 30.37% complete, ETA 06:51:05
# Fork: 1 of 3
# Warmup Iteration   1: 2.633 ns/op
# Warmup Iteration   2: 2.605 ns/op
# Warmup Iteration   3: 2.569 ns/op
Iteration   1: 3.500 ns/op
Iteration   2: 2.438 ns/op
Iteration   3: 2.591 ns/op
Iteration   4: 2.375 ns/op
Iteration   5: 2.281 ns/op

# Run progress: 30.39% complete, ETA 06:50:57
# Fork: 2 of 3
# Warmup Iteration   1: 2.484 ns/op
# Warmup Iteration   2: 2.492 ns/op
# Warmup Iteration   3: 2.541 ns/op
Iteration   1: 2.525 ns/op
Iteration   2: 2.586 ns/op
Iteration   3: 2.573 ns/op
Iteration   4: 2.898 ns/op
Iteration   5: 2.540 ns/op

# Run progress: 30.42% complete, ETA 06:50:48
# Fork: 3 of 3
# Warmup Iteration   1: 2.621 ns/op
# Warmup Iteration   2: 2.124 ns/op
# Warmup Iteration   3: 2.281 ns/op
Iteration   1: 2.461 ns/op
Iteration   2: 2.496 ns/op
Iteration   3: 2.690 ns/op
Iteration   4: 2.322 ns/op
Iteration   5: 2.987 ns/op


Result "kotlin_benchmarks.array.read.Inline64int.Val_as_Val_to_Int_read":
  2.617 ±(99.9%) 0.332 ns/op [Average]
  (min, avg, max) = (2.281, 2.617, 3.500), stdev = 0.310
  CI (99.9%): [2.286, 2.949] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.read.Inline64int.Val_as_Val_to_Ref_read
# Parameters: (size = 100)

# Run progress: 30.44% complete, ETA 06:50:40
# Fork: 1 of 3
# Warmup Iteration   1: 2.569 ns/op
# Warmup Iteration   2: 2.265 ns/op
# Warmup Iteration   3: 2.629 ns/op
Iteration   1: 2.553 ns/op
Iteration   2: 2.331 ns/op
Iteration   3: 2.583 ns/op
Iteration   4: 2.580 ns/op
Iteration   5: 2.663 ns/op

# Run progress: 30.47% complete, ETA 06:50:32
# Fork: 2 of 3
# Warmup Iteration   1: 2.546 ns/op
# Warmup Iteration   2: 2.579 ns/op
# Warmup Iteration   3: 2.542 ns/op
Iteration   1: 2.235 ns/op
Iteration   2: 2.190 ns/op
Iteration   3: 2.551 ns/op
Iteration   4: 2.501 ns/op
Iteration   5: 2.930 ns/op

# Run progress: 30.49% complete, ETA 06:50:23
# Fork: 3 of 3
# Warmup Iteration   1: 2.695 ns/op
# Warmup Iteration   2: 2.605 ns/op
# Warmup Iteration   3: 3.175 ns/op
Iteration   1: 2.329 ns/op
Iteration   2: 2.378 ns/op
Iteration   3: 2.582 ns/op
Iteration   4: 2.258 ns/op
Iteration   5: 2.416 ns/op


Result "kotlin_benchmarks.array.read.Inline64int.Val_as_Val_to_Ref_read":
  2.472 ±(99.9%) 0.208 ns/op [Average]
  (min, avg, max) = (2.190, 2.472, 2.930), stdev = 0.194
  CI (99.9%): [2.264, 2.680] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.read.Inline64int.Val_as_Val_to_Ref_read
# Parameters: (size = 1000000)

# Run progress: 30.51% complete, ETA 06:50:15
# Fork: 1 of 3
# Warmup Iteration   1: 2.621 ns/op
# Warmup Iteration   2: 2.266 ns/op
# Warmup Iteration   3: 2.300 ns/op
Iteration   1: 2.489 ns/op
Iteration   2: 2.832 ns/op
Iteration   3: 2.618 ns/op
Iteration   4: 2.568 ns/op
Iteration   5: 2.561 ns/op

# Run progress: 30.54% complete, ETA 06:50:06
# Fork: 2 of 3
# Warmup Iteration   1: 2.233 ns/op
# Warmup Iteration   2: 2.711 ns/op
# Warmup Iteration   3: 2.934 ns/op
Iteration   1: 2.610 ns/op
Iteration   2: 2.433 ns/op
Iteration   3: 2.286 ns/op
Iteration   4: 2.552 ns/op
Iteration   5: 2.387 ns/op

# Run progress: 30.56% complete, ETA 06:49:58
# Fork: 3 of 3
# Warmup Iteration   1: 2.276 ns/op
# Warmup Iteration   2: 2.649 ns/op
# Warmup Iteration   3: 2.628 ns/op
Iteration   1: 2.627 ns/op
Iteration   2: 2.561 ns/op
Iteration   3: 2.442 ns/op
Iteration   4: 2.277 ns/op
Iteration   5: 2.349 ns/op


Result "kotlin_benchmarks.array.read.Inline64int.Val_as_Val_to_Ref_read":
  2.506 ±(99.9%) 0.158 ns/op [Average]
  (min, avg, max) = (2.277, 2.506, 2.832), stdev = 0.148
  CI (99.9%): [2.348, 2.664] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.read.Inline64int.Val_as_Val_to_Val_read
# Parameters: (size = 100)

# Run progress: 30.59% complete, ETA 06:49:49
# Fork: 1 of 3
# Warmup Iteration   1: 2.599 ns/op
# Warmup Iteration   2: 2.643 ns/op
# Warmup Iteration   3: 2.356 ns/op
Iteration   1: 2.290 ns/op
Iteration   2: 2.825 ns/op
Iteration   3: 3.305 ns/op
Iteration   4: 2.556 ns/op
Iteration   5: 2.411 ns/op

# Run progress: 30.61% complete, ETA 06:49:41
# Fork: 2 of 3
# Warmup Iteration   1: 2.339 ns/op
# Warmup Iteration   2: 2.284 ns/op
# Warmup Iteration   3: 2.160 ns/op
Iteration   1: 2.240 ns/op
Iteration   2: 2.598 ns/op
Iteration   3: 2.578 ns/op
Iteration   4: 2.522 ns/op
Iteration   5: 2.512 ns/op

# Run progress: 30.64% complete, ETA 06:49:32
# Fork: 3 of 3
# Warmup Iteration   1: 2.595 ns/op
# Warmup Iteration   2: 2.393 ns/op
# Warmup Iteration   3: 2.448 ns/op
Iteration   1: 2.555 ns/op
Iteration   2: 2.465 ns/op
Iteration   3: 2.925 ns/op
Iteration   4: 2.407 ns/op
Iteration   5: 2.265 ns/op


Result "kotlin_benchmarks.array.read.Inline64int.Val_as_Val_to_Val_read":
  2.564 ±(99.9%) 0.297 ns/op [Average]
  (min, avg, max) = (2.240, 2.564, 3.305), stdev = 0.278
  CI (99.9%): [2.267, 2.861] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.read.Inline64int.Val_as_Val_to_Val_read
# Parameters: (size = 1000000)

# Run progress: 30.66% complete, ETA 06:49:23
# Fork: 1 of 3
# Warmup Iteration   1: 2.730 ns/op
# Warmup Iteration   2: 2.655 ns/op
# Warmup Iteration   3: 2.466 ns/op
Iteration   1: 2.307 ns/op
Iteration   2: 2.356 ns/op
Iteration   3: 2.263 ns/op
Iteration   4: 2.521 ns/op
Iteration   5: 2.458 ns/op

# Run progress: 30.69% complete, ETA 06:49:15
# Fork: 2 of 3
# Warmup Iteration   1: 2.421 ns/op
# Warmup Iteration   2: 2.545 ns/op
# Warmup Iteration   3: 2.812 ns/op
Iteration   1: 2.710 ns/op
Iteration   2: 2.652 ns/op
Iteration   3: 2.580 ns/op
Iteration   4: 2.564 ns/op
Iteration   5: 2.526 ns/op

# Run progress: 30.71% complete, ETA 06:49:06
# Fork: 3 of 3
# Warmup Iteration   1: 3.061 ns/op
# Warmup Iteration   2: 2.374 ns/op
# Warmup Iteration   3: 2.425 ns/op
Iteration   1: 3.247 ns/op
Iteration   2: 2.684 ns/op
Iteration   3: 2.912 ns/op
Iteration   4: 2.684 ns/op
Iteration   5: 2.460 ns/op


Result "kotlin_benchmarks.array.read.Inline64int.Val_as_Val_to_Val_read":
  2.595 ±(99.9%) 0.264 ns/op [Average]
  (min, avg, max) = (2.263, 2.595, 3.247), stdev = 0.247
  CI (99.9%): [2.331, 2.859] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.read.Primitive128int.p128int_read
# Parameters: (size = 100)

# Run progress: 30.74% complete, ETA 06:48:58
# Fork: 1 of 3
# Warmup Iteration   1: 4.041 ns/op
# Warmup Iteration   2: 4.252 ns/op
# Warmup Iteration   3: 4.243 ns/op
Iteration   1: 4.296 ns/op
Iteration   2: 4.099 ns/op
Iteration   3: 4.418 ns/op
Iteration   4: 3.962 ns/op
Iteration   5: 3.936 ns/op

# Run progress: 30.76% complete, ETA 06:48:50
# Fork: 2 of 3
# Warmup Iteration   1: 4.034 ns/op
# Warmup Iteration   2: 3.989 ns/op
# Warmup Iteration   3: 4.065 ns/op
Iteration   1: 3.968 ns/op
Iteration   2: 3.990 ns/op
Iteration   3: 4.173 ns/op
Iteration   4: 4.273 ns/op
Iteration   5: 4.268 ns/op

# Run progress: 30.78% complete, ETA 06:48:41
# Fork: 3 of 3
# Warmup Iteration   1: 4.293 ns/op
# Warmup Iteration   2: 4.413 ns/op
# Warmup Iteration   3: 4.987 ns/op
Iteration   1: 4.228 ns/op
Iteration   2: 4.253 ns/op
Iteration   3: 4.242 ns/op
Iteration   4: 4.005 ns/op
Iteration   5: 3.986 ns/op


Result "kotlin_benchmarks.array.read.Primitive128int.p128int_read":
  4.140 ±(99.9%) 0.166 ns/op [Average]
  (min, avg, max) = (3.936, 4.140, 4.418), stdev = 0.155
  CI (99.9%): [3.974, 4.306] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.read.Primitive128int.p128int_read
# Parameters: (size = 1000000)

# Run progress: 30.81% complete, ETA 06:48:32
# Fork: 1 of 3
# Warmup Iteration   1: 4.097 ns/op
# Warmup Iteration   2: 4.013 ns/op
# Warmup Iteration   3: 3.931 ns/op
Iteration   1: 3.981 ns/op
Iteration   2: 3.991 ns/op
Iteration   3: 4.282 ns/op
Iteration   4: 4.486 ns/op
Iteration   5: 3.850 ns/op

# Run progress: 30.83% complete, ETA 06:48:24
# Fork: 2 of 3
# Warmup Iteration   1: 3.460 ns/op
# Warmup Iteration   2: 3.715 ns/op
# Warmup Iteration   3: 4.544 ns/op
Iteration   1: 4.472 ns/op
Iteration   2: 4.856 ns/op
Iteration   3: 4.411 ns/op
Iteration   4: 4.694 ns/op
Iteration   5: 4.238 ns/op

# Run progress: 30.86% complete, ETA 06:48:15
# Fork: 3 of 3
# Warmup Iteration   1: 4.108 ns/op
# Warmup Iteration   2: 4.011 ns/op
# Warmup Iteration   3: 3.882 ns/op
Iteration   1: 3.878 ns/op
Iteration   2: 3.958 ns/op
Iteration   3: 3.895 ns/op
Iteration   4: 4.015 ns/op
Iteration   5: 4.225 ns/op


Result "kotlin_benchmarks.array.read.Primitive128int.p128int_read":
  4.216 ±(99.9%) 0.336 ns/op [Average]
  (min, avg, max) = (3.850, 4.216, 4.856), stdev = 0.314
  CI (99.9%): [3.880, 4.551] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.read.Primitive32int.p32int_read
# Parameters: (size = 100)

# Run progress: 30.88% complete, ETA 06:48:06
# Fork: 1 of 3
# Warmup Iteration   1: 1.514 ns/op
# Warmup Iteration   2: 1.472 ns/op
# Warmup Iteration   3: 1.221 ns/op
Iteration   1: 1.418 ns/op
Iteration   2: 1.495 ns/op
Iteration   3: 1.494 ns/op
Iteration   4: 1.783 ns/op
Iteration   5: 2.021 ns/op

# Run progress: 30.91% complete, ETA 06:47:57
# Fork: 2 of 3
# Warmup Iteration   1: 1.645 ns/op
# Warmup Iteration   2: 1.597 ns/op
# Warmup Iteration   3: 1.549 ns/op
Iteration   1: 1.586 ns/op
Iteration   2: 1.509 ns/op
Iteration   3: 1.539 ns/op
Iteration   4: 1.522 ns/op
Iteration   5: 1.529 ns/op

# Run progress: 30.93% complete, ETA 06:47:50
# Fork: 3 of 3
# Warmup Iteration   1: 1.551 ns/op
# Warmup Iteration   2: 1.560 ns/op
# Warmup Iteration   3: 1.490 ns/op
Iteration   1: 1.499 ns/op
Iteration   2: 1.608 ns/op
Iteration   3: 1.571 ns/op
Iteration   4: 1.500 ns/op
Iteration   5: 1.418 ns/op


Result "kotlin_benchmarks.array.read.Primitive32int.p32int_read":
  1.566 ±(99.9%) 0.163 ns/op [Average]
  (min, avg, max) = (1.418, 1.566, 2.021), stdev = 0.153
  CI (99.9%): [1.403, 1.729] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.read.Primitive32int.p32int_read
# Parameters: (size = 1000000)

# Run progress: 30.96% complete, ETA 06:47:42
# Fork: 1 of 3
# Warmup Iteration   1: 1.687 ns/op
# Warmup Iteration   2: 1.829 ns/op
# Warmup Iteration   3: 2.235 ns/op
Iteration   1: 2.384 ns/op
Iteration   2: 1.946 ns/op
Iteration   3: 1.981 ns/op
Iteration   4: 1.773 ns/op
Iteration   5: 1.820 ns/op

# Run progress: 30.98% complete, ETA 06:47:33
# Fork: 2 of 3
# Warmup Iteration   1: 1.583 ns/op
# Warmup Iteration   2: 1.562 ns/op
# Warmup Iteration   3: 1.511 ns/op
Iteration   1: 1.543 ns/op
Iteration   2: 1.527 ns/op
Iteration   3: 1.525 ns/op
Iteration   4: 1.533 ns/op
Iteration   5: 1.491 ns/op

# Run progress: 31.00% complete, ETA 06:47:24
# Fork: 3 of 3
# Warmup Iteration   1: 1.283 ns/op
# Warmup Iteration   2: 1.475 ns/op
# Warmup Iteration   3: 1.388 ns/op
Iteration   1: 1.496 ns/op
Iteration   2: 1.679 ns/op
Iteration   3: 1.863 ns/op
Iteration   4: 1.636 ns/op
Iteration   5: 1.639 ns/op


Result "kotlin_benchmarks.array.read.Primitive32int.p32int_read":
  1.722 ±(99.9%) 0.264 ns/op [Average]
  (min, avg, max) = (1.491, 1.722, 2.384), stdev = 0.247
  CI (99.9%): [1.459, 1.986] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.read.Primitive64byte.p64byte_read
# Parameters: (size = 100)

# Run progress: 31.03% complete, ETA 06:47:15
# Fork: 1 of 3
# Warmup Iteration   1: 8.034 ns/op
# Warmup Iteration   2: 8.010 ns/op
# Warmup Iteration   3: 7.783 ns/op
Iteration   1: 6.904 ns/op
Iteration   2: 6.759 ns/op
Iteration   3: 6.675 ns/op
Iteration   4: 6.623 ns/op
Iteration   5: 7.267 ns/op

# Run progress: 31.05% complete, ETA 06:47:07
# Fork: 2 of 3
# Warmup Iteration   1: 7.326 ns/op
# Warmup Iteration   2: 7.075 ns/op
# Warmup Iteration   3: 7.596 ns/op
Iteration   1: 7.598 ns/op
Iteration   2: 6.750 ns/op
Iteration   3: 6.306 ns/op
Iteration   4: 7.620 ns/op
Iteration   5: 6.384 ns/op

# Run progress: 31.08% complete, ETA 06:46:58
# Fork: 3 of 3
# Warmup Iteration   1: 8.953 ns/op
# Warmup Iteration   2: 7.338 ns/op
# Warmup Iteration   3: 8.415 ns/op
Iteration   1: 8.623 ns/op
Iteration   2: 7.515 ns/op
Iteration   3: 6.943 ns/op
Iteration   4: 6.818 ns/op
Iteration   5: 6.341 ns/op


Result "kotlin_benchmarks.array.read.Primitive64byte.p64byte_read":
  7.008 ±(99.9%) 0.665 ns/op [Average]
  (min, avg, max) = (6.306, 7.008, 8.623), stdev = 0.622
  CI (99.9%): [6.343, 7.674] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.read.Primitive64byte.p64byte_read
# Parameters: (size = 1000000)

# Run progress: 31.10% complete, ETA 06:46:49
# Fork: 1 of 3
# Warmup Iteration   1: 7.856 ns/op
# Warmup Iteration   2: 6.915 ns/op
# Warmup Iteration   3: 6.021 ns/op
Iteration   1: 6.243 ns/op
Iteration   2: 7.363 ns/op
Iteration   3: 8.529 ns/op
Iteration   4: 7.946 ns/op
Iteration   5: 7.601 ns/op

# Run progress: 31.13% complete, ETA 06:46:41
# Fork: 2 of 3
# Warmup Iteration   1: 7.518 ns/op
# Warmup Iteration   2: 7.022 ns/op
# Warmup Iteration   3: 10.095 ns/op
Iteration   1: 8.732 ns/op
Iteration   2: 7.434 ns/op
Iteration   3: 7.503 ns/op
Iteration   4: 6.835 ns/op
Iteration   5: 7.640 ns/op

# Run progress: 31.15% complete, ETA 06:46:32
# Fork: 3 of 3
# Warmup Iteration   1: 9.161 ns/op
# Warmup Iteration   2: 9.163 ns/op
# Warmup Iteration   3: 8.641 ns/op
Iteration   1: 7.954 ns/op
Iteration   2: 6.073 ns/op
Iteration   3: 6.465 ns/op
Iteration   4: 8.171 ns/op
Iteration   5: 9.690 ns/op


Result "kotlin_benchmarks.array.read.Primitive64byte.p64byte_read":
  7.612 ±(99.9%) 1.039 ns/op [Average]
  (min, avg, max) = (6.073, 7.612, 9.690), stdev = 0.972
  CI (99.9%): [6.573, 8.651] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.read.Primitive64int.read
# Parameters: (size = 100)

# Run progress: 31.18% complete, ETA 06:46:24
# Fork: 1 of 3
# Warmup Iteration   1: 2.721 ns/op
# Warmup Iteration   2: 2.671 ns/op
# Warmup Iteration   3: 2.712 ns/op
Iteration   1: 3.153 ns/op
Iteration   2: 3.139 ns/op
Iteration   3: 3.642 ns/op
Iteration   4: 2.939 ns/op
Iteration   5: 3.782 ns/op

# Run progress: 31.20% complete, ETA 06:46:15
# Fork: 2 of 3
# Warmup Iteration   1: 2.921 ns/op
# Warmup Iteration   2: 2.842 ns/op
# Warmup Iteration   3: 2.778 ns/op
Iteration   1: 2.792 ns/op
Iteration   2: 2.673 ns/op
Iteration   3: 2.584 ns/op
Iteration   4: 2.066 ns/op
Iteration   5: 1.967 ns/op

# Run progress: 31.23% complete, ETA 06:46:07
# Fork: 3 of 3
# Warmup Iteration   1: 2.724 ns/op
# Warmup Iteration   2: 3.251 ns/op
# Warmup Iteration   3: 2.709 ns/op
Iteration   1: 2.483 ns/op
Iteration   2: 2.539 ns/op
Iteration   3: 2.834 ns/op
Iteration   4: 3.893 ns/op
Iteration   5: 3.067 ns/op


Result "kotlin_benchmarks.array.read.Primitive64int.read":
  2.904 ±(99.9%) 0.606 ns/op [Average]
  (min, avg, max) = (1.967, 2.904, 3.893), stdev = 0.567
  CI (99.9%): [2.297, 3.510] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.read.Primitive64int.read
# Parameters: (size = 1000000)

# Run progress: 31.25% complete, ETA 06:45:58
# Fork: 1 of 3
# Warmup Iteration   1: 3.055 ns/op
# Warmup Iteration   2: 2.763 ns/op
# Warmup Iteration   3: 2.709 ns/op
Iteration   1: 2.687 ns/op
Iteration   2: 2.711 ns/op
Iteration   3: 2.731 ns/op
Iteration   4: 2.761 ns/op
Iteration   5: 2.750 ns/op

# Run progress: 31.27% complete, ETA 06:45:50
# Fork: 2 of 3
# Warmup Iteration   1: 2.721 ns/op
# Warmup Iteration   2: 2.433 ns/op
# Warmup Iteration   3: 2.709 ns/op
Iteration   1: 2.978 ns/op
Iteration   2: 2.714 ns/op
Iteration   3: 2.451 ns/op
Iteration   4: 2.729 ns/op
Iteration   5: 2.800 ns/op

# Run progress: 31.30% complete, ETA 06:45:41
# Fork: 3 of 3
# Warmup Iteration   1: 3.407 ns/op
# Warmup Iteration   2: 2.919 ns/op
# Warmup Iteration   3: 3.245 ns/op
Iteration   1: 2.952 ns/op
Iteration   2: 3.175 ns/op
Iteration   3: 2.921 ns/op
Iteration   4: 2.728 ns/op
Iteration   5: 2.743 ns/op


Result "kotlin_benchmarks.array.read.Primitive64int.read":
  2.789 ±(99.9%) 0.176 ns/op [Average]
  (min, avg, max) = (2.451, 2.789, 3.175), stdev = 0.165
  CI (99.9%): [2.613, 2.965] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.read.Primitive64long.p64long_read
# Parameters: (size = 100)

# Run progress: 31.32% complete, ETA 06:45:33
# Fork: 1 of 3
# Warmup Iteration   1: 1.388 ns/op
# Warmup Iteration   2: 1.226 ns/op
# Warmup Iteration   3: 1.237 ns/op
Iteration   1: 1.412 ns/op
Iteration   2: 1.681 ns/op
Iteration   3: 1.615 ns/op
Iteration   4: 1.504 ns/op
Iteration   5: 1.605 ns/op

# Run progress: 31.35% complete, ETA 06:45:24
# Fork: 2 of 3
# Warmup Iteration   1: 1.782 ns/op
# Warmup Iteration   2: 1.624 ns/op
# Warmup Iteration   3: 1.741 ns/op
Iteration   1: 2.557 ns/op
Iteration   2: 2.026 ns/op
Iteration   3: 1.779 ns/op
Iteration   4: 1.856 ns/op
Iteration   5: 1.814 ns/op

# Run progress: 31.37% complete, ETA 06:45:16
# Fork: 3 of 3
# Warmup Iteration   1: 1.528 ns/op
# Warmup Iteration   2: 1.626 ns/op
# Warmup Iteration   3: 1.508 ns/op
Iteration   1: 1.381 ns/op
Iteration   2: 1.198 ns/op
Iteration   3: 1.362 ns/op
Iteration   4: 1.535 ns/op
Iteration   5: 1.663 ns/op


Result "kotlin_benchmarks.array.read.Primitive64long.p64long_read":
  1.666 ±(99.9%) 0.350 ns/op [Average]
  (min, avg, max) = (1.198, 1.666, 2.557), stdev = 0.327
  CI (99.9%): [1.316, 2.016] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.read.Primitive64long.p64long_read
# Parameters: (size = 1000000)

# Run progress: 31.40% complete, ETA 06:45:07
# Fork: 1 of 3
# Warmup Iteration   1: 1.522 ns/op
# Warmup Iteration   2: 1.573 ns/op
# Warmup Iteration   3: 1.517 ns/op
Iteration   1: 1.912 ns/op
Iteration   2: 1.561 ns/op
Iteration   3: 1.947 ns/op
Iteration   4: 1.958 ns/op
Iteration   5: 1.771 ns/op

# Run progress: 31.42% complete, ETA 06:44:59
# Fork: 2 of 3
# Warmup Iteration   1: 1.822 ns/op
# Warmup Iteration   2: 1.716 ns/op
# Warmup Iteration   3: 1.855 ns/op
Iteration   1: 1.662 ns/op
Iteration   2: 1.346 ns/op
Iteration   3: 1.346 ns/op
Iteration   4: 1.393 ns/op
Iteration   5: 1.590 ns/op

# Run progress: 31.45% complete, ETA 06:44:51
# Fork: 3 of 3
# Warmup Iteration   1: 1.802 ns/op
# Warmup Iteration   2: 2.092 ns/op
# Warmup Iteration   3: 1.610 ns/op
Iteration   1: 1.546 ns/op
Iteration   2: 1.493 ns/op
Iteration   3: 1.789 ns/op
Iteration   4: 1.648 ns/op
Iteration   5: 1.620 ns/op


Result "kotlin_benchmarks.array.read.Primitive64long.p64long_read":
  1.639 ±(99.9%) 0.218 ns/op [Average]
  (min, avg, max) = (1.346, 1.639, 1.958), stdev = 0.204
  CI (99.9%): [1.421, 1.857] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.set.Inline128int.New_to_Ref_as_Ref_set
# Parameters: (size = 100)

# Run progress: 31.47% complete, ETA 06:44:42
# Fork: 1 of 3
# Warmup Iteration   1: 3448.361 ns/op
# Warmup Iteration   2: 2508.397 ns/op
# Warmup Iteration   3: 2346.604 ns/op
Iteration   1: 2404.951 ns/op
Iteration   2: 2269.318 ns/op
Iteration   3: 2202.219 ns/op
Iteration   4: 2330.543 ns/op
Iteration   5: 2240.795 ns/op

# Run progress: 31.50% complete, ETA 06:44:33
# Fork: 2 of 3
# Warmup Iteration   1: 2791.828 ns/op
# Warmup Iteration   2: 2657.027 ns/op
# Warmup Iteration   3: 2556.983 ns/op
Iteration   1: 2876.285 ns/op
Iteration   2: 2447.371 ns/op
Iteration   3: 2424.404 ns/op
Iteration   4: 2383.463 ns/op
Iteration   5: 2406.222 ns/op

# Run progress: 31.52% complete, ETA 06:44:25
# Fork: 3 of 3
# Warmup Iteration   1: 2634.762 ns/op
# Warmup Iteration   2: 2081.393 ns/op
# Warmup Iteration   3: 2153.078 ns/op
Iteration   1: 2299.092 ns/op
Iteration   2: 2352.166 ns/op
Iteration   3: 2419.534 ns/op
Iteration   4: 2332.577 ns/op
Iteration   5: 2489.765 ns/op


Result "kotlin_benchmarks.array.set.Inline128int.New_to_Ref_as_Ref_set":
  2391.914 ±(99.9%) 166.813 ns/op [Average]
  (min, avg, max) = (2202.219, 2391.914, 2876.285), stdev = 156.037
  CI (99.9%): [2225.101, 2558.726] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.set.Inline128int.New_to_Ref_as_Ref_set
# Parameters: (size = 1000000)

# Run progress: 31.54% complete, ETA 06:44:16
# Fork: 1 of 3
# Warmup Iteration   1: 57747020.833 ns/op
# Warmup Iteration   2: 65200500.000 ns/op
# Warmup Iteration   3: 42341560.792 ns/op
Iteration   1: 30102730.412 ns/op
Iteration   2: 26593184.211 ns/op
Iteration   3: 21521039.021 ns/op
Iteration   4: 23127042.614 ns/op
Iteration   5: 23492434.093 ns/op

# Run progress: 31.57% complete, ETA 06:44:09
# Fork: 2 of 3
# Warmup Iteration   1: 60636718.118 ns/op
# Warmup Iteration   2: 36198930.071 ns/op
# Warmup Iteration   3: 25576025.000 ns/op
Iteration   1: 22440912.978 ns/op
Iteration   2: 22606416.674 ns/op
Iteration   3: 22074508.152 ns/op
Iteration   4: 22217235.522 ns/op
Iteration   5: 20759335.020 ns/op

# Run progress: 31.59% complete, ETA 06:44:01
# Fork: 3 of 3
# Warmup Iteration   1: 47279032.182 ns/op
# Warmup Iteration   2: 28821547.444 ns/op
# Warmup Iteration   3: 29611478.571 ns/op
Iteration   1: 28299114.583 ns/op
Iteration   2: 22914262.044 ns/op
Iteration   3: 24249443.452 ns/op
Iteration   4: 23251589.977 ns/op
Iteration   5: 53732969.316 ns/op


Result "kotlin_benchmarks.array.set.Inline128int.New_to_Ref_as_Ref_set":
  25825481.205 ±(99.9%) 8700306.625 ns/op [Average]
  (min, avg, max) = (20759335.020, 25825481.205, 53732969.316), stdev = 8138272.215
  CI (99.9%): [17125174.580, 34525787.829] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.set.Inline128int.New_to_Val_as_Val_set
# Parameters: (size = 100)

# Run progress: 31.62% complete, ETA 06:43:54
# Fork: 1 of 3
# Warmup Iteration   1: 3596.319 ns/op
# Warmup Iteration   2: 2518.992 ns/op
# Warmup Iteration   3: 2461.596 ns/op
Iteration   1: 2615.906 ns/op
Iteration   2: 2542.278 ns/op
Iteration   3: 2683.338 ns/op
Iteration   4: 2720.143 ns/op
Iteration   5: 2478.978 ns/op

# Run progress: 31.64% complete, ETA 06:43:45
# Fork: 2 of 3
# Warmup Iteration   1: 3466.443 ns/op
# Warmup Iteration   2: 2221.725 ns/op
# Warmup Iteration   3: 2563.031 ns/op
Iteration   1: 2441.636 ns/op
Iteration   2: 2317.506 ns/op
Iteration   3: 2405.154 ns/op
Iteration   4: 2418.546 ns/op
Iteration   5: 2498.807 ns/op

# Run progress: 31.67% complete, ETA 06:43:37
# Fork: 3 of 3
# Warmup Iteration   1: 2806.358 ns/op
# Warmup Iteration   2: 2046.802 ns/op
# Warmup Iteration   3: 2347.193 ns/op
Iteration   1: 2395.895 ns/op
Iteration   2: 2405.058 ns/op
Iteration   3: 2394.765 ns/op
Iteration   4: 2515.631 ns/op
Iteration   5: 2649.997 ns/op


Result "kotlin_benchmarks.array.set.Inline128int.New_to_Val_as_Val_set":
  2498.909 ±(99.9%) 128.964 ns/op [Average]
  (min, avg, max) = (2317.506, 2498.909, 2720.143), stdev = 120.633
  CI (99.9%): [2369.945, 2627.874] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.set.Inline128int.New_to_Val_as_Val_set
# Parameters: (size = 1000000)

# Run progress: 31.69% complete, ETA 06:43:28
# Fork: 1 of 3
# Warmup Iteration   1: 47190685.636 ns/op
# Warmup Iteration   2: 29479965.676 ns/op
# Warmup Iteration   3: 27131081.132 ns/op
Iteration   1: 28622272.514 ns/op
Iteration   2: 32283867.188 ns/op
Iteration   3: 28296800.917 ns/op
Iteration   4: 26890258.763 ns/op
Iteration   5: 20816968.531 ns/op

# Run progress: 31.72% complete, ETA 06:43:20
# Fork: 2 of 3
# Warmup Iteration   1: 56642585.611 ns/op
# Warmup Iteration   2: 36423764.857 ns/op
# Warmup Iteration   3: 25026977.634 ns/op
Iteration   1: 27097452.842 ns/op
Iteration   2: 22868689.386 ns/op
Iteration   3: 32916662.645 ns/op
Iteration   4: 23364659.091 ns/op
Iteration   5: 20077476.680 ns/op

# Run progress: 31.74% complete, ETA 06:43:13
# Fork: 3 of 3
# Warmup Iteration   1: 52240191.700 ns/op
# Warmup Iteration   2: 35360925.310 ns/op
# Warmup Iteration   3: 18431891.673 ns/op
Iteration   1: 17680892.544 ns/op
Iteration   2: 18367252.273 ns/op
Iteration   3: 19954711.538 ns/op
Iteration   4: 24714523.366 ns/op
Iteration   5: 25111783.537 ns/op


Result "kotlin_benchmarks.array.set.Inline128int.New_to_Val_as_Val_set":
  24604284.788 ±(99.9%) 5090273.112 ns/op [Average]
  (min, avg, max) = (17680892.544, 24604284.788, 32916662.645), stdev = 4761444.628
  CI (99.9%): [19514011.675, 29694557.900] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.set.Inline128int.Ref_to_Ref_as_Ref_set
# Parameters: (size = 100)

# Run progress: 31.76% complete, ETA 06:43:05
# Fork: 1 of 3
# Warmup Iteration   1: 2717.012 ns/op
# Warmup Iteration   2: 2329.221 ns/op
# Warmup Iteration   3: 2745.335 ns/op
Iteration   1: 2852.857 ns/op
Iteration   2: 2584.200 ns/op
Iteration   3: 3099.243 ns/op
Iteration   4: 3583.619 ns/op
Iteration   5: 3064.728 ns/op

# Run progress: 31.79% complete, ETA 06:42:57
# Fork: 2 of 3
# Warmup Iteration   1: 2892.862 ns/op
# Warmup Iteration   2: 2091.525 ns/op
# Warmup Iteration   3: 2411.789 ns/op
Iteration   1: 2368.128 ns/op
Iteration   2: 2105.421 ns/op
Iteration   3: 2164.604 ns/op
Iteration   4: 2379.582 ns/op
Iteration   5: 2334.660 ns/op

# Run progress: 31.81% complete, ETA 06:42:48
# Fork: 3 of 3
# Warmup Iteration   1: 2474.369 ns/op
# Warmup Iteration   2: 2114.865 ns/op
# Warmup Iteration   3: 2516.605 ns/op
Iteration   1: 2423.796 ns/op
Iteration   2: 2433.481 ns/op
Iteration   3: 2491.578 ns/op
Iteration   4: 2519.630 ns/op
Iteration   5: 2511.588 ns/op


Result "kotlin_benchmarks.array.set.Inline128int.Ref_to_Ref_as_Ref_set":
  2594.474 ±(99.9%) 422.650 ns/op [Average]
  (min, avg, max) = (2105.421, 2594.474, 3583.619), stdev = 395.347
  CI (99.9%): [2171.824, 3017.124] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.set.Inline128int.Ref_to_Ref_as_Ref_set
# Parameters: (size = 1000000)

# Run progress: 31.84% complete, ETA 06:42:40
# Fork: 1 of 3
# Warmup Iteration   1: 57185254.611 ns/op
# Warmup Iteration   2: 37693112.667 ns/op
# Warmup Iteration   3: 25504335.400 ns/op
Iteration   1: 29050614.286 ns/op
Iteration   2: 28124208.333 ns/op
Iteration   3: 24724585.366 ns/op
Iteration   4: 24401247.024 ns/op
Iteration   5: 24246691.452 ns/op

# Run progress: 31.86% complete, ETA 06:42:32
# Fork: 2 of 3
# Warmup Iteration   1: 49343916.667 ns/op
# Warmup Iteration   2: 33914533.333 ns/op
# Warmup Iteration   3: 22608380.556 ns/op
Iteration   1: 16605194.000 ns/op
Iteration   2: 19322113.208 ns/op
Iteration   3: 32001127.594 ns/op
Iteration   4: 27403256.757 ns/op
Iteration   5: 23835477.698 ns/op

# Run progress: 31.89% complete, ETA 06:42:25
# Fork: 3 of 3
# Warmup Iteration   1: 53732850.895 ns/op
# Warmup Iteration   2: 36599175.607 ns/op
# Warmup Iteration   3: 25097492.902 ns/op
Iteration   1: 24157033.714 ns/op
Iteration   2: 33393580.567 ns/op
Iteration   3: 36435955.357 ns/op
Iteration   4: 34834251.448 ns/op
Iteration   5: 18080228.429 ns/op


Result "kotlin_benchmarks.array.set.Inline128int.Ref_to_Ref_as_Ref_set":
  26441037.682 ±(99.9%) 6397921.657 ns/op [Average]
  (min, avg, max) = (16605194.000, 26441037.682, 36435955.357), stdev = 5984619.888
  CI (99.9%): [20043116.025, 32838959.339] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.set.Inline128int.Ref_to_Val_as_Val_set
# Parameters: (size = 100)

# Run progress: 31.91% complete, ETA 06:42:17
# Fork: 1 of 3
# Warmup Iteration   1: 2140.176 ns/op
# Warmup Iteration   2: 2281.316 ns/op
# Warmup Iteration   3: 2856.058 ns/op
Iteration   1: 3334.913 ns/op
Iteration   2: 2546.418 ns/op
Iteration   3: 2592.022 ns/op
Iteration   4: 2435.748 ns/op
Iteration   5: 3015.683 ns/op

# Run progress: 31.94% complete, ETA 06:42:08
# Fork: 2 of 3
# Warmup Iteration   1: 2726.265 ns/op
# Warmup Iteration   2: 2167.778 ns/op
# Warmup Iteration   3: 2461.116 ns/op
Iteration   1: 2494.198 ns/op
Iteration   2: 2441.893 ns/op
Iteration   3: 2512.150 ns/op
Iteration   4: 2710.672 ns/op
Iteration   5: 2761.766 ns/op

# Run progress: 31.96% complete, ETA 06:42:00
# Fork: 3 of 3
# Warmup Iteration   1: 2562.237 ns/op
# Warmup Iteration   2: 1765.370 ns/op
# Warmup Iteration   3: 2780.812 ns/op
Iteration   1: 2528.687 ns/op
Iteration   2: 2427.975 ns/op
Iteration   3: 2373.073 ns/op
Iteration   4: 2357.572 ns/op
Iteration   5: 2307.061 ns/op


Result "kotlin_benchmarks.array.set.Inline128int.Ref_to_Val_as_Val_set":
  2589.322 ±(99.9%) 293.356 ns/op [Average]
  (min, avg, max) = (2307.061, 2589.322, 3334.913), stdev = 274.405
  CI (99.9%): [2295.966, 2882.678] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.set.Inline128int.Ref_to_Val_as_Val_set
# Parameters: (size = 1000000)

# Run progress: 31.99% complete, ETA 06:41:51
# Fork: 1 of 3
# Warmup Iteration   1: 49171180.524 ns/op
# Warmup Iteration   2: 30152985.294 ns/op
# Warmup Iteration   3: 27676802.946 ns/op
Iteration   1: 26933483.553 ns/op
Iteration   2: 26134473.282 ns/op
Iteration   3: 23923969.000 ns/op
Iteration   4: 31481008.848 ns/op
Iteration   5: 24431857.143 ns/op

# Run progress: 32.01% complete, ETA 06:41:43
# Fork: 2 of 3
# Warmup Iteration   1: 53874660.105 ns/op
# Warmup Iteration   2: 35343073.276 ns/op
# Warmup Iteration   3: 24154428.571 ns/op
Iteration   1: 24453975.610 ns/op
Iteration   2: 23758919.581 ns/op
Iteration   3: 22573862.044 ns/op
Iteration   4: 21327947.042 ns/op
Iteration   5: 21103475.688 ns/op

# Run progress: 32.03% complete, ETA 06:41:35
# Fork: 3 of 3
# Warmup Iteration   1: 48216373.000 ns/op
# Warmup Iteration   2: 27983452.528 ns/op
# Warmup Iteration   3: 15842938.813 ns/op
Iteration   1: 18218322.368 ns/op
Iteration   2: 20975469.388 ns/op
Iteration   3: 26855673.263 ns/op
Iteration   4: 27481104.730 ns/op
Iteration   5: 19818309.647 ns/op


Result "kotlin_benchmarks.array.set.Inline128int.Ref_to_Val_as_Val_set":
  23964790.079 ±(99.9%) 3697415.251 ns/op [Average]
  (min, avg, max) = (18218322.368, 23964790.079, 31481008.848), stdev = 3458564.520
  CI (99.9%): [20267374.828, 27662205.330] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.set.Inline128int.Val_to_Ref_as_Ref_set
# Parameters: (size = 100)

# Run progress: 32.06% complete, ETA 06:41:27
# Fork: 1 of 3
# Warmup Iteration   1: 3134.422 ns/op
# Warmup Iteration   2: 2201.603 ns/op
# Warmup Iteration   3: 2380.680 ns/op
Iteration   1: 3325.483 ns/op
Iteration   2: 3098.946 ns/op
Iteration   3: 3320.116 ns/op
Iteration   4: 2455.532 ns/op
Iteration   5: 2365.290 ns/op

# Run progress: 32.08% complete, ETA 06:41:19
# Fork: 2 of 3
# Warmup Iteration   1: 2663.853 ns/op
# Warmup Iteration   2: 2218.759 ns/op
# Warmup Iteration   3: 2382.736 ns/op
Iteration   1: 2137.636 ns/op
Iteration   2: 2295.331 ns/op
Iteration   3: 2456.999 ns/op
Iteration   4: 2127.078 ns/op
Iteration   5: 2176.345 ns/op

# Run progress: 32.11% complete, ETA 06:41:11
# Fork: 3 of 3
# Warmup Iteration   1: 2501.407 ns/op
# Warmup Iteration   2: 1451.637 ns/op
# Warmup Iteration   3: 1901.774 ns/op
Iteration   1: 2856.701 ns/op
Iteration   2: 3153.636 ns/op
Iteration   3: 2678.090 ns/op
Iteration   4: 2432.890 ns/op
Iteration   5: 2455.494 ns/op


Result "kotlin_benchmarks.array.set.Inline128int.Val_to_Ref_as_Ref_set":
  2622.371 ±(99.9%) 453.546 ns/op [Average]
  (min, avg, max) = (2127.078, 2622.371, 3325.483), stdev = 424.247
  CI (99.9%): [2168.825, 3075.917] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.set.Inline128int.Val_to_Ref_as_Ref_set
# Parameters: (size = 1000000)

# Run progress: 32.13% complete, ETA 06:41:02
# Fork: 1 of 3
# Warmup Iteration   1: 53229039.474 ns/op
# Warmup Iteration   2: 53552967.105 ns/op
# Warmup Iteration   3: 32941221.774 ns/op
Iteration   1: 30723098.059 ns/op
Iteration   2: 24272933.524 ns/op
Iteration   3: 23513792.628 ns/op
Iteration   4: 21461789.063 ns/op
Iteration   5: 20081483.340 ns/op

# Run progress: 32.16% complete, ETA 06:40:55
# Fork: 2 of 3
# Warmup Iteration   1: 46993789.773 ns/op
# Warmup Iteration   2: 30207096.824 ns/op
# Warmup Iteration   3: 20064521.235 ns/op
Iteration   1: 15686043.585 ns/op
Iteration   2: 15542903.215 ns/op
Iteration   3: 20642907.327 ns/op
Iteration   4: 26582387.079 ns/op
Iteration   5: 23591973.837 ns/op

# Run progress: 32.18% complete, ETA 06:40:47
# Fork: 3 of 3
# Warmup Iteration   1: 52256777.100 ns/op
# Warmup Iteration   2: 33879673.633 ns/op
# Warmup Iteration   3: 25786777.795 ns/op
Iteration   1: 24309089.286 ns/op
Iteration   2: 22436687.956 ns/op
Iteration   3: 27939803.250 ns/op
Iteration   4: 21521148.936 ns/op
Iteration   5: 19949708.333 ns/op


Result "kotlin_benchmarks.array.set.Inline128int.Val_to_Ref_as_Ref_set":
  22550383.294 ±(99.9%) 4381361.546 ns/op [Average]
  (min, avg, max) = (15542903.215, 22550383.294, 30723098.059), stdev = 4098328.309
  CI (99.9%): [18169021.749, 26931744.840] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.set.Inline128int.Val_to_Val_as_Val_set
# Parameters: (size = 100)

# Run progress: 32.21% complete, ETA 06:40:39
# Fork: 1 of 3
# Warmup Iteration   1: 2809.880 ns/op
# Warmup Iteration   2: 2028.501 ns/op
# Warmup Iteration   3: 2521.618 ns/op
Iteration   1: 2475.639 ns/op
Iteration   2: 2529.050 ns/op
Iteration   3: 2483.911 ns/op
Iteration   4: 2512.878 ns/op
Iteration   5: 2387.116 ns/op

# Run progress: 32.23% complete, ETA 06:40:30
# Fork: 2 of 3
# Warmup Iteration   1: 2991.588 ns/op
# Warmup Iteration   2: 2336.828 ns/op
# Warmup Iteration   3: 2522.489 ns/op
Iteration   1: 2492.558 ns/op
Iteration   2: 2317.641 ns/op
Iteration   3: 2356.002 ns/op
Iteration   4: 2322.512 ns/op
Iteration   5: 2298.543 ns/op

# Run progress: 32.25% complete, ETA 06:40:22
# Fork: 3 of 3
# Warmup Iteration   1: 2514.930 ns/op
# Warmup Iteration   2: 1753.858 ns/op
# Warmup Iteration   3: 2694.962 ns/op
Iteration   1: 2619.538 ns/op
Iteration   2: 2380.821 ns/op
Iteration   3: 2376.840 ns/op
Iteration   4: 2394.333 ns/op
Iteration   5: 3099.058 ns/op


Result "kotlin_benchmarks.array.set.Inline128int.Val_to_Val_as_Val_set":
  2469.763 ±(99.9%) 210.099 ns/op [Average]
  (min, avg, max) = (2298.543, 2469.763, 3099.058), stdev = 196.527
  CI (99.9%): [2259.663, 2679.862] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.set.Inline128int.Val_to_Val_as_Val_set
# Parameters: (size = 1000000)

# Run progress: 32.28% complete, ETA 06:40:14
# Fork: 1 of 3
# Warmup Iteration   1: 56918266.167 ns/op
# Warmup Iteration   2: 35244423.828 ns/op
# Warmup Iteration   3: 25037775.390 ns/op
Iteration   1: 25857556.641 ns/op
Iteration   2: 22458262.956 ns/op
Iteration   3: 23236080.477 ns/op
Iteration   4: 23170810.614 ns/op
Iteration   5: 24910674.619 ns/op

# Run progress: 32.30% complete, ETA 06:40:06
# Fork: 2 of 3
# Warmup Iteration   1: 54245787.316 ns/op
# Warmup Iteration   2: 35497262.931 ns/op
# Warmup Iteration   3: 19851342.314 ns/op
Iteration   1: 16574539.607 ns/op
Iteration   2: 17251888.424 ns/op
Iteration   3: 18231725.446 ns/op
Iteration   4: 17107740.814 ns/op
Iteration   5: 20564728.340 ns/op

# Run progress: 32.33% complete, ETA 06:39:58
# Fork: 3 of 3
# Warmup Iteration   1: 50885608.350 ns/op
# Warmup Iteration   2: 30033265.912 ns/op
# Warmup Iteration   3: 23264346.591 ns/op
Iteration   1: 25738084.375 ns/op
Iteration   2: 25986061.974 ns/op
Iteration   3: 29072578.571 ns/op
Iteration   4: 24250114.095 ns/op
Iteration   5: 24951194.098 ns/op


Result "kotlin_benchmarks.array.set.Inline128int.Val_to_Val_as_Val_set":
  22624136.070 ±(99.9%) 4105292.882 ns/op [Average]
  (min, avg, max) = (16574539.607, 22624136.070, 29072578.571), stdev = 3840093.509
  CI (99.9%): [18518843.188, 26729428.952] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.set.Inline32int.New_to_Ref_as_Ref_set
# Parameters: (size = 100)

# Run progress: 32.35% complete, ETA 06:39:50
# Fork: 1 of 3
# Warmup Iteration   1: 654.858 ns/op
# Warmup Iteration   2: 500.178 ns/op
# Warmup Iteration   3: 530.146 ns/op
Iteration   1: 597.393 ns/op
Iteration   2: 646.288 ns/op
Iteration   3: 578.279 ns/op
Iteration   4: 548.155 ns/op
Iteration   5: 676.154 ns/op

# Run progress: 32.38% complete, ETA 06:39:42
# Fork: 2 of 3
# Warmup Iteration   1: 644.242 ns/op
# Warmup Iteration   2: 535.724 ns/op
# Warmup Iteration   3: 520.718 ns/op
Iteration   1: 564.025 ns/op
Iteration   2: 650.597 ns/op
Iteration   3: 664.062 ns/op
Iteration   4: 656.194 ns/op
Iteration   5: 676.412 ns/op

# Run progress: 32.40% complete, ETA 06:39:33
# Fork: 3 of 3
# Warmup Iteration   1: 733.192 ns/op
# Warmup Iteration   2: 531.119 ns/op
# Warmup Iteration   3: 535.009 ns/op
Iteration   1: 692.216 ns/op
Iteration   2: 613.283 ns/op
Iteration   3: 613.660 ns/op
Iteration   4: 538.316 ns/op
Iteration   5: 700.102 ns/op


Result "kotlin_benchmarks.array.set.Inline32int.New_to_Ref_as_Ref_set":
  627.676 ±(99.9%) 56.617 ns/op [Average]
  (min, avg, max) = (538.316, 627.676, 700.102), stdev = 52.960
  CI (99.9%): [571.059, 684.293] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.set.Inline32int.New_to_Ref_as_Ref_set
# Parameters: (size = 1000000)

# Run progress: 32.43% complete, ETA 06:39:25
# Fork: 1 of 3
# Warmup Iteration   1: 9375050.537 ns/op
# Warmup Iteration   2: 6439717.823 ns/op
# Warmup Iteration   3: 7392500.912 ns/op
Iteration   1: 6620620.373 ns/op
Iteration   2: 6831837.585 ns/op
Iteration   3: 8183587.398 ns/op
Iteration   4: 7774222.115 ns/op
Iteration   5: 8694467.949 ns/op

# Run progress: 32.45% complete, ETA 06:39:17
# Fork: 2 of 3
# Warmup Iteration   1: 10839702.505 ns/op
# Warmup Iteration   2: 8361397.380 ns/op
# Warmup Iteration   3: 7844411.822 ns/op
Iteration   1: 6102825.554 ns/op
Iteration   2: 5693945.390 ns/op
Iteration   3: 5722954.802 ns/op
Iteration   4: 5646778.792 ns/op
Iteration   5: 5148662.650 ns/op

# Run progress: 32.48% complete, ETA 06:39:08
# Fork: 3 of 3
# Warmup Iteration   1: 9060567.568 ns/op
# Warmup Iteration   2: 6115382.277 ns/op
# Warmup Iteration   3: 7086231.514 ns/op
Iteration   1: 6160394.817 ns/op
Iteration   2: 6150425.150 ns/op
Iteration   3: 6868958.333 ns/op
Iteration   4: 6941292.808 ns/op
Iteration   5: 6556359.578 ns/op


Result "kotlin_benchmarks.array.set.Inline32int.New_to_Ref_as_Ref_set":
  6606488.886 ±(99.9%) 1060062.356 ns/op [Average]
  (min, avg, max) = (5148662.650, 6606488.886, 8694467.949), stdev = 991582.986
  CI (99.9%): [5546426.530, 7666551.243] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.set.Inline32int.New_to_Val_as_Val_set
# Parameters: (size = 100)

# Run progress: 32.50% complete, ETA 06:39:00
# Fork: 1 of 3
# Warmup Iteration   1: 681.300 ns/op
# Warmup Iteration   2: 515.765 ns/op
# Warmup Iteration   3: 494.117 ns/op
Iteration   1: 615.677 ns/op
Iteration   2: 625.229 ns/op
Iteration   3: 628.185 ns/op
Iteration   4: 635.366 ns/op
Iteration   5: 562.964 ns/op

# Run progress: 32.52% complete, ETA 06:38:51
# Fork: 2 of 3
# Warmup Iteration   1: 672.249 ns/op
# Warmup Iteration   2: 393.695 ns/op
# Warmup Iteration   3: 415.982 ns/op
Iteration   1: 431.950 ns/op
Iteration   2: 477.976 ns/op
Iteration   3: 484.862 ns/op
Iteration   4: 540.225 ns/op
Iteration   5: 761.141 ns/op

# Run progress: 32.55% complete, ETA 06:38:43
# Fork: 3 of 3
# Warmup Iteration   1: 684.639 ns/op
# Warmup Iteration   2: 529.640 ns/op
# Warmup Iteration   3: 565.767 ns/op
Iteration   1: 725.367 ns/op
Iteration   2: 658.194 ns/op
Iteration   3: 639.398 ns/op
Iteration   4: 695.607 ns/op
Iteration   5: 683.555 ns/op


Result "kotlin_benchmarks.array.set.Inline32int.New_to_Val_as_Val_set":
  611.046 ±(99.9%) 101.087 ns/op [Average]
  (min, avg, max) = (431.950, 611.046, 761.141), stdev = 94.557
  CI (99.9%): [509.960, 712.133] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.set.Inline32int.New_to_Val_as_Val_set
# Parameters: (size = 1000000)

# Run progress: 32.57% complete, ETA 06:38:34
# Fork: 1 of 3
# Warmup Iteration   1: 10586144.104 ns/op
# Warmup Iteration   2: 7657424.871 ns/op
# Warmup Iteration   3: 7202976.921 ns/op
Iteration   1: 6102895.584 ns/op
Iteration   2: 5865294.093 ns/op
Iteration   3: 10142964.873 ns/op
Iteration   4: 7787515.829 ns/op
Iteration   5: 5389484.317 ns/op

# Run progress: 32.60% complete, ETA 06:38:26
# Fork: 2 of 3
# Warmup Iteration   1: 9371070.602 ns/op
# Warmup Iteration   2: 6068347.054 ns/op
# Warmup Iteration   3: 4174006.888 ns/op
Iteration   1: 3975745.406 ns/op
Iteration   2: 5651811.682 ns/op
Iteration   3: 7967305.780 ns/op
Iteration   4: 7380578.467 ns/op
Iteration   5: 7553396.932 ns/op

# Run progress: 32.62% complete, ETA 06:38:18
# Fork: 3 of 3
# Warmup Iteration   1: 11450960.227 ns/op
# Warmup Iteration   2: 7511180.970 ns/op
# Warmup Iteration   3: 8030290.341 ns/op
Iteration   1: 7640267.992 ns/op
Iteration   2: 9464384.936 ns/op
Iteration   3: 7674800.252 ns/op
Iteration   4: 6704090.510 ns/op
Iteration   5: 6569597.497 ns/op


Result "kotlin_benchmarks.array.set.Inline32int.New_to_Val_as_Val_set":
  7058008.943 ±(99.9%) 1682972.667 ns/op [Average]
  (min, avg, max) = (3975745.406, 7058008.943, 10142964.873), stdev = 1574253.677
  CI (99.9%): [5375036.277, 8740981.610] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.set.Inline32int.Ref_to_Ref_as_Ref_set
# Parameters: (size = 100)

# Run progress: 32.65% complete, ETA 06:38:10
# Fork: 1 of 3
# Warmup Iteration   1: 632.836 ns/op
# Warmup Iteration   2: 460.704 ns/op
# Warmup Iteration   3: 430.405 ns/op
Iteration   1: 460.475 ns/op
Iteration   2: 482.612 ns/op
Iteration   3: 520.483 ns/op
Iteration   4: 688.535 ns/op
Iteration   5: 664.955 ns/op

# Run progress: 32.67% complete, ETA 06:38:01
# Fork: 2 of 3
# Warmup Iteration   1: 718.782 ns/op
# Warmup Iteration   2: 494.479 ns/op
# Warmup Iteration   3: 521.825 ns/op
Iteration   1: 697.879 ns/op
Iteration   2: 661.812 ns/op
Iteration   3: 623.901 ns/op
Iteration   4: 629.381 ns/op
Iteration   5: 564.673 ns/op

# Run progress: 32.70% complete, ETA 06:37:53
# Fork: 3 of 3
# Warmup Iteration   1: 665.769 ns/op
# Warmup Iteration   2: 498.468 ns/op
# Warmup Iteration   3: 546.126 ns/op
Iteration   1: 598.027 ns/op
Iteration   2: 616.180 ns/op
Iteration   3: 608.027 ns/op
Iteration   4: 554.202 ns/op
Iteration   5: 595.322 ns/op


Result "kotlin_benchmarks.array.set.Inline32int.Ref_to_Ref_as_Ref_set":
  597.764 ±(99.9%) 75.640 ns/op [Average]
  (min, avg, max) = (460.475, 597.764, 697.879), stdev = 70.754
  CI (99.9%): [522.124, 673.404] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.set.Inline32int.Ref_to_Ref_as_Ref_set
# Parameters: (size = 1000000)

# Run progress: 32.72% complete, ETA 06:37:44
# Fork: 1 of 3
# Warmup Iteration   1: 10401680.970 ns/op
# Warmup Iteration   2: 6739739.167 ns/op
# Warmup Iteration   3: 9037744.420 ns/op
Iteration   1: 6496240.052 ns/op
Iteration   2: 6327246.613 ns/op
Iteration   3: 6020250.494 ns/op
Iteration   4: 6234236.111 ns/op
Iteration   5: 6764295.000 ns/op

# Run progress: 32.75% complete, ETA 06:37:36
# Fork: 2 of 3
# Warmup Iteration   1: 8612337.256 ns/op
# Warmup Iteration   2: 4596945.968 ns/op
# Warmup Iteration   3: 4632742.201 ns/op
Iteration   1: 4871600.927 ns/op
Iteration   2: 7137678.191 ns/op
Iteration   3: 8139980.691 ns/op
Iteration   4: 5534857.830 ns/op
Iteration   5: 7170183.511 ns/op

# Run progress: 32.77% complete, ETA 06:37:28
# Fork: 3 of 3
# Warmup Iteration   1: 12036644.345 ns/op
# Warmup Iteration   2: 8501974.092 ns/op
# Warmup Iteration   3: 8915862.570 ns/op
Iteration   1: 6941718.393 ns/op
Iteration   2: 6434773.618 ns/op
Iteration   3: 6625890.079 ns/op
Iteration   4: 6398826.481 ns/op
Iteration   5: 6249568.160 ns/op


Result "kotlin_benchmarks.array.set.Inline32int.Ref_to_Ref_as_Ref_set":
  6489823.077 ±(99.9%) 798766.637 ns/op [Average]
  (min, avg, max) = (4871600.927, 6489823.077, 8139980.691), stdev = 747166.808
  CI (99.9%): [5691056.439, 7288589.714] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.set.Inline32int.Ref_to_Val_as_Val_set
# Parameters: (size = 100)

# Run progress: 32.79% complete, ETA 06:37:19
# Fork: 1 of 3
# Warmup Iteration   1: 639.270 ns/op
# Warmup Iteration   2: 527.223 ns/op
# Warmup Iteration   3: 509.510 ns/op
Iteration   1: 578.493 ns/op
Iteration   2: 569.818 ns/op
Iteration   3: 566.178 ns/op
Iteration   4: 589.741 ns/op
Iteration   5: 509.127 ns/op

# Run progress: 32.82% complete, ETA 06:37:11
# Fork: 2 of 3
# Warmup Iteration   1: 673.939 ns/op
# Warmup Iteration   2: 464.123 ns/op
# Warmup Iteration   3: 544.896 ns/op
Iteration   1: 655.379 ns/op
Iteration   2: 638.715 ns/op
Iteration   3: 656.315 ns/op
Iteration   4: 631.212 ns/op
Iteration   5: 671.994 ns/op

# Run progress: 32.84% complete, ETA 06:37:02
# Fork: 3 of 3
# Warmup Iteration   1: 768.183 ns/op
# Warmup Iteration   2: 585.087 ns/op
# Warmup Iteration   3: 517.784 ns/op
Iteration   1: 686.928 ns/op
Iteration   2: 622.071 ns/op
Iteration   3: 547.793 ns/op
Iteration   4: 571.971 ns/op
Iteration   5: 614.938 ns/op


Result "kotlin_benchmarks.array.set.Inline32int.Ref_to_Val_as_Val_set":
  607.378 ±(99.9%) 54.012 ns/op [Average]
  (min, avg, max) = (509.127, 607.378, 686.928), stdev = 50.523
  CI (99.9%): [553.366, 661.390] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.set.Inline32int.Ref_to_Val_as_Val_set
# Parameters: (size = 1000000)

# Run progress: 32.87% complete, ETA 06:36:54
# Fork: 1 of 3
# Warmup Iteration   1: 8409570.142 ns/op
# Warmup Iteration   2: 5304812.608 ns/op
# Warmup Iteration   3: 4426608.258 ns/op
Iteration   1: 6784656.879 ns/op
Iteration   2: 8657741.741 ns/op
Iteration   3: 7198401.786 ns/op
Iteration   4: 6266272.117 ns/op
Iteration   5: 6562603.896 ns/op

# Run progress: 32.89% complete, ETA 06:36:45
# Fork: 2 of 3
# Warmup Iteration   1: 10628246.495 ns/op
# Warmup Iteration   2: 7668857.955 ns/op
# Warmup Iteration   3: 7765520.192 ns/op
Iteration   1: 5925770.953 ns/op
Iteration   2: 5118719.278 ns/op
Iteration   3: 5679732.345 ns/op
Iteration   4: 5801648.471 ns/op
Iteration   5: 6258241.772 ns/op

# Run progress: 32.92% complete, ETA 06:36:37
# Fork: 3 of 3
# Warmup Iteration   1: 9981812.902 ns/op
# Warmup Iteration   2: 5865729.890 ns/op
# Warmup Iteration   3: 7818591.085 ns/op
Iteration   1: 6862851.476 ns/op
Iteration   2: 6635523.967 ns/op
Iteration   3: 6822690.878 ns/op
Iteration   4: 6420798.791 ns/op
Iteration   5: 6541048.929 ns/op


Result "kotlin_benchmarks.array.set.Inline32int.Ref_to_Val_as_Val_set":
  6502446.885 ±(99.9%) 857244.657 ns/op [Average]
  (min, avg, max) = (5118719.278, 6502446.885, 8657741.741), stdev = 801867.184
  CI (99.9%): [5645202.229, 7359691.542] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.set.Inline32int.Val_to_Ref_as_Ref_set
# Parameters: (size = 100)

# Run progress: 32.94% complete, ETA 06:36:29
# Fork: 1 of 3
# Warmup Iteration   1: 687.399 ns/op
# Warmup Iteration   2: 579.864 ns/op
# Warmup Iteration   3: 516.007 ns/op
Iteration   1: 573.324 ns/op
Iteration   2: 550.321 ns/op
Iteration   3: 567.443 ns/op
Iteration   4: 561.083 ns/op
Iteration   5: 575.714 ns/op

# Run progress: 32.97% complete, ETA 06:36:20
# Fork: 2 of 3
# Warmup Iteration   1: 649.662 ns/op
# Warmup Iteration   2: 460.892 ns/op
# Warmup Iteration   3: 579.599 ns/op
Iteration   1: 641.218 ns/op
Iteration   2: 555.801 ns/op
Iteration   3: 723.268 ns/op
Iteration   4: 689.020 ns/op
Iteration   5: 679.588 ns/op

# Run progress: 32.99% complete, ETA 06:36:12
# Fork: 3 of 3
# Warmup Iteration   1: 642.047 ns/op
# Warmup Iteration   2: 513.893 ns/op
# Warmup Iteration   3: 551.259 ns/op
Iteration   1: 657.830 ns/op
Iteration   2: 622.070 ns/op
Iteration   3: 658.104 ns/op
Iteration   4: 644.329 ns/op
Iteration   5: 696.741 ns/op


Result "kotlin_benchmarks.array.set.Inline32int.Val_to_Ref_as_Ref_set":
  626.390 ±(99.9%) 62.294 ns/op [Average]
  (min, avg, max) = (550.321, 626.390, 723.268), stdev = 58.269
  CI (99.9%): [564.097, 688.684] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.set.Inline32int.Val_to_Ref_as_Ref_set
# Parameters: (size = 1000000)

# Run progress: 33.01% complete, ETA 06:36:03
# Fork: 1 of 3
# Warmup Iteration   1: 8933720.133 ns/op
# Warmup Iteration   2: 5810423.851 ns/op
# Warmup Iteration   3: 4221558.824 ns/op
Iteration   1: 4010051.421 ns/op
Iteration   2: 4636749.615 ns/op
Iteration   3: 6472175.899 ns/op
Iteration   4: 8794874.272 ns/op
Iteration   5: 6208133.178 ns/op

# Run progress: 33.04% complete, ETA 06:35:55
# Fork: 2 of 3
# Warmup Iteration   1: 9616001.590 ns/op
# Warmup Iteration   2: 7577647.082 ns/op
# Warmup Iteration   3: 8760139.861 ns/op
Iteration   1: 9083732.884 ns/op
Iteration   2: 6770583.887 ns/op
Iteration   3: 7605125.000 ns/op
Iteration   4: 7178255.908 ns/op
Iteration   5: 7163717.857 ns/op

# Run progress: 33.06% complete, ETA 06:35:46
# Fork: 3 of 3
# Warmup Iteration   1: 10773154.702 ns/op
# Warmup Iteration   2: 7601652.880 ns/op
# Warmup Iteration   3: 8183125.341 ns/op
Iteration   1: 6335666.144 ns/op
Iteration   2: 5131627.974 ns/op
Iteration   3: 5749277.227 ns/op
Iteration   4: 5974901.786 ns/op
Iteration   5: 5562397.890 ns/op


Result "kotlin_benchmarks.array.set.Inline32int.Val_to_Ref_as_Ref_set":
  6445151.396 ±(99.9%) 1497432.851 ns/op [Average]
  (min, avg, max) = (4010051.421, 6445151.396, 9083732.884), stdev = 1400699.618
  CI (99.9%): [4947718.545, 7942584.247] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.set.Inline32int.Val_to_Val_as_Val_set
# Parameters: (size = 100)

# Run progress: 33.09% complete, ETA 06:35:38
# Fork: 1 of 3
# Warmup Iteration   1: 653.535 ns/op
# Warmup Iteration   2: 478.330 ns/op
# Warmup Iteration   3: 512.691 ns/op
Iteration   1: 576.626 ns/op
Iteration   2: 593.537 ns/op
Iteration   3: 585.818 ns/op
Iteration   4: 641.120 ns/op
Iteration   5: 721.598 ns/op

# Run progress: 33.11% complete, ETA 06:35:30
# Fork: 2 of 3
# Warmup Iteration   1: 736.381 ns/op
# Warmup Iteration   2: 488.832 ns/op
# Warmup Iteration   3: 531.627 ns/op
Iteration   1: 723.728 ns/op
Iteration   2: 713.245 ns/op
Iteration   3: 749.265 ns/op
Iteration   4: 741.675 ns/op
Iteration   5: 648.690 ns/op

# Run progress: 33.14% complete, ETA 06:35:21
# Fork: 3 of 3
# Warmup Iteration   1: 637.971 ns/op
# Warmup Iteration   2: 468.880 ns/op
# Warmup Iteration   3: 570.364 ns/op
Iteration   1: 529.630 ns/op
Iteration   2: 585.071 ns/op
Iteration   3: 596.479 ns/op
Iteration   4: 579.955 ns/op
Iteration   5: 563.394 ns/op


Result "kotlin_benchmarks.array.set.Inline32int.Val_to_Val_as_Val_set":
  636.655 ±(99.9%) 79.230 ns/op [Average]
  (min, avg, max) = (529.630, 636.655, 749.265), stdev = 74.112
  CI (99.9%): [557.425, 715.886] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.set.Inline32int.Val_to_Val_as_Val_set
# Parameters: (size = 1000000)

# Run progress: 33.16% complete, ETA 06:35:12
# Fork: 1 of 3
# Warmup Iteration   1: 10814069.892 ns/op
# Warmup Iteration   2: 7223059.050 ns/op
# Warmup Iteration   3: 7971921.591 ns/op
Iteration   1: 8183246.276 ns/op
Iteration   2: 6819279.838 ns/op
Iteration   3: 6692891.556 ns/op
Iteration   4: 6411820.331 ns/op
Iteration   5: 6750200.887 ns/op

# Run progress: 33.19% complete, ETA 06:35:04
# Fork: 2 of 3
# Warmup Iteration   1: 10404201.031 ns/op
# Warmup Iteration   2: 6797260.631 ns/op
# Warmup Iteration   3: 7868107.422 ns/op
Iteration   1: 6865622.163 ns/op
Iteration   2: 6248597.305 ns/op
Iteration   3: 6116502.782 ns/op
Iteration   4: 6468101.763 ns/op
Iteration   5: 6322920.075 ns/op

# Run progress: 33.21% complete, ETA 06:34:56
# Fork: 3 of 3
# Warmup Iteration   1: 10605683.845 ns/op
# Warmup Iteration   2: 7584041.977 ns/op
# Warmup Iteration   3: 9313852.620 ns/op
Iteration   1: 9928906.451 ns/op
Iteration   2: 6198855.061 ns/op
Iteration   3: 6351584.377 ns/op
Iteration   4: 6230524.791 ns/op
Iteration   5: 6186839.466 ns/op


Result "kotlin_benchmarks.array.set.Inline32int.Val_to_Val_as_Val_set":
  6785059.542 ±(99.9%) 1078226.203 ns/op [Average]
  (min, avg, max) = (6116502.782, 6785059.542, 9928906.451), stdev = 1008573.459
  CI (99.9%): [5706833.339, 7863285.745] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.set.Inline64byte.New_to_Ref_as_Ref_set
# Parameters: (size = 100)

# Run progress: 33.24% complete, ETA 06:34:47
# Fork: 1 of 3
# Warmup Iteration   1: 1593.680 ns/op
# Warmup Iteration   2: 1374.252 ns/op
# Warmup Iteration   3: 1769.815 ns/op
Iteration   1: 1688.119 ns/op
Iteration   2: 1729.859 ns/op
Iteration   3: 1614.855 ns/op
Iteration   4: 1653.662 ns/op
Iteration   5: 1945.309 ns/op

# Run progress: 33.26% complete, ETA 06:34:39
# Fork: 2 of 3
# Warmup Iteration   1: 1831.120 ns/op
# Warmup Iteration   2: 1361.229 ns/op
# Warmup Iteration   3: 2115.239 ns/op
Iteration   1: 1964.133 ns/op
Iteration   2: 1966.698 ns/op
Iteration   3: 3159.537 ns/op
Iteration   4: 2570.769 ns/op
Iteration   5: 2039.291 ns/op

# Run progress: 33.28% complete, ETA 06:34:30
# Fork: 3 of 3
# Warmup Iteration   1: 2793.290 ns/op
# Warmup Iteration   2: 544.460 ns/op
# Warmup Iteration   3: 568.602 ns/op
Iteration   1: 566.576 ns/op
Iteration   2: 586.582 ns/op
Iteration   3: 614.495 ns/op
Iteration   4: 667.426 ns/op
Iteration   5: 602.264 ns/op


Result "kotlin_benchmarks.array.set.Inline64byte.New_to_Ref_as_Ref_set":
  1557.972 ±(99.9%) 851.730 ns/op [Average]
  (min, avg, max) = (566.576, 1557.972, 3159.537), stdev = 796.709
  CI (99.9%): [706.242, 2409.702] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.set.Inline64byte.New_to_Ref_as_Ref_set
# Parameters: (size = 1000000)

# Run progress: 33.31% complete, ETA 06:34:23
# Fork: 1 of 3
# Warmup Iteration   1: 8878725.140 ns/op
# Warmup Iteration   2: 10990143.109 ns/op
# Warmup Iteration   3: 4663584.875 ns/op
Iteration   1: 4699917.056 ns/op
Iteration   2: 4410195.724 ns/op
Iteration   3: 3821397.814 ns/op
Iteration   4: 3841641.382 ns/op
Iteration   5: 3801824.528 ns/op

# Run progress: 33.33% complete, ETA 06:34:14
# Fork: 2 of 3
# Warmup Iteration   1: 6882254.849 ns/op
# Warmup Iteration   2: 4291455.319 ns/op
# Warmup Iteration   3: 4200309.029 ns/op
Iteration   1: 3800287.894 ns/op
Iteration   2: 4012094.622 ns/op
Iteration   3: 3881584.139 ns/op
Iteration   4: 3850800.130 ns/op
Iteration   5: 4009353.916 ns/op

# Run progress: 33.36% complete, ETA 06:34:04
# Fork: 3 of 3
# Warmup Iteration   1: 7708528.523 ns/op
# Warmup Iteration   2: 5246574.168 ns/op
# Warmup Iteration   3: 3754768.190 ns/op
Iteration   1: 3816224.490 ns/op
Iteration   2: 3757920.243 ns/op
Iteration   3: 3842410.466 ns/op
Iteration   4: 3800620.125 ns/op
Iteration   5: 3815867.898 ns/op


Result "kotlin_benchmarks.array.set.Inline64byte.New_to_Ref_as_Ref_set":
  3944142.695 ±(99.9%) 282104.519 ns/op [Average]
  (min, avg, max) = (3757920.243, 3944142.695, 4699917.056), stdev = 263880.742
  CI (99.9%): [3662038.176, 4226247.214] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.set.Inline64byte.New_to_Val_as_Val_set
# Parameters: (size = 100)

# Run progress: 33.38% complete, ETA 06:33:55
# Fork: 1 of 3
# Warmup Iteration   1: 504.653 ns/op
# Warmup Iteration   2: 468.341 ns/op
# Warmup Iteration   3: 581.633 ns/op
Iteration   1: 582.332 ns/op
Iteration   2: 579.751 ns/op
Iteration   3: 567.840 ns/op
Iteration   4: 574.757 ns/op
Iteration   5: 564.464 ns/op

# Run progress: 33.41% complete, ETA 06:33:46
# Fork: 2 of 3
# Warmup Iteration   1: 507.806 ns/op
# Warmup Iteration   2: 465.977 ns/op
# Warmup Iteration   3: 569.796 ns/op
Iteration   1: 564.345 ns/op
Iteration   2: 564.667 ns/op
Iteration   3: 564.577 ns/op
Iteration   4: 567.045 ns/op
Iteration   5: 566.905 ns/op

# Run progress: 33.43% complete, ETA 06:33:36
# Fork: 3 of 3
# Warmup Iteration   1: 490.939 ns/op
# Warmup Iteration   2: 492.673 ns/op
# Warmup Iteration   3: 571.325 ns/op
Iteration   1: 570.850 ns/op
Iteration   2: 570.644 ns/op
Iteration   3: 572.734 ns/op
Iteration   4: 566.573 ns/op
Iteration   5: 587.266 ns/op


Result "kotlin_benchmarks.array.set.Inline64byte.New_to_Val_as_Val_set":
  570.983 ±(99.9%) 7.652 ns/op [Average]
  (min, avg, max) = (564.345, 570.983, 587.266), stdev = 7.157
  CI (99.9%): [563.332, 578.635] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.set.Inline64byte.New_to_Val_as_Val_set
# Parameters: (size = 1000000)

# Run progress: 33.46% complete, ETA 06:33:27
# Fork: 1 of 3
# Warmup Iteration   1: 6881070.205 ns/op
# Warmup Iteration   2: 4062828.125 ns/op
# Warmup Iteration   3: 3911580.739 ns/op
Iteration   1: 3930354.332 ns/op
Iteration   2: 3796920.600 ns/op
Iteration   3: 3794626.887 ns/op
Iteration   4: 3861867.015 ns/op
Iteration   5: 3847990.935 ns/op

# Run progress: 33.48% complete, ETA 06:33:18
# Fork: 2 of 3
# Warmup Iteration   1: 7040178.028 ns/op
# Warmup Iteration   2: 4389225.074 ns/op
# Warmup Iteration   3: 3886050.062 ns/op
Iteration   1: 3893740.636 ns/op
Iteration   2: 3864016.665 ns/op
Iteration   3: 3856867.019 ns/op
Iteration   4: 3885178.409 ns/op
Iteration   5: 3813120.739 ns/op

# Run progress: 33.50% complete, ETA 06:33:09
# Fork: 3 of 3
# Warmup Iteration   1: 6844853.741 ns/op
# Warmup Iteration   2: 4038681.394 ns/op
# Warmup Iteration   3: 3911677.689 ns/op
Iteration   1: 4119287.910 ns/op
Iteration   2: 3811224.970 ns/op
Iteration   3: 3811043.079 ns/op
Iteration   4: 3798357.860 ns/op
Iteration   5: 3896602.554 ns/op


Result "kotlin_benchmarks.array.set.Inline64byte.New_to_Val_as_Val_set":
  3865413.307 ±(99.9%) 87623.868 ns/op [Average]
  (min, avg, max) = (3794626.887, 3865413.307, 4119287.910), stdev = 81963.421
  CI (99.9%): [3777789.439, 3953037.176] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.set.Inline64byte.Ref_to_Ref_as_Ref_set
# Parameters: (size = 100)

# Run progress: 33.53% complete, ETA 06:33:00
# Fork: 1 of 3
# Warmup Iteration   1: 504.542 ns/op
# Warmup Iteration   2: 461.538 ns/op
# Warmup Iteration   3: 567.465 ns/op
Iteration   1: 570.251 ns/op
Iteration   2: 567.439 ns/op
Iteration   3: 573.841 ns/op
Iteration   4: 575.926 ns/op
Iteration   5: 575.345 ns/op

# Run progress: 33.55% complete, ETA 06:32:50
# Fork: 2 of 3
# Warmup Iteration   1: 499.452 ns/op
# Warmup Iteration   2: 473.277 ns/op
# Warmup Iteration   3: 575.574 ns/op
Iteration   1: 575.208 ns/op
Iteration   2: 576.645 ns/op
Iteration   3: 576.469 ns/op
Iteration   4: 574.975 ns/op
Iteration   5: 587.223 ns/op

# Run progress: 33.58% complete, ETA 06:32:41
# Fork: 3 of 3
# Warmup Iteration   1: 494.092 ns/op
# Warmup Iteration   2: 463.939 ns/op
# Warmup Iteration   3: 570.307 ns/op
Iteration   1: 572.526 ns/op
Iteration   2: 572.402 ns/op
Iteration   3: 570.229 ns/op
Iteration   4: 570.532 ns/op
Iteration   5: 575.441 ns/op


Result "kotlin_benchmarks.array.set.Inline64byte.Ref_to_Ref_as_Ref_set":
  574.297 ±(99.9%) 4.821 ns/op [Average]
  (min, avg, max) = (567.439, 574.297, 587.223), stdev = 4.510
  CI (99.9%): [569.476, 579.118] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.set.Inline64byte.Ref_to_Ref_as_Ref_set
# Parameters: (size = 1000000)

# Run progress: 33.60% complete, ETA 06:32:31
# Fork: 1 of 3
# Warmup Iteration   1: 6911622.703 ns/op
# Warmup Iteration   2: 4174719.917 ns/op
# Warmup Iteration   3: 3872813.300 ns/op
Iteration   1: 3851490.103 ns/op
Iteration   2: 3996698.746 ns/op
Iteration   3: 3894969.436 ns/op
Iteration   4: 3808533.144 ns/op
Iteration   5: 3819383.395 ns/op

# Run progress: 33.63% complete, ETA 06:32:22
# Fork: 2 of 3
# Warmup Iteration   1: 7098648.472 ns/op
# Warmup Iteration   2: 5451388.514 ns/op
# Warmup Iteration   3: 3917940.012 ns/op
Iteration   1: 3755973.257 ns/op
Iteration   2: 3858566.827 ns/op
Iteration   3: 3795310.219 ns/op
Iteration   4: 3756042.910 ns/op
Iteration   5: 3785062.030 ns/op

# Run progress: 33.65% complete, ETA 06:32:13
# Fork: 3 of 3
# Warmup Iteration   1: 7223361.511 ns/op
# Warmup Iteration   2: 4120834.016 ns/op
# Warmup Iteration   3: 3908396.887 ns/op
Iteration   1: 4016747.347 ns/op
Iteration   2: 3847628.192 ns/op
Iteration   3: 3966616.307 ns/op
Iteration   4: 3907135.496 ns/op
Iteration   5: 3860150.862 ns/op


Result "kotlin_benchmarks.array.set.Inline64byte.Ref_to_Ref_as_Ref_set":
  3861353.885 ±(99.9%) 87597.598 ns/op [Average]
  (min, avg, max) = (3755973.257, 3861353.885, 4016747.347), stdev = 81938.847
  CI (99.9%): [3773756.287, 3948951.482] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.set.Inline64byte.Ref_to_Val_as_Val_set
# Parameters: (size = 100)

# Run progress: 33.68% complete, ETA 06:32:03
# Fork: 1 of 3
# Warmup Iteration   1: 511.164 ns/op
# Warmup Iteration   2: 462.337 ns/op
# Warmup Iteration   3: 565.825 ns/op
Iteration   1: 576.233 ns/op
Iteration   2: 582.876 ns/op
Iteration   3: 581.136 ns/op
Iteration   4: 564.322 ns/op
Iteration   5: 563.574 ns/op

# Run progress: 33.70% complete, ETA 06:31:54
# Fork: 2 of 3
# Warmup Iteration   1: 509.312 ns/op
# Warmup Iteration   2: 463.009 ns/op
# Warmup Iteration   3: 564.265 ns/op
Iteration   1: 565.943 ns/op
Iteration   2: 566.693 ns/op
Iteration   3: 563.990 ns/op
Iteration   4: 569.655 ns/op
Iteration   5: 579.617 ns/op

# Run progress: 33.73% complete, ETA 06:31:44
# Fork: 3 of 3
# Warmup Iteration   1: 497.444 ns/op
# Warmup Iteration   2: 472.260 ns/op
# Warmup Iteration   3: 567.070 ns/op
Iteration   1: 662.348 ns/op
Iteration   2: 813.097 ns/op
Iteration   3: 594.809 ns/op
Iteration   4: 575.850 ns/op
Iteration   5: 565.696 ns/op


Result "kotlin_benchmarks.array.set.Inline64byte.Ref_to_Val_as_Val_set":
  595.056 ±(99.9%) 69.655 ns/op [Average]
  (min, avg, max) = (563.574, 595.056, 813.097), stdev = 65.156
  CI (99.9%): [525.401, 664.711] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.set.Inline64byte.Ref_to_Val_as_Val_set
# Parameters: (size = 1000000)

# Run progress: 33.75% complete, ETA 06:31:35
# Fork: 1 of 3
# Warmup Iteration   1: 7929600.906 ns/op
# Warmup Iteration   2: 5152518.800 ns/op
# Warmup Iteration   3: 4063838.227 ns/op
Iteration   1: 4692847.093 ns/op
Iteration   2: 4019311.000 ns/op
Iteration   3: 3782239.623 ns/op
Iteration   4: 3784991.509 ns/op
Iteration   5: 3756744.713 ns/op

# Run progress: 33.77% complete, ETA 06:31:26
# Fork: 2 of 3
# Warmup Iteration   1: 6936601.724 ns/op
# Warmup Iteration   2: 3996863.095 ns/op
# Warmup Iteration   3: 3925041.176 ns/op
Iteration   1: 4114999.660 ns/op
Iteration   2: 3797842.140 ns/op
Iteration   3: 3780913.390 ns/op
Iteration   4: 3741139.561 ns/op
Iteration   5: 3811425.663 ns/op

# Run progress: 33.80% complete, ETA 06:31:17
# Fork: 3 of 3
# Warmup Iteration   1: 7015120.083 ns/op
# Warmup Iteration   2: 4253022.502 ns/op
# Warmup Iteration   3: 3834069.023 ns/op
Iteration   1: 3843482.981 ns/op
Iteration   2: 4062149.528 ns/op
Iteration   3: 3803242.978 ns/op
Iteration   4: 3815845.803 ns/op
Iteration   5: 3904505.329 ns/op


Result "kotlin_benchmarks.array.set.Inline64byte.Ref_to_Val_as_Val_set":
  3914112.065 ±(99.9%) 261451.370 ns/op [Average]
  (min, avg, max) = (3741139.561, 3914112.065, 4692847.093), stdev = 244561.774
  CI (99.9%): [3652660.695, 4175563.434] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.set.Inline64byte.Val_to_Ref_as_Ref_set
# Parameters: (size = 100)

# Run progress: 33.82% complete, ETA 06:31:08
# Fork: 1 of 3
# Warmup Iteration   1: 492.954 ns/op
# Warmup Iteration   2: 475.483 ns/op
# Warmup Iteration   3: 566.696 ns/op
Iteration   1: 566.703 ns/op
Iteration   2: 570.023 ns/op
Iteration   3: 570.537 ns/op
Iteration   4: 570.455 ns/op
Iteration   5: 570.978 ns/op

# Run progress: 33.85% complete, ETA 06:30:58
# Fork: 2 of 3
# Warmup Iteration   1: 491.777 ns/op
# Warmup Iteration   2: 469.251 ns/op
# Warmup Iteration   3: 575.409 ns/op
Iteration   1: 587.644 ns/op
Iteration   2: 570.439 ns/op
Iteration   3: 574.029 ns/op
Iteration   4: 571.988 ns/op
Iteration   5: 577.813 ns/op

# Run progress: 33.87% complete, ETA 06:30:49
# Fork: 3 of 3
# Warmup Iteration   1: 489.442 ns/op
# Warmup Iteration   2: 464.074 ns/op
# Warmup Iteration   3: 571.475 ns/op
Iteration   1: 572.444 ns/op
Iteration   2: 581.789 ns/op
Iteration   3: 574.978 ns/op
Iteration   4: 571.972 ns/op
Iteration   5: 599.143 ns/op


Result "kotlin_benchmarks.array.set.Inline64byte.Val_to_Ref_as_Ref_set":
  575.396 ±(99.9%) 8.996 ns/op [Average]
  (min, avg, max) = (566.703, 575.396, 599.143), stdev = 8.415
  CI (99.9%): [566.400, 584.392] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.set.Inline64byte.Val_to_Ref_as_Ref_set
# Parameters: (size = 1000000)

# Run progress: 33.90% complete, ETA 06:30:39
# Fork: 1 of 3
# Warmup Iteration   1: 6912701.486 ns/op
# Warmup Iteration   2: 4213224.088 ns/op
# Warmup Iteration   3: 3798463.679 ns/op
Iteration   1: 3806212.277 ns/op
Iteration   2: 3803716.038 ns/op
Iteration   3: 3801125.313 ns/op
Iteration   4: 3984567.526 ns/op
Iteration   5: 3784738.208 ns/op

# Run progress: 33.92% complete, ETA 06:30:30
# Fork: 2 of 3
# Warmup Iteration   1: 6793413.284 ns/op
# Warmup Iteration   2: 3916532.914 ns/op
# Warmup Iteration   3: 4237906.513 ns/op
Iteration   1: 3782935.778 ns/op
Iteration   2: 3822325.570 ns/op
Iteration   3: 3807523.519 ns/op
Iteration   4: 3816104.167 ns/op
Iteration   5: 3814093.277 ns/op

# Run progress: 33.95% complete, ETA 06:30:22
# Fork: 3 of 3
# Warmup Iteration   1: 6916191.781 ns/op
# Warmup Iteration   2: 3955665.189 ns/op
# Warmup Iteration   3: 3784635.023 ns/op
Iteration   1: 3843517.969 ns/op
Iteration   2: 3951961.765 ns/op
Iteration   3: 3856548.211 ns/op
Iteration   4: 3865977.330 ns/op
Iteration   5: 3853441.985 ns/op


Result "kotlin_benchmarks.array.set.Inline64byte.Val_to_Ref_as_Ref_set":
  3839652.595 ±(99.9%) 62247.276 ns/op [Average]
  (min, avg, max) = (3782935.778, 3839652.595, 3984567.526), stdev = 58226.141
  CI (99.9%): [3777405.319, 3901899.872] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.set.Inline64byte.Val_to_Val_as_Val_set
# Parameters: (size = 100)

# Run progress: 33.97% complete, ETA 06:30:12
# Fork: 1 of 3
# Warmup Iteration   1: 493.978 ns/op
# Warmup Iteration   2: 482.001 ns/op
# Warmup Iteration   3: 573.899 ns/op
Iteration   1: 571.597 ns/op
Iteration   2: 578.048 ns/op
Iteration   3: 571.437 ns/op
Iteration   4: 568.026 ns/op
Iteration   5: 575.087 ns/op

# Run progress: 34.00% complete, ETA 06:30:12
# Fork: 2 of 3
# Warmup Iteration   1: 496.313 ns/op
# Warmup Iteration   2: 472.726 ns/op
# Warmup Iteration   3: 582.959 ns/op
Iteration   1: 573.293 ns/op
Iteration   2: 570.370 ns/op
Iteration   3: 571.463 ns/op
Iteration   4: 566.602 ns/op
Iteration   5: 567.107 ns/op

# Run progress: 34.02% complete, ETA 06:30:02
# Fork: 3 of 3
# Warmup Iteration   1: 489.634 ns/op
# Warmup Iteration   2: 465.780 ns/op
# Warmup Iteration   3: 573.261 ns/op
Iteration   1: 575.403 ns/op
Iteration   2: 582.030 ns/op
Iteration   3: 578.071 ns/op
Iteration   4: 570.715 ns/op
Iteration   5: 572.241 ns/op


Result "kotlin_benchmarks.array.set.Inline64byte.Val_to_Val_as_Val_set":
  572.766 ±(99.9%) 4.625 ns/op [Average]
  (min, avg, max) = (566.602, 572.766, 582.030), stdev = 4.326
  CI (99.9%): [568.141, 577.391] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.set.Inline64byte.Val_to_Val_as_Val_set
# Parameters: (size = 1000000)

# Run progress: 34.04% complete, ETA 06:29:53
# Fork: 1 of 3
# Warmup Iteration   1: 7064792.254 ns/op
# Warmup Iteration   2: 4007385.087 ns/op
# Warmup Iteration   3: 3770215.356 ns/op
Iteration   1: 3784180.293 ns/op
Iteration   2: 4033604.084 ns/op
Iteration   3: 3885836.714 ns/op
Iteration   4: 3816387.943 ns/op
Iteration   5: 3793403.302 ns/op

# Run progress: 34.07% complete, ETA 06:29:45
# Fork: 2 of 3
# Warmup Iteration   1: 6839905.898 ns/op
# Warmup Iteration   2: 4005243.693 ns/op
# Warmup Iteration   3: 3795019.340 ns/op
Iteration   1: 3830394.254 ns/op
Iteration   2: 3819878.943 ns/op
Iteration   3: 3828645.122 ns/op
Iteration   4: 3860537.500 ns/op
Iteration   5: 3800192.453 ns/op

# Run progress: 34.09% complete, ETA 06:29:42
# Fork: 3 of 3
# Warmup Iteration   1: 7399728.243 ns/op
# Warmup Iteration   2: 4145215.193 ns/op
# Warmup Iteration   3: 3764943.663 ns/op
Iteration   1: 3721639.915 ns/op
Iteration   2: 3711784.443 ns/op
Iteration   3: 3857621.808 ns/op
Iteration   4: 3723333.022 ns/op
Iteration   5: 3720664.513 ns/op


Result "kotlin_benchmarks.array.set.Inline64byte.Val_to_Val_as_Val_set":
  3812540.287 ±(99.9%) 88231.573 ns/op [Average]
  (min, avg, max) = (3711784.443, 3812540.287, 4033604.084), stdev = 82531.868
  CI (99.9%): [3724308.715, 3900771.860] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.set.Inline64int.New_to_Ref_as_Ref_set
# Parameters: (size = 100)

# Run progress: 34.12% complete, ETA 06:29:33
# Fork: 1 of 3
# Warmup Iteration   1: 396.360 ns/op
# Warmup Iteration   2: 348.464 ns/op
# Warmup Iteration   3: 318.639 ns/op
Iteration   1: 312.734 ns/op
Iteration   2: 312.207 ns/op
Iteration   3: 308.101 ns/op
Iteration   4: 307.767 ns/op
Iteration   5: 307.538 ns/op

# Run progress: 34.14% complete, ETA 06:29:23
# Fork: 2 of 3
# Warmup Iteration   1: 399.363 ns/op
# Warmup Iteration   2: 353.841 ns/op
# Warmup Iteration   3: 311.380 ns/op
Iteration   1: 309.736 ns/op
Iteration   2: 304.796 ns/op
Iteration   3: 303.686 ns/op
Iteration   4: 301.881 ns/op
Iteration   5: 311.073 ns/op

# Run progress: 34.17% complete, ETA 06:29:14
# Fork: 3 of 3
# Warmup Iteration   1: 408.196 ns/op
# Warmup Iteration   2: 354.266 ns/op
# Warmup Iteration   3: 309.216 ns/op
Iteration   1: 312.710 ns/op
Iteration   2: 311.407 ns/op
Iteration   3: 307.657 ns/op
Iteration   4: 307.262 ns/op
Iteration   5: 309.977 ns/op


Result "kotlin_benchmarks.array.set.Inline64int.New_to_Ref_as_Ref_set":
  308.569 ±(99.9%) 3.530 ns/op [Average]
  (min, avg, max) = (301.881, 308.569, 312.734), stdev = 3.302
  CI (99.9%): [305.038, 312.099] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.set.Inline64int.New_to_Ref_as_Ref_set
# Parameters: (size = 1000000)

# Run progress: 34.19% complete, ETA 06:29:04
# Fork: 1 of 3
# Warmup Iteration   1: 6795891.608 ns/op
# Warmup Iteration   2: 3773305.397 ns/op
# Warmup Iteration   3: 3116912.279 ns/op
Iteration   1: 3111848.944 ns/op
Iteration   2: 3131105.463 ns/op
Iteration   3: 3149452.603 ns/op
Iteration   4: 3117765.786 ns/op
Iteration   5: 3163624.738 ns/op

# Run progress: 34.22% complete, ETA 06:28:55
# Fork: 2 of 3
# Warmup Iteration   1: 5988158.482 ns/op
# Warmup Iteration   2: 3381423.263 ns/op
# Warmup Iteration   3: 3168579.524 ns/op
Iteration   1: 3122203.028 ns/op
Iteration   2: 3139267.785 ns/op
Iteration   3: 3112754.514 ns/op
Iteration   4: 3129595.109 ns/op
Iteration   5: 3129695.913 ns/op

# Run progress: 34.24% complete, ETA 06:28:46
# Fork: 3 of 3
# Warmup Iteration   1: 5965679.243 ns/op
# Warmup Iteration   2: 3335302.013 ns/op
# Warmup Iteration   3: 3123547.876 ns/op
Iteration   1: 3126035.305 ns/op
Iteration   2: 3113044.238 ns/op
Iteration   3: 3182360.892 ns/op
Iteration   4: 3107910.731 ns/op
Iteration   5: 3136318.536 ns/op


Result "kotlin_benchmarks.array.set.Inline64int.New_to_Ref_as_Ref_set":
  3131532.239 ±(99.9%) 22078.583 ns/op [Average]
  (min, avg, max) = (3107910.731, 3131532.239, 3182360.892), stdev = 20652.320
  CI (99.9%): [3109453.656, 3153610.822] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.set.Inline64int.New_to_Val_as_Val_set
# Parameters: (size = 100)

# Run progress: 34.26% complete, ETA 06:28:36
# Fork: 1 of 3
# Warmup Iteration   1: 386.789 ns/op
# Warmup Iteration   2: 353.558 ns/op
# Warmup Iteration   3: 323.013 ns/op
Iteration   1: 309.208 ns/op
Iteration   2: 308.397 ns/op
Iteration   3: 308.638 ns/op
Iteration   4: 308.093 ns/op
Iteration   5: 311.360 ns/op

# Run progress: 34.29% complete, ETA 06:28:27
# Fork: 2 of 3
# Warmup Iteration   1: 385.178 ns/op
# Warmup Iteration   2: 350.499 ns/op
# Warmup Iteration   3: 309.976 ns/op
Iteration   1: 311.902 ns/op
Iteration   2: 312.273 ns/op
Iteration   3: 308.575 ns/op
Iteration   4: 310.527 ns/op
Iteration   5: 304.319 ns/op

# Run progress: 34.31% complete, ETA 06:28:17
# Fork: 3 of 3
# Warmup Iteration   1: 398.313 ns/op
# Warmup Iteration   2: 357.269 ns/op
# Warmup Iteration   3: 303.208 ns/op
Iteration   1: 307.656 ns/op
Iteration   2: 305.667 ns/op
Iteration   3: 307.273 ns/op
Iteration   4: 306.318 ns/op
Iteration   5: 304.115 ns/op


Result "kotlin_benchmarks.array.set.Inline64int.New_to_Val_as_Val_set":
  308.288 ±(99.9%) 2.708 ns/op [Average]
  (min, avg, max) = (304.115, 308.288, 312.273), stdev = 2.533
  CI (99.9%): [305.580, 310.996] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.set.Inline64int.New_to_Val_as_Val_set
# Parameters: (size = 1000000)

# Run progress: 34.34% complete, ETA 06:28:08
# Fork: 1 of 3
# Warmup Iteration   1: 5943536.982 ns/op
# Warmup Iteration   2: 3263928.029 ns/op
# Warmup Iteration   3: 3272069.625 ns/op
Iteration   1: 3224718.514 ns/op
Iteration   2: 3112191.303 ns/op
Iteration   3: 3113960.913 ns/op
Iteration   4: 3114300.697 ns/op
Iteration   5: 3180755.272 ns/op

# Run progress: 34.36% complete, ETA 06:27:58
# Fork: 2 of 3
# Warmup Iteration   1: 5894783.865 ns/op
# Warmup Iteration   2: 3203318.425 ns/op
# Warmup Iteration   3: 3544225.940 ns/op
Iteration   1: 3146431.472 ns/op
Iteration   2: 3090314.672 ns/op
Iteration   3: 3107446.114 ns/op
Iteration   4: 3127863.484 ns/op
Iteration   5: 3118859.472 ns/op

# Run progress: 34.39% complete, ETA 06:27:49
# Fork: 3 of 3
# Warmup Iteration   1: 5862013.081 ns/op
# Warmup Iteration   2: 3348517.581 ns/op
# Warmup Iteration   3: 3099745.514 ns/op
Iteration   1: 3118230.520 ns/op
Iteration   2: 3105822.145 ns/op
Iteration   3: 3148302.084 ns/op
Iteration   4: 3230353.365 ns/op
Iteration   5: 3113137.346 ns/op


Result "kotlin_benchmarks.array.set.Inline64int.New_to_Val_as_Val_set":
  3136845.825 ±(99.9%) 45680.175 ns/op [Average]
  (min, avg, max) = (3090314.672, 3136845.825, 3230353.365), stdev = 42729.264
  CI (99.9%): [3091165.650, 3182526.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.set.Inline64int.Ref_to_Ref_as_Ref_set
# Parameters: (size = 100)

# Run progress: 34.41% complete, ETA 06:27:39
# Fork: 1 of 3
# Warmup Iteration   1: 394.320 ns/op
# Warmup Iteration   2: 352.021 ns/op
# Warmup Iteration   3: 311.334 ns/op
Iteration   1: 303.087 ns/op
Iteration   2: 303.260 ns/op
Iteration   3: 304.748 ns/op
Iteration   4: 302.532 ns/op
Iteration   5: 301.875 ns/op

# Run progress: 34.44% complete, ETA 06:27:30
# Fork: 2 of 3
# Warmup Iteration   1: 392.975 ns/op
# Warmup Iteration   2: 350.480 ns/op
# Warmup Iteration   3: 304.340 ns/op
Iteration   1: 304.406 ns/op
Iteration   2: 308.457 ns/op
Iteration   3: 303.301 ns/op
Iteration   4: 305.547 ns/op
Iteration   5: 301.706 ns/op

# Run progress: 34.46% complete, ETA 06:27:20
# Fork: 3 of 3
# Warmup Iteration   1: 390.820 ns/op
# Warmup Iteration   2: 360.683 ns/op
# Warmup Iteration   3: 301.578 ns/op
Iteration   1: 308.474 ns/op
Iteration   2: 304.355 ns/op
Iteration   3: 302.513 ns/op
Iteration   4: 302.725 ns/op
Iteration   5: 303.299 ns/op


Result "kotlin_benchmarks.array.set.Inline64int.Ref_to_Ref_as_Ref_set":
  304.019 ±(99.9%) 2.236 ns/op [Average]
  (min, avg, max) = (301.706, 304.019, 308.474), stdev = 2.092
  CI (99.9%): [301.783, 306.255] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.set.Inline64int.Ref_to_Ref_as_Ref_set
# Parameters: (size = 1000000)

# Run progress: 34.49% complete, ETA 06:27:11
# Fork: 1 of 3
# Warmup Iteration   1: 5879174.462 ns/op
# Warmup Iteration   2: 3179885.022 ns/op
# Warmup Iteration   3: 3192375.660 ns/op
Iteration   1: 3226418.801 ns/op
Iteration   2: 3133960.419 ns/op
Iteration   3: 3141730.728 ns/op
Iteration   4: 3124842.003 ns/op
Iteration   5: 3161196.899 ns/op

# Run progress: 34.51% complete, ETA 06:27:02
# Fork: 2 of 3
# Warmup Iteration   1: 6015259.234 ns/op
# Warmup Iteration   2: 3697029.762 ns/op
# Warmup Iteration   3: 3173335.962 ns/op
Iteration   1: 3097412.563 ns/op
Iteration   2: 3189203.456 ns/op
Iteration   3: 3106222.523 ns/op
Iteration   4: 3112486.328 ns/op
Iteration   5: 3132170.575 ns/op

# Run progress: 34.53% complete, ETA 06:26:52
# Fork: 3 of 3
# Warmup Iteration   1: 5893432.018 ns/op
# Warmup Iteration   2: 3383575.758 ns/op
# Warmup Iteration   3: 3116610.424 ns/op
Iteration   1: 3097096.836 ns/op
Iteration   2: 3165110.672 ns/op
Iteration   3: 3132969.531 ns/op
Iteration   4: 3276326.456 ns/op
Iteration   5: 3087198.972 ns/op


Result "kotlin_benchmarks.array.set.Inline64int.Ref_to_Ref_as_Ref_set":
  3145623.118 ±(99.9%) 55549.917 ns/op [Average]
  (min, avg, max) = (3087198.972, 3145623.118, 3276326.456), stdev = 51961.427
  CI (99.9%): [3090073.200, 3201173.035] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.set.Inline64int.Ref_to_Val_as_Val_set
# Parameters: (size = 100)

# Run progress: 34.56% complete, ETA 06:26:43
# Fork: 1 of 3
# Warmup Iteration   1: 399.521 ns/op
# Warmup Iteration   2: 349.414 ns/op
# Warmup Iteration   3: 314.893 ns/op
Iteration   1: 318.768 ns/op
Iteration   2: 309.143 ns/op
Iteration   3: 311.741 ns/op
Iteration   4: 308.263 ns/op
Iteration   5: 310.130 ns/op

# Run progress: 34.58% complete, ETA 06:26:33
# Fork: 2 of 3
# Warmup Iteration   1: 397.627 ns/op
# Warmup Iteration   2: 351.028 ns/op
# Warmup Iteration   3: 314.204 ns/op
Iteration   1: 310.856 ns/op
Iteration   2: 313.071 ns/op
Iteration   3: 308.850 ns/op
Iteration   4: 310.146 ns/op
Iteration   5: 310.130 ns/op

# Run progress: 34.61% complete, ETA 06:26:24
# Fork: 3 of 3
# Warmup Iteration   1: 396.525 ns/op
# Warmup Iteration   2: 366.289 ns/op
# Warmup Iteration   3: 307.918 ns/op
Iteration   1: 309.571 ns/op
Iteration   2: 308.987 ns/op
Iteration   3: 309.137 ns/op
Iteration   4: 309.312 ns/op
Iteration   5: 310.210 ns/op


Result "kotlin_benchmarks.array.set.Inline64int.Ref_to_Val_as_Val_set":
  310.554 ±(99.9%) 2.756 ns/op [Average]
  (min, avg, max) = (308.263, 310.554, 318.768), stdev = 2.578
  CI (99.9%): [307.798, 313.311] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.set.Inline64int.Ref_to_Val_as_Val_set
# Parameters: (size = 1000000)

# Run progress: 34.63% complete, ETA 06:26:14
# Fork: 1 of 3
# Warmup Iteration   1: 5894046.571 ns/op
# Warmup Iteration   2: 3223945.608 ns/op
# Warmup Iteration   3: 3120632.846 ns/op
Iteration   1: 3271045.195 ns/op
Iteration   2: 3155329.050 ns/op
Iteration   3: 3125168.852 ns/op
Iteration   4: 3140119.287 ns/op
Iteration   5: 3112425.255 ns/op

# Run progress: 34.66% complete, ETA 06:26:05
# Fork: 2 of 3
# Warmup Iteration   1: 6274836.696 ns/op
# Warmup Iteration   2: 3514559.958 ns/op
# Warmup Iteration   3: 3150787.125 ns/op
Iteration   1: 3127797.471 ns/op
Iteration   2: 3108967.692 ns/op
Iteration   3: 3094407.049 ns/op
Iteration   4: 3114052.308 ns/op
Iteration   5: 3347345.693 ns/op

# Run progress: 34.68% complete, ETA 06:25:56
# Fork: 3 of 3
# Warmup Iteration   1: 5919947.608 ns/op
# Warmup Iteration   2: 3369876.527 ns/op
# Warmup Iteration   3: 3166408.047 ns/op
Iteration   1: 3102753.226 ns/op
Iteration   2: 3120330.247 ns/op
Iteration   3: 3114563.724 ns/op
Iteration   4: 3190037.568 ns/op
Iteration   5: 3118815.586 ns/op


Result "kotlin_benchmarks.array.set.Inline64int.Ref_to_Val_as_Val_set":
  3149543.880 ±(99.9%) 75188.916 ns/op [Average]
  (min, avg, max) = (3094407.049, 3149543.880, 3347345.693), stdev = 70331.758
  CI (99.9%): [3074354.965, 3224732.796] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.set.Inline64int.Val_to_Ref_as_Ref_set
# Parameters: (size = 100)

# Run progress: 34.71% complete, ETA 06:25:46
# Fork: 1 of 3
# Warmup Iteration   1: 380.036 ns/op
# Warmup Iteration   2: 353.387 ns/op
# Warmup Iteration   3: 315.875 ns/op
Iteration   1: 317.310 ns/op
Iteration   2: 311.915 ns/op
Iteration   3: 307.729 ns/op
Iteration   4: 312.230 ns/op
Iteration   5: 308.187 ns/op

# Run progress: 34.73% complete, ETA 06:25:37
# Fork: 2 of 3
# Warmup Iteration   1: 400.722 ns/op
# Warmup Iteration   2: 351.838 ns/op
# Warmup Iteration   3: 308.938 ns/op
Iteration   1: 307.932 ns/op
Iteration   2: 314.366 ns/op
Iteration   3: 312.061 ns/op
Iteration   4: 315.991 ns/op
Iteration   5: 307.401 ns/op

# Run progress: 34.75% complete, ETA 06:25:28
# Fork: 3 of 3
# Warmup Iteration   1: 397.788 ns/op
# Warmup Iteration   2: 363.719 ns/op
# Warmup Iteration   3: 312.597 ns/op
Iteration   1: 310.336 ns/op
Iteration   2: 315.361 ns/op
Iteration   3: 313.908 ns/op
Iteration   4: 309.598 ns/op
Iteration   5: 308.319 ns/op


Result "kotlin_benchmarks.array.set.Inline64int.Val_to_Ref_as_Ref_set":
  311.509 ±(99.9%) 3.542 ns/op [Average]
  (min, avg, max) = (307.401, 311.509, 317.310), stdev = 3.313
  CI (99.9%): [307.967, 315.052] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.set.Inline64int.Val_to_Ref_as_Ref_set
# Parameters: (size = 1000000)

# Run progress: 34.78% complete, ETA 06:25:18
# Fork: 1 of 3
# Warmup Iteration   1: 5964509.367 ns/op
# Warmup Iteration   2: 3358279.209 ns/op
# Warmup Iteration   3: 3109550.954 ns/op
Iteration   1: 3313339.869 ns/op
Iteration   2: 3113371.794 ns/op
Iteration   3: 3116296.409 ns/op
Iteration   4: 3110902.991 ns/op
Iteration   5: 3114344.778 ns/op

# Run progress: 34.80% complete, ETA 06:25:09
# Fork: 2 of 3
# Warmup Iteration   1: 5760403.409 ns/op
# Warmup Iteration   2: 3144664.708 ns/op
# Warmup Iteration   3: 3118360.855 ns/op
Iteration   1: 3132379.804 ns/op
Iteration   2: 3187051.230 ns/op
Iteration   3: 3215429.712 ns/op
Iteration   4: 3123789.478 ns/op
Iteration   5: 3241349.194 ns/op

# Run progress: 34.83% complete, ETA 06:24:59
# Fork: 3 of 3
# Warmup Iteration   1: 5947774.160 ns/op
# Warmup Iteration   2: 3394467.701 ns/op
# Warmup Iteration   3: 3090506.393 ns/op
Iteration   1: 3131980.463 ns/op
Iteration   2: 3121039.864 ns/op
Iteration   3: 3143946.559 ns/op
Iteration   4: 3229634.585 ns/op
Iteration   5: 3131006.084 ns/op


Result "kotlin_benchmarks.array.set.Inline64int.Val_to_Ref_as_Ref_set":
  3161724.188 ±(99.9%) 65649.343 ns/op [Average]
  (min, avg, max) = (3110902.991, 3161724.188, 3313339.869), stdev = 61408.436
  CI (99.9%): [3096074.844, 3227373.531] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.set.Inline64int.Val_to_Val_as_Val_set
# Parameters: (size = 100)

# Run progress: 34.85% complete, ETA 06:24:50
# Fork: 1 of 3
# Warmup Iteration   1: 391.434 ns/op
# Warmup Iteration   2: 351.878 ns/op
# Warmup Iteration   3: 310.918 ns/op
Iteration   1: 320.197 ns/op
Iteration   2: 310.237 ns/op
Iteration   3: 314.495 ns/op
Iteration   4: 310.090 ns/op
Iteration   5: 307.296 ns/op

# Run progress: 34.88% complete, ETA 06:24:41
# Fork: 2 of 3
# Warmup Iteration   1: 392.785 ns/op
# Warmup Iteration   2: 350.874 ns/op
# Warmup Iteration   3: 312.201 ns/op
Iteration   1: 307.966 ns/op
Iteration   2: 313.726 ns/op
Iteration   3: 310.163 ns/op
Iteration   4: 314.995 ns/op
Iteration   5: 317.203 ns/op

# Run progress: 34.90% complete, ETA 06:24:31
# Fork: 3 of 3
# Warmup Iteration   1: 383.166 ns/op
# Warmup Iteration   2: 363.556 ns/op
# Warmup Iteration   3: 308.410 ns/op
Iteration   1: 307.863 ns/op
Iteration   2: 309.369 ns/op
Iteration   3: 309.629 ns/op
Iteration   4: 318.436 ns/op
Iteration   5: 311.136 ns/op


Result "kotlin_benchmarks.array.set.Inline64int.Val_to_Val_as_Val_set":
  312.187 ±(99.9%) 4.354 ns/op [Average]
  (min, avg, max) = (307.296, 312.187, 320.197), stdev = 4.073
  CI (99.9%): [307.832, 316.541] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.set.Inline64int.Val_to_Val_as_Val_set
# Parameters: (size = 1000000)

# Run progress: 34.93% complete, ETA 06:24:22
# Fork: 1 of 3
# Warmup Iteration   1: 5883936.773 ns/op
# Warmup Iteration   2: 3189119.085 ns/op
# Warmup Iteration   3: 3255616.559 ns/op
Iteration   1: 3430684.360 ns/op
Iteration   2: 3201433.149 ns/op
Iteration   3: 3137627.717 ns/op
Iteration   4: 3117086.687 ns/op
Iteration   5: 3122835.904 ns/op

# Run progress: 34.95% complete, ETA 06:24:13
# Fork: 2 of 3
# Warmup Iteration   1: 6327818.488 ns/op
# Warmup Iteration   2: 3497469.184 ns/op
# Warmup Iteration   3: 3202765.560 ns/op
Iteration   1: 3128419.013 ns/op
Iteration   2: 3082502.287 ns/op
Iteration   3: 3110125.514 ns/op
Iteration   4: 3112692.437 ns/op
Iteration   5: 3140789.208 ns/op

# Run progress: 34.98% complete, ETA 06:24:03
# Fork: 3 of 3
# Warmup Iteration   1: 5900620.854 ns/op
# Warmup Iteration   2: 4012548.448 ns/op
# Warmup Iteration   3: 3101759.074 ns/op
Iteration   1: 3109627.441 ns/op
Iteration   2: 3124485.723 ns/op
Iteration   3: 3113538.077 ns/op
Iteration   4: 3105137.731 ns/op
Iteration   5: 3100644.436 ns/op


Result "kotlin_benchmarks.array.set.Inline64int.Val_to_Val_as_Val_set":
  3142508.646 ±(99.9%) 89766.933 ns/op [Average]
  (min, avg, max) = (3082502.287, 3142508.646, 3430684.360), stdev = 83968.045
  CI (99.9%): [3052741.712, 3232275.579] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.set.Primitive32.set
# Parameters: (size = 100)

# Run progress: 35.00% complete, ETA 06:23:54
# Fork: 1 of 3
# Warmup Iteration   1: 15.050 ns/op
# Warmup Iteration   2: 15.023 ns/op
# Warmup Iteration   3: 14.996 ns/op
Iteration   1: 14.953 ns/op
Iteration   2: 14.947 ns/op
Iteration   3: 15.220 ns/op
Iteration   4: 15.054 ns/op
Iteration   5: 14.997 ns/op

# Run progress: 35.02% complete, ETA 06:23:45
# Fork: 2 of 3
# Warmup Iteration   1: 15.111 ns/op
# Warmup Iteration   2: 14.948 ns/op
# Warmup Iteration   3: 15.126 ns/op
Iteration   1: 14.904 ns/op
Iteration   2: 14.900 ns/op
Iteration   3: 14.901 ns/op
Iteration   4: 14.867 ns/op
Iteration   5: 15.088 ns/op

# Run progress: 35.05% complete, ETA 06:23:35
# Fork: 3 of 3
# Warmup Iteration   1: 14.988 ns/op
# Warmup Iteration   2: 14.978 ns/op
# Warmup Iteration   3: 14.897 ns/op
Iteration   1: 14.926 ns/op
Iteration   2: 14.988 ns/op
Iteration   3: 15.015 ns/op
Iteration   4: 14.891 ns/op
Iteration   5: 14.854 ns/op


Result "kotlin_benchmarks.array.set.Primitive32.set":
  14.967 ±(99.9%) 0.105 ns/op [Average]
  (min, avg, max) = (14.854, 14.967, 15.220), stdev = 0.098
  CI (99.9%): [14.862, 15.072] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.set.Primitive32.set
# Parameters: (size = 1000000)

# Run progress: 35.07% complete, ETA 06:23:26
# Fork: 1 of 3
# Warmup Iteration   1: 149195.847 ns/op
# Warmup Iteration   2: 148778.124 ns/op
# Warmup Iteration   3: 149182.531 ns/op
Iteration   1: 148636.882 ns/op
Iteration   2: 148518.490 ns/op
Iteration   3: 148411.292 ns/op
Iteration   4: 148189.600 ns/op
Iteration   5: 148572.639 ns/op

# Run progress: 35.10% complete, ETA 06:23:16
# Fork: 2 of 3
# Warmup Iteration   1: 148707.008 ns/op
# Warmup Iteration   2: 148186.957 ns/op
# Warmup Iteration   3: 148049.349 ns/op
Iteration   1: 147940.128 ns/op
Iteration   2: 147894.684 ns/op
Iteration   3: 147438.671 ns/op
Iteration   4: 147750.098 ns/op
Iteration   5: 147487.936 ns/op

# Run progress: 35.12% complete, ETA 06:23:07
# Fork: 3 of 3
# Warmup Iteration   1: 148520.309 ns/op
# Warmup Iteration   2: 148055.241 ns/op
# Warmup Iteration   3: 148296.356 ns/op
Iteration   1: 147596.216 ns/op
Iteration   2: 147471.954 ns/op
Iteration   3: 147525.825 ns/op
Iteration   4: 148128.775 ns/op
Iteration   5: 147663.062 ns/op


Result "kotlin_benchmarks.array.set.Primitive32.set":
  147948.417 ±(99.9%) 462.371 ns/op [Average]
  (min, avg, max) = (147438.671, 147948.417, 148636.882), stdev = 432.502
  CI (99.9%): [147486.045, 148410.788] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.set.Primitive64.set0
# Parameters: (size = 100)

# Run progress: 35.15% complete, ETA 06:22:57
# Fork: 1 of 3
# Warmup Iteration   1: 14.795 ns/op
# Warmup Iteration   2: 14.699 ns/op
# Warmup Iteration   3: 14.714 ns/op
Iteration   1: 14.713 ns/op
Iteration   2: 14.763 ns/op
Iteration   3: 14.761 ns/op
Iteration   4: 14.727 ns/op
Iteration   5: 14.727 ns/op

# Run progress: 35.17% complete, ETA 06:22:48
# Fork: 2 of 3
# Warmup Iteration   1: 14.794 ns/op
# Warmup Iteration   2: 14.718 ns/op
# Warmup Iteration   3: 14.693 ns/op
Iteration   1: 14.665 ns/op
Iteration   2: 14.718 ns/op
Iteration   3: 14.710 ns/op
Iteration   4: 14.731 ns/op
Iteration   5: 14.652 ns/op

# Run progress: 35.20% complete, ETA 06:22:39
# Fork: 3 of 3
# Warmup Iteration   1: 14.797 ns/op
# Warmup Iteration   2: 14.717 ns/op
# Warmup Iteration   3: 14.701 ns/op
Iteration   1: 14.698 ns/op
Iteration   2: 14.695 ns/op
Iteration   3: 14.685 ns/op
Iteration   4: 14.678 ns/op
Iteration   5: 14.717 ns/op


Result "kotlin_benchmarks.array.set.Primitive64.set0":
  14.709 ±(99.9%) 0.034 ns/op [Average]
  (min, avg, max) = (14.652, 14.709, 14.763), stdev = 0.032
  CI (99.9%): [14.675, 14.743] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.set.Primitive64.set0
# Parameters: (size = 1000000)

# Run progress: 35.22% complete, ETA 06:22:29
# Fork: 1 of 3
# Warmup Iteration   1: 161885.568 ns/op
# Warmup Iteration   2: 161095.538 ns/op
# Warmup Iteration   3: 160698.673 ns/op
Iteration   1: 161306.984 ns/op
Iteration   2: 160729.587 ns/op
Iteration   3: 161327.244 ns/op
Iteration   4: 161374.774 ns/op
Iteration   5: 162481.522 ns/op

# Run progress: 35.25% complete, ETA 06:22:20
# Fork: 2 of 3
# Warmup Iteration   1: 161920.673 ns/op
# Warmup Iteration   2: 161879.395 ns/op
# Warmup Iteration   3: 160637.394 ns/op
Iteration   1: 166534.557 ns/op
Iteration   2: 161064.137 ns/op
Iteration   3: 160821.367 ns/op
Iteration   4: 160665.487 ns/op
Iteration   5: 160789.169 ns/op

# Run progress: 35.27% complete, ETA 06:22:10
# Fork: 3 of 3
# Warmup Iteration   1: 162427.680 ns/op
# Warmup Iteration   2: 160911.291 ns/op
# Warmup Iteration   3: 160782.623 ns/op
Iteration   1: 162460.612 ns/op
Iteration   2: 162055.641 ns/op
Iteration   3: 161335.440 ns/op
Iteration   4: 161968.184 ns/op
Iteration   5: 162822.164 ns/op


Result "kotlin_benchmarks.array.set.Primitive64.set0":
  161849.125 ±(99.9%) 1571.095 ns/op [Average]
  (min, avg, max) = (160665.487, 161849.125, 166534.557), stdev = 1469.603
  CI (99.9%): [160278.029, 163420.220] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.set.Primitive64.set1
# Parameters: (size = 100)

# Run progress: 35.29% complete, ETA 06:22:01
# Fork: 1 of 3
# Warmup Iteration   1: 14.769 ns/op
# Warmup Iteration   2: 14.696 ns/op
# Warmup Iteration   3: 14.683 ns/op
Iteration   1: 14.682 ns/op
Iteration   2: 14.659 ns/op
Iteration   3: 14.671 ns/op
Iteration   4: 14.624 ns/op
Iteration   5: 14.616 ns/op

# Run progress: 35.32% complete, ETA 06:21:51
# Fork: 2 of 3
# Warmup Iteration   1: 14.734 ns/op
# Warmup Iteration   2: 14.647 ns/op
# Warmup Iteration   3: 14.671 ns/op
Iteration   1: 14.659 ns/op
Iteration   2: 14.656 ns/op
Iteration   3: 14.653 ns/op
Iteration   4: 14.650 ns/op
Iteration   5: 14.654 ns/op

# Run progress: 35.34% complete, ETA 06:21:42
# Fork: 3 of 3
# Warmup Iteration   1: 14.758 ns/op
# Warmup Iteration   2: 14.816 ns/op
# Warmup Iteration   3: 14.585 ns/op
Iteration   1: 14.630 ns/op
Iteration   2: 14.612 ns/op
Iteration   3: 14.619 ns/op
Iteration   4: 14.699 ns/op
Iteration   5: 14.552 ns/op


Result "kotlin_benchmarks.array.set.Primitive64.set1":
  14.642 ±(99.9%) 0.038 ns/op [Average]
  (min, avg, max) = (14.552, 14.642, 14.699), stdev = 0.035
  CI (99.9%): [14.604, 14.680] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.set.Primitive64.set1
# Parameters: (size = 1000000)

# Run progress: 35.37% complete, ETA 06:21:33
# Fork: 1 of 3
# Warmup Iteration   1: 161195.046 ns/op
# Warmup Iteration   2: 161103.263 ns/op
# Warmup Iteration   3: 159700.621 ns/op
Iteration   1: 160052.455 ns/op
Iteration   2: 159970.857 ns/op
Iteration   3: 160400.995 ns/op
Iteration   4: 161174.823 ns/op
Iteration   5: 160141.397 ns/op

# Run progress: 35.39% complete, ETA 06:21:23
# Fork: 2 of 3
# Warmup Iteration   1: 160295.819 ns/op
# Warmup Iteration   2: 158966.758 ns/op
# Warmup Iteration   3: 161619.827 ns/op
Iteration   1: 160652.290 ns/op
Iteration   2: 159372.160 ns/op
Iteration   3: 159503.329 ns/op
Iteration   4: 159644.289 ns/op
Iteration   5: 159468.239 ns/op

# Run progress: 35.42% complete, ETA 06:21:14
# Fork: 3 of 3
# Warmup Iteration   1: 161128.157 ns/op
# Warmup Iteration   2: 160433.809 ns/op
# Warmup Iteration   3: 160026.651 ns/op
Iteration   1: 161026.481 ns/op
Iteration   2: 159680.443 ns/op
Iteration   3: 161132.288 ns/op
Iteration   4: 159626.919 ns/op
Iteration   5: 161207.614 ns/op


Result "kotlin_benchmarks.array.set.Primitive64.set1":
  160203.638 ±(99.9%) 725.837 ns/op [Average]
  (min, avg, max) = (159372.160, 160203.638, 161207.614), stdev = 678.949
  CI (99.9%): [159477.801, 160929.476] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.sum.IdentityOpt.Int_as_Int_sum
# Parameters: (size = 100)

# Run progress: 35.44% complete, ETA 06:21:04
# Fork: 1 of 3
# Warmup Iteration   1: 58.835 ns/op
# Warmup Iteration   2: 58.162 ns/op
# Warmup Iteration   3: 58.053 ns/op
Iteration   1: 57.934 ns/op
Iteration   2: 57.923 ns/op
Iteration   3: 59.076 ns/op
Iteration   4: 58.224 ns/op
Iteration   5: 58.025 ns/op

# Run progress: 35.47% complete, ETA 06:20:55
# Fork: 2 of 3
# Warmup Iteration   1: 58.533 ns/op
# Warmup Iteration   2: 58.209 ns/op
# Warmup Iteration   3: 58.029 ns/op
Iteration   1: 58.001 ns/op
Iteration   2: 58.044 ns/op
Iteration   3: 57.968 ns/op
Iteration   4: 57.967 ns/op
Iteration   5: 58.037 ns/op

# Run progress: 35.49% complete, ETA 06:20:46
# Fork: 3 of 3
# Warmup Iteration   1: 58.603 ns/op
# Warmup Iteration   2: 58.066 ns/op
# Warmup Iteration   3: 57.990 ns/op
Iteration   1: 57.866 ns/op
Iteration   2: 57.959 ns/op
Iteration   3: 57.999 ns/op
Iteration   4: 58.615 ns/op
Iteration   5: 58.469 ns/op


Result "kotlin_benchmarks.array.sum.IdentityOpt.Int_as_Int_sum":
  58.140 ±(99.9%) 0.355 ns/op [Average]
  (min, avg, max) = (57.866, 58.140, 59.076), stdev = 0.332
  CI (99.9%): [57.785, 58.496] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.sum.IdentityOpt.Int_as_Int_sum
# Parameters: (size = 1000000)

# Run progress: 35.51% complete, ETA 06:20:36
# Fork: 1 of 3
# Warmup Iteration   1: 778013.889 ns/op
# Warmup Iteration   2: 772355.759 ns/op
# Warmup Iteration   3: 775725.702 ns/op
Iteration   1: 769801.431 ns/op
Iteration   2: 771983.512 ns/op
Iteration   3: 768877.490 ns/op
Iteration   4: 768805.048 ns/op
Iteration   5: 811888.956 ns/op

# Run progress: 35.54% complete, ETA 06:20:27
# Fork: 2 of 3
# Warmup Iteration   1: 873148.887 ns/op
# Warmup Iteration   2: 804999.336 ns/op
# Warmup Iteration   3: 800884.047 ns/op
Iteration   1: 772272.872 ns/op
Iteration   2: 772337.156 ns/op
Iteration   3: 770265.943 ns/op
Iteration   4: 1002478.877 ns/op
Iteration   5: 766757.379 ns/op

# Run progress: 35.56% complete, ETA 06:20:17
# Fork: 3 of 3
# Warmup Iteration   1: 758904.655 ns/op
# Warmup Iteration   2: 747662.811 ns/op
# Warmup Iteration   3: 733660.042 ns/op
Iteration   1: 751323.735 ns/op
Iteration   2: 751924.702 ns/op
Iteration   3: 753944.299 ns/op
Iteration   4: 825149.645 ns/op
Iteration   5: 859966.445 ns/op


Result "kotlin_benchmarks.array.sum.IdentityOpt.Int_as_Int_sum":
  794518.499 ±(99.9%) 69330.391 ns/op [Average]
  (min, avg, max) = (751323.735, 794518.499, 1002478.877), stdev = 64851.691
  CI (99.9%): [725188.108, 863848.890] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.sum.IdentityOpt.Ref_as_Ref_fields
# Parameters: (size = 100)

# Run progress: 35.59% complete, ETA 06:20:08
# Fork: 1 of 3
# Warmup Iteration   1: 53.432 ns/op
# Warmup Iteration   2: 51.811 ns/op
# Warmup Iteration   3: 51.500 ns/op
Iteration   1: 51.784 ns/op
Iteration   2: 51.858 ns/op
Iteration   3: 52.398 ns/op
Iteration   4: 51.646 ns/op
Iteration   5: 51.322 ns/op

# Run progress: 35.61% complete, ETA 06:19:59
# Fork: 2 of 3
# Warmup Iteration   1: 52.498 ns/op
# Warmup Iteration   2: 51.850 ns/op
# Warmup Iteration   3: 51.662 ns/op
Iteration   1: 51.829 ns/op
Iteration   2: 51.727 ns/op
Iteration   3: 52.064 ns/op
Iteration   4: 52.499 ns/op
Iteration   5: 52.286 ns/op

# Run progress: 35.64% complete, ETA 06:19:50
# Fork: 3 of 3
# Warmup Iteration   1: 53.399 ns/op
# Warmup Iteration   2: 51.801 ns/op
# Warmup Iteration   3: 51.229 ns/op
Iteration   1: 52.038 ns/op
Iteration   2: 51.626 ns/op
Iteration   3: 52.186 ns/op
Iteration   4: 52.112 ns/op
Iteration   5: 52.046 ns/op


Result "kotlin_benchmarks.array.sum.IdentityOpt.Ref_as_Ref_fields":
  51.961 ±(99.9%) 0.340 ns/op [Average]
  (min, avg, max) = (51.322, 51.961, 52.499), stdev = 0.318
  CI (99.9%): [51.621, 52.301] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.sum.IdentityOpt.Ref_as_Ref_fields
# Parameters: (size = 1000000)

# Run progress: 35.66% complete, ETA 06:19:41
# Fork: 1 of 3
# Warmup Iteration   1: 710726.119 ns/op
# Warmup Iteration   2: 676786.882 ns/op
# Warmup Iteration   3: 721432.602 ns/op
Iteration   1: 708654.720 ns/op
Iteration   2: 742865.570 ns/op
Iteration   3: 830794.307 ns/op
Iteration   4: 868637.038 ns/op
Iteration   5: 798340.146 ns/op

# Run progress: 35.69% complete, ETA 06:19:31
# Fork: 2 of 3
# Warmup Iteration   1: 735924.489 ns/op
# Warmup Iteration   2: 721753.423 ns/op
# Warmup Iteration   3: 706860.654 ns/op
Iteration   1: 893685.963 ns/op
Iteration   2: 727252.875 ns/op
Iteration   3: 725479.421 ns/op
Iteration   4: 773818.298 ns/op
Iteration   5: 783094.509 ns/op

# Run progress: 35.71% complete, ETA 06:19:22
# Fork: 3 of 3
# Warmup Iteration   1: 708309.524 ns/op
# Warmup Iteration   2: 668918.110 ns/op
# Warmup Iteration   3: 739829.520 ns/op
Iteration   1: 747750.339 ns/op
Iteration   2: 794369.734 ns/op
Iteration   3: 805370.145 ns/op
Iteration   4: 806608.041 ns/op
Iteration   5: 818416.330 ns/op


Result "kotlin_benchmarks.array.sum.IdentityOpt.Ref_as_Ref_fields":
  788342.496 ±(99.9%) 56424.242 ns/op [Average]
  (min, avg, max) = (708654.720, 788342.496, 893685.963), stdev = 52779.271
  CI (99.9%): [731918.254, 844766.738] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.sum.IdentityOpt.Ref_as_Ref_sum
# Parameters: (size = 100)

# Run progress: 35.74% complete, ETA 06:19:13
# Fork: 1 of 3
# Warmup Iteration   1: 52.431 ns/op
# Warmup Iteration   2: 51.784 ns/op
# Warmup Iteration   3: 51.596 ns/op
Iteration   1: 51.581 ns/op
Iteration   2: 51.594 ns/op
Iteration   3: 51.370 ns/op
Iteration   4: 51.615 ns/op
Iteration   5: 51.444 ns/op

# Run progress: 35.76% complete, ETA 06:19:03
# Fork: 2 of 3
# Warmup Iteration   1: 52.821 ns/op
# Warmup Iteration   2: 51.707 ns/op
# Warmup Iteration   3: 51.583 ns/op
Iteration   1: 51.625 ns/op
Iteration   2: 54.848 ns/op
Iteration   3: 51.626 ns/op
Iteration   4: 51.650 ns/op
Iteration   5: 51.754 ns/op

# Run progress: 35.78% complete, ETA 06:18:54
# Fork: 3 of 3
# Warmup Iteration   1: 52.093 ns/op
# Warmup Iteration   2: 51.802 ns/op
# Warmup Iteration   3: 51.615 ns/op
Iteration   1: 51.728 ns/op
Iteration   2: 51.650 ns/op
Iteration   3: 52.019 ns/op
Iteration   4: 52.062 ns/op
Iteration   5: 52.219 ns/op


Result "kotlin_benchmarks.array.sum.IdentityOpt.Ref_as_Ref_sum":
  51.919 ±(99.9%) 0.900 ns/op [Average]
  (min, avg, max) = (51.370, 51.919, 54.848), stdev = 0.842
  CI (99.9%): [51.019, 52.819] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.sum.IdentityOpt.Ref_as_Ref_sum
# Parameters: (size = 1000000)

# Run progress: 35.81% complete, ETA 06:18:45
# Fork: 1 of 3
# Warmup Iteration   1: 727243.096 ns/op
# Warmup Iteration   2: 707280.436 ns/op
# Warmup Iteration   3: 752736.672 ns/op
Iteration   1: 812014.633 ns/op
Iteration   2: 819865.578 ns/op
Iteration   3: 803347.722 ns/op
Iteration   4: 787040.368 ns/op
Iteration   5: 708073.727 ns/op

# Run progress: 35.83% complete, ETA 06:18:35
# Fork: 2 of 3
# Warmup Iteration   1: 1316137.193 ns/op
# Warmup Iteration   2: 876001.379 ns/op
# Warmup Iteration   3: 1067532.127 ns/op
Iteration   1: 1137148.331 ns/op
Iteration   2: 780284.901 ns/op
Iteration   3: 814488.797 ns/op
Iteration   4: 828876.720 ns/op
Iteration   5: 829389.714 ns/op

# Run progress: 35.86% complete, ETA 06:18:30
# Fork: 3 of 3
# Warmup Iteration   1: 778476.158 ns/op
# Warmup Iteration   2: 788717.374 ns/op
# Warmup Iteration   3: 882379.111 ns/op
Iteration   1: 809115.346 ns/op
Iteration   2: 778351.909 ns/op
Iteration   3: 753614.130 ns/op
Iteration   4: 748901.275 ns/op
Iteration   5: 753205.770 ns/op


Result "kotlin_benchmarks.array.sum.IdentityOpt.Ref_as_Ref_sum":
  810914.595 ±(99.9%) 103353.916 ns/op [Average]
  (min, avg, max) = (708073.727, 810914.595, 1137148.331), stdev = 96677.317
  CI (99.9%): [707560.678, 914268.511] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.sum.Inline128int.Int_as_Int_sum
# Parameters: (size = 100)

# Run progress: 35.88% complete, ETA 06:18:21
# Fork: 1 of 3
# Warmup Iteration   1: 284.944 ns/op
# Warmup Iteration   2: 281.436 ns/op
# Warmup Iteration   3: 287.882 ns/op
Iteration   1: 296.832 ns/op
Iteration   2: 284.169 ns/op
Iteration   3: 285.613 ns/op
Iteration   4: 285.665 ns/op
Iteration   5: 285.989 ns/op

# Run progress: 35.91% complete, ETA 06:18:16
# Fork: 2 of 3
# Warmup Iteration   1: 285.909 ns/op
# Warmup Iteration   2: 286.369 ns/op
# Warmup Iteration   3: 285.770 ns/op
Iteration   1: 287.754 ns/op
Iteration   2: 286.512 ns/op
Iteration   3: 286.610 ns/op
Iteration   4: 286.215 ns/op
Iteration   5: 289.085 ns/op

# Run progress: 35.93% complete, ETA 06:18:07
# Fork: 3 of 3
# Warmup Iteration   1: 289.145 ns/op
# Warmup Iteration   2: 285.510 ns/op
# Warmup Iteration   3: 287.089 ns/op
Iteration   1: 287.364 ns/op
Iteration   2: 286.474 ns/op
Iteration   3: 289.137 ns/op
Iteration   4: 288.461 ns/op
Iteration   5: 286.390 ns/op


Result "kotlin_benchmarks.array.sum.Inline128int.Int_as_Int_sum":
  287.485 ±(99.9%) 3.121 ns/op [Average]
  (min, avg, max) = (284.169, 287.485, 296.832), stdev = 2.919
  CI (99.9%): [284.364, 290.605] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.sum.Inline128int.Int_as_Int_sum
# Parameters: (size = 1000000)

# Run progress: 35.96% complete, ETA 06:18:03
# Fork: 1 of 3
# Warmup Iteration   1: 3443991.010 ns/op
# Warmup Iteration   2: 3334471.715 ns/op
# Warmup Iteration   3: 3323662.815 ns/op
Iteration   1: 3298194.262 ns/op
Iteration   2: 3317337.046 ns/op
Iteration   3: 3349590.973 ns/op
Iteration   4: 3331849.338 ns/op
Iteration   5: 3211917.466 ns/op

# Run progress: 35.98% complete, ETA 06:17:54
# Fork: 2 of 3
# Warmup Iteration   1: 3391249.578 ns/op
# Warmup Iteration   2: 3284726.248 ns/op
# Warmup Iteration   3: 3329222.407 ns/op
Iteration   1: 3303641.938 ns/op
Iteration   2: 3388210.017 ns/op
Iteration   3: 3349020.488 ns/op
Iteration   4: 3341423.173 ns/op
Iteration   5: 3366865.940 ns/op

# Run progress: 36.00% complete, ETA 06:17:45
# Fork: 3 of 3
# Warmup Iteration   1: 3394568.412 ns/op
# Warmup Iteration   2: 3301619.378 ns/op
# Warmup Iteration   3: 3343062.153 ns/op
Iteration   1: 3282541.668 ns/op
Iteration   2: 3313572.333 ns/op
Iteration   3: 3302765.352 ns/op
Iteration   4: 3283974.810 ns/op
Iteration   5: 3333991.447 ns/op


Result "kotlin_benchmarks.array.sum.Inline128int.Int_as_Int_sum":
  3318326.417 ±(99.9%) 44987.038 ns/op [Average]
  (min, avg, max) = (3211917.466, 3318326.417, 3388210.017), stdev = 42080.904
  CI (99.9%): [3273339.378, 3363313.455] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.sum.Inline128int.Ref_as_Int_sum
# Parameters: (size = 100)

# Run progress: 36.03% complete, ETA 06:17:36
# Fork: 1 of 3
# Warmup Iteration   1: 270.352 ns/op
# Warmup Iteration   2: 269.237 ns/op
# Warmup Iteration   3: 271.658 ns/op
Iteration   1: 271.160 ns/op
Iteration   2: 268.478 ns/op
Iteration   3: 267.800 ns/op
Iteration   4: 268.761 ns/op
Iteration   5: 272.212 ns/op

# Run progress: 36.05% complete, ETA 06:17:26
# Fork: 2 of 3
# Warmup Iteration   1: 272.021 ns/op
# Warmup Iteration   2: 268.938 ns/op
# Warmup Iteration   3: 267.744 ns/op
Iteration   1: 268.692 ns/op
Iteration   2: 268.814 ns/op
Iteration   3: 266.455 ns/op
Iteration   4: 267.057 ns/op
Iteration   5: 267.546 ns/op

# Run progress: 36.08% complete, ETA 06:17:24
# Fork: 3 of 3
# Warmup Iteration   1: 273.192 ns/op
# Warmup Iteration   2: 270.881 ns/op
# Warmup Iteration   3: 271.642 ns/op
Iteration   1: 270.049 ns/op
Iteration   2: 273.512 ns/op
Iteration   3: 268.315 ns/op
Iteration   4: 269.094 ns/op
Iteration   5: 269.236 ns/op


Result "kotlin_benchmarks.array.sum.Inline128int.Ref_as_Int_sum":
  269.145 ±(99.9%) 2.039 ns/op [Average]
  (min, avg, max) = (266.455, 269.145, 273.512), stdev = 1.907
  CI (99.9%): [267.106, 271.184] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.sum.Inline128int.Ref_as_Int_sum
# Parameters: (size = 1000000)

# Run progress: 36.10% complete, ETA 06:17:15
# Fork: 1 of 3
# Warmup Iteration   1: 3267077.922 ns/op
# Warmup Iteration   2: 3199262.038 ns/op
# Warmup Iteration   3: 3179010.547 ns/op
Iteration   1: 3183229.632 ns/op
Iteration   2: 3171911.130 ns/op
Iteration   3: 3166237.553 ns/op
Iteration   4: 3193296.429 ns/op
Iteration   5: 3201505.591 ns/op

# Run progress: 36.13% complete, ETA 06:17:06
# Fork: 2 of 3
# Warmup Iteration   1: 3291960.922 ns/op
# Warmup Iteration   2: 3204216.296 ns/op
# Warmup Iteration   3: 3176549.290 ns/op
Iteration   1: 3203264.997 ns/op
Iteration   2: 3125132.788 ns/op
Iteration   3: 3154919.682 ns/op
Iteration   4: 3179296.924 ns/op
Iteration   5: 3180981.013 ns/op

# Run progress: 36.15% complete, ETA 06:16:56
# Fork: 3 of 3
# Warmup Iteration   1: 3333067.192 ns/op
# Warmup Iteration   2: 3201704.748 ns/op
# Warmup Iteration   3: 3173392.612 ns/op
Iteration   1: 3180805.819 ns/op
Iteration   2: 3178613.303 ns/op
Iteration   3: 3191780.292 ns/op
Iteration   4: 3233146.774 ns/op
Iteration   5: 3226414.663 ns/op


Result "kotlin_benchmarks.array.sum.Inline128int.Ref_as_Int_sum":
  3184702.439 ±(99.9%) 28393.079 ns/op [Average]
  (min, avg, max) = (3125132.788, 3184702.439, 3233146.774), stdev = 26558.903
  CI (99.9%): [3156309.361, 3213095.518] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.sum.Inline128int.Ref_as_Ref_fields
# Parameters: (size = 100)

# Run progress: 36.18% complete, ETA 06:16:47
# Fork: 1 of 3
# Warmup Iteration   1: 161.873 ns/op
# Warmup Iteration   2: 156.079 ns/op
# Warmup Iteration   3: 145.915 ns/op
Iteration   1: 146.308 ns/op
Iteration   2: 143.399 ns/op
Iteration   3: 144.319 ns/op
Iteration   4: 143.013 ns/op
Iteration   5: 142.252 ns/op

# Run progress: 36.20% complete, ETA 06:16:43
# Fork: 2 of 3
# Warmup Iteration   1: 156.903 ns/op
# Warmup Iteration   2: 153.372 ns/op
# Warmup Iteration   3: 142.799 ns/op
Iteration   1: 143.297 ns/op
Iteration   2: 143.267 ns/op
Iteration   3: 142.682 ns/op
Iteration   4: 143.595 ns/op
Iteration   5: 143.276 ns/op

# Run progress: 36.23% complete, ETA 06:16:33
# Fork: 3 of 3
# Warmup Iteration   1: 156.107 ns/op
# Warmup Iteration   2: 154.130 ns/op
# Warmup Iteration   3: 143.687 ns/op
Iteration   1: 142.903 ns/op
Iteration   2: 142.450 ns/op
Iteration   3: 143.416 ns/op
Iteration   4: 143.501 ns/op
Iteration   5: 143.561 ns/op


Result "kotlin_benchmarks.array.sum.Inline128int.Ref_as_Ref_fields":
  143.416 ±(99.9%) 1.012 ns/op [Average]
  (min, avg, max) = (142.252, 143.416, 146.308), stdev = 0.947
  CI (99.9%): [142.404, 144.428] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.sum.Inline128int.Ref_as_Ref_fields
# Parameters: (size = 1000000)

# Run progress: 36.25% complete, ETA 06:16:24
# Fork: 1 of 3
# Warmup Iteration   1: 2562978.794 ns/op
# Warmup Iteration   2: 2513260.418 ns/op
# Warmup Iteration   3: 2529497.593 ns/op
Iteration   1: 2514490.103 ns/op
Iteration   2: 2504449.085 ns/op
Iteration   3: 2534194.688 ns/op
Iteration   4: 2512488.052 ns/op
Iteration   5: 2571277.813 ns/op

# Run progress: 36.27% complete, ETA 06:16:14
# Fork: 2 of 3
# Warmup Iteration   1: 2589936.910 ns/op
# Warmup Iteration   2: 2527189.804 ns/op
# Warmup Iteration   3: 2654682.169 ns/op
Iteration   1: 2619470.953 ns/op
Iteration   2: 2526544.075 ns/op
Iteration   3: 2524964.613 ns/op
Iteration   4: 2521444.060 ns/op
Iteration   5: 2508238.259 ns/op

# Run progress: 36.30% complete, ETA 06:16:05
# Fork: 3 of 3
# Warmup Iteration   1: 2561970.982 ns/op
# Warmup Iteration   2: 2470500.204 ns/op
# Warmup Iteration   3: 2496439.572 ns/op
Iteration   1: 2472632.064 ns/op
Iteration   2: 2486613.448 ns/op
Iteration   3: 2480617.200 ns/op
Iteration   4: 2481135.390 ns/op
Iteration   5: 2487377.481 ns/op


Result "kotlin_benchmarks.array.sum.Inline128int.Ref_as_Ref_fields":
  2516395.819 ±(99.9%) 40959.627 ns/op [Average]
  (min, avg, max) = (2472632.064, 2516395.819, 2619470.953), stdev = 38313.661
  CI (99.9%): [2475436.192, 2557355.446] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.sum.Inline128int.Ref_as_Ref_sum
# Parameters: (size = 100)

# Run progress: 36.32% complete, ETA 06:15:56
# Fork: 1 of 3
# Warmup Iteration   1: 264.751 ns/op
# Warmup Iteration   2: 262.362 ns/op
# Warmup Iteration   3: 260.716 ns/op
Iteration   1: 260.882 ns/op
Iteration   2: 261.612 ns/op
Iteration   3: 261.103 ns/op
Iteration   4: 261.533 ns/op
Iteration   5: 262.075 ns/op

# Run progress: 36.35% complete, ETA 06:15:46
# Fork: 2 of 3
# Warmup Iteration   1: 264.159 ns/op
# Warmup Iteration   2: 261.713 ns/op
# Warmup Iteration   3: 261.259 ns/op
Iteration   1: 261.909 ns/op
Iteration   2: 262.407 ns/op
Iteration   3: 261.417 ns/op
Iteration   4: 261.961 ns/op
Iteration   5: 261.165 ns/op

# Run progress: 36.37% complete, ETA 06:15:37
# Fork: 3 of 3
# Warmup Iteration   1: 261.463 ns/op
# Warmup Iteration   2: 258.867 ns/op
# Warmup Iteration   3: 259.769 ns/op
Iteration   1: 260.327 ns/op
Iteration   2: 260.282 ns/op
Iteration   3: 258.941 ns/op
Iteration   4: 260.675 ns/op
Iteration   5: 259.474 ns/op


Result "kotlin_benchmarks.array.sum.Inline128int.Ref_as_Ref_sum":
  261.051 ±(99.9%) 1.045 ns/op [Average]
  (min, avg, max) = (258.941, 261.051, 262.407), stdev = 0.977
  CI (99.9%): [260.006, 262.096] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.sum.Inline128int.Ref_as_Ref_sum
# Parameters: (size = 1000000)

# Run progress: 36.40% complete, ETA 06:15:27
# Fork: 1 of 3
# Warmup Iteration   1: 3098604.423 ns/op
# Warmup Iteration   2: 3045585.227 ns/op
# Warmup Iteration   3: 3034092.930 ns/op
Iteration   1: 3074113.880 ns/op
Iteration   2: 3066853.912 ns/op
Iteration   3: 3047002.652 ns/op
Iteration   4: 3047575.506 ns/op
Iteration   5: 3049574.973 ns/op

# Run progress: 36.42% complete, ETA 06:15:18
# Fork: 2 of 3
# Warmup Iteration   1: 3102356.283 ns/op
# Warmup Iteration   2: 3058501.520 ns/op
# Warmup Iteration   3: 3026119.226 ns/op
Iteration   1: 3020384.511 ns/op
Iteration   2: 3044832.447 ns/op
Iteration   3: 3075343.272 ns/op
Iteration   4: 3026943.274 ns/op
Iteration   5: 3035098.943 ns/op

# Run progress: 36.45% complete, ETA 06:15:09
# Fork: 3 of 3
# Warmup Iteration   1: 3090119.123 ns/op
# Warmup Iteration   2: 3042540.403 ns/op
# Warmup Iteration   3: 3039532.731 ns/op
Iteration   1: 3003012.066 ns/op
Iteration   2: 2991031.774 ns/op
Iteration   3: 2994875.497 ns/op
Iteration   4: 3302336.610 ns/op
Iteration   5: 3094415.895 ns/op


Result "kotlin_benchmarks.array.sum.Inline128int.Ref_as_Ref_sum":
  3058226.347 ±(99.9%) 79044.194 ns/op [Average]
  (min, avg, max) = (2991031.774, 3058226.347, 3302336.610), stdev = 73937.988
  CI (99.9%): [2979182.153, 3137270.542] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.sum.Inline128int.Val_as_Int_sum
# Parameters: (size = 100)

# Run progress: 36.47% complete, ETA 06:15:00
# Fork: 1 of 3
# Warmup Iteration   1: 263.454 ns/op
# Warmup Iteration   2: 259.472 ns/op
# Warmup Iteration   3: 262.026 ns/op
Iteration   1: 261.835 ns/op
Iteration   2: 262.467 ns/op
Iteration   3: 263.450 ns/op
Iteration   4: 262.105 ns/op
Iteration   5: 262.234 ns/op

# Run progress: 36.50% complete, ETA 06:14:50
# Fork: 2 of 3
# Warmup Iteration   1: 262.906 ns/op
# Warmup Iteration   2: 259.596 ns/op
# Warmup Iteration   3: 261.126 ns/op
Iteration   1: 259.764 ns/op
Iteration   2: 259.367 ns/op
Iteration   3: 261.252 ns/op
Iteration   4: 259.183 ns/op
Iteration   5: 259.845 ns/op

# Run progress: 36.52% complete, ETA 06:14:41
# Fork: 3 of 3
# Warmup Iteration   1: 262.367 ns/op
# Warmup Iteration   2: 261.050 ns/op
# Warmup Iteration   3: 261.675 ns/op
Iteration   1: 259.943 ns/op
Iteration   2: 261.802 ns/op
Iteration   3: 259.704 ns/op
Iteration   4: 261.032 ns/op
Iteration   5: 262.235 ns/op


Result "kotlin_benchmarks.array.sum.Inline128int.Val_as_Int_sum":
  261.081 ±(99.9%) 1.439 ns/op [Average]
  (min, avg, max) = (259.183, 261.081, 263.450), stdev = 1.346
  CI (99.9%): [259.642, 262.520] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.sum.Inline128int.Val_as_Int_sum
# Parameters: (size = 1000000)

# Run progress: 36.54% complete, ETA 06:14:31
# Fork: 1 of 3
# Warmup Iteration   1: 3132474.299 ns/op
# Warmup Iteration   2: 3030716.367 ns/op
# Warmup Iteration   3: 3006377.113 ns/op
Iteration   1: 3012953.093 ns/op
Iteration   2: 3017711.826 ns/op
Iteration   3: 3061140.037 ns/op
Iteration   4: 3014169.036 ns/op
Iteration   5: 3018020.084 ns/op

# Run progress: 36.57% complete, ETA 06:14:22
# Fork: 2 of 3
# Warmup Iteration   1: 3093527.308 ns/op
# Warmup Iteration   2: 3028733.434 ns/op
# Warmup Iteration   3: 2989266.071 ns/op
Iteration   1: 3008264.552 ns/op
Iteration   2: 2996326.762 ns/op
Iteration   3: 2999957.342 ns/op
Iteration   4: 3019692.192 ns/op
Iteration   5: 2988562.190 ns/op

# Run progress: 36.59% complete, ETA 06:14:13
# Fork: 3 of 3
# Warmup Iteration   1: 3091342.563 ns/op
# Warmup Iteration   2: 3012116.892 ns/op
# Warmup Iteration   3: 2994523.560 ns/op
Iteration   1: 3011724.351 ns/op
Iteration   2: 2983578.884 ns/op
Iteration   3: 3008843.904 ns/op
Iteration   4: 3003774.875 ns/op
Iteration   5: 3013245.012 ns/op


Result "kotlin_benchmarks.array.sum.Inline128int.Val_as_Int_sum":
  3010530.943 ±(99.9%) 18859.542 ns/op [Average]
  (min, avg, max) = (2983578.884, 3010530.943, 3061140.037), stdev = 17641.227
  CI (99.9%): [2991671.401, 3029390.485] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.sum.Inline128int.Val_as_Ref_fields
# Parameters: (size = 100)

# Run progress: 36.62% complete, ETA 06:14:03
# Fork: 1 of 3
# Warmup Iteration   1: 155.242 ns/op
# Warmup Iteration   2: 152.776 ns/op
# Warmup Iteration   3: 144.173 ns/op
Iteration   1: 144.310 ns/op
Iteration   2: 144.222 ns/op
Iteration   3: 144.085 ns/op
Iteration   4: 145.175 ns/op
Iteration   5: 143.372 ns/op

# Run progress: 36.64% complete, ETA 06:13:54
# Fork: 2 of 3
# Warmup Iteration   1: 155.983 ns/op
# Warmup Iteration   2: 158.418 ns/op
# Warmup Iteration   3: 143.879 ns/op
Iteration   1: 145.157 ns/op
Iteration   2: 143.889 ns/op
Iteration   3: 143.496 ns/op
Iteration   4: 146.419 ns/op
Iteration   5: 146.938 ns/op

# Run progress: 36.67% complete, ETA 06:13:45
# Fork: 3 of 3
# Warmup Iteration   1: 158.278 ns/op
# Warmup Iteration   2: 154.425 ns/op
# Warmup Iteration   3: 144.348 ns/op
Iteration   1: 143.582 ns/op
Iteration   2: 143.991 ns/op
Iteration   3: 150.041 ns/op
Iteration   4: 144.533 ns/op
Iteration   5: 143.925 ns/op


Result "kotlin_benchmarks.array.sum.Inline128int.Val_as_Ref_fields":
  144.876 ±(99.9%) 1.884 ns/op [Average]
  (min, avg, max) = (143.372, 144.876, 150.041), stdev = 1.762
  CI (99.9%): [142.992, 146.760] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.sum.Inline128int.Val_as_Ref_fields
# Parameters: (size = 1000000)

# Run progress: 36.69% complete, ETA 06:13:35
# Fork: 1 of 3
# Warmup Iteration   1: 2537475.861 ns/op
# Warmup Iteration   2: 2460615.706 ns/op
# Warmup Iteration   3: 2460692.822 ns/op
Iteration   1: 2472580.685 ns/op
Iteration   2: 2504589.744 ns/op
Iteration   3: 2457429.206 ns/op
Iteration   4: 2438332.029 ns/op
Iteration   5: 2443613.930 ns/op

# Run progress: 36.72% complete, ETA 06:13:26
# Fork: 2 of 3
# Warmup Iteration   1: 2510802.369 ns/op
# Warmup Iteration   2: 2448918.386 ns/op
# Warmup Iteration   3: 2458801.494 ns/op
Iteration   1: 2459329.783 ns/op
Iteration   2: 2471805.556 ns/op
Iteration   3: 2442932.367 ns/op
Iteration   4: 2456196.701 ns/op
Iteration   5: 2447651.092 ns/op

# Run progress: 36.74% complete, ETA 06:13:17
# Fork: 3 of 3
# Warmup Iteration   1: 2544414.884 ns/op
# Warmup Iteration   2: 2459961.275 ns/op
# Warmup Iteration   3: 2463594.107 ns/op
Iteration   1: 2458077.959 ns/op
Iteration   2: 2476983.743 ns/op
Iteration   3: 2456529.631 ns/op
Iteration   4: 2460649.980 ns/op
Iteration   5: 2479306.000 ns/op


Result "kotlin_benchmarks.array.sum.Inline128int.Val_as_Ref_fields":
  2461733.894 ±(99.9%) 18342.705 ns/op [Average]
  (min, avg, max) = (2438332.029, 2461733.894, 2504589.744), stdev = 17157.778
  CI (99.9%): [2443391.189, 2480076.599] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.sum.Inline128int.Val_as_Ref_sum
# Parameters: (size = 100)

# Run progress: 36.76% complete, ETA 06:13:08
# Fork: 1 of 3
# Warmup Iteration   1: 261.751 ns/op
# Warmup Iteration   2: 259.908 ns/op
# Warmup Iteration   3: 261.822 ns/op
Iteration   1: 260.731 ns/op
Iteration   2: 262.510 ns/op
Iteration   3: 259.252 ns/op
Iteration   4: 258.623 ns/op
Iteration   5: 259.855 ns/op

# Run progress: 36.79% complete, ETA 06:12:58
# Fork: 2 of 3
# Warmup Iteration   1: 262.616 ns/op
# Warmup Iteration   2: 259.109 ns/op
# Warmup Iteration   3: 259.200 ns/op
Iteration   1: 259.021 ns/op
Iteration   2: 259.229 ns/op
Iteration   3: 258.177 ns/op
Iteration   4: 257.225 ns/op
Iteration   5: 257.779 ns/op

# Run progress: 36.81% complete, ETA 06:12:49
# Fork: 3 of 3
# Warmup Iteration   1: 260.393 ns/op
# Warmup Iteration   2: 258.751 ns/op
# Warmup Iteration   3: 256.389 ns/op
Iteration   1: 258.362 ns/op
Iteration   2: 257.188 ns/op
Iteration   3: 256.797 ns/op
Iteration   4: 257.117 ns/op
Iteration   5: 257.303 ns/op


Result "kotlin_benchmarks.array.sum.Inline128int.Val_as_Ref_sum":
  258.611 ±(99.9%) 1.674 ns/op [Average]
  (min, avg, max) = (256.797, 258.611, 262.510), stdev = 1.566
  CI (99.9%): [256.937, 260.285] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.sum.Inline128int.Val_as_Ref_sum
# Parameters: (size = 1000000)

# Run progress: 36.84% complete, ETA 06:12:39
# Fork: 1 of 3
# Warmup Iteration   1: 3097892.105 ns/op
# Warmup Iteration   2: 2983628.083 ns/op
# Warmup Iteration   3: 3004458.086 ns/op
Iteration   1: 2989343.441 ns/op
Iteration   2: 2986744.682 ns/op
Iteration   3: 3031458.712 ns/op
Iteration   4: 2990315.213 ns/op
Iteration   5: 2987514.178 ns/op

# Run progress: 36.86% complete, ETA 06:12:30
# Fork: 2 of 3
# Warmup Iteration   1: 3084556.110 ns/op
# Warmup Iteration   2: 3006759.551 ns/op
# Warmup Iteration   3: 2996141.320 ns/op
Iteration   1: 3075097.180 ns/op
Iteration   2: 3009258.209 ns/op
Iteration   3: 3052976.462 ns/op
Iteration   4: 3018017.093 ns/op
Iteration   5: 2995320.021 ns/op

# Run progress: 36.89% complete, ETA 06:12:21
# Fork: 3 of 3
# Warmup Iteration   1: 3226368.434 ns/op
# Warmup Iteration   2: 3073184.526 ns/op
# Warmup Iteration   3: 3010364.240 ns/op
Iteration   1: 3005610.404 ns/op
Iteration   2: 3002018.601 ns/op
Iteration   3: 3021615.549 ns/op
Iteration   4: 3006909.408 ns/op
Iteration   5: 3007441.045 ns/op


Result "kotlin_benchmarks.array.sum.Inline128int.Val_as_Ref_sum":
  3011976.013 ±(99.9%) 26896.188 ns/op [Average]
  (min, avg, max) = (2986744.682, 3011976.013, 3075097.180), stdev = 25158.711
  CI (99.9%): [2985079.825, 3038872.201] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.sum.Inline128int.Val_as_Val_fields
# Parameters: (size = 100)

# Run progress: 36.91% complete, ETA 06:12:12
# Fork: 1 of 3
# Warmup Iteration   1: 154.511 ns/op
# Warmup Iteration   2: 152.087 ns/op
# Warmup Iteration   3: 141.704 ns/op
Iteration   1: 141.768 ns/op
Iteration   2: 142.332 ns/op
Iteration   3: 141.659 ns/op
Iteration   4: 142.119 ns/op
Iteration   5: 142.047 ns/op

# Run progress: 36.94% complete, ETA 06:12:02
# Fork: 2 of 3
# Warmup Iteration   1: 154.329 ns/op
# Warmup Iteration   2: 152.376 ns/op
# Warmup Iteration   3: 141.818 ns/op
Iteration   1: 141.644 ns/op
Iteration   2: 141.411 ns/op
Iteration   3: 142.574 ns/op
Iteration   4: 141.808 ns/op
Iteration   5: 142.047 ns/op

# Run progress: 36.96% complete, ETA 06:11:53
# Fork: 3 of 3
# Warmup Iteration   1: 153.930 ns/op
# Warmup Iteration   2: 152.448 ns/op
# Warmup Iteration   3: 142.740 ns/op
Iteration   1: 142.046 ns/op
Iteration   2: 141.432 ns/op
Iteration   3: 142.290 ns/op
Iteration   4: 142.287 ns/op
Iteration   5: 141.649 ns/op


Result "kotlin_benchmarks.array.sum.Inline128int.Val_as_Val_fields":
  141.941 ±(99.9%) 0.373 ns/op [Average]
  (min, avg, max) = (141.411, 141.941, 142.574), stdev = 0.349
  CI (99.9%): [141.568, 142.314] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.sum.Inline128int.Val_as_Val_fields
# Parameters: (size = 1000000)

# Run progress: 36.99% complete, ETA 06:11:44
# Fork: 1 of 3
# Warmup Iteration   1: 2540120.581 ns/op
# Warmup Iteration   2: 2474283.007 ns/op
# Warmup Iteration   3: 2469722.700 ns/op
Iteration   1: 2476903.086 ns/op
Iteration   2: 2466258.027 ns/op
Iteration   3: 2487931.931 ns/op
Iteration   4: 2469557.226 ns/op
Iteration   5: 2461226.075 ns/op

# Run progress: 37.01% complete, ETA 06:11:35
# Fork: 2 of 3
# Warmup Iteration   1: 2509040.313 ns/op
# Warmup Iteration   2: 2479524.527 ns/op
# Warmup Iteration   3: 2469633.621 ns/op
Iteration   1: 2462201.642 ns/op
Iteration   2: 2450131.098 ns/op
Iteration   3: 2459044.608 ns/op
Iteration   4: 2455968.318 ns/op
Iteration   5: 2481676.164 ns/op

# Run progress: 37.03% complete, ETA 06:11:25
# Fork: 3 of 3
# Warmup Iteration   1: 2533845.615 ns/op
# Warmup Iteration   2: 2481231.980 ns/op
# Warmup Iteration   3: 2484745.679 ns/op
Iteration   1: 2475816.049 ns/op
Iteration   2: 2466153.049 ns/op
Iteration   3: 2476023.797 ns/op
Iteration   4: 2466108.312 ns/op
Iteration   5: 2484862.612 ns/op


Result "kotlin_benchmarks.array.sum.Inline128int.Val_as_Val_fields":
  2469324.133 ±(99.9%) 11722.532 ns/op [Average]
  (min, avg, max) = (2450131.098, 2469324.133, 2487931.931), stdev = 10965.264
  CI (99.9%): [2457601.601, 2481046.665] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.sum.Inline128int.Val_as_Val_sum
# Parameters: (size = 100)

# Run progress: 37.06% complete, ETA 06:11:16
# Fork: 1 of 3
# Warmup Iteration   1: 260.537 ns/op
# Warmup Iteration   2: 257.664 ns/op
# Warmup Iteration   3: 255.942 ns/op
Iteration   1: 256.545 ns/op
Iteration   2: 256.504 ns/op
Iteration   3: 256.871 ns/op
Iteration   4: 255.566 ns/op
Iteration   5: 256.207 ns/op

# Run progress: 37.08% complete, ETA 06:11:07
# Fork: 2 of 3
# Warmup Iteration   1: 259.158 ns/op
# Warmup Iteration   2: 257.377 ns/op
# Warmup Iteration   3: 256.888 ns/op
Iteration   1: 255.503 ns/op
Iteration   2: 256.095 ns/op
Iteration   3: 255.708 ns/op
Iteration   4: 256.356 ns/op
Iteration   5: 255.928 ns/op

# Run progress: 37.11% complete, ETA 06:10:57
# Fork: 3 of 3
# Warmup Iteration   1: 259.124 ns/op
# Warmup Iteration   2: 256.909 ns/op
# Warmup Iteration   3: 258.982 ns/op
Iteration   1: 255.402 ns/op
Iteration   2: 256.240 ns/op
Iteration   3: 255.676 ns/op
Iteration   4: 254.561 ns/op
Iteration   5: 253.902 ns/op


Result "kotlin_benchmarks.array.sum.Inline128int.Val_as_Val_sum":
  255.804 ±(99.9%) 0.830 ns/op [Average]
  (min, avg, max) = (253.902, 255.804, 256.871), stdev = 0.776
  CI (99.9%): [254.975, 256.634] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.sum.Inline128int.Val_as_Val_sum
# Parameters: (size = 1000000)

# Run progress: 37.13% complete, ETA 06:10:48
# Fork: 1 of 3
# Warmup Iteration   1: 3063038.737 ns/op
# Warmup Iteration   2: 2982855.333 ns/op
# Warmup Iteration   3: 2968303.886 ns/op
Iteration   1: 3061428.229 ns/op
Iteration   2: 2969755.499 ns/op
Iteration   3: 2981557.398 ns/op
Iteration   4: 2985019.174 ns/op
Iteration   5: 3010172.033 ns/op

# Run progress: 37.16% complete, ETA 06:10:39
# Fork: 2 of 3
# Warmup Iteration   1: 3917387.438 ns/op
# Warmup Iteration   2: 2989451.923 ns/op
# Warmup Iteration   3: 2970416.790 ns/op
Iteration   1: 2970529.251 ns/op
Iteration   2: 2966246.455 ns/op
Iteration   3: 2973893.382 ns/op
Iteration   4: 2979074.363 ns/op
Iteration   5: 2989294.015 ns/op

# Run progress: 37.18% complete, ETA 06:10:30
# Fork: 3 of 3
# Warmup Iteration   1: 3028225.799 ns/op
# Warmup Iteration   2: 2979779.659 ns/op
# Warmup Iteration   3: 2981252.472 ns/op
Iteration   1: 2993534.148 ns/op
Iteration   2: 2992186.319 ns/op
Iteration   3: 2984947.271 ns/op
Iteration   4: 2988811.391 ns/op
Iteration   5: 2992670.252 ns/op


Result "kotlin_benchmarks.array.sum.Inline128int.Val_as_Val_sum":
  2989274.612 ±(99.9%) 24546.712 ns/op [Average]
  (min, avg, max) = (2966246.455, 2989274.612, 3061428.229), stdev = 22961.009
  CI (99.9%): [2964727.900, 3013821.324] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.sum.Inline32int.Int_as_Int_sum
# Parameters: (size = 100)

# Run progress: 37.21% complete, ETA 06:10:20
# Fork: 1 of 3
# Warmup Iteration   1: 34.854 ns/op
# Warmup Iteration   2: 34.710 ns/op
# Warmup Iteration   3: 39.533 ns/op
Iteration   1: 39.541 ns/op
Iteration   2: 39.739 ns/op
Iteration   3: 39.644 ns/op
Iteration   4: 39.636 ns/op
Iteration   5: 39.756 ns/op

# Run progress: 37.23% complete, ETA 06:10:11
# Fork: 2 of 3
# Warmup Iteration   1: 34.670 ns/op
# Warmup Iteration   2: 34.432 ns/op
# Warmup Iteration   3: 39.868 ns/op
Iteration   1: 39.546 ns/op
Iteration   2: 39.532 ns/op
Iteration   3: 39.615 ns/op
Iteration   4: 39.791 ns/op
Iteration   5: 39.587 ns/op

# Run progress: 37.25% complete, ETA 06:10:02
# Fork: 3 of 3
# Warmup Iteration   1: 34.771 ns/op
# Warmup Iteration   2: 34.538 ns/op
# Warmup Iteration   3: 39.589 ns/op
Iteration   1: 39.537 ns/op
Iteration   2: 39.497 ns/op
Iteration   3: 39.442 ns/op
Iteration   4: 39.464 ns/op
Iteration   5: 39.505 ns/op


Result "kotlin_benchmarks.array.sum.Inline32int.Int_as_Int_sum":
  39.589 ±(99.9%) 0.114 ns/op [Average]
  (min, avg, max) = (39.442, 39.589, 39.791), stdev = 0.107
  CI (99.9%): [39.474, 39.703] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.sum.Inline32int.Int_as_Int_sum
# Parameters: (size = 1000000)

# Run progress: 37.28% complete, ETA 06:09:53
# Fork: 1 of 3
# Warmup Iteration   1: 456026.845 ns/op
# Warmup Iteration   2: 438964.826 ns/op
# Warmup Iteration   3: 436801.632 ns/op
Iteration   1: 432779.509 ns/op
Iteration   2: 432887.068 ns/op
Iteration   3: 430411.749 ns/op
Iteration   4: 427451.024 ns/op
Iteration   5: 425177.013 ns/op

# Run progress: 37.30% complete, ETA 06:09:43
# Fork: 2 of 3
# Warmup Iteration   1: 453395.338 ns/op
# Warmup Iteration   2: 434568.321 ns/op
# Warmup Iteration   3: 429071.256 ns/op
Iteration   1: 427351.417 ns/op
Iteration   2: 426814.269 ns/op
Iteration   3: 425292.561 ns/op
Iteration   4: 426643.182 ns/op
Iteration   5: 431184.583 ns/op

# Run progress: 37.33% complete, ETA 06:09:34
# Fork: 3 of 3
# Warmup Iteration   1: 450010.611 ns/op
# Warmup Iteration   2: 431944.296 ns/op
# Warmup Iteration   3: 428388.942 ns/op
Iteration   1: 429438.819 ns/op
Iteration   2: 427950.314 ns/op
Iteration   3: 431287.061 ns/op
Iteration   4: 434077.783 ns/op
Iteration   5: 428892.339 ns/op


Result "kotlin_benchmarks.array.sum.Inline32int.Int_as_Int_sum":
  429175.913 ±(99.9%) 3021.400 ns/op [Average]
  (min, avg, max) = (425177.013, 429175.913, 434077.783), stdev = 2826.220
  CI (99.9%): [426154.512, 432197.313] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.sum.Inline32int.Ref_as_Ref_fields
# Parameters: (size = 100)

# Run progress: 37.35% complete, ETA 06:09:25
# Fork: 1 of 3
# Warmup Iteration   1: 25.815 ns/op
# Warmup Iteration   2: 25.717 ns/op
# Warmup Iteration   3: 25.636 ns/op
Iteration   1: 25.563 ns/op
Iteration   2: 25.919 ns/op
Iteration   3: 25.656 ns/op
Iteration   4: 25.962 ns/op
Iteration   5: 25.663 ns/op

# Run progress: 37.38% complete, ETA 06:09:15
# Fork: 2 of 3
# Warmup Iteration   1: 25.824 ns/op
# Warmup Iteration   2: 25.680 ns/op
# Warmup Iteration   3: 25.640 ns/op
Iteration   1: 25.710 ns/op
Iteration   2: 25.592 ns/op
Iteration   3: 25.735 ns/op
Iteration   4: 25.733 ns/op
Iteration   5: 25.643 ns/op

# Run progress: 37.40% complete, ETA 06:09:06
# Fork: 3 of 3
# Warmup Iteration   1: 25.924 ns/op
# Warmup Iteration   2: 25.680 ns/op
# Warmup Iteration   3: 25.793 ns/op
Iteration   1: 25.718 ns/op
Iteration   2: 25.658 ns/op
Iteration   3: 25.749 ns/op
Iteration   4: 25.693 ns/op
Iteration   5: 25.670 ns/op


Result "kotlin_benchmarks.array.sum.Inline32int.Ref_as_Ref_fields":
  25.711 ±(99.9%) 0.114 ns/op [Average]
  (min, avg, max) = (25.563, 25.711, 25.962), stdev = 0.107
  CI (99.9%): [25.597, 25.825] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.sum.Inline32int.Ref_as_Ref_fields
# Parameters: (size = 1000000)

# Run progress: 37.43% complete, ETA 06:08:57
# Fork: 1 of 3
# Warmup Iteration   1: 352964.128 ns/op
# Warmup Iteration   2: 343817.717 ns/op
# Warmup Iteration   3: 344138.288 ns/op
Iteration   1: 343161.423 ns/op
Iteration   2: 342632.562 ns/op
Iteration   3: 343137.870 ns/op
Iteration   4: 373712.125 ns/op
Iteration   5: 346428.915 ns/op

# Run progress: 37.45% complete, ETA 06:08:48
# Fork: 2 of 3
# Warmup Iteration   1: 349614.554 ns/op
# Warmup Iteration   2: 344507.453 ns/op
# Warmup Iteration   3: 344502.560 ns/op
Iteration   1: 343114.498 ns/op
Iteration   2: 349026.751 ns/op
Iteration   3: 344201.448 ns/op
Iteration   4: 343550.275 ns/op
Iteration   5: 346746.895 ns/op

# Run progress: 37.48% complete, ETA 06:08:38
# Fork: 3 of 3
# Warmup Iteration   1: 370567.611 ns/op
# Warmup Iteration   2: 352869.358 ns/op
# Warmup Iteration   3: 352953.328 ns/op
Iteration   1: 353726.409 ns/op
Iteration   2: 350034.343 ns/op
Iteration   3: 349159.350 ns/op
Iteration   4: 349334.493 ns/op
Iteration   5: 350825.359 ns/op


Result "kotlin_benchmarks.array.sum.Inline32int.Ref_as_Ref_fields":
  348586.181 ±(99.9%) 8295.922 ns/op [Average]
  (min, avg, max) = (342632.562, 348586.181, 373712.125), stdev = 7760.011
  CI (99.9%): [340290.259, 356882.103] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.sum.Inline32int.Ref_as_Ref_sum
# Parameters: (size = 100)

# Run progress: 37.50% complete, ETA 06:08:29
# Fork: 1 of 3
# Warmup Iteration   1: 26.070 ns/op
# Warmup Iteration   2: 25.929 ns/op
# Warmup Iteration   3: 26.070 ns/op
Iteration   1: 26.372 ns/op
Iteration   2: 25.590 ns/op
Iteration   3: 26.029 ns/op
Iteration   4: 25.639 ns/op
Iteration   5: 25.665 ns/op

# Run progress: 37.52% complete, ETA 06:08:20
# Fork: 2 of 3
# Warmup Iteration   1: 25.903 ns/op
# Warmup Iteration   2: 26.101 ns/op
# Warmup Iteration   3: 26.305 ns/op
Iteration   1: 26.440 ns/op
Iteration   2: 26.472 ns/op
Iteration   3: 26.222 ns/op
Iteration   4: 25.772 ns/op
Iteration   5: 25.902 ns/op

# Run progress: 37.55% complete, ETA 06:08:10
# Fork: 3 of 3
# Warmup Iteration   1: 25.734 ns/op
# Warmup Iteration   2: 25.602 ns/op
# Warmup Iteration   3: 25.559 ns/op
Iteration   1: 25.564 ns/op
Iteration   2: 25.570 ns/op
Iteration   3: 25.551 ns/op
Iteration   4: 25.671 ns/op
Iteration   5: 25.869 ns/op


Result "kotlin_benchmarks.array.sum.Inline32int.Ref_as_Ref_sum":
  25.889 ±(99.9%) 0.360 ns/op [Average]
  (min, avg, max) = (25.551, 25.889, 26.472), stdev = 0.337
  CI (99.9%): [25.528, 26.249] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.sum.Inline32int.Ref_as_Ref_sum
# Parameters: (size = 1000000)

# Run progress: 37.57% complete, ETA 06:08:01
# Fork: 1 of 3
# Warmup Iteration   1: 348759.593 ns/op
# Warmup Iteration   2: 342893.531 ns/op
# Warmup Iteration   3: 347489.222 ns/op
Iteration   1: 345564.510 ns/op
Iteration   2: 343703.440 ns/op
Iteration   3: 342227.644 ns/op
Iteration   4: 342195.123 ns/op
Iteration   5: 341678.123 ns/op

# Run progress: 37.60% complete, ETA 06:07:52
# Fork: 2 of 3
# Warmup Iteration   1: 352526.274 ns/op
# Warmup Iteration   2: 350432.463 ns/op
# Warmup Iteration   3: 361059.783 ns/op
Iteration   1: 345977.640 ns/op
Iteration   2: 376477.837 ns/op
Iteration   3: 394779.520 ns/op
Iteration   4: 348596.681 ns/op
Iteration   5: 346774.320 ns/op

# Run progress: 37.62% complete, ETA 06:07:43
# Fork: 3 of 3
# Warmup Iteration   1: 353714.762 ns/op
# Warmup Iteration   2: 349599.020 ns/op
# Warmup Iteration   3: 344653.645 ns/op
Iteration   1: 408782.841 ns/op
Iteration   2: 344193.874 ns/op
Iteration   3: 338260.318 ns/op
Iteration   4: 337378.451 ns/op
Iteration   5: 347154.313 ns/op


Result "kotlin_benchmarks.array.sum.Inline32int.Ref_as_Ref_sum":
  353582.976 ±(99.9%) 23188.169 ns/op [Average]
  (min, avg, max) = (337378.451, 353582.976, 408782.841), stdev = 21690.228
  CI (99.9%): [330394.806, 376771.145] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.sum.Inline32int.Val_as_Int_sum
# Parameters: (size = 100)

# Run progress: 37.65% complete, ETA 06:07:33
# Fork: 1 of 3
# Warmup Iteration   1: 25.161 ns/op
# Warmup Iteration   2: 25.045 ns/op
# Warmup Iteration   3: 24.930 ns/op
Iteration   1: 26.060 ns/op
Iteration   2: 27.061 ns/op
Iteration   3: 28.387 ns/op
Iteration   4: 26.874 ns/op
Iteration   5: 26.769 ns/op

# Run progress: 37.67% complete, ETA 06:07:24
# Fork: 2 of 3
# Warmup Iteration   1: 26.760 ns/op
# Warmup Iteration   2: 26.473 ns/op
# Warmup Iteration   3: 27.012 ns/op
Iteration   1: 26.564 ns/op
Iteration   2: 26.580 ns/op
Iteration   3: 26.806 ns/op
Iteration   4: 26.617 ns/op
Iteration   5: 26.452 ns/op

# Run progress: 37.70% complete, ETA 06:07:15
# Fork: 3 of 3
# Warmup Iteration   1: 26.785 ns/op
# Warmup Iteration   2: 26.771 ns/op
# Warmup Iteration   3: 26.693 ns/op
Iteration   1: 27.994 ns/op
Iteration   2: 27.247 ns/op
Iteration   3: 26.499 ns/op
Iteration   4: 26.697 ns/op
Iteration   5: 26.750 ns/op


Result "kotlin_benchmarks.array.sum.Inline32int.Val_as_Int_sum":
  26.890 ±(99.9%) 0.639 ns/op [Average]
  (min, avg, max) = (26.060, 26.890, 28.387), stdev = 0.598
  CI (99.9%): [26.251, 27.530] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.sum.Inline32int.Val_as_Int_sum
# Parameters: (size = 1000000)

# Run progress: 37.72% complete, ETA 06:07:05
# Fork: 1 of 3
# Warmup Iteration   1: 371388.879 ns/op
# Warmup Iteration   2: 389758.366 ns/op
# Warmup Iteration   3: 390141.496 ns/op
Iteration   1: 384533.971 ns/op
Iteration   2: 367178.890 ns/op
Iteration   3: 365545.715 ns/op
Iteration   4: 364611.081 ns/op
Iteration   5: 365805.379 ns/op

# Run progress: 37.75% complete, ETA 06:06:57
# Fork: 2 of 3
# Warmup Iteration   1: 375435.194 ns/op
# Warmup Iteration   2: 368738.006 ns/op
# Warmup Iteration   3: 423535.779 ns/op
Iteration   1: 395396.045 ns/op
Iteration   2: 395382.290 ns/op
Iteration   3: 375124.148 ns/op
Iteration   4: 350742.057 ns/op
Iteration   5: 357382.001 ns/op

# Run progress: 37.77% complete, ETA 06:06:48
# Fork: 3 of 3
# Warmup Iteration   1: 347476.159 ns/op
# Warmup Iteration   2: 365211.162 ns/op
# Warmup Iteration   3: 362118.937 ns/op
Iteration   1: 360814.353 ns/op
Iteration   2: 337582.303 ns/op
Iteration   3: 359388.340 ns/op
Iteration   4: 359586.004 ns/op
Iteration   5: 375855.608 ns/op


Result "kotlin_benchmarks.array.sum.Inline32int.Val_as_Int_sum":
  367661.879 ±(99.9%) 16757.474 ns/op [Average]
  (min, avg, max) = (337582.303, 367661.879, 395396.045), stdev = 15674.952
  CI (99.9%): [350904.405, 384419.353] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.sum.Inline32int.Val_as_Ref_fields
# Parameters: (size = 100)

# Run progress: 37.79% complete, ETA 06:06:41
# Fork: 1 of 3
# Warmup Iteration   1: 27.266 ns/op
# Warmup Iteration   2: 26.743 ns/op
# Warmup Iteration   3: 26.704 ns/op
Iteration   1: 26.711 ns/op
Iteration   2: 26.717 ns/op
Iteration   3: 26.688 ns/op
Iteration   4: 26.676 ns/op
Iteration   5: 26.893 ns/op

# Run progress: 37.82% complete, ETA 06:06:32
# Fork: 2 of 3
# Warmup Iteration   1: 27.364 ns/op
# Warmup Iteration   2: 27.078 ns/op
# Warmup Iteration   3: 26.696 ns/op
Iteration   1: 26.560 ns/op
Iteration   2: 26.715 ns/op
Iteration   3: 26.589 ns/op
Iteration   4: 27.418 ns/op
Iteration   5: 27.301 ns/op

# Run progress: 37.84% complete, ETA 06:06:23
# Fork: 3 of 3
# Warmup Iteration   1: 26.748 ns/op
# Warmup Iteration   2: 26.591 ns/op
# Warmup Iteration   3: 26.587 ns/op
Iteration   1: 27.062 ns/op
Iteration   2: 26.566 ns/op
Iteration   3: 27.251 ns/op
Iteration   4: 26.913 ns/op
Iteration   5: 26.799 ns/op


Result "kotlin_benchmarks.array.sum.Inline32int.Val_as_Ref_fields":
  26.857 ±(99.9%) 0.298 ns/op [Average]
  (min, avg, max) = (26.560, 26.857, 27.418), stdev = 0.278
  CI (99.9%): [26.560, 27.155] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.sum.Inline32int.Val_as_Ref_fields
# Parameters: (size = 1000000)

# Run progress: 37.87% complete, ETA 06:06:13
# Fork: 1 of 3
# Warmup Iteration   1: 371142.730 ns/op
# Warmup Iteration   2: 368162.476 ns/op
# Warmup Iteration   3: 347604.912 ns/op
Iteration   1: 363412.998 ns/op
Iteration   2: 372612.244 ns/op
Iteration   3: 391818.733 ns/op
Iteration   4: 390094.514 ns/op
Iteration   5: 376922.146 ns/op

# Run progress: 37.89% complete, ETA 06:06:04
# Fork: 2 of 3
# Warmup Iteration   1: 389854.086 ns/op
# Warmup Iteration   2: 361649.779 ns/op
# Warmup Iteration   3: 362761.262 ns/op
Iteration   1: 413600.424 ns/op
Iteration   2: 364811.272 ns/op
Iteration   3: 362233.895 ns/op
Iteration   4: 362381.098 ns/op
Iteration   5: 361848.197 ns/op

# Run progress: 37.92% complete, ETA 06:05:55
# Fork: 3 of 3
# Warmup Iteration   1: 363180.815 ns/op
# Warmup Iteration   2: 367442.024 ns/op
# Warmup Iteration   3: 353421.449 ns/op
Iteration   1: 370089.026 ns/op
Iteration   2: 380197.560 ns/op
Iteration   3: 386595.000 ns/op
Iteration   4: 374906.973 ns/op
Iteration   5: 392521.254 ns/op


Result "kotlin_benchmarks.array.sum.Inline32int.Val_as_Ref_fields":
  377603.022 ±(99.9%) 15995.885 ns/op [Average]
  (min, avg, max) = (361848.197, 377603.022, 413600.424), stdev = 14962.561
  CI (99.9%): [361607.137, 393598.907] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.sum.Inline32int.Val_as_Ref_sum
# Parameters: (size = 100)

# Run progress: 37.94% complete, ETA 06:05:46
# Fork: 1 of 3
# Warmup Iteration   1: 26.642 ns/op
# Warmup Iteration   2: 26.615 ns/op
# Warmup Iteration   3: 26.547 ns/op
Iteration   1: 26.565 ns/op
Iteration   2: 26.557 ns/op
Iteration   3: 26.564 ns/op
Iteration   4: 27.018 ns/op
Iteration   5: 26.755 ns/op

# Run progress: 37.97% complete, ETA 06:05:37
# Fork: 2 of 3
# Warmup Iteration   1: 26.775 ns/op
# Warmup Iteration   2: 26.735 ns/op
# Warmup Iteration   3: 26.560 ns/op
Iteration   1: 27.071 ns/op
Iteration   2: 27.950 ns/op
Iteration   3: 27.025 ns/op
Iteration   4: 26.612 ns/op
Iteration   5: 26.628 ns/op

# Run progress: 37.99% complete, ETA 06:05:27
# Fork: 3 of 3
# Warmup Iteration   1: 26.769 ns/op
# Warmup Iteration   2: 26.621 ns/op
# Warmup Iteration   3: 26.640 ns/op
Iteration   1: 26.775 ns/op
Iteration   2: 26.770 ns/op
Iteration   3: 26.795 ns/op
Iteration   4: 26.739 ns/op
Iteration   5: 26.948 ns/op


Result "kotlin_benchmarks.array.sum.Inline32int.Val_as_Ref_sum":
  26.852 ±(99.9%) 0.375 ns/op [Average]
  (min, avg, max) = (26.557, 26.852, 27.950), stdev = 0.350
  CI (99.9%): [26.477, 27.226] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.sum.Inline32int.Val_as_Ref_sum
# Parameters: (size = 1000000)

# Run progress: 38.01% complete, ETA 06:05:18
# Fork: 1 of 3
# Warmup Iteration   1: 373829.103 ns/op
# Warmup Iteration   2: 368906.882 ns/op
# Warmup Iteration   3: 372750.915 ns/op
Iteration   1: 378761.001 ns/op
Iteration   2: 377376.961 ns/op
Iteration   3: 371675.658 ns/op
Iteration   4: 365063.411 ns/op
Iteration   5: 345260.791 ns/op

# Run progress: 38.04% complete, ETA 06:05:09
# Fork: 2 of 3
# Warmup Iteration   1: 366061.338 ns/op
# Warmup Iteration   2: 359805.526 ns/op
# Warmup Iteration   3: 353901.907 ns/op
Iteration   1: 356013.520 ns/op
Iteration   2: 337861.775 ns/op
Iteration   3: 356560.713 ns/op
Iteration   4: 362057.378 ns/op
Iteration   5: 362561.632 ns/op

# Run progress: 38.06% complete, ETA 06:05:04
# Fork: 3 of 3
# Warmup Iteration   1: 383151.363 ns/op
# Warmup Iteration   2: 388847.944 ns/op
# Warmup Iteration   3: 376196.277 ns/op
Iteration   1: 384218.945 ns/op
Iteration   2: 339935.285 ns/op
Iteration   3: 348188.893 ns/op
Iteration   4: 362280.288 ns/op
Iteration   5: 361835.744 ns/op


Result "kotlin_benchmarks.array.sum.Inline32int.Val_as_Ref_sum":
  360643.466 ±(99.9%) 14826.463 ns/op [Average]
  (min, avg, max) = (337861.775, 360643.466, 384218.945), stdev = 13868.683
  CI (99.9%): [345817.003, 375469.930] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.sum.Inline32int.Val_as_Val_fields
# Parameters: (size = 100)

# Run progress: 38.09% complete, ETA 06:04:55
# Fork: 1 of 3
# Warmup Iteration   1: 26.908 ns/op
# Warmup Iteration   2: 26.784 ns/op
# Warmup Iteration   3: 26.555 ns/op
Iteration   1: 26.913 ns/op
Iteration   2: 26.947 ns/op
Iteration   3: 27.079 ns/op
Iteration   4: 26.801 ns/op
Iteration   5: 26.599 ns/op

# Run progress: 38.11% complete, ETA 06:04:45
# Fork: 2 of 3
# Warmup Iteration   1: 27.835 ns/op
# Warmup Iteration   2: 26.664 ns/op
# Warmup Iteration   3: 26.604 ns/op
Iteration   1: 26.589 ns/op
Iteration   2: 26.608 ns/op
Iteration   3: 26.589 ns/op
Iteration   4: 26.583 ns/op
Iteration   5: 26.565 ns/op

# Run progress: 38.14% complete, ETA 06:04:36
# Fork: 3 of 3
# Warmup Iteration   1: 27.216 ns/op
# Warmup Iteration   2: 26.994 ns/op
# Warmup Iteration   3: 26.901 ns/op
Iteration   1: 26.833 ns/op
Iteration   2: 26.647 ns/op
Iteration   3: 26.907 ns/op
Iteration   4: 27.005 ns/op
Iteration   5: 26.750 ns/op


Result "kotlin_benchmarks.array.sum.Inline32int.Val_as_Val_fields":
  26.761 ±(99.9%) 0.189 ns/op [Average]
  (min, avg, max) = (26.565, 26.761, 27.079), stdev = 0.177
  CI (99.9%): [26.572, 26.950] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.sum.Inline32int.Val_as_Val_fields
# Parameters: (size = 1000000)

# Run progress: 38.16% complete, ETA 06:04:27
# Fork: 1 of 3
# Warmup Iteration   1: 380173.425 ns/op
# Warmup Iteration   2: 415523.910 ns/op
# Warmup Iteration   3: 370421.269 ns/op
Iteration   1: 432177.922 ns/op
Iteration   2: 374885.668 ns/op
Iteration   3: 368305.337 ns/op
Iteration   4: 367139.644 ns/op
Iteration   5: 365678.428 ns/op

# Run progress: 38.19% complete, ETA 06:04:18
# Fork: 2 of 3
# Warmup Iteration   1: 368036.551 ns/op
# Warmup Iteration   2: 363563.122 ns/op
# Warmup Iteration   3: 362697.643 ns/op
Iteration   1: 358138.500 ns/op
Iteration   2: 367440.400 ns/op
Iteration   3: 370641.064 ns/op
Iteration   4: 379289.567 ns/op
Iteration   5: 378140.557 ns/op

# Run progress: 38.21% complete, ETA 06:04:09
# Fork: 3 of 3
# Warmup Iteration   1: 359082.193 ns/op
# Warmup Iteration   2: 361815.703 ns/op
# Warmup Iteration   3: 362945.457 ns/op
Iteration   1: 365960.315 ns/op
Iteration   2: 364827.480 ns/op
Iteration   3: 362921.644 ns/op
Iteration   4: 357391.596 ns/op
Iteration   5: 356799.758 ns/op


Result "kotlin_benchmarks.array.sum.Inline32int.Val_as_Val_fields":
  371315.859 ±(99.9%) 19421.163 ns/op [Average]
  (min, avg, max) = (356799.758, 371315.859, 432177.922), stdev = 18166.568
  CI (99.9%): [351894.695, 390737.022] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.sum.Inline32int.Val_as_Val_sum
# Parameters: (size = 100)

# Run progress: 38.24% complete, ETA 06:04:00
# Fork: 1 of 3
# Warmup Iteration   1: 26.865 ns/op
# Warmup Iteration   2: 26.768 ns/op
# Warmup Iteration   3: 26.712 ns/op
Iteration   1: 26.703 ns/op
Iteration   2: 26.913 ns/op
Iteration   3: 26.605 ns/op
Iteration   4: 27.286 ns/op
Iteration   5: 26.551 ns/op

# Run progress: 38.26% complete, ETA 06:03:50
# Fork: 2 of 3
# Warmup Iteration   1: 26.713 ns/op
# Warmup Iteration   2: 26.601 ns/op
# Warmup Iteration   3: 26.585 ns/op
Iteration   1: 26.837 ns/op
Iteration   2: 26.753 ns/op
Iteration   3: 26.570 ns/op
Iteration   4: 26.940 ns/op
Iteration   5: 26.965 ns/op

# Run progress: 38.28% complete, ETA 06:03:42
# Fork: 3 of 3
# Warmup Iteration   1: 26.983 ns/op
# Warmup Iteration   2: 26.735 ns/op
# Warmup Iteration   3: 26.642 ns/op
Iteration   1: 26.568 ns/op
Iteration   2: 26.673 ns/op
Iteration   3: 26.576 ns/op
Iteration   4: 26.801 ns/op
Iteration   5: 26.877 ns/op


Result "kotlin_benchmarks.array.sum.Inline32int.Val_as_Val_sum":
  26.774 ±(99.9%) 0.217 ns/op [Average]
  (min, avg, max) = (26.551, 26.774, 27.286), stdev = 0.203
  CI (99.9%): [26.557, 26.992] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.sum.Inline32int.Val_as_Val_sum
# Parameters: (size = 1000000)

# Run progress: 38.31% complete, ETA 06:03:32
# Fork: 1 of 3
# Warmup Iteration   1: 372935.831 ns/op
# Warmup Iteration   2: 364327.428 ns/op
# Warmup Iteration   3: 359792.460 ns/op
Iteration   1: 376798.147 ns/op
Iteration   2: 348234.531 ns/op
Iteration   3: 370417.079 ns/op
Iteration   4: 365352.361 ns/op
Iteration   5: 360197.088 ns/op

# Run progress: 38.33% complete, ETA 06:03:26
# Fork: 2 of 3
# Warmup Iteration   1: 369909.270 ns/op
# Warmup Iteration   2: 369258.767 ns/op
# Warmup Iteration   3: 380020.440 ns/op
Iteration   1: 367640.790 ns/op
Iteration   2: 369097.873 ns/op
Iteration   3: 367771.657 ns/op
Iteration   4: 361231.468 ns/op
Iteration   5: 362888.320 ns/op

# Run progress: 38.36% complete, ETA 06:03:17
# Fork: 3 of 3
# Warmup Iteration   1: 368892.709 ns/op
# Warmup Iteration   2: 367054.915 ns/op
# Warmup Iteration   3: 368068.445 ns/op
Iteration   1: 370903.282 ns/op
Iteration   2: 358075.919 ns/op
Iteration   3: 383394.206 ns/op
Iteration   4: 359339.435 ns/op
Iteration   5: 369559.742 ns/op


Result "kotlin_benchmarks.array.sum.Inline32int.Val_as_Val_sum":
  366060.127 ±(99.9%) 8944.573 ns/op [Average]
  (min, avg, max) = (348234.531, 366060.127, 383394.206), stdev = 8366.759
  CI (99.9%): [357115.554, 375004.700] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.sum.Inline64byte.Int_as_Int_sum
# Parameters: (size = 100)

# Run progress: 38.38% complete, ETA 06:03:08
# Fork: 1 of 3
# Warmup Iteration   1: 184.922 ns/op
# Warmup Iteration   2: 186.300 ns/op
# Warmup Iteration   3: 182.990 ns/op
Iteration   1: 183.076 ns/op
Iteration   2: 183.188 ns/op
Iteration   3: 182.847 ns/op
Iteration   4: 183.071 ns/op
Iteration   5: 182.832 ns/op

# Run progress: 38.41% complete, ETA 06:02:59
# Fork: 2 of 3
# Warmup Iteration   1: 185.892 ns/op
# Warmup Iteration   2: 186.628 ns/op
# Warmup Iteration   3: 187.165 ns/op
Iteration   1: 188.625 ns/op
Iteration   2: 186.181 ns/op
Iteration   3: 184.163 ns/op
Iteration   4: 184.198 ns/op
Iteration   5: 183.053 ns/op

# Run progress: 38.43% complete, ETA 06:02:49
# Fork: 3 of 3
# Warmup Iteration   1: 195.262 ns/op
# Warmup Iteration   2: 192.423 ns/op
# Warmup Iteration   3: 183.589 ns/op
Iteration   1: 183.481 ns/op
Iteration   2: 184.058 ns/op
Iteration   3: 184.461 ns/op
Iteration   4: 183.538 ns/op
Iteration   5: 183.791 ns/op


Result "kotlin_benchmarks.array.sum.Inline64byte.Int_as_Int_sum":
  184.037 ±(99.9%) 1.639 ns/op [Average]
  (min, avg, max) = (182.832, 184.037, 188.625), stdev = 1.533
  CI (99.9%): [182.399, 185.676] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.sum.Inline64byte.Int_as_Int_sum
# Parameters: (size = 1000000)

# Run progress: 38.46% complete, ETA 06:02:40
# Fork: 1 of 3
# Warmup Iteration   1: 1877003.957 ns/op
# Warmup Iteration   2: 1826541.665 ns/op
# Warmup Iteration   3: 1794748.002 ns/op
Iteration   1: 1811463.934 ns/op
Iteration   2: 1806769.082 ns/op
Iteration   3: 1723481.687 ns/op
Iteration   4: 1835589.534 ns/op
Iteration   5: 1853179.739 ns/op

# Run progress: 38.48% complete, ETA 06:02:31
# Fork: 2 of 3
# Warmup Iteration   1: 1929848.266 ns/op
# Warmup Iteration   2: 1877726.013 ns/op
# Warmup Iteration   3: 1880790.892 ns/op
Iteration   1: 1858490.331 ns/op
Iteration   2: 2307271.931 ns/op
Iteration   3: 1853400.850 ns/op
Iteration   4: 1840535.626 ns/op
Iteration   5: 1799707.066 ns/op

# Run progress: 38.50% complete, ETA 06:02:22
# Fork: 3 of 3
# Warmup Iteration   1: 1884628.415 ns/op
# Warmup Iteration   2: 1848760.589 ns/op
# Warmup Iteration   3: 1846040.069 ns/op
Iteration   1: 1862546.731 ns/op
Iteration   2: 1872610.261 ns/op
Iteration   3: 1894348.364 ns/op
Iteration   4: 1892271.770 ns/op
Iteration   5: 1966261.916 ns/op


Result "kotlin_benchmarks.array.sum.Inline64byte.Int_as_Int_sum":
  1878528.588 ±(99.9%) 139127.524 ns/op [Average]
  (min, avg, max) = (1723481.687, 1878528.588, 2307271.931), stdev = 130139.972
  CI (99.9%): [1739401.064, 2017656.112] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.sum.Inline64byte.Ref_as_Ref_fields
# Parameters: (size = 100)

# Run progress: 38.53% complete, ETA 06:02:13
# Fork: 1 of 3
# Warmup Iteration   1: 269.656 ns/op
# Warmup Iteration   2: 266.388 ns/op
# Warmup Iteration   3: 266.783 ns/op
Iteration   1: 268.237 ns/op
Iteration   2: 266.757 ns/op
Iteration   3: 267.000 ns/op
Iteration   4: 266.439 ns/op
Iteration   5: 266.468 ns/op

# Run progress: 38.55% complete, ETA 06:02:03
# Fork: 2 of 3
# Warmup Iteration   1: 269.301 ns/op
# Warmup Iteration   2: 266.263 ns/op
# Warmup Iteration   3: 267.098 ns/op
Iteration   1: 267.185 ns/op
Iteration   2: 267.043 ns/op
Iteration   3: 271.548 ns/op
Iteration   4: 270.361 ns/op
Iteration   5: 272.073 ns/op

# Run progress: 38.58% complete, ETA 06:01:54
# Fork: 3 of 3
# Warmup Iteration   1: 270.212 ns/op
# Warmup Iteration   2: 266.552 ns/op
# Warmup Iteration   3: 266.485 ns/op
Iteration   1: 266.568 ns/op
Iteration   2: 266.588 ns/op
Iteration   3: 266.770 ns/op
Iteration   4: 267.773 ns/op
Iteration   5: 267.304 ns/op


Result "kotlin_benchmarks.array.sum.Inline64byte.Ref_as_Ref_fields":
  267.874 ±(99.9%) 2.012 ns/op [Average]
  (min, avg, max) = (266.439, 267.874, 272.073), stdev = 1.882
  CI (99.9%): [265.863, 269.886] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.sum.Inline64byte.Ref_as_Ref_fields
# Parameters: (size = 1000000)

# Run progress: 38.60% complete, ETA 06:01:45
# Fork: 1 of 3
# Warmup Iteration   1: 2979947.303 ns/op
# Warmup Iteration   2: 2932666.786 ns/op
# Warmup Iteration   3: 2923283.598 ns/op
Iteration   1: 2911106.147 ns/op
Iteration   2: 2907690.851 ns/op
Iteration   3: 2925023.307 ns/op
Iteration   4: 2962605.085 ns/op
Iteration   5: 2911043.107 ns/op

# Run progress: 38.63% complete, ETA 06:01:36
# Fork: 2 of 3
# Warmup Iteration   1: 3037311.556 ns/op
# Warmup Iteration   2: 2915030.225 ns/op
# Warmup Iteration   3: 2876168.443 ns/op
Iteration   1: 2869896.901 ns/op
Iteration   2: 2911881.726 ns/op
Iteration   3: 2877302.737 ns/op
Iteration   4: 2879855.769 ns/op
Iteration   5: 2863888.296 ns/op

# Run progress: 38.65% complete, ETA 06:01:27
# Fork: 3 of 3
# Warmup Iteration   1: 2918947.406 ns/op
# Warmup Iteration   2: 2885863.777 ns/op
# Warmup Iteration   3: 2812154.514 ns/op
Iteration   1: 2910559.868 ns/op
Iteration   2: 2909629.939 ns/op
Iteration   3: 2959508.481 ns/op
Iteration   4: 2911080.682 ns/op
Iteration   5: 2906885.417 ns/op


Result "kotlin_benchmarks.array.sum.Inline64byte.Ref_as_Ref_fields":
  2907863.888 ±(99.9%) 30116.512 ns/op [Average]
  (min, avg, max) = (2863888.296, 2907863.888, 2962605.085), stdev = 28171.004
  CI (99.9%): [2877747.375, 2937980.400] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.sum.Inline64byte.Ref_as_Ref_sum
# Parameters: (size = 100)

# Run progress: 38.68% complete, ETA 06:01:18
# Fork: 1 of 3
# Warmup Iteration   1: 203.501 ns/op
# Warmup Iteration   2: 207.283 ns/op
# Warmup Iteration   3: 195.056 ns/op
Iteration   1: 198.076 ns/op
Iteration   2: 194.343 ns/op
Iteration   3: 194.515 ns/op
Iteration   4: 195.093 ns/op
Iteration   5: 194.414 ns/op

# Run progress: 38.70% complete, ETA 06:01:08
# Fork: 2 of 3
# Warmup Iteration   1: 204.124 ns/op
# Warmup Iteration   2: 207.706 ns/op
# Warmup Iteration   3: 201.963 ns/op
Iteration   1: 196.136 ns/op
Iteration   2: 195.734 ns/op
Iteration   3: 195.799 ns/op
Iteration   4: 195.046 ns/op
Iteration   5: 197.195 ns/op

# Run progress: 38.73% complete, ETA 06:00:59
# Fork: 3 of 3
# Warmup Iteration   1: 204.262 ns/op
# Warmup Iteration   2: 203.632 ns/op
# Warmup Iteration   3: 195.765 ns/op
Iteration   1: 195.687 ns/op
Iteration   2: 197.074 ns/op
Iteration   3: 196.437 ns/op
Iteration   4: 198.137 ns/op
Iteration   5: 195.980 ns/op


Result "kotlin_benchmarks.array.sum.Inline64byte.Ref_as_Ref_sum":
  195.978 ±(99.9%) 1.311 ns/op [Average]
  (min, avg, max) = (194.343, 195.978, 198.137), stdev = 1.227
  CI (99.9%): [194.666, 197.289] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.sum.Inline64byte.Ref_as_Ref_sum
# Parameters: (size = 1000000)

# Run progress: 38.75% complete, ETA 06:00:50
# Fork: 1 of 3
# Warmup Iteration   1: 1877419.776 ns/op
# Warmup Iteration   2: 1838787.196 ns/op
# Warmup Iteration   3: 1834171.989 ns/op
Iteration   1: 1896646.307 ns/op
Iteration   2: 1849860.603 ns/op
Iteration   3: 1876502.165 ns/op
Iteration   4: 1876754.406 ns/op
Iteration   5: 1787159.601 ns/op

# Run progress: 38.77% complete, ETA 06:00:41
# Fork: 2 of 3
# Warmup Iteration   1: 1871147.454 ns/op
# Warmup Iteration   2: 1865064.542 ns/op
# Warmup Iteration   3: 1801440.210 ns/op
Iteration   1: 1802413.754 ns/op
Iteration   2: 1853568.113 ns/op
Iteration   3: 1848605.804 ns/op
Iteration   4: 1853009.821 ns/op
Iteration   5: 1844310.903 ns/op

# Run progress: 38.80% complete, ETA 06:00:32
# Fork: 3 of 3
# Warmup Iteration   1: 1852461.338 ns/op
# Warmup Iteration   2: 1843415.069 ns/op
# Warmup Iteration   3: 1975608.887 ns/op
Iteration   1: 1971668.787 ns/op
Iteration   2: 1876938.858 ns/op
Iteration   3: 1812958.183 ns/op
Iteration   4: 1792716.086 ns/op
Iteration   5: 1841182.055 ns/op


Result "kotlin_benchmarks.array.sum.Inline64byte.Ref_as_Ref_sum":
  1852286.363 ±(99.9%) 49525.332 ns/op [Average]
  (min, avg, max) = (1787159.601, 1852286.363, 1971668.787), stdev = 46326.026
  CI (99.9%): [1802761.031, 1901811.695] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.sum.Inline64byte.Val_as_Int_sum
# Parameters: (size = 100)

# Run progress: 38.82% complete, ETA 06:00:22
# Fork: 1 of 3
# Warmup Iteration   1: 173.745 ns/op
# Warmup Iteration   2: 172.803 ns/op
# Warmup Iteration   3: 170.729 ns/op
Iteration   1: 170.599 ns/op
Iteration   2: 170.608 ns/op
Iteration   3: 170.874 ns/op
Iteration   4: 172.379 ns/op
Iteration   5: 172.522 ns/op

# Run progress: 38.85% complete, ETA 06:00:13
# Fork: 2 of 3
# Warmup Iteration   1: 173.851 ns/op
# Warmup Iteration   2: 172.487 ns/op
# Warmup Iteration   3: 169.438 ns/op
Iteration   1: 169.130 ns/op
Iteration   2: 169.522 ns/op
Iteration   3: 169.071 ns/op
Iteration   4: 169.299 ns/op
Iteration   5: 171.191 ns/op

# Run progress: 38.87% complete, ETA 06:00:04
# Fork: 3 of 3
# Warmup Iteration   1: 175.083 ns/op
# Warmup Iteration   2: 174.524 ns/op
# Warmup Iteration   3: 171.305 ns/op
Iteration   1: 171.082 ns/op
Iteration   2: 171.320 ns/op
Iteration   3: 170.822 ns/op
Iteration   4: 170.080 ns/op
Iteration   5: 170.074 ns/op


Result "kotlin_benchmarks.array.sum.Inline64byte.Val_as_Int_sum":
  170.571 ±(99.9%) 1.142 ns/op [Average]
  (min, avg, max) = (169.071, 170.571, 172.522), stdev = 1.068
  CI (99.9%): [169.430, 171.713] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.sum.Inline64byte.Val_as_Int_sum
# Parameters: (size = 1000000)

# Run progress: 38.90% complete, ETA 05:59:55
# Fork: 1 of 3
# Warmup Iteration   1: 2023001.000 ns/op
# Warmup Iteration   2: 2014033.834 ns/op
# Warmup Iteration   3: 1892137.767 ns/op
Iteration   1: 1756182.373 ns/op
Iteration   2: 1725892.010 ns/op
Iteration   3: 1784058.862 ns/op
Iteration   4: 1862795.886 ns/op
Iteration   5: 1874289.581 ns/op

# Run progress: 38.92% complete, ETA 05:59:46
# Fork: 2 of 3
# Warmup Iteration   1: 1827697.445 ns/op
# Warmup Iteration   2: 1729373.860 ns/op
# Warmup Iteration   3: 1843293.570 ns/op
Iteration   1: 1838096.764 ns/op
Iteration   2: 1839110.348 ns/op
Iteration   3: 1733059.535 ns/op
Iteration   4: 1858197.993 ns/op
Iteration   5: 1818837.238 ns/op

# Run progress: 38.95% complete, ETA 05:59:37
# Fork: 3 of 3
# Warmup Iteration   1: 1919612.650 ns/op
# Warmup Iteration   2: 1881638.734 ns/op
# Warmup Iteration   3: 1881318.901 ns/op
Iteration   1: 1805288.295 ns/op
Iteration   2: 1808136.181 ns/op
Iteration   3: 1746354.922 ns/op
Iteration   4: 1829472.247 ns/op
Iteration   5: 1830928.430 ns/op


Result "kotlin_benchmarks.array.sum.Inline64byte.Val_as_Int_sum":
  1807380.044 ±(99.9%) 51359.741 ns/op [Average]
  (min, avg, max) = (1725892.010, 1807380.044, 1874289.581), stdev = 48041.933
  CI (99.9%): [1756020.304, 1858739.785] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.sum.Inline64byte.Val_as_Ref_fields
# Parameters: (size = 100)

# Run progress: 38.97% complete, ETA 05:59:28
# Fork: 1 of 3
# Warmup Iteration   1: 272.033 ns/op
# Warmup Iteration   2: 266.086 ns/op
# Warmup Iteration   3: 267.529 ns/op
Iteration   1: 267.777 ns/op
Iteration   2: 270.398 ns/op
Iteration   3: 270.777 ns/op
Iteration   4: 267.369 ns/op
Iteration   5: 266.353 ns/op

# Run progress: 39.00% complete, ETA 05:59:18
# Fork: 2 of 3
# Warmup Iteration   1: 269.556 ns/op
# Warmup Iteration   2: 266.345 ns/op
# Warmup Iteration   3: 266.393 ns/op
Iteration   1: 266.393 ns/op
Iteration   2: 266.297 ns/op
Iteration   3: 266.796 ns/op
Iteration   4: 266.218 ns/op
Iteration   5: 266.218 ns/op

# Run progress: 39.02% complete, ETA 05:59:09
# Fork: 3 of 3
# Warmup Iteration   1: 269.703 ns/op
# Warmup Iteration   2: 268.311 ns/op
# Warmup Iteration   3: 269.445 ns/op
Iteration   1: 268.604 ns/op
Iteration   2: 269.018 ns/op
Iteration   3: 268.007 ns/op
Iteration   4: 267.511 ns/op
Iteration   5: 266.731 ns/op


Result "kotlin_benchmarks.array.sum.Inline64byte.Val_as_Ref_fields":
  267.631 ±(99.9%) 1.594 ns/op [Average]
  (min, avg, max) = (266.218, 267.631, 270.777), stdev = 1.491
  CI (99.9%): [266.037, 269.225] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.sum.Inline64byte.Val_as_Ref_fields
# Parameters: (size = 1000000)

# Run progress: 39.04% complete, ETA 05:59:00
# Fork: 1 of 3
# Warmup Iteration   1: 2998139.466 ns/op
# Warmup Iteration   2: 2908209.891 ns/op
# Warmup Iteration   3: 2910116.856 ns/op
Iteration   1: 2920025.893 ns/op
Iteration   2: 2902521.133 ns/op
Iteration   3: 2903446.239 ns/op
Iteration   4: 2889868.689 ns/op
Iteration   5: 2899633.238 ns/op

# Run progress: 39.07% complete, ETA 05:58:51
# Fork: 2 of 3
# Warmup Iteration   1: 3012564.110 ns/op
# Warmup Iteration   2: 2941676.292 ns/op
# Warmup Iteration   3: 2921286.246 ns/op
Iteration   1: 2926636.594 ns/op
Iteration   2: 2909516.282 ns/op
Iteration   3: 2908533.214 ns/op
Iteration   4: 2947787.624 ns/op
Iteration   5: 2921816.082 ns/op

# Run progress: 39.09% complete, ETA 05:58:42
# Fork: 3 of 3
# Warmup Iteration   1: 3021823.922 ns/op
# Warmup Iteration   2: 2903934.147 ns/op
# Warmup Iteration   3: 2905958.934 ns/op
Iteration   1: 2901178.009 ns/op
Iteration   2: 2888571.071 ns/op
Iteration   3: 2870717.143 ns/op
Iteration   4: 2889702.263 ns/op
Iteration   5: 2934474.609 ns/op


Result "kotlin_benchmarks.array.sum.Inline64byte.Val_as_Ref_fields":
  2907628.539 ±(99.9%) 21315.529 ns/op [Average]
  (min, avg, max) = (2870717.143, 2907628.539, 2947787.624), stdev = 19938.559
  CI (99.9%): [2886313.010, 2928944.068] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.sum.Inline64byte.Val_as_Ref_sum
# Parameters: (size = 100)

# Run progress: 39.12% complete, ETA 05:58:33
# Fork: 1 of 3
# Warmup Iteration   1: 206.847 ns/op
# Warmup Iteration   2: 204.327 ns/op
# Warmup Iteration   3: 194.932 ns/op
Iteration   1: 196.680 ns/op
Iteration   2: 196.027 ns/op
Iteration   3: 194.950 ns/op
Iteration   4: 195.111 ns/op
Iteration   5: 194.312 ns/op

# Run progress: 39.14% complete, ETA 05:58:24
# Fork: 2 of 3
# Warmup Iteration   1: 202.574 ns/op
# Warmup Iteration   2: 206.675 ns/op
# Warmup Iteration   3: 195.929 ns/op
Iteration   1: 193.565 ns/op
Iteration   2: 193.459 ns/op
Iteration   3: 195.238 ns/op
Iteration   4: 196.690 ns/op
Iteration   5: 197.680 ns/op

# Run progress: 39.17% complete, ETA 05:58:14
# Fork: 3 of 3
# Warmup Iteration   1: 204.305 ns/op
# Warmup Iteration   2: 206.218 ns/op
# Warmup Iteration   3: 197.667 ns/op
Iteration   1: 195.733 ns/op
Iteration   2: 199.933 ns/op
Iteration   3: 212.788 ns/op
Iteration   4: 195.473 ns/op
Iteration   5: 195.605 ns/op


Result "kotlin_benchmarks.array.sum.Inline64byte.Val_as_Ref_sum":
  196.883 ±(99.9%) 5.011 ns/op [Average]
  (min, avg, max) = (193.459, 196.883, 212.788), stdev = 4.687
  CI (99.9%): [191.872, 201.894] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.sum.Inline64byte.Val_as_Ref_sum
# Parameters: (size = 1000000)

# Run progress: 39.19% complete, ETA 05:58:05
# Fork: 1 of 3
# Warmup Iteration   1: 1885921.485 ns/op
# Warmup Iteration   2: 1861075.737 ns/op
# Warmup Iteration   3: 1882745.577 ns/op
Iteration   1: 1882037.555 ns/op
Iteration   2: 1746879.102 ns/op
Iteration   3: 1798803.011 ns/op
Iteration   4: 1796936.943 ns/op
Iteration   5: 1808430.032 ns/op

# Run progress: 39.22% complete, ETA 05:57:56
# Fork: 2 of 3
# Warmup Iteration   1: 1880536.535 ns/op
# Warmup Iteration   2: 1842407.086 ns/op
# Warmup Iteration   3: 1837175.227 ns/op
Iteration   1: 1867444.419 ns/op
Iteration   2: 2046511.687 ns/op
Iteration   3: 2062488.096 ns/op
Iteration   4: 2125942.752 ns/op
Iteration   5: 1950075.531 ns/op

# Run progress: 39.24% complete, ETA 05:57:47
# Fork: 3 of 3
# Warmup Iteration   1: 1875476.113 ns/op
# Warmup Iteration   2: 1853439.043 ns/op
# Warmup Iteration   3: 1872515.907 ns/op
Iteration   1: 2167718.348 ns/op
Iteration   2: 2336392.226 ns/op
Iteration   3: 2400089.964 ns/op
Iteration   4: 2098667.534 ns/op
Iteration   5: 1843407.237 ns/op


Result "kotlin_benchmarks.array.sum.Inline64byte.Val_as_Ref_sum":
  1995454.963 ±(99.9%) 216411.745 ns/op [Average]
  (min, avg, max) = (1746879.102, 1995454.963, 2400089.964), stdev = 202431.680
  CI (99.9%): [1779043.218, 2211866.707] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.sum.Inline64byte.Val_as_Val_fields
# Parameters: (size = 100)

# Run progress: 39.26% complete, ETA 05:57:38
# Fork: 1 of 3
# Warmup Iteration   1: 269.412 ns/op
# Warmup Iteration   2: 349.355 ns/op
# Warmup Iteration   3: 559.151 ns/op
Iteration   1: 554.695 ns/op
Iteration   2: 555.461 ns/op
Iteration   3: 555.284 ns/op
Iteration   4: 555.949 ns/op
Iteration   5: 555.563 ns/op

# Run progress: 39.29% complete, ETA 05:57:28
# Fork: 2 of 3
# Warmup Iteration   1: 571.569 ns/op
# Warmup Iteration   2: 554.975 ns/op
# Warmup Iteration   3: 556.241 ns/op
Iteration   1: 555.458 ns/op
Iteration   2: 555.209 ns/op
Iteration   3: 555.271 ns/op
Iteration   4: 555.897 ns/op
Iteration   5: 554.708 ns/op

# Run progress: 39.31% complete, ETA 05:57:20
# Fork: 3 of 3
# Warmup Iteration   1: 570.055 ns/op
# Warmup Iteration   2: 556.854 ns/op
# Warmup Iteration   3: 553.925 ns/op
Iteration   1: 618.124 ns/op
Iteration   2: 664.909 ns/op
Iteration   3: 664.929 ns/op
Iteration   4: 644.766 ns/op
Iteration   5: 638.405 ns/op


Result "kotlin_benchmarks.array.sum.Inline64byte.Val_as_Val_fields":
  585.642 ±(99.9%) 48.725 ns/op [Average]
  (min, avg, max) = (554.695, 585.642, 664.929), stdev = 45.578
  CI (99.9%): [536.917, 634.367] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.sum.Inline64byte.Val_as_Val_fields
# Parameters: (size = 1000000)

# Run progress: 39.34% complete, ETA 05:57:11
# Fork: 1 of 3
# Warmup Iteration   1: 8620912.424 ns/op
# Warmup Iteration   2: 8507246.849 ns/op
# Warmup Iteration   3: 7317185.391 ns/op
Iteration   1: 5628321.300 ns/op
Iteration   2: 5118755.740 ns/op
Iteration   3: 4370794.732 ns/op
Iteration   4: 3480072.049 ns/op
Iteration   5: 2673987.434 ns/op

# Run progress: 39.36% complete, ETA 05:57:02
# Fork: 2 of 3
# Warmup Iteration   1: 2977865.929 ns/op
# Warmup Iteration   2: 2914536.459 ns/op
# Warmup Iteration   3: 3228716.719 ns/op
Iteration   1: 2918853.324 ns/op
Iteration   2: 2910717.313 ns/op
Iteration   3: 2907425.647 ns/op
Iteration   4: 2911260.145 ns/op
Iteration   5: 2920137.283 ns/op

# Run progress: 39.39% complete, ETA 05:56:53
# Fork: 3 of 3
# Warmup Iteration   1: 3013936.003 ns/op
# Warmup Iteration   2: 2888149.834 ns/op
# Warmup Iteration   3: 2879998.219 ns/op
Iteration   1: 2882807.100 ns/op
Iteration   2: 2887457.256 ns/op
Iteration   3: 2885711.448 ns/op
Iteration   4: 2897899.084 ns/op
Iteration   5: 2902866.497 ns/op


Result "kotlin_benchmarks.array.sum.Inline64byte.Val_as_Val_fields":
  3353137.757 ±(99.9%) 983101.468 ns/op [Average]
  (min, avg, max) = (2673987.434, 3353137.757, 5628321.300), stdev = 919593.723
  CI (99.9%): [2370036.289, 4336239.224] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.sum.Inline64byte.Val_as_Val_sum
# Parameters: (size = 100)

# Run progress: 39.41% complete, ETA 05:56:44
# Fork: 1 of 3
# Warmup Iteration   1: 202.564 ns/op
# Warmup Iteration   2: 204.966 ns/op
# Warmup Iteration   3: 195.254 ns/op
Iteration   1: 194.432 ns/op
Iteration   2: 195.258 ns/op
Iteration   3: 195.220 ns/op
Iteration   4: 195.715 ns/op
Iteration   5: 196.018 ns/op

# Run progress: 39.44% complete, ETA 05:56:35
# Fork: 2 of 3
# Warmup Iteration   1: 201.692 ns/op
# Warmup Iteration   2: 206.529 ns/op
# Warmup Iteration   3: 194.459 ns/op
Iteration   1: 196.524 ns/op
Iteration   2: 197.240 ns/op
Iteration   3: 196.621 ns/op
Iteration   4: 197.603 ns/op
Iteration   5: 198.762 ns/op

# Run progress: 39.46% complete, ETA 05:56:26
# Fork: 3 of 3
# Warmup Iteration   1: 202.380 ns/op
# Warmup Iteration   2: 204.182 ns/op
# Warmup Iteration   3: 195.464 ns/op
Iteration   1: 195.488 ns/op
Iteration   2: 195.618 ns/op
Iteration   3: 194.599 ns/op
Iteration   4: 194.345 ns/op
Iteration   5: 194.518 ns/op


Result "kotlin_benchmarks.array.sum.Inline64byte.Val_as_Val_sum":
  195.864 ±(99.9%) 1.374 ns/op [Average]
  (min, avg, max) = (194.345, 195.864, 198.762), stdev = 1.285
  CI (99.9%): [194.490, 197.238] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.sum.Inline64byte.Val_as_Val_sum
# Parameters: (size = 1000000)

# Run progress: 39.49% complete, ETA 05:56:17
# Fork: 1 of 3
# Warmup Iteration   1: 1856170.434 ns/op
# Warmup Iteration   2: 1798788.834 ns/op
# Warmup Iteration   3: 1836464.263 ns/op
Iteration   1: 1840825.288 ns/op
Iteration   2: 1841345.947 ns/op
Iteration   3: 1844167.046 ns/op
Iteration   4: 1822337.417 ns/op
Iteration   5: 1875415.430 ns/op

# Run progress: 39.51% complete, ETA 05:56:08
# Fork: 2 of 3
# Warmup Iteration   1: 1890679.618 ns/op
# Warmup Iteration   2: 1862190.147 ns/op
# Warmup Iteration   3: 1874515.363 ns/op
Iteration   1: 1856245.565 ns/op
Iteration   2: 1847871.317 ns/op
Iteration   3: 1856540.596 ns/op
Iteration   4: 1868659.965 ns/op
Iteration   5: 1849906.668 ns/op

# Run progress: 39.53% complete, ETA 05:55:58
# Fork: 3 of 3
# Warmup Iteration   1: 1857166.821 ns/op
# Warmup Iteration   2: 1858532.094 ns/op
# Warmup Iteration   3: 1815126.276 ns/op
Iteration   1: 1820707.203 ns/op
Iteration   2: 1823501.280 ns/op
Iteration   3: 1817344.574 ns/op
Iteration   4: 1897818.686 ns/op
Iteration   5: 1895780.174 ns/op


Result "kotlin_benchmarks.array.sum.Inline64byte.Val_as_Val_sum":
  1850564.477 ±(99.9%) 27170.420 ns/op [Average]
  (min, avg, max) = (1817344.574, 1850564.477, 1897818.686), stdev = 25415.228
  CI (99.9%): [1823394.057, 1877734.897] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.sum.Inline64int.Int_as_Int_sum
# Parameters: (size = 100)

# Run progress: 39.56% complete, ETA 05:55:49
# Fork: 1 of 3
# Warmup Iteration   1: 96.638 ns/op
# Warmup Iteration   2: 95.545 ns/op
# Warmup Iteration   3: 95.566 ns/op
Iteration   1: 95.655 ns/op
Iteration   2: 96.095 ns/op
Iteration   3: 97.360 ns/op
Iteration   4: 97.292 ns/op
Iteration   5: 99.646 ns/op

# Run progress: 39.58% complete, ETA 05:55:40
# Fork: 2 of 3
# Warmup Iteration   1: 96.343 ns/op
# Warmup Iteration   2: 96.180 ns/op
# Warmup Iteration   3: 96.886 ns/op
Iteration   1: 97.061 ns/op
Iteration   2: 96.213 ns/op
Iteration   3: 95.510 ns/op
Iteration   4: 95.513 ns/op
Iteration   5: 98.134 ns/op

# Run progress: 39.61% complete, ETA 05:55:31
# Fork: 3 of 3
# Warmup Iteration   1: 96.352 ns/op
# Warmup Iteration   2: 95.607 ns/op
# Warmup Iteration   3: 95.672 ns/op
Iteration   1: 95.487 ns/op
Iteration   2: 95.455 ns/op
Iteration   3: 95.967 ns/op
Iteration   4: 95.620 ns/op
Iteration   5: 95.503 ns/op


Result "kotlin_benchmarks.array.sum.Inline64int.Int_as_Int_sum":
  96.434 ±(99.9%) 1.318 ns/op [Average]
  (min, avg, max) = (95.455, 96.434, 99.646), stdev = 1.233
  CI (99.9%): [95.116, 97.752] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.sum.Inline64int.Int_as_Int_sum
# Parameters: (size = 1000000)

# Run progress: 39.63% complete, ETA 05:55:22
# Fork: 1 of 3
# Warmup Iteration   1: 1345706.214 ns/op
# Warmup Iteration   2: 1262596.665 ns/op
# Warmup Iteration   3: 1312244.265 ns/op
Iteration   1: 1318044.444 ns/op
Iteration   2: 1351200.090 ns/op
Iteration   3: 1381042.241 ns/op
Iteration   4: 1364817.130 ns/op
Iteration   5: 1375791.156 ns/op

# Run progress: 39.66% complete, ETA 05:55:13
# Fork: 2 of 3
# Warmup Iteration   1: 1349672.922 ns/op
# Warmup Iteration   2: 1281584.812 ns/op
# Warmup Iteration   3: 1302929.765 ns/op
Iteration   1: 1272899.035 ns/op
Iteration   2: 1308146.831 ns/op
Iteration   3: 1244837.542 ns/op
Iteration   4: 1321586.765 ns/op
Iteration   5: 1319724.598 ns/op

# Run progress: 39.68% complete, ETA 05:55:04
# Fork: 3 of 3
# Warmup Iteration   1: 1291672.474 ns/op
# Warmup Iteration   2: 1273742.276 ns/op
# Warmup Iteration   3: 1305563.953 ns/op
Iteration   1: 1316418.565 ns/op
Iteration   2: 1415762.131 ns/op
Iteration   3: 1353114.179 ns/op
Iteration   4: 1369752.259 ns/op
Iteration   5: 1367482.870 ns/op


Result "kotlin_benchmarks.array.sum.Inline64int.Int_as_Int_sum":
  1338707.989 ±(99.9%) 47463.231 ns/op [Average]
  (min, avg, max) = (1244837.542, 1338707.989, 1415762.131), stdev = 44397.136
  CI (99.9%): [1291244.758, 1386171.220] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.sum.Inline64int.Ref_as_Int_sum
# Parameters: (size = 100)

# Run progress: 39.71% complete, ETA 05:54:54
# Fork: 1 of 3
# Warmup Iteration   1: 80.062 ns/op
# Warmup Iteration   2: 79.522 ns/op
# Warmup Iteration   3: 79.410 ns/op
Iteration   1: 79.390 ns/op
Iteration   2: 79.391 ns/op
Iteration   3: 79.399 ns/op
Iteration   4: 80.007 ns/op
Iteration   5: 79.812 ns/op

# Run progress: 39.73% complete, ETA 05:54:45
# Fork: 2 of 3
# Warmup Iteration   1: 80.521 ns/op
# Warmup Iteration   2: 79.525 ns/op
# Warmup Iteration   3: 82.023 ns/op
Iteration   1: 79.421 ns/op
Iteration   2: 79.552 ns/op
Iteration   3: 79.411 ns/op
Iteration   4: 79.395 ns/op
Iteration   5: 79.439 ns/op

# Run progress: 39.75% complete, ETA 05:54:36
# Fork: 3 of 3
# Warmup Iteration   1: 80.150 ns/op
# Warmup Iteration   2: 80.371 ns/op
# Warmup Iteration   3: 80.888 ns/op
Iteration   1: 80.399 ns/op
Iteration   2: 80.706 ns/op
Iteration   3: 80.985 ns/op
Iteration   4: 80.865 ns/op
Iteration   5: 80.056 ns/op


Result "kotlin_benchmarks.array.sum.Inline64int.Ref_as_Int_sum":
  79.882 ±(99.9%) 0.631 ns/op [Average]
  (min, avg, max) = (79.390, 79.882, 80.985), stdev = 0.590
  CI (99.9%): [79.251, 80.513] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.sum.Inline64int.Ref_as_Int_sum
# Parameters: (size = 1000000)

# Run progress: 39.78% complete, ETA 05:54:27
# Fork: 1 of 3
# Warmup Iteration   1: 1335221.469 ns/op
# Warmup Iteration   2: 1389398.000 ns/op
# Warmup Iteration   3: 1373108.299 ns/op
Iteration   1: 1434645.095 ns/op
Iteration   2: 1331019.708 ns/op
Iteration   3: 1259989.608 ns/op
Iteration   4: 1260373.025 ns/op
Iteration   5: 1265272.387 ns/op

# Run progress: 39.80% complete, ETA 05:54:18
# Fork: 2 of 3
# Warmup Iteration   1: 1347264.445 ns/op
# Warmup Iteration   2: 1292675.352 ns/op
# Warmup Iteration   3: 1191945.300 ns/op
Iteration   1: 1196558.088 ns/op
Iteration   2: 1234606.380 ns/op
Iteration   3: 1219815.390 ns/op
Iteration   4: 1224996.814 ns/op
Iteration   5: 1194274.970 ns/op

# Run progress: 39.83% complete, ETA 05:54:09
# Fork: 3 of 3
# Warmup Iteration   1: 1296838.528 ns/op
# Warmup Iteration   2: 1284785.669 ns/op
# Warmup Iteration   3: 1359928.716 ns/op
Iteration   1: 1360598.643 ns/op
Iteration   2: 1325851.809 ns/op
Iteration   3: 1259965.563 ns/op
Iteration   4: 1231553.825 ns/op
Iteration   5: 1237054.958 ns/op


Result "kotlin_benchmarks.array.sum.Inline64int.Ref_as_Int_sum":
  1269105.084 ±(99.9%) 71115.113 ns/op [Average]
  (min, avg, max) = (1194274.970, 1269105.084, 1434645.095), stdev = 66521.121
  CI (99.9%): [1197989.971, 1340220.197] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.sum.Inline64int.Ref_as_Ref_fields
# Parameters: (size = 100)

# Run progress: 39.85% complete, ETA 05:54:00
# Fork: 1 of 3
# Warmup Iteration   1: 69.159 ns/op
# Warmup Iteration   2: 68.580 ns/op
# Warmup Iteration   3: 68.685 ns/op
Iteration   1: 69.062 ns/op
Iteration   2: 69.041 ns/op
Iteration   3: 69.325 ns/op
Iteration   4: 69.235 ns/op
Iteration   5: 68.918 ns/op

# Run progress: 39.88% complete, ETA 05:53:51
# Fork: 2 of 3
# Warmup Iteration   1: 61.412 ns/op
# Warmup Iteration   2: 60.065 ns/op
# Warmup Iteration   3: 59.992 ns/op
Iteration   1: 59.981 ns/op
Iteration   2: 60.015 ns/op
Iteration   3: 59.939 ns/op
Iteration   4: 59.981 ns/op
Iteration   5: 59.920 ns/op

# Run progress: 39.90% complete, ETA 05:53:42
# Fork: 3 of 3
# Warmup Iteration   1: 60.557 ns/op
# Warmup Iteration   2: 60.289 ns/op
# Warmup Iteration   3: 60.097 ns/op
Iteration   1: 60.137 ns/op
Iteration   2: 60.264 ns/op
Iteration   3: 59.956 ns/op
Iteration   4: 60.241 ns/op
Iteration   5: 60.283 ns/op


Result "kotlin_benchmarks.array.sum.Inline64int.Ref_as_Ref_fields":
  63.087 ±(99.9%) 4.721 ns/op [Average]
  (min, avg, max) = (59.920, 63.087, 69.325), stdev = 4.416
  CI (99.9%): [58.366, 67.807] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.sum.Inline64int.Ref_as_Ref_fields
# Parameters: (size = 1000000)

# Run progress: 39.93% complete, ETA 05:53:33
# Fork: 1 of 3
# Warmup Iteration   1: 1300210.705 ns/op
# Warmup Iteration   2: 1289869.519 ns/op
# Warmup Iteration   3: 1275504.788 ns/op
Iteration   1: 1291115.262 ns/op
Iteration   2: 1260771.515 ns/op
Iteration   3: 1189163.697 ns/op
Iteration   4: 1210437.725 ns/op
Iteration   5: 1216305.472 ns/op

# Run progress: 39.95% complete, ETA 05:53:23
# Fork: 2 of 3
# Warmup Iteration   1: 1166268.616 ns/op
# Warmup Iteration   2: 1208393.740 ns/op
# Warmup Iteration   3: 1200850.356 ns/op
Iteration   1: 1159378.727 ns/op
Iteration   2: 1218650.051 ns/op
Iteration   3: 1215989.771 ns/op
Iteration   4: 1233339.490 ns/op
Iteration   5: 1259950.125 ns/op

# Run progress: 39.98% complete, ETA 05:53:14
# Fork: 3 of 3
# Warmup Iteration   1: 1394754.425 ns/op
# Warmup Iteration   2: 1332997.461 ns/op
# Warmup Iteration   3: 1233601.902 ns/op
Iteration   1: 1198823.964 ns/op
Iteration   2: 1241769.758 ns/op
Iteration   3: 1310393.916 ns/op
Iteration   4: 1317538.780 ns/op
Iteration   5: 1231322.473 ns/op


Result "kotlin_benchmarks.array.sum.Inline64int.Ref_as_Ref_fields":
  1236996.715 ±(99.9%) 47505.415 ns/op [Average]
  (min, avg, max) = (1159378.727, 1236996.715, 1317538.780), stdev = 44436.594
  CI (99.9%): [1189491.301, 1284502.130] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.sum.Inline64int.Ref_as_Ref_sum
# Parameters: (size = 100)

# Run progress: 40.00% complete, ETA 05:53:05
# Fork: 1 of 3
# Warmup Iteration   1: 81.013 ns/op
# Warmup Iteration   2: 80.043 ns/op
# Warmup Iteration   3: 79.861 ns/op
Iteration   1: 80.051 ns/op
Iteration   2: 80.606 ns/op
Iteration   3: 79.918 ns/op
Iteration   4: 80.010 ns/op
Iteration   5: 79.794 ns/op

# Run progress: 40.02% complete, ETA 05:52:56
# Fork: 2 of 3
# Warmup Iteration   1: 98.574 ns/op
# Warmup Iteration   2: 166.137 ns/op
# Warmup Iteration   3: 165.986 ns/op
Iteration   1: 166.104 ns/op
Iteration   2: 166.233 ns/op
Iteration   3: 165.916 ns/op
Iteration   4: 166.045 ns/op
Iteration   5: 165.996 ns/op

# Run progress: 40.05% complete, ETA 05:52:47
# Fork: 3 of 3
# Warmup Iteration   1: 171.409 ns/op
# Warmup Iteration   2: 166.164 ns/op
# Warmup Iteration   3: 166.057 ns/op
Iteration   1: 166.097 ns/op
Iteration   2: 166.003 ns/op
Iteration   3: 167.692 ns/op
Iteration   4: 167.744 ns/op
Iteration   5: 166.084 ns/op


Result "kotlin_benchmarks.array.sum.Inline64int.Ref_as_Ref_sum":
  137.619 ±(99.9%) 45.031 ns/op [Average]
  (min, avg, max) = (79.794, 137.619, 167.744), stdev = 42.122
  CI (99.9%): [92.589, 182.650] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.sum.Inline64int.Ref_as_Ref_sum
# Parameters: (size = 1000000)

# Run progress: 40.07% complete, ETA 05:52:38
# Fork: 1 of 3
# Warmup Iteration   1: 2147067.807 ns/op
# Warmup Iteration   2: 1993243.343 ns/op
# Warmup Iteration   3: 2052651.136 ns/op
Iteration   1: 2090453.167 ns/op
Iteration   2: 1992206.101 ns/op
Iteration   3: 1785299.080 ns/op
Iteration   4: 2250955.257 ns/op
Iteration   5: 1844270.224 ns/op

# Run progress: 40.10% complete, ETA 05:52:29
# Fork: 2 of 3
# Warmup Iteration   1: 1273959.549 ns/op
# Warmup Iteration   2: 1267394.291 ns/op
# Warmup Iteration   3: 1242648.091 ns/op
Iteration   1: 1265655.767 ns/op
Iteration   2: 1270888.102 ns/op
Iteration   3: 1284806.322 ns/op
Iteration   4: 1375058.956 ns/op
Iteration   5: 1346605.478 ns/op

# Run progress: 40.12% complete, ETA 05:52:20
# Fork: 3 of 3
# Warmup Iteration   1: 1347419.171 ns/op
# Warmup Iteration   2: 1262316.583 ns/op
# Warmup Iteration   3: 1269195.042 ns/op
Iteration   1: 1306747.226 ns/op
Iteration   2: 1335411.712 ns/op
Iteration   3: 1311503.296 ns/op
Iteration   4: 1229782.187 ns/op
Iteration   5: 1268893.974 ns/op


Result "kotlin_benchmarks.array.sum.Inline64int.Ref_as_Ref_sum":
  1530569.123 ±(99.9%) 379047.170 ns/op [Average]
  (min, avg, max) = (1229782.187, 1530569.123, 2250955.257), stdev = 354560.958
  CI (99.9%): [1151521.953, 1909616.294] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.sum.Inline64int.Val_as_Int_sum
# Parameters: (size = 100)

# Run progress: 40.15% complete, ETA 05:52:11
# Fork: 1 of 3
# Warmup Iteration   1: 79.921 ns/op
# Warmup Iteration   2: 79.931 ns/op
# Warmup Iteration   3: 79.806 ns/op
Iteration   1: 80.022 ns/op
Iteration   2: 79.732 ns/op
Iteration   3: 80.092 ns/op
Iteration   4: 85.184 ns/op
Iteration   5: 79.492 ns/op

# Run progress: 40.17% complete, ETA 05:52:02
# Fork: 2 of 3
# Warmup Iteration   1: 80.742 ns/op
# Warmup Iteration   2: 79.643 ns/op
# Warmup Iteration   3: 79.601 ns/op
Iteration   1: 80.152 ns/op
Iteration   2: 79.645 ns/op
Iteration   3: 79.641 ns/op
Iteration   4: 79.735 ns/op
Iteration   5: 81.171 ns/op

# Run progress: 40.20% complete, ETA 05:51:53
# Fork: 3 of 3
# Warmup Iteration   1: 80.976 ns/op
# Warmup Iteration   2: 80.133 ns/op
# Warmup Iteration   3: 80.033 ns/op
Iteration   1: 79.490 ns/op
Iteration   2: 79.492 ns/op
Iteration   3: 81.159 ns/op
Iteration   4: 79.540 ns/op
Iteration   5: 79.553 ns/op


Result "kotlin_benchmarks.array.sum.Inline64int.Val_as_Int_sum":
  80.273 ±(99.9%) 1.567 ns/op [Average]
  (min, avg, max) = (79.490, 80.273, 85.184), stdev = 1.466
  CI (99.9%): [78.706, 81.841] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.sum.Inline64int.Val_as_Int_sum
# Parameters: (size = 1000000)

# Run progress: 40.22% complete, ETA 05:51:44
# Fork: 1 of 3
# Warmup Iteration   1: 1291804.451 ns/op
# Warmup Iteration   2: 1252967.112 ns/op
# Warmup Iteration   3: 1244412.836 ns/op
Iteration   1: 1344917.443 ns/op
Iteration   2: 1300773.435 ns/op
Iteration   3: 1272865.511 ns/op
Iteration   4: 1266367.117 ns/op
Iteration   5: 1266611.884 ns/op

# Run progress: 40.25% complete, ETA 05:51:35
# Fork: 2 of 3
# Warmup Iteration   1: 1224429.358 ns/op
# Warmup Iteration   2: 1265826.678 ns/op
# Warmup Iteration   3: 1267572.302 ns/op
Iteration   1: 1284835.737 ns/op
Iteration   2: 1332296.553 ns/op
Iteration   3: 1350416.050 ns/op
Iteration   4: 1355438.338 ns/op
Iteration   5: 1338953.963 ns/op

# Run progress: 40.27% complete, ETA 05:51:25
# Fork: 3 of 3
# Warmup Iteration   1: 1300040.970 ns/op
# Warmup Iteration   2: 1274694.321 ns/op
# Warmup Iteration   3: 1276840.645 ns/op
Iteration   1: 1251793.939 ns/op
Iteration   2: 1254603.753 ns/op
Iteration   3: 1278377.745 ns/op
Iteration   4: 1242469.096 ns/op
Iteration   5: 1283845.881 ns/op


Result "kotlin_benchmarks.array.sum.Inline64int.Val_as_Int_sum":
  1294971.096 ±(99.9%) 41845.411 ns/op [Average]
  (min, avg, max) = (1242469.096, 1294971.096, 1355438.338), stdev = 39142.223
  CI (99.9%): [1253125.685, 1336816.507] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.sum.Inline64int.Val_as_Ref_fields
# Parameters: (size = 100)

# Run progress: 40.29% complete, ETA 05:51:16
# Fork: 1 of 3
# Warmup Iteration   1: 60.649 ns/op
# Warmup Iteration   2: 60.037 ns/op
# Warmup Iteration   3: 60.379 ns/op
Iteration   1: 60.175 ns/op
Iteration   2: 60.295 ns/op
Iteration   3: 60.644 ns/op
Iteration   4: 60.009 ns/op
Iteration   5: 60.086 ns/op

# Run progress: 40.32% complete, ETA 05:51:07
# Fork: 2 of 3
# Warmup Iteration   1: 60.548 ns/op
# Warmup Iteration   2: 60.077 ns/op
# Warmup Iteration   3: 59.973 ns/op
Iteration   1: 59.981 ns/op
Iteration   2: 60.016 ns/op
Iteration   3: 61.073 ns/op
Iteration   4: 60.108 ns/op
Iteration   5: 60.173 ns/op

# Run progress: 40.34% complete, ETA 05:50:58
# Fork: 3 of 3
# Warmup Iteration   1: 60.848 ns/op
# Warmup Iteration   2: 60.475 ns/op
# Warmup Iteration   3: 61.112 ns/op
Iteration   1: 60.634 ns/op
Iteration   2: 60.009 ns/op
Iteration   3: 59.998 ns/op
Iteration   4: 60.127 ns/op
Iteration   5: 59.988 ns/op


Result "kotlin_benchmarks.array.sum.Inline64int.Val_as_Ref_fields":
  60.221 ±(99.9%) 0.340 ns/op [Average]
  (min, avg, max) = (59.981, 60.221, 61.073), stdev = 0.318
  CI (99.9%): [59.881, 60.561] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.sum.Inline64int.Val_as_Ref_fields
# Parameters: (size = 1000000)

# Run progress: 40.37% complete, ETA 05:50:49
# Fork: 1 of 3
# Warmup Iteration   1: 1320066.580 ns/op
# Warmup Iteration   2: 1290088.141 ns/op
# Warmup Iteration   3: 1206970.231 ns/op
Iteration   1: 1235860.358 ns/op
Iteration   2: 1238306.715 ns/op
Iteration   3: 1181698.538 ns/op
Iteration   4: 1241413.902 ns/op
Iteration   5: 1160945.524 ns/op

# Run progress: 40.39% complete, ETA 05:50:40
# Fork: 2 of 3
# Warmup Iteration   1: 1200874.751 ns/op
# Warmup Iteration   2: 1260589.711 ns/op
# Warmup Iteration   3: 1324901.660 ns/op
Iteration   1: 1349106.066 ns/op
Iteration   2: 1330409.631 ns/op
Iteration   3: 1312578.356 ns/op
Iteration   4: 1229199.158 ns/op
Iteration   5: 1210666.268 ns/op

# Run progress: 40.42% complete, ETA 05:50:31
# Fork: 3 of 3
# Warmup Iteration   1: 1252097.739 ns/op
# Warmup Iteration   2: 1287892.352 ns/op
# Warmup Iteration   3: 1238934.743 ns/op
Iteration   1: 1209997.337 ns/op
Iteration   2: 1171170.956 ns/op
Iteration   3: 1207695.042 ns/op
Iteration   4: 1185683.099 ns/op
Iteration   5: 1155930.380 ns/op


Result "kotlin_benchmarks.array.sum.Inline64int.Val_as_Ref_fields":
  1228044.088 ±(99.9%) 64238.086 ns/op [Average]
  (min, avg, max) = (1155930.380, 1228044.088, 1349106.066), stdev = 60088.345
  CI (99.9%): [1163806.003, 1292282.174] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.sum.Inline64int.Val_as_Ref_sum
# Parameters: (size = 100)

# Run progress: 40.44% complete, ETA 05:50:22
# Fork: 1 of 3
# Warmup Iteration   1: 80.468 ns/op
# Warmup Iteration   2: 79.900 ns/op
# Warmup Iteration   3: 79.815 ns/op
Iteration   1: 79.628 ns/op
Iteration   2: 79.900 ns/op
Iteration   3: 79.699 ns/op
Iteration   4: 79.651 ns/op
Iteration   5: 80.210 ns/op

# Run progress: 40.47% complete, ETA 05:50:13
# Fork: 2 of 3
# Warmup Iteration   1: 82.213 ns/op
# Warmup Iteration   2: 80.466 ns/op
# Warmup Iteration   3: 79.597 ns/op
Iteration   1: 79.998 ns/op
Iteration   2: 80.234 ns/op
Iteration   3: 80.048 ns/op
Iteration   4: 81.184 ns/op
Iteration   5: 79.933 ns/op

# Run progress: 40.49% complete, ETA 05:50:03
# Fork: 3 of 3
# Warmup Iteration   1: 80.622 ns/op
# Warmup Iteration   2: 79.082 ns/op
# Warmup Iteration   3: 78.983 ns/op
Iteration   1: 78.975 ns/op
Iteration   2: 78.994 ns/op
Iteration   3: 81.796 ns/op
Iteration   4: 78.987 ns/op
Iteration   5: 78.953 ns/op


Result "kotlin_benchmarks.array.sum.Inline64int.Val_as_Ref_sum":
  79.879 ±(99.9%) 0.860 ns/op [Average]
  (min, avg, max) = (78.953, 79.879, 81.796), stdev = 0.804
  CI (99.9%): [79.019, 80.739] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.sum.Inline64int.Val_as_Ref_sum
# Parameters: (size = 1000000)

# Run progress: 40.51% complete, ETA 05:49:54
# Fork: 1 of 3
# Warmup Iteration   1: 1236914.728 ns/op
# Warmup Iteration   2: 1184149.472 ns/op
# Warmup Iteration   3: 1237974.846 ns/op
Iteration   1: 1230989.850 ns/op
Iteration   2: 1223009.322 ns/op
Iteration   3: 1244796.286 ns/op
Iteration   4: 1261265.056 ns/op
Iteration   5: 1340584.450 ns/op

# Run progress: 40.54% complete, ETA 05:49:45
# Fork: 2 of 3
# Warmup Iteration   1: 1338712.840 ns/op
# Warmup Iteration   2: 1262852.130 ns/op
# Warmup Iteration   3: 1299530.023 ns/op
Iteration   1: 1346895.750 ns/op
Iteration   2: 1254005.738 ns/op
Iteration   3: 1211480.846 ns/op
Iteration   4: 1246439.384 ns/op
Iteration   5: 1231095.245 ns/op

# Run progress: 40.56% complete, ETA 05:49:36
# Fork: 3 of 3
# Warmup Iteration   1: 1238822.904 ns/op
# Warmup Iteration   2: 1226535.700 ns/op
# Warmup Iteration   3: 1254798.089 ns/op
Iteration   1: 1186384.276 ns/op
Iteration   2: 1237113.118 ns/op
Iteration   3: 1221873.791 ns/op
Iteration   4: 1269870.079 ns/op
Iteration   5: 1298946.183 ns/op


Result "kotlin_benchmarks.array.sum.Inline64int.Val_as_Ref_sum":
  1253649.958 ±(99.9%) 48067.718 ns/op [Average]
  (min, avg, max) = (1186384.276, 1253649.958, 1346895.750), stdev = 44962.574
  CI (99.9%): [1205582.240, 1301717.677] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.sum.Inline64int.Val_as_Val_fields
# Parameters: (size = 100)

# Run progress: 40.59% complete, ETA 05:49:27
# Fork: 1 of 3
# Warmup Iteration   1: 66.216 ns/op
# Warmup Iteration   2: 60.006 ns/op
# Warmup Iteration   3: 59.890 ns/op
Iteration   1: 60.105 ns/op
Iteration   2: 59.990 ns/op
Iteration   3: 59.997 ns/op
Iteration   4: 60.358 ns/op
Iteration   5: 59.943 ns/op

# Run progress: 40.61% complete, ETA 05:49:18
# Fork: 2 of 3
# Warmup Iteration   1: 60.520 ns/op
# Warmup Iteration   2: 59.985 ns/op
# Warmup Iteration   3: 60.423 ns/op
Iteration   1: 60.549 ns/op
Iteration   2: 60.717 ns/op
Iteration   3: 60.005 ns/op
Iteration   4: 61.015 ns/op
Iteration   5: 59.903 ns/op

# Run progress: 40.64% complete, ETA 05:49:09
# Fork: 3 of 3
# Warmup Iteration   1: 60.727 ns/op
# Warmup Iteration   2: 60.017 ns/op
# Warmup Iteration   3: 59.941 ns/op
Iteration   1: 59.929 ns/op
Iteration   2: 59.913 ns/op
Iteration   3: 59.924 ns/op
Iteration   4: 60.439 ns/op
Iteration   5: 60.426 ns/op


Result "kotlin_benchmarks.array.sum.Inline64int.Val_as_Val_fields":
  60.214 ±(99.9%) 0.373 ns/op [Average]
  (min, avg, max) = (59.903, 60.214, 61.015), stdev = 0.349
  CI (99.9%): [59.841, 60.587] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.sum.Inline64int.Val_as_Val_fields
# Parameters: (size = 1000000)

# Run progress: 40.66% complete, ETA 05:49:00
# Fork: 1 of 3
# Warmup Iteration   1: 1178421.242 ns/op
# Warmup Iteration   2: 1226753.135 ns/op
# Warmup Iteration   3: 1200856.481 ns/op
Iteration   1: 1187179.900 ns/op
Iteration   2: 1163193.997 ns/op
Iteration   3: 1338280.298 ns/op
Iteration   4: 1332047.967 ns/op
Iteration   5: 1357685.204 ns/op

# Run progress: 40.69% complete, ETA 05:48:51
# Fork: 2 of 3
# Warmup Iteration   1: 1388229.938 ns/op
# Warmup Iteration   2: 1931783.621 ns/op
# Warmup Iteration   3: 1952440.154 ns/op
Iteration   1: 1942154.430 ns/op
Iteration   2: 1958796.117 ns/op
Iteration   3: 1959249.353 ns/op
Iteration   4: 1923234.871 ns/op
Iteration   5: 1835446.601 ns/op

# Run progress: 40.71% complete, ETA 05:48:42
# Fork: 3 of 3
# Warmup Iteration   1: 1997280.544 ns/op
# Warmup Iteration   2: 1783373.090 ns/op
# Warmup Iteration   3: 1824574.007 ns/op
Iteration   1: 1797001.941 ns/op
Iteration   2: 1953381.515 ns/op
Iteration   3: 1909948.372 ns/op
Iteration   4: 1946233.849 ns/op
Iteration   5: 2045930.441 ns/op


Result "kotlin_benchmarks.array.sum.Inline64int.Val_as_Val_fields":
  1709984.324 ±(99.9%) 349003.920 ns/op [Average]
  (min, avg, max) = (1163193.997, 1709984.324, 2045930.441), stdev = 326458.484
  CI (99.9%): [1360980.403, 2058988.244] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.sum.Inline64int.Val_as_Val_sum
# Parameters: (size = 100)

# Run progress: 40.74% complete, ETA 05:48:33
# Fork: 1 of 3
# Warmup Iteration   1: 170.046 ns/op
# Warmup Iteration   2: 166.017 ns/op
# Warmup Iteration   3: 165.859 ns/op
Iteration   1: 166.300 ns/op
Iteration   2: 165.773 ns/op
Iteration   3: 165.980 ns/op
Iteration   4: 166.080 ns/op
Iteration   5: 165.847 ns/op

# Run progress: 40.76% complete, ETA 05:48:24
# Fork: 2 of 3
# Warmup Iteration   1: 91.669 ns/op
# Warmup Iteration   2: 98.626 ns/op
# Warmup Iteration   3: 86.239 ns/op
Iteration   1: 79.761 ns/op
Iteration   2: 79.635 ns/op
Iteration   3: 79.604 ns/op
Iteration   4: 79.641 ns/op
Iteration   5: 79.613 ns/op

# Run progress: 40.78% complete, ETA 05:48:17
# Fork: 3 of 3
# Warmup Iteration   1: 80.246 ns/op
# Warmup Iteration   2: 79.581 ns/op
# Warmup Iteration   3: 79.638 ns/op
Iteration   1: 82.930 ns/op
Iteration   2: 79.557 ns/op
Iteration   3: 79.596 ns/op
Iteration   4: 80.059 ns/op
Iteration   5: 79.990 ns/op


Result "kotlin_benchmarks.array.sum.Inline64int.Val_as_Val_sum":
  108.691 ±(99.9%) 44.848 ns/op [Average]
  (min, avg, max) = (79.557, 108.691, 166.300), stdev = 41.951
  CI (99.9%): [63.843, 153.539] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.sum.Inline64int.Val_as_Val_sum
# Parameters: (size = 1000000)

# Run progress: 40.81% complete, ETA 05:48:08
# Fork: 1 of 3
# Warmup Iteration   1: 1197543.296 ns/op
# Warmup Iteration   2: 1239507.005 ns/op
# Warmup Iteration   3: 1254078.490 ns/op
Iteration   1: 1285429.898 ns/op
Iteration   2: 1294359.155 ns/op
Iteration   3: 1282812.553 ns/op
Iteration   4: 1321354.908 ns/op
Iteration   5: 1270382.809 ns/op

# Run progress: 40.83% complete, ETA 05:47:59
# Fork: 2 of 3
# Warmup Iteration   1: 1231290.236 ns/op
# Warmup Iteration   2: 1251613.792 ns/op
# Warmup Iteration   3: 1257964.248 ns/op
Iteration   1: 1246573.902 ns/op
Iteration   2: 1253056.089 ns/op
Iteration   3: 1244584.410 ns/op
Iteration   4: 1224893.535 ns/op
Iteration   5: 1239173.629 ns/op

# Run progress: 40.86% complete, ETA 05:47:50
# Fork: 3 of 3
# Warmup Iteration   1: 1263631.140 ns/op
# Warmup Iteration   2: 1314666.450 ns/op
# Warmup Iteration   3: 1325008.300 ns/op
Iteration   1: 1298775.690 ns/op
Iteration   2: 1284416.667 ns/op
Iteration   3: 1308887.728 ns/op
Iteration   4: 1302062.231 ns/op
Iteration   5: 1209732.513 ns/op


Result "kotlin_benchmarks.array.sum.Inline64int.Val_as_Val_sum":
  1271099.714 ±(99.9%) 35329.787 ns/op [Average]
  (min, avg, max) = (1209732.513, 1271099.714, 1321354.908), stdev = 33047.504
  CI (99.9%): [1235769.928, 1306429.501] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.sum.InlineOpt.Int_as_Int_sum
# Parameters: (size = 100)

# Run progress: 40.88% complete, ETA 05:47:41
# Fork: 1 of 3
# Warmup Iteration   1: 60.877 ns/op
# Warmup Iteration   2: 60.462 ns/op
# Warmup Iteration   3: 60.830 ns/op
Iteration   1: 70.561 ns/op
Iteration   2: 60.302 ns/op
Iteration   3: 60.338 ns/op
Iteration   4: 60.231 ns/op
Iteration   5: 61.910 ns/op

# Run progress: 40.91% complete, ETA 05:47:32
# Fork: 2 of 3
# Warmup Iteration   1: 60.692 ns/op
# Warmup Iteration   2: 60.385 ns/op
# Warmup Iteration   3: 61.393 ns/op
Iteration   1: 60.260 ns/op
Iteration   2: 60.266 ns/op
Iteration   3: 60.229 ns/op
Iteration   4: 60.728 ns/op
Iteration   5: 60.216 ns/op

# Run progress: 40.93% complete, ETA 05:47:23
# Fork: 3 of 3
# Warmup Iteration   1: 60.787 ns/op
# Warmup Iteration   2: 60.385 ns/op
# Warmup Iteration   3: 60.660 ns/op
Iteration   1: 60.862 ns/op
Iteration   2: 61.015 ns/op
Iteration   3: 60.822 ns/op
Iteration   4: 61.507 ns/op
Iteration   5: 60.727 ns/op


Result "kotlin_benchmarks.array.sum.InlineOpt.Int_as_Int_sum":
  61.332 ±(99.9%) 2.783 ns/op [Average]
  (min, avg, max) = (60.216, 61.332, 70.561), stdev = 2.603
  CI (99.9%): [58.549, 64.114] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.sum.InlineOpt.Int_as_Int_sum
# Parameters: (size = 1000000)

# Run progress: 40.96% complete, ETA 05:47:14
# Fork: 1 of 3
# Warmup Iteration   1: 825188.489 ns/op
# Warmup Iteration   2: 844103.290 ns/op
# Warmup Iteration   3: 840105.121 ns/op
Iteration   1: 829761.175 ns/op
Iteration   2: 794516.182 ns/op
Iteration   3: 749708.645 ns/op
Iteration   4: 765400.509 ns/op
Iteration   5: 794749.934 ns/op

# Run progress: 40.98% complete, ETA 05:47:05
# Fork: 2 of 3
# Warmup Iteration   1: 811519.375 ns/op
# Warmup Iteration   2: 814219.620 ns/op
# Warmup Iteration   3: 772878.889 ns/op
Iteration   1: 795391.732 ns/op
Iteration   2: 803020.370 ns/op
Iteration   3: 801001.355 ns/op
Iteration   4: 792254.248 ns/op
Iteration   5: 804944.854 ns/op

# Run progress: 41.00% complete, ETA 05:46:55
# Fork: 3 of 3
# Warmup Iteration   1: 832106.678 ns/op
# Warmup Iteration   2: 828968.313 ns/op
# Warmup Iteration   3: 821755.777 ns/op
Iteration   1: 837684.598 ns/op
Iteration   2: 779163.350 ns/op
Iteration   3: 758646.272 ns/op
Iteration   4: 799901.397 ns/op
Iteration   5: 806595.420 ns/op


Result "kotlin_benchmarks.array.sum.InlineOpt.Int_as_Int_sum":
  794182.669 ±(99.9%) 25372.433 ns/op [Average]
  (min, avg, max) = (749708.645, 794182.669, 837684.598), stdev = 23733.389
  CI (99.9%): [768810.237, 819555.102] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.sum.InlineOpt.Ref_as_Ref_fields
# Parameters: (size = 100)

# Run progress: 41.03% complete, ETA 05:46:46
# Fork: 1 of 3
# Warmup Iteration   1: 51.923 ns/op
# Warmup Iteration   2: 53.591 ns/op
# Warmup Iteration   3: 52.288 ns/op
Iteration   1: 51.565 ns/op
Iteration   2: 51.744 ns/op
Iteration   3: 51.867 ns/op
Iteration   4: 51.805 ns/op
Iteration   5: 51.739 ns/op

# Run progress: 41.05% complete, ETA 05:46:40
# Fork: 2 of 3
# Warmup Iteration   1: 52.046 ns/op
# Warmup Iteration   2: 51.656 ns/op
# Warmup Iteration   3: 51.717 ns/op
Iteration   1: 51.731 ns/op
Iteration   2: 52.033 ns/op
Iteration   3: 51.801 ns/op
Iteration   4: 52.288 ns/op
Iteration   5: 52.268 ns/op

# Run progress: 41.08% complete, ETA 05:46:31
# Fork: 3 of 3
# Warmup Iteration   1: 52.699 ns/op
# Warmup Iteration   2: 52.071 ns/op
# Warmup Iteration   3: 51.434 ns/op
Iteration   1: 52.086 ns/op
Iteration   2: 51.920 ns/op
Iteration   3: 51.797 ns/op
Iteration   4: 52.401 ns/op
Iteration   5: 52.197 ns/op


Result "kotlin_benchmarks.array.sum.InlineOpt.Ref_as_Ref_fields":
  51.950 ±(99.9%) 0.265 ns/op [Average]
  (min, avg, max) = (51.565, 51.950, 52.401), stdev = 0.248
  CI (99.9%): [51.684, 52.215] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.sum.InlineOpt.Ref_as_Ref_fields
# Parameters: (size = 1000000)

# Run progress: 41.10% complete, ETA 05:46:22
# Fork: 1 of 3
# Warmup Iteration   1: 757329.398 ns/op
# Warmup Iteration   2: 687035.916 ns/op
# Warmup Iteration   3: 674397.447 ns/op
Iteration   1: 694848.908 ns/op
Iteration   2: 771976.827 ns/op
Iteration   3: 763922.430 ns/op
Iteration   4: 742754.810 ns/op
Iteration   5: 720226.865 ns/op

# Run progress: 41.13% complete, ETA 05:46:13
# Fork: 2 of 3
# Warmup Iteration   1: 701894.900 ns/op
# Warmup Iteration   2: 651796.908 ns/op
# Warmup Iteration   3: 704872.354 ns/op
Iteration   1: 702256.867 ns/op
Iteration   2: 759432.574 ns/op
Iteration   3: 797217.344 ns/op
Iteration   4: 784941.239 ns/op
Iteration   5: 789339.691 ns/op

# Run progress: 41.15% complete, ETA 05:46:04
# Fork: 3 of 3
# Warmup Iteration   1: 743612.337 ns/op
# Warmup Iteration   2: 692399.926 ns/op
# Warmup Iteration   3: 699202.620 ns/op
Iteration   1: 738798.246 ns/op
Iteration   2: 742827.268 ns/op
Iteration   3: 781816.628 ns/op
Iteration   4: 782909.404 ns/op
Iteration   5: 738175.158 ns/op


Result "kotlin_benchmarks.array.sum.InlineOpt.Ref_as_Ref_fields":
  754096.284 ±(99.9%) 34028.264 ns/op [Average]
  (min, avg, max) = (694848.908, 754096.284, 797217.344), stdev = 31830.059
  CI (99.9%): [720068.020, 788124.548] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.sum.InlineOpt.Ref_as_Ref_sum
# Parameters: (size = 100)

# Run progress: 41.18% complete, ETA 05:45:55
# Fork: 1 of 3
# Warmup Iteration   1: 52.833 ns/op
# Warmup Iteration   2: 52.109 ns/op
# Warmup Iteration   3: 52.377 ns/op
Iteration   1: 51.856 ns/op
Iteration   2: 51.915 ns/op
Iteration   3: 51.777 ns/op
Iteration   4: 51.878 ns/op
Iteration   5: 51.744 ns/op

# Run progress: 41.20% complete, ETA 05:45:46
# Fork: 2 of 3
# Warmup Iteration   1: 52.161 ns/op
# Warmup Iteration   2: 51.512 ns/op
# Warmup Iteration   3: 52.049 ns/op
Iteration   1: 52.711 ns/op
Iteration   2: 52.971 ns/op
Iteration   3: 52.060 ns/op
Iteration   4: 52.103 ns/op
Iteration   5: 52.307 ns/op

# Run progress: 41.23% complete, ETA 05:45:39
# Fork: 3 of 3
# Warmup Iteration   1: 52.033 ns/op
# Warmup Iteration   2: 51.705 ns/op
# Warmup Iteration   3: 51.889 ns/op
Iteration   1: 51.742 ns/op
Iteration   2: 51.717 ns/op
Iteration   3: 51.904 ns/op
Iteration   4: 51.704 ns/op
Iteration   5: 51.793 ns/op


Result "kotlin_benchmarks.array.sum.InlineOpt.Ref_as_Ref_sum":
  52.012 ±(99.9%) 0.404 ns/op [Average]
  (min, avg, max) = (51.704, 52.012, 52.971), stdev = 0.378
  CI (99.9%): [51.608, 52.416] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.sum.InlineOpt.Ref_as_Ref_sum
# Parameters: (size = 1000000)

# Run progress: 41.25% complete, ETA 05:45:29
# Fork: 1 of 3
# Warmup Iteration   1: 706030.515 ns/op
# Warmup Iteration   2: 679740.747 ns/op
# Warmup Iteration   3: 695359.626 ns/op
Iteration   1: 689968.365 ns/op
Iteration   2: 697165.257 ns/op
Iteration   3: 707329.134 ns/op
Iteration   4: 673795.528 ns/op
Iteration   5: 747585.059 ns/op

# Run progress: 41.27% complete, ETA 05:45:20
# Fork: 2 of 3
# Warmup Iteration   1: 772741.609 ns/op
# Warmup Iteration   2: 808698.392 ns/op
# Warmup Iteration   3: 804090.084 ns/op
Iteration   1: 785885.670 ns/op
Iteration   2: 744685.332 ns/op
Iteration   3: 744835.207 ns/op
Iteration   4: 735953.808 ns/op
Iteration   5: 802668.734 ns/op

# Run progress: 41.30% complete, ETA 05:45:11
# Fork: 3 of 3
# Warmup Iteration   1: 781424.884 ns/op
# Warmup Iteration   2: 752487.597 ns/op
# Warmup Iteration   3: 723107.761 ns/op
Iteration   1: 724734.039 ns/op
Iteration   2: 718162.289 ns/op
Iteration   3: 734076.884 ns/op
Iteration   4: 733944.323 ns/op
Iteration   5: 744714.734 ns/op


Result "kotlin_benchmarks.array.sum.InlineOpt.Ref_as_Ref_sum":
  732366.958 ±(99.9%) 35994.254 ns/op [Average]
  (min, avg, max) = (673795.528, 732366.958, 802668.734), stdev = 33669.048
  CI (99.9%): [696372.703, 768361.212] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.sum.InlineOpt.Val_as_Int_sum
# Parameters: (size = 100)

# Run progress: 41.32% complete, ETA 05:45:02
# Fork: 1 of 3
# Warmup Iteration   1: 52.008 ns/op
# Warmup Iteration   2: 51.586 ns/op
# Warmup Iteration   3: 51.847 ns/op
Iteration   1: 59.196 ns/op
Iteration   2: 51.737 ns/op
Iteration   3: 51.843 ns/op
Iteration   4: 51.728 ns/op
Iteration   5: 51.514 ns/op

# Run progress: 41.35% complete, ETA 05:44:53
# Fork: 2 of 3
# Warmup Iteration   1: 51.833 ns/op
# Warmup Iteration   2: 53.250 ns/op
# Warmup Iteration   3: 52.136 ns/op
Iteration   1: 52.084 ns/op
Iteration   2: 51.692 ns/op
Iteration   3: 51.639 ns/op
Iteration   4: 52.935 ns/op
Iteration   5: 52.108 ns/op

# Run progress: 41.37% complete, ETA 05:44:44
# Fork: 3 of 3
# Warmup Iteration   1: 52.021 ns/op
# Warmup Iteration   2: 51.595 ns/op
# Warmup Iteration   3: 51.804 ns/op
Iteration   1: 51.794 ns/op
Iteration   2: 51.759 ns/op
Iteration   3: 51.745 ns/op
Iteration   4: 52.414 ns/op
Iteration   5: 52.362 ns/op


Result "kotlin_benchmarks.array.sum.InlineOpt.Val_as_Int_sum":
  52.437 ±(99.9%) 2.039 ns/op [Average]
  (min, avg, max) = (51.514, 52.437, 59.196), stdev = 1.907
  CI (99.9%): [50.398, 54.475] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.sum.InlineOpt.Val_as_Int_sum
# Parameters: (size = 1000000)

# Run progress: 41.40% complete, ETA 05:44:35
# Fork: 1 of 3
# Warmup Iteration   1: 716233.375 ns/op
# Warmup Iteration   2: 699132.191 ns/op
# Warmup Iteration   3: 690206.398 ns/op
Iteration   1: 719908.891 ns/op
Iteration   2: 714791.460 ns/op
Iteration   3: 731926.343 ns/op
Iteration   4: 757956.233 ns/op
Iteration   5: 810920.762 ns/op

# Run progress: 41.42% complete, ETA 05:44:26
# Fork: 2 of 3
# Warmup Iteration   1: 803400.238 ns/op
# Warmup Iteration   2: 769490.815 ns/op
# Warmup Iteration   3: 745451.507 ns/op
Iteration   1: 739492.708 ns/op
Iteration   2: 744432.480 ns/op
Iteration   3: 806865.042 ns/op
Iteration   4: 778215.300 ns/op
Iteration   5: 739287.796 ns/op

# Run progress: 41.45% complete, ETA 05:44:17
# Fork: 3 of 3
# Warmup Iteration   1: 722520.116 ns/op
# Warmup Iteration   2: 709555.858 ns/op
# Warmup Iteration   3: 679647.837 ns/op
Iteration   1: 714282.037 ns/op
Iteration   2: 702398.950 ns/op
Iteration   3: 744771.696 ns/op
Iteration   4: 786213.086 ns/op
Iteration   5: 810300.543 ns/op


Result "kotlin_benchmarks.array.sum.InlineOpt.Val_as_Int_sum":
  753450.888 ±(99.9%) 39248.801 ns/op [Average]
  (min, avg, max) = (702398.950, 753450.888, 810920.762), stdev = 36713.353
  CI (99.9%): [714202.088, 792699.689] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.sum.InlineOpt.Val_as_Ref_fields
# Parameters: (size = 100)

# Run progress: 41.47% complete, ETA 05:44:08
# Fork: 1 of 3
# Warmup Iteration   1: 52.020 ns/op
# Warmup Iteration   2: 51.833 ns/op
# Warmup Iteration   3: 51.838 ns/op
Iteration   1: 51.830 ns/op
Iteration   2: 52.155 ns/op
Iteration   3: 51.978 ns/op
Iteration   4: 51.977 ns/op
Iteration   5: 51.929 ns/op

# Run progress: 41.50% complete, ETA 05:43:59
# Fork: 2 of 3
# Warmup Iteration   1: 52.001 ns/op
# Warmup Iteration   2: 51.645 ns/op
# Warmup Iteration   3: 52.189 ns/op
Iteration   1: 52.338 ns/op
Iteration   2: 51.910 ns/op
Iteration   3: 51.870 ns/op
Iteration   4: 51.896 ns/op
Iteration   5: 51.889 ns/op

# Run progress: 41.52% complete, ETA 05:43:49
# Fork: 3 of 3
# Warmup Iteration   1: 52.094 ns/op
# Warmup Iteration   2: 51.629 ns/op
# Warmup Iteration   3: 52.800 ns/op
Iteration   1: 51.819 ns/op
Iteration   2: 53.782 ns/op
Iteration   3: 51.753 ns/op
Iteration   4: 51.711 ns/op
Iteration   5: 51.692 ns/op


Result "kotlin_benchmarks.array.sum.InlineOpt.Val_as_Ref_fields":
  52.035 ±(99.9%) 0.546 ns/op [Average]
  (min, avg, max) = (51.692, 52.035, 53.782), stdev = 0.511
  CI (99.9%): [51.489, 52.581] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.sum.InlineOpt.Val_as_Ref_fields
# Parameters: (size = 1000000)

# Run progress: 41.54% complete, ETA 05:43:40
# Fork: 1 of 3
# Warmup Iteration   1: 697415.487 ns/op
# Warmup Iteration   2: 674739.122 ns/op
# Warmup Iteration   3: 701527.797 ns/op
Iteration   1: 718008.653 ns/op
Iteration   2: 769082.186 ns/op
Iteration   3: 788524.148 ns/op
Iteration   4: 825598.134 ns/op
Iteration   5: 793341.542 ns/op

# Run progress: 41.57% complete, ETA 05:43:31
# Fork: 2 of 3
# Warmup Iteration   1: 781877.417 ns/op
# Warmup Iteration   2: 743039.550 ns/op
# Warmup Iteration   3: 747844.739 ns/op
Iteration   1: 759899.045 ns/op
Iteration   2: 787595.215 ns/op
Iteration   3: 771845.716 ns/op
Iteration   4: 738655.762 ns/op
Iteration   5: 718593.074 ns/op

# Run progress: 41.59% complete, ETA 05:43:22
# Fork: 3 of 3
# Warmup Iteration   1: 691174.378 ns/op
# Warmup Iteration   2: 713981.660 ns/op
# Warmup Iteration   3: 703575.924 ns/op
Iteration   1: 735451.419 ns/op
Iteration   2: 787597.429 ns/op
Iteration   3: 819652.339 ns/op
Iteration   4: 801446.741 ns/op
Iteration   5: 805070.418 ns/op


Result "kotlin_benchmarks.array.sum.InlineOpt.Val_as_Ref_fields":
  774690.788 ±(99.9%) 36790.773 ns/op [Average]
  (min, avg, max) = (718008.653, 774690.788, 825598.134), stdev = 34414.112
  CI (99.9%): [737900.015, 811481.561] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.sum.InlineOpt.Val_as_Ref_sum
# Parameters: (size = 100)

# Run progress: 41.62% complete, ETA 05:43:13
# Fork: 1 of 3
# Warmup Iteration   1: 51.924 ns/op
# Warmup Iteration   2: 51.613 ns/op
# Warmup Iteration   3: 52.191 ns/op
Iteration   1: 52.655 ns/op
Iteration   2: 51.733 ns/op
Iteration   3: 51.726 ns/op
Iteration   4: 52.119 ns/op
Iteration   5: 52.173 ns/op

# Run progress: 41.64% complete, ETA 05:43:04
# Fork: 2 of 3
# Warmup Iteration   1: 51.898 ns/op
# Warmup Iteration   2: 52.295 ns/op
# Warmup Iteration   3: 52.310 ns/op
Iteration   1: 51.761 ns/op
Iteration   2: 51.771 ns/op
Iteration   3: 51.762 ns/op
Iteration   4: 51.733 ns/op
Iteration   5: 52.218 ns/op

# Run progress: 41.67% complete, ETA 05:42:55
# Fork: 3 of 3
# Warmup Iteration   1: 51.846 ns/op
# Warmup Iteration   2: 51.617 ns/op
# Warmup Iteration   3: 51.721 ns/op
Iteration   1: 51.828 ns/op
Iteration   2: 52.534 ns/op
Iteration   3: 52.646 ns/op
Iteration   4: 52.637 ns/op
Iteration   5: 52.291 ns/op


Result "kotlin_benchmarks.array.sum.InlineOpt.Val_as_Ref_sum":
  52.106 ±(99.9%) 0.400 ns/op [Average]
  (min, avg, max) = (51.726, 52.106, 52.655), stdev = 0.374
  CI (99.9%): [51.706, 52.506] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.sum.InlineOpt.Val_as_Ref_sum
# Parameters: (size = 1000000)

# Run progress: 41.69% complete, ETA 05:42:46
# Fork: 1 of 3
# Warmup Iteration   1: 717114.889 ns/op
# Warmup Iteration   2: 724187.695 ns/op
# Warmup Iteration   3: 741988.126 ns/op
Iteration   1: 788583.204 ns/op
Iteration   2: 792052.893 ns/op
Iteration   3: 775545.547 ns/op
Iteration   4: 744234.617 ns/op
Iteration   5: 728858.345 ns/op

# Run progress: 41.72% complete, ETA 05:42:37
# Fork: 2 of 3
# Warmup Iteration   1: 721206.966 ns/op
# Warmup Iteration   2: 805676.136 ns/op
# Warmup Iteration   3: 776301.331 ns/op
Iteration   1: 748278.981 ns/op
Iteration   2: 717942.764 ns/op
Iteration   3: 708523.422 ns/op
Iteration   4: 731935.165 ns/op
Iteration   5: 730529.257 ns/op

# Run progress: 41.74% complete, ETA 05:42:28
# Fork: 3 of 3
# Warmup Iteration   1: 721902.897 ns/op
# Warmup Iteration   2: 740564.944 ns/op
# Warmup Iteration   3: 766014.784 ns/op
Iteration   1: 815573.170 ns/op
Iteration   2: 801962.632 ns/op
Iteration   3: 768294.614 ns/op
Iteration   4: 694726.784 ns/op
Iteration   5: 735047.273 ns/op


Result "kotlin_benchmarks.array.sum.InlineOpt.Val_as_Ref_sum":
  752139.245 ±(99.9%) 38747.252 ns/op [Average]
  (min, avg, max) = (694726.784, 752139.245, 815573.170), stdev = 36244.203
  CI (99.9%): [713391.993, 790886.496] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.sum.InlineOpt.Val_as_Val_fields
# Parameters: (size = 100)

# Run progress: 41.76% complete, ETA 05:42:19
# Fork: 1 of 3
# Warmup Iteration   1: 52.137 ns/op
# Warmup Iteration   2: 52.120 ns/op
# Warmup Iteration   3: 51.723 ns/op
Iteration   1: 51.860 ns/op
Iteration   2: 52.653 ns/op
Iteration   3: 52.718 ns/op
Iteration   4: 52.849 ns/op
Iteration   5: 52.698 ns/op

# Run progress: 41.79% complete, ETA 05:42:10
# Fork: 2 of 3
# Warmup Iteration   1: 52.376 ns/op
# Warmup Iteration   2: 51.647 ns/op
# Warmup Iteration   3: 51.825 ns/op
Iteration   1: 51.727 ns/op
Iteration   2: 51.725 ns/op
Iteration   3: 51.728 ns/op
Iteration   4: 51.785 ns/op
Iteration   5: 51.719 ns/op

# Run progress: 41.81% complete, ETA 05:42:01
# Fork: 3 of 3
# Warmup Iteration   1: 51.926 ns/op
# Warmup Iteration   2: 51.563 ns/op
# Warmup Iteration   3: 51.511 ns/op
Iteration   1: 51.614 ns/op
Iteration   2: 51.912 ns/op
Iteration   3: 52.346 ns/op
Iteration   4: 52.262 ns/op
Iteration   5: 52.215 ns/op


Result "kotlin_benchmarks.array.sum.InlineOpt.Val_as_Val_fields":
  52.121 ±(99.9%) 0.469 ns/op [Average]
  (min, avg, max) = (51.614, 52.121, 52.849), stdev = 0.438
  CI (99.9%): [51.652, 52.589] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.sum.InlineOpt.Val_as_Val_fields
# Parameters: (size = 1000000)

# Run progress: 41.84% complete, ETA 05:41:51
# Fork: 1 of 3
# Warmup Iteration   1: 762091.032 ns/op
# Warmup Iteration   2: 790413.153 ns/op
# Warmup Iteration   3: 793536.979 ns/op
Iteration   1: 797597.617 ns/op
Iteration   2: 780821.128 ns/op
Iteration   3: 686422.639 ns/op
Iteration   4: 719112.633 ns/op
Iteration   5: 762093.388 ns/op

# Run progress: 41.86% complete, ETA 05:41:43
# Fork: 2 of 3
# Warmup Iteration   1: 778687.934 ns/op
# Warmup Iteration   2: 780232.046 ns/op
# Warmup Iteration   3: 707621.061 ns/op
Iteration   1: 730017.308 ns/op
Iteration   2: 721862.924 ns/op
Iteration   3: 707235.052 ns/op
Iteration   4: 734614.969 ns/op
Iteration   5: 743279.617 ns/op

# Run progress: 41.89% complete, ETA 05:41:34
# Fork: 3 of 3
# Warmup Iteration   1: 766256.594 ns/op
# Warmup Iteration   2: 795721.095 ns/op
# Warmup Iteration   3: 803620.061 ns/op
Iteration   1: 800721.969 ns/op
Iteration   2: 732585.754 ns/op
Iteration   3: 725665.765 ns/op
Iteration   4: 716765.218 ns/op
Iteration   5: 797057.013 ns/op


Result "kotlin_benchmarks.array.sum.InlineOpt.Val_as_Val_fields":
  743723.533 ±(99.9%) 38179.167 ns/op [Average]
  (min, avg, max) = (686422.639, 743723.533, 800721.969), stdev = 35712.816
  CI (99.9%): [705544.366, 781902.700] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.sum.InlineOpt.Val_as_Val_sum
# Parameters: (size = 100)

# Run progress: 41.91% complete, ETA 05:41:25
# Fork: 1 of 3
# Warmup Iteration   1: 51.911 ns/op
# Warmup Iteration   2: 52.452 ns/op
# Warmup Iteration   3: 51.987 ns/op
Iteration   1: 51.704 ns/op
Iteration   2: 51.936 ns/op
Iteration   3: 52.573 ns/op
Iteration   4: 52.305 ns/op
Iteration   5: 51.788 ns/op

# Run progress: 41.94% complete, ETA 05:41:15
# Fork: 2 of 3
# Warmup Iteration   1: 52.343 ns/op
# Warmup Iteration   2: 51.571 ns/op
# Warmup Iteration   3: 51.779 ns/op
Iteration   1: 51.719 ns/op
Iteration   2: 51.743 ns/op
Iteration   3: 51.734 ns/op
Iteration   4: 52.211 ns/op
Iteration   5: 51.812 ns/op

# Run progress: 41.96% complete, ETA 05:41:06
# Fork: 3 of 3
# Warmup Iteration   1: 52.410 ns/op
# Warmup Iteration   2: 52.020 ns/op
# Warmup Iteration   3: 51.781 ns/op
Iteration   1: 51.747 ns/op
Iteration   2: 52.797 ns/op
Iteration   3: 52.456 ns/op
Iteration   4: 51.797 ns/op
Iteration   5: 51.875 ns/op


Result "kotlin_benchmarks.array.sum.InlineOpt.Val_as_Val_sum":
  52.013 ±(99.9%) 0.385 ns/op [Average]
  (min, avg, max) = (51.704, 52.013, 52.797), stdev = 0.360
  CI (99.9%): [51.628, 52.398] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.sum.InlineOpt.Val_as_Val_sum
# Parameters: (size = 1000000)

# Run progress: 41.99% complete, ETA 05:40:57
# Fork: 1 of 3
# Warmup Iteration   1: 816343.060 ns/op
# Warmup Iteration   2: 799607.385 ns/op
# Warmup Iteration   3: 742476.028 ns/op
Iteration   1: 710245.603 ns/op
Iteration   2: 744239.529 ns/op
Iteration   3: 754055.970 ns/op
Iteration   4: 811119.683 ns/op
Iteration   5: 787912.668 ns/op

# Run progress: 42.01% complete, ETA 05:40:48
# Fork: 2 of 3
# Warmup Iteration   1: 701408.490 ns/op
# Warmup Iteration   2: 713242.992 ns/op
# Warmup Iteration   3: 711312.559 ns/op
Iteration   1: 713426.377 ns/op
Iteration   2: 697227.657 ns/op
Iteration   3: 749791.574 ns/op
Iteration   4: 776979.521 ns/op
Iteration   5: 802752.184 ns/op

# Run progress: 42.03% complete, ETA 05:40:39
# Fork: 3 of 3
# Warmup Iteration   1: 829997.777 ns/op
# Warmup Iteration   2: 823660.656 ns/op
# Warmup Iteration   3: 725227.710 ns/op
Iteration   1: 703474.529 ns/op
Iteration   2: 732998.999 ns/op
Iteration   3: 779165.285 ns/op
Iteration   4: 850820.497 ns/op
Iteration   5: 863894.351 ns/op


Result "kotlin_benchmarks.array.sum.InlineOpt.Val_as_Val_sum":
  765206.962 ±(99.9%) 55261.603 ns/op [Average]
  (min, avg, max) = (697227.657, 765206.962, 863894.351), stdev = 51691.738
  CI (99.9%): [709945.359, 820468.565] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.sum.Primitive128int.sum
# Parameters: (size = 100)

# Run progress: 42.06% complete, ETA 05:40:30
# Fork: 1 of 3
# Warmup Iteration   1: 108.343 ns/op
# Warmup Iteration   2: 102.569 ns/op
# Warmup Iteration   3: 102.491 ns/op
Iteration   1: 102.655 ns/op
Iteration   2: 102.687 ns/op
Iteration   3: 102.725 ns/op
Iteration   4: 102.649 ns/op
Iteration   5: 102.742 ns/op

# Run progress: 42.08% complete, ETA 05:40:21
# Fork: 2 of 3
# Warmup Iteration   1: 103.708 ns/op
# Warmup Iteration   2: 102.840 ns/op
# Warmup Iteration   3: 102.874 ns/op
Iteration   1: 102.687 ns/op
Iteration   2: 103.080 ns/op
Iteration   3: 102.635 ns/op
Iteration   4: 103.682 ns/op
Iteration   5: 104.468 ns/op

# Run progress: 42.11% complete, ETA 05:40:12
# Fork: 3 of 3
# Warmup Iteration   1: 104.799 ns/op
# Warmup Iteration   2: 103.719 ns/op
# Warmup Iteration   3: 103.958 ns/op
Iteration   1: 103.397 ns/op
Iteration   2: 102.871 ns/op
Iteration   3: 101.370 ns/op
Iteration   4: 120.425 ns/op
Iteration   5: 214.136 ns/op


Result "kotlin_benchmarks.array.sum.Primitive128int.sum":
  111.481 ±(99.9%) 30.749 ns/op [Average]
  (min, avg, max) = (101.370, 111.481, 214.136), stdev = 28.763
  CI (99.9%): [80.732, 142.230] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.sum.Primitive128int.sum
# Parameters: (size = 1000000)

# Run progress: 42.13% complete, ETA 05:40:03
# Fork: 1 of 3
# Warmup Iteration   1: 2616853.088 ns/op
# Warmup Iteration   2: 2587830.541 ns/op
# Warmup Iteration   3: 2587005.754 ns/op
Iteration   1: 2587046.248 ns/op
Iteration   2: 2590235.577 ns/op
Iteration   3: 2589640.746 ns/op
Iteration   4: 2596431.197 ns/op
Iteration   5: 2587832.905 ns/op

# Run progress: 42.16% complete, ETA 05:39:54
# Fork: 2 of 3
# Warmup Iteration   1: 2606299.204 ns/op
# Warmup Iteration   2: 2595569.338 ns/op
# Warmup Iteration   3: 2588008.441 ns/op
Iteration   1: 2587651.749 ns/op
Iteration   2: 2588078.526 ns/op
Iteration   3: 2584550.087 ns/op
Iteration   4: 2622406.169 ns/op
Iteration   5: 2587075.343 ns/op

# Run progress: 42.18% complete, ETA 05:39:46
# Fork: 3 of 3
# Warmup Iteration   1: 2609871.745 ns/op
# Warmup Iteration   2: 2586108.696 ns/op
# Warmup Iteration   3: 2560952.111 ns/op
Iteration   1: 2496506.841 ns/op
Iteration   2: 2512680.175 ns/op
Iteration   3: 2582793.048 ns/op
Iteration   4: 2586850.279 ns/op
Iteration   5: 2587355.711 ns/op


Result "kotlin_benchmarks.array.sum.Primitive128int.sum":
  2579142.307 ±(99.9%) 34014.211 ns/op [Average]
  (min, avg, max) = (2496506.841, 2579142.307, 2622406.169), stdev = 31816.914
  CI (99.9%): [2545128.096, 2613156.517] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.sum.Primitive32int.sum
# Parameters: (size = 100)

# Run progress: 42.21% complete, ETA 05:39:37
# Fork: 1 of 3
# Warmup Iteration   1: 35.652 ns/op
# Warmup Iteration   2: 35.152 ns/op
# Warmup Iteration   3: 35.152 ns/op
Iteration   1: 35.182 ns/op
Iteration   2: 35.141 ns/op
Iteration   3: 23.160 ns/op
Iteration   4: 16.847 ns/op
Iteration   5: 16.852 ns/op

# Run progress: 42.23% complete, ETA 05:39:28
# Fork: 2 of 3
# Warmup Iteration   1: 17.048 ns/op
# Warmup Iteration   2: 16.871 ns/op
# Warmup Iteration   3: 16.845 ns/op
Iteration   1: 16.939 ns/op
Iteration   2: 16.945 ns/op
Iteration   3: 16.890 ns/op
Iteration   4: 16.914 ns/op
Iteration   5: 17.164 ns/op

# Run progress: 42.25% complete, ETA 05:39:19
# Fork: 3 of 3
# Warmup Iteration   1: 17.028 ns/op
# Warmup Iteration   2: 16.859 ns/op
# Warmup Iteration   3: 16.953 ns/op
Iteration   1: 16.924 ns/op
Iteration   2: 16.842 ns/op
Iteration   3: 16.840 ns/op
Iteration   4: 16.851 ns/op
Iteration   5: 16.837 ns/op


Result "kotlin_benchmarks.array.sum.Primitive32int.sum":
  19.755 ±(99.9%) 6.905 ns/op [Average]
  (min, avg, max) = (16.837, 19.755, 35.182), stdev = 6.458
  CI (99.9%): [12.851, 26.660] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.sum.Primitive32int.sum
# Parameters: (size = 1000000)

# Run progress: 42.28% complete, ETA 05:39:10
# Fork: 1 of 3
# Warmup Iteration   1: 317103.931 ns/op
# Warmup Iteration   2: 312602.674 ns/op
# Warmup Iteration   3: 312287.172 ns/op
Iteration   1: 310902.717 ns/op
Iteration   2: 310019.600 ns/op
Iteration   3: 312586.195 ns/op
Iteration   4: 311750.412 ns/op
Iteration   5: 315814.390 ns/op

# Run progress: 42.30% complete, ETA 05:39:01
# Fork: 2 of 3
# Warmup Iteration   1: 319297.277 ns/op
# Warmup Iteration   2: 311166.808 ns/op
# Warmup Iteration   3: 311369.335 ns/op
Iteration   1: 312675.239 ns/op
Iteration   2: 310117.787 ns/op
Iteration   3: 310233.121 ns/op
Iteration   4: 311659.888 ns/op
Iteration   5: 310206.696 ns/op

# Run progress: 42.33% complete, ETA 05:38:52
# Fork: 3 of 3
# Warmup Iteration   1: 311913.246 ns/op
# Warmup Iteration   2: 311033.649 ns/op
# Warmup Iteration   3: 309992.764 ns/op
Iteration   1: 310057.832 ns/op
Iteration   2: 315383.454 ns/op
Iteration   3: 310751.593 ns/op
Iteration   4: 309674.222 ns/op
Iteration   5: 317197.214 ns/op


Result "kotlin_benchmarks.array.sum.Primitive32int.sum":
  311935.357 ±(99.9%) 2550.260 ns/op [Average]
  (min, avg, max) = (309674.222, 311935.357, 317197.214), stdev = 2385.515
  CI (99.9%): [309385.097, 314485.618] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.sum.Primitive64byte.sum
# Parameters: (size = 100)

# Run progress: 42.35% complete, ETA 05:38:43
# Fork: 1 of 3
# Warmup Iteration   1: 458.243 ns/op
# Warmup Iteration   2: 452.271 ns/op
# Warmup Iteration   3: 569.058 ns/op
Iteration   1: 451.085 ns/op
Iteration   2: 463.396 ns/op
Iteration   3: 470.206 ns/op
Iteration   4: 452.692 ns/op
Iteration   5: 455.744 ns/op

# Run progress: 42.38% complete, ETA 05:38:33
# Fork: 2 of 3
# Warmup Iteration   1: 461.674 ns/op
# Warmup Iteration   2: 452.887 ns/op
# Warmup Iteration   3: 452.318 ns/op
Iteration   1: 451.882 ns/op
Iteration   2: 452.549 ns/op
Iteration   3: 450.025 ns/op
Iteration   4: 450.436 ns/op
Iteration   5: 448.300 ns/op

# Run progress: 42.40% complete, ETA 05:38:24
# Fork: 3 of 3
# Warmup Iteration   1: 454.114 ns/op
# Warmup Iteration   2: 452.992 ns/op
# Warmup Iteration   3: 465.504 ns/op
Iteration   1: 452.560 ns/op
Iteration   2: 452.235 ns/op
Iteration   3: 451.324 ns/op
Iteration   4: 452.066 ns/op
Iteration   5: 453.048 ns/op


Result "kotlin_benchmarks.array.sum.Primitive64byte.sum":
  453.837 ±(99.9%) 6.050 ns/op [Average]
  (min, avg, max) = (448.300, 453.837, 470.206), stdev = 5.659
  CI (99.9%): [447.787, 459.887] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.sum.Primitive64byte.sum
# Parameters: (size = 1000000)

# Run progress: 42.43% complete, ETA 05:38:15
# Fork: 1 of 3
# Warmup Iteration   1: 4972726.716 ns/op
# Warmup Iteration   2: 4960035.300 ns/op
# Warmup Iteration   3: 4976638.956 ns/op
Iteration   1: 5007786.900 ns/op
Iteration   2: 5013418.317 ns/op
Iteration   3: 5063914.362 ns/op
Iteration   4: 4986972.906 ns/op
Iteration   5: 4943756.502 ns/op

# Run progress: 42.45% complete, ETA 05:38:06
# Fork: 2 of 3
# Warmup Iteration   1: 4961828.838 ns/op
# Warmup Iteration   2: 4948394.911 ns/op
# Warmup Iteration   3: 4954714.873 ns/op
Iteration   1: 4955821.837 ns/op
Iteration   2: 4984725.571 ns/op
Iteration   3: 5031007.672 ns/op
Iteration   4: 4966019.391 ns/op
Iteration   5: 4967180.010 ns/op

# Run progress: 42.48% complete, ETA 05:37:57
# Fork: 3 of 3
# Warmup Iteration   1: 4977206.690 ns/op
# Warmup Iteration   2: 4952268.995 ns/op
# Warmup Iteration   3: 4977611.453 ns/op
Iteration   1: 5001765.267 ns/op
Iteration   2: 5000986.802 ns/op
Iteration   3: 4987724.218 ns/op
Iteration   4: 4975339.667 ns/op
Iteration   5: 5028899.667 ns/op


Result "kotlin_benchmarks.array.sum.Primitive64byte.sum":
  4994354.606 ±(99.9%) 33995.873 ns/op [Average]
  (min, avg, max) = (4943756.502, 4994354.606, 5063914.362), stdev = 31799.761
  CI (99.9%): [4960358.733, 5028350.479] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.sum.Primitive64int.sum
# Parameters: (size = 100)

# Run progress: 42.50% complete, ETA 05:37:48
# Fork: 1 of 3
# Warmup Iteration   1: 41.876 ns/op
# Warmup Iteration   2: 41.892 ns/op
# Warmup Iteration   3: 41.608 ns/op
Iteration   1: 41.597 ns/op
Iteration   2: 41.600 ns/op
Iteration   3: 41.612 ns/op
Iteration   4: 41.584 ns/op
Iteration   5: 41.899 ns/op

# Run progress: 42.52% complete, ETA 05:37:39
# Fork: 2 of 3
# Warmup Iteration   1: 41.941 ns/op
# Warmup Iteration   2: 41.936 ns/op
# Warmup Iteration   3: 42.307 ns/op
Iteration   1: 41.911 ns/op
Iteration   2: 42.253 ns/op
Iteration   3: 41.897 ns/op
Iteration   4: 41.476 ns/op
Iteration   5: 41.553 ns/op

# Run progress: 42.55% complete, ETA 05:37:30
# Fork: 3 of 3
# Warmup Iteration   1: 42.390 ns/op
# Warmup Iteration   2: 41.637 ns/op
# Warmup Iteration   3: 41.628 ns/op
Iteration   1: 42.014 ns/op
Iteration   2: 41.981 ns/op
Iteration   3: 41.589 ns/op
Iteration   4: 41.615 ns/op
Iteration   5: 41.634 ns/op


Result "kotlin_benchmarks.array.sum.Primitive64int.sum":
  41.748 ±(99.9%) 0.241 ns/op [Average]
  (min, avg, max) = (41.476, 41.748, 42.253), stdev = 0.225
  CI (99.9%): [41.507, 41.989] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.sum.Primitive64int.sum
# Parameters: (size = 1000000)

# Run progress: 42.57% complete, ETA 05:37:21
# Fork: 1 of 3
# Warmup Iteration   1: 623602.268 ns/op
# Warmup Iteration   2: 629092.803 ns/op
# Warmup Iteration   3: 633109.352 ns/op
Iteration   1: 634937.959 ns/op
Iteration   2: 639191.941 ns/op
Iteration   3: 640542.538 ns/op
Iteration   4: 638872.285 ns/op
Iteration   5: 622613.693 ns/op

# Run progress: 42.60% complete, ETA 05:37:12
# Fork: 2 of 3
# Warmup Iteration   1: 622971.358 ns/op
# Warmup Iteration   2: 620558.482 ns/op
# Warmup Iteration   3: 620394.592 ns/op
Iteration   1: 620539.652 ns/op
Iteration   2: 620763.130 ns/op
Iteration   3: 621758.834 ns/op
Iteration   4: 621680.615 ns/op
Iteration   5: 620255.298 ns/op

# Run progress: 42.62% complete, ETA 05:37:03
# Fork: 3 of 3
# Warmup Iteration   1: 622899.892 ns/op
# Warmup Iteration   2: 626511.916 ns/op
# Warmup Iteration   3: 632472.117 ns/op
Iteration   1: 632322.244 ns/op
Iteration   2: 633019.441 ns/op
Iteration   3: 625612.152 ns/op
Iteration   4: 621501.061 ns/op
Iteration   5: 622575.617 ns/op


Result "kotlin_benchmarks.array.sum.Primitive64int.sum":
  627745.764 ±(99.9%) 8305.980 ns/op [Average]
  (min, avg, max) = (620255.298, 627745.764, 640542.538), stdev = 7769.419
  CI (99.9%): [619439.784, 636051.744] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.sum.Primitive64long.sum0
# Parameters: (size = 100)

# Run progress: 42.65% complete, ETA 05:36:54
# Fork: 1 of 3
# Warmup Iteration   1: 17.464 ns/op
# Warmup Iteration   2: 17.025 ns/op
# Warmup Iteration   3: 17.044 ns/op
Iteration   1: 17.023 ns/op
Iteration   2: 17.020 ns/op
Iteration   3: 17.014 ns/op
Iteration   4: 17.019 ns/op
Iteration   5: 17.030 ns/op

# Run progress: 42.67% complete, ETA 05:36:45
# Fork: 2 of 3
# Warmup Iteration   1: 17.114 ns/op
# Warmup Iteration   2: 17.019 ns/op
# Warmup Iteration   3: 16.855 ns/op
Iteration   1: 16.858 ns/op
Iteration   2: 16.853 ns/op
Iteration   3: 16.939 ns/op
Iteration   4: 17.028 ns/op
Iteration   5: 16.866 ns/op

# Run progress: 42.70% complete, ETA 05:36:36
# Fork: 3 of 3
# Warmup Iteration   1: 16.972 ns/op
# Warmup Iteration   2: 16.862 ns/op
# Warmup Iteration   3: 16.869 ns/op
Iteration   1: 16.859 ns/op
Iteration   2: 16.985 ns/op
Iteration   3: 16.868 ns/op
Iteration   4: 17.046 ns/op
Iteration   5: 16.861 ns/op


Result "kotlin_benchmarks.array.sum.Primitive64long.sum0":
  16.951 ±(99.9%) 0.086 ns/op [Average]
  (min, avg, max) = (16.853, 16.951, 17.046), stdev = 0.080
  CI (99.9%): [16.865, 17.037] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.sum.Primitive64long.sum0
# Parameters: (size = 1000000)

# Run progress: 42.72% complete, ETA 05:36:27
# Fork: 1 of 3
# Warmup Iteration   1: 316411.017 ns/op
# Warmup Iteration   2: 315102.438 ns/op
# Warmup Iteration   3: 319089.615 ns/op
Iteration   1: 316037.756 ns/op
Iteration   2: 315622.160 ns/op
Iteration   3: 311211.792 ns/op
Iteration   4: 311537.400 ns/op
Iteration   5: 312875.220 ns/op

# Run progress: 42.75% complete, ETA 05:36:18
# Fork: 2 of 3
# Warmup Iteration   1: 311390.740 ns/op
# Warmup Iteration   2: 311877.856 ns/op
# Warmup Iteration   3: 311031.404 ns/op
Iteration   1: 310455.568 ns/op
Iteration   2: 310344.291 ns/op
Iteration   3: 310561.430 ns/op
Iteration   4: 310171.157 ns/op
Iteration   5: 310068.089 ns/op

# Run progress: 42.77% complete, ETA 05:36:08
# Fork: 3 of 3
# Warmup Iteration   1: 312361.154 ns/op
# Warmup Iteration   2: 317539.125 ns/op
# Warmup Iteration   3: 316792.229 ns/op
Iteration   1: 313719.565 ns/op
Iteration   2: 311878.255 ns/op
Iteration   3: 312389.929 ns/op
Iteration   4: 310385.920 ns/op
Iteration   5: 310476.912 ns/op


Result "kotlin_benchmarks.array.sum.Primitive64long.sum0":
  311849.029 ±(99.9%) 2080.156 ns/op [Average]
  (min, avg, max) = (310068.089, 311849.029, 316037.756), stdev = 1945.779
  CI (99.9%): [309768.873, 313929.186] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.sum.Primitive64long.sum1
# Parameters: (size = 100)

# Run progress: 42.79% complete, ETA 05:35:59
# Fork: 1 of 3
# Warmup Iteration   1: 16.945 ns/op
# Warmup Iteration   2: 16.853 ns/op
# Warmup Iteration   3: 16.867 ns/op
Iteration   1: 16.857 ns/op
Iteration   2: 16.866 ns/op
Iteration   3: 16.860 ns/op
Iteration   4: 16.858 ns/op
Iteration   5: 16.858 ns/op

# Run progress: 42.82% complete, ETA 05:35:50
# Fork: 2 of 3
# Warmup Iteration   1: 16.988 ns/op
# Warmup Iteration   2: 17.044 ns/op
# Warmup Iteration   3: 17.045 ns/op
Iteration   1: 16.977 ns/op
Iteration   2: 16.872 ns/op
Iteration   3: 17.159 ns/op
Iteration   4: 16.866 ns/op
Iteration   5: 16.863 ns/op

# Run progress: 42.84% complete, ETA 05:35:41
# Fork: 3 of 3
# Warmup Iteration   1: 16.951 ns/op
# Warmup Iteration   2: 16.920 ns/op
# Warmup Iteration   3: 16.860 ns/op
Iteration   1: 17.211 ns/op
Iteration   2: 16.861 ns/op
Iteration   3: 16.923 ns/op
Iteration   4: 17.048 ns/op
Iteration   5: 16.858 ns/op


Result "kotlin_benchmarks.array.sum.Primitive64long.sum1":
  16.929 ±(99.9%) 0.126 ns/op [Average]
  (min, avg, max) = (16.857, 16.929, 17.211), stdev = 0.118
  CI (99.9%): [16.803, 17.055] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.array.sum.Primitive64long.sum1
# Parameters: (size = 1000000)

# Run progress: 42.87% complete, ETA 05:35:32
# Fork: 1 of 3
# Warmup Iteration   1: 311650.721 ns/op
# Warmup Iteration   2: 311877.796 ns/op
# Warmup Iteration   3: 317131.797 ns/op
Iteration   1: 311551.137 ns/op
Iteration   2: 311245.183 ns/op
Iteration   3: 310347.343 ns/op
Iteration   4: 310335.561 ns/op
Iteration   5: 310316.091 ns/op

# Run progress: 42.89% complete, ETA 05:35:23
# Fork: 2 of 3
# Warmup Iteration   1: 312144.675 ns/op
# Warmup Iteration   2: 311321.166 ns/op
# Warmup Iteration   3: 310589.190 ns/op
Iteration   1: 311327.055 ns/op
Iteration   2: 310042.642 ns/op
Iteration   3: 310090.128 ns/op
Iteration   4: 314868.779 ns/op
Iteration   5: 313764.312 ns/op

# Run progress: 42.92% complete, ETA 05:35:14
# Fork: 3 of 3
# Warmup Iteration   1: 314634.216 ns/op
# Warmup Iteration   2: 309482.281 ns/op
# Warmup Iteration   3: 310672.291 ns/op
Iteration   1: 311054.854 ns/op
Iteration   2: 310516.777 ns/op
Iteration   3: 310245.795 ns/op
Iteration   4: 311065.311 ns/op
Iteration   5: 310241.695 ns/op


Result "kotlin_benchmarks.array.sum.Primitive64long.sum1":
  311134.177 ±(99.9%) 1492.147 ns/op [Average]
  (min, avg, max) = (310042.642, 311134.177, 314868.779), stdev = 1395.755
  CI (99.9%): [309642.031, 312626.324] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.callconv.Inline64byte.Q64byte_args1_targets0

# Run progress: 42.94% complete, ETA 05:35:05
# Fork: 1 of 3
# Warmup Iteration   1: 0.199 ns/op
# Warmup Iteration   2: 0.197 ns/op
# Warmup Iteration   3: 0.196 ns/op
Iteration   1: 0.197 ns/op
Iteration   2: 0.197 ns/op
Iteration   3: 0.199 ns/op
Iteration   4: 0.196 ns/op
Iteration   5: 0.197 ns/op

# Run progress: 42.97% complete, ETA 05:34:56
# Fork: 2 of 3
# Warmup Iteration   1: 0.202 ns/op
# Warmup Iteration   2: 0.199 ns/op
# Warmup Iteration   3: 0.198 ns/op
Iteration   1: 0.197 ns/op
Iteration   2: 0.197 ns/op
Iteration   3: 0.197 ns/op
Iteration   4: 0.197 ns/op
Iteration   5: 0.196 ns/op

# Run progress: 42.99% complete, ETA 05:34:47
# Fork: 3 of 3
# Warmup Iteration   1: 0.199 ns/op
# Warmup Iteration   2: 0.198 ns/op
# Warmup Iteration   3: 0.197 ns/op
Iteration   1: 0.197 ns/op
Iteration   2: 0.196 ns/op
Iteration   3: 0.197 ns/op
Iteration   4: 0.198 ns/op
Iteration   5: 0.200 ns/op


Result "kotlin_benchmarks.callconv.Inline64byte.Q64byte_args1_targets0":
  0.197 ±(99.9%) 0.001 ns/op [Average]
  (min, avg, max) = (0.196, 0.197, 0.200), stdev = 0.001
  CI (99.9%): [0.196, 0.198] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.callconv.Inline64byte.Q64byte_args1_targets1

# Run progress: 43.01% complete, ETA 05:34:38
# Fork: 1 of 3
# Warmup Iteration   1: 0.203 ns/op
# Warmup Iteration   2: 0.196 ns/op
# Warmup Iteration   3: 0.197 ns/op
Iteration   1: 0.197 ns/op
Iteration   2: 0.197 ns/op
Iteration   3: 0.197 ns/op
Iteration   4: 0.196 ns/op
Iteration   5: 0.197 ns/op

# Run progress: 43.04% complete, ETA 05:34:29
# Fork: 2 of 3
# Warmup Iteration   1: 0.199 ns/op
# Warmup Iteration   2: 0.199 ns/op
# Warmup Iteration   3: 0.197 ns/op
Iteration   1: 0.198 ns/op
Iteration   2: 0.201 ns/op
Iteration   3: 0.197 ns/op
Iteration   4: 0.197 ns/op
Iteration   5: 0.198 ns/op

# Run progress: 43.06% complete, ETA 05:34:20
# Fork: 3 of 3
# Warmup Iteration   1: 0.202 ns/op
# Warmup Iteration   2: 0.198 ns/op
# Warmup Iteration   3: 0.199 ns/op
Iteration   1: 0.197 ns/op
Iteration   2: 0.197 ns/op
Iteration   3: 0.197 ns/op
Iteration   4: 0.198 ns/op
Iteration   5: 0.197 ns/op


Result "kotlin_benchmarks.callconv.Inline64byte.Q64byte_args1_targets1":
  0.197 ±(99.9%) 0.001 ns/op [Average]
  (min, avg, max) = (0.196, 0.197, 0.201), stdev = 0.001
  CI (99.9%): [0.196, 0.198] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.callconv.Inline64byte.Q64byte_args1_targets2

# Run progress: 43.09% complete, ETA 05:34:11
# Fork: 1 of 3
# Warmup Iteration   1: 0.355 ns/op
# Warmup Iteration   2: 0.349 ns/op
# Warmup Iteration   3: 0.351 ns/op
Iteration   1: 0.352 ns/op
Iteration   2: 0.351 ns/op
Iteration   3: 0.352 ns/op
Iteration   4: 0.352 ns/op
Iteration   5: 0.354 ns/op

# Run progress: 43.11% complete, ETA 05:34:02
# Fork: 2 of 3
# Warmup Iteration   1: 0.409 ns/op
# Warmup Iteration   2: 0.349 ns/op
# Warmup Iteration   3: 0.348 ns/op
Iteration   1: 0.348 ns/op
Iteration   2: 0.349 ns/op
Iteration   3: 0.348 ns/op
Iteration   4: 0.350 ns/op
Iteration   5: 0.348 ns/op

# Run progress: 43.14% complete, ETA 05:33:53
# Fork: 3 of 3
# Warmup Iteration   1: 0.357 ns/op
# Warmup Iteration   2: 0.354 ns/op
# Warmup Iteration   3: 0.348 ns/op
Iteration   1: 0.354 ns/op
Iteration   2: 0.354 ns/op
Iteration   3: 0.349 ns/op
Iteration   4: 0.348 ns/op
Iteration   5: 0.349 ns/op


Result "kotlin_benchmarks.callconv.Inline64byte.Q64byte_args1_targets2":
  0.351 ±(99.9%) 0.002 ns/op [Average]
  (min, avg, max) = (0.348, 0.351, 0.354), stdev = 0.002
  CI (99.9%): [0.348, 0.353] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.callconv.Inline64byte.Q64byte_args1_targets3

# Run progress: 43.16% complete, ETA 05:33:44
# Fork: 1 of 3
# Warmup Iteration   1: 106.164 ns/op
# Warmup Iteration   2: 175.372 ns/op
# Warmup Iteration   3: 175.453 ns/op
Iteration   1: 175.699 ns/op
Iteration   2: 175.327 ns/op
Iteration   3: 175.510 ns/op
Iteration   4: 175.528 ns/op
Iteration   5: 175.152 ns/op

# Run progress: 43.19% complete, ETA 05:33:35
# Fork: 2 of 3
# Warmup Iteration   1: 165.889 ns/op
# Warmup Iteration   2: 176.531 ns/op
# Warmup Iteration   3: 178.859 ns/op
Iteration   1: 179.735 ns/op
Iteration   2: 178.641 ns/op
Iteration   3: 177.960 ns/op
Iteration   4: 177.710 ns/op
Iteration   5: 177.031 ns/op

# Run progress: 43.21% complete, ETA 05:33:26
# Fork: 3 of 3
# Warmup Iteration   1: 174.640 ns/op
# Warmup Iteration   2: 174.734 ns/op
# Warmup Iteration   3: 174.883 ns/op
Iteration   1: 175.801 ns/op
Iteration   2: 174.845 ns/op
Iteration   3: 175.406 ns/op
Iteration   4: 191.233 ns/op
Iteration   5: 180.169 ns/op


Result "kotlin_benchmarks.callconv.Inline64byte.Q64byte_args1_targets3":
  177.716 ±(99.9%) 4.403 ns/op [Average]
  (min, avg, max) = (174.845, 177.716, 191.233), stdev = 4.118
  CI (99.9%): [173.314, 182.119] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.callconv.Inline64byte.Q64byte_args2_targets0

# Run progress: 43.24% complete, ETA 05:33:17
# Fork: 1 of 3
# Warmup Iteration   1: 0.425 ns/op
# Warmup Iteration   2: 0.415 ns/op
# Warmup Iteration   3: 0.414 ns/op
Iteration   1: 0.422 ns/op
Iteration   2: 0.472 ns/op
Iteration   3: 0.519 ns/op
Iteration   4: 0.603 ns/op
Iteration   5: 0.693 ns/op

# Run progress: 43.26% complete, ETA 05:33:09
# Fork: 2 of 3
# Warmup Iteration   1: 0.944 ns/op
# Warmup Iteration   2: 0.895 ns/op
# Warmup Iteration   3: 0.520 ns/op
Iteration   1: 0.476 ns/op
Iteration   2: 0.411 ns/op
Iteration   3: 0.295 ns/op
Iteration   4: 0.199 ns/op
Iteration   5: 0.198 ns/op

# Run progress: 43.28% complete, ETA 05:33:00
# Fork: 3 of 3
# Warmup Iteration   1: 0.201 ns/op
# Warmup Iteration   2: 0.199 ns/op
# Warmup Iteration   3: 0.198 ns/op
Iteration   1: 0.199 ns/op
Iteration   2: 0.198 ns/op
Iteration   3: 0.199 ns/op
Iteration   4: 0.199 ns/op
Iteration   5: 0.198 ns/op


Result "kotlin_benchmarks.callconv.Inline64byte.Q64byte_args2_targets0":
  0.352 ±(99.9%) 0.184 ns/op [Average]
  (min, avg, max) = (0.198, 0.352, 0.693), stdev = 0.172
  CI (99.9%): [0.168, 0.536] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.callconv.Inline64byte.Q64byte_args2_targets1

# Run progress: 43.31% complete, ETA 05:32:51
# Fork: 1 of 3
# Warmup Iteration   1: 0.201 ns/op
# Warmup Iteration   2: 0.199 ns/op
# Warmup Iteration   3: 0.198 ns/op
Iteration   1: 0.199 ns/op
Iteration   2: 0.198 ns/op
Iteration   3: 0.198 ns/op
Iteration   4: 0.199 ns/op
Iteration   5: 0.200 ns/op

# Run progress: 43.33% complete, ETA 05:32:42
# Fork: 2 of 3
# Warmup Iteration   1: 0.201 ns/op
# Warmup Iteration   2: 0.198 ns/op
# Warmup Iteration   3: 0.200 ns/op
Iteration   1: 0.198 ns/op
Iteration   2: 0.199 ns/op
Iteration   3: 0.199 ns/op
Iteration   4: 0.198 ns/op
Iteration   5: 0.198 ns/op

# Run progress: 43.36% complete, ETA 05:32:33
# Fork: 3 of 3
# Warmup Iteration   1: 0.201 ns/op
# Warmup Iteration   2: 0.200 ns/op
# Warmup Iteration   3: 0.199 ns/op
Iteration   1: 0.199 ns/op
Iteration   2: 0.200 ns/op
Iteration   3: 0.201 ns/op
Iteration   4: 0.199 ns/op
Iteration   5: 0.198 ns/op


Result "kotlin_benchmarks.callconv.Inline64byte.Q64byte_args2_targets1":
  0.199 ±(99.9%) 0.001 ns/op [Average]
  (min, avg, max) = (0.198, 0.199, 0.201), stdev = 0.001
  CI (99.9%): [0.198, 0.200] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.callconv.Inline64byte.Q64byte_args2_targets2

# Run progress: 43.38% complete, ETA 05:32:24
# Fork: 1 of 3
# Warmup Iteration   1: 0.354 ns/op
# Warmup Iteration   2: 0.354 ns/op
# Warmup Iteration   3: 0.350 ns/op
Iteration   1: 0.349 ns/op
Iteration   2: 0.351 ns/op
Iteration   3: 0.356 ns/op
Iteration   4: 0.348 ns/op
Iteration   5: 0.350 ns/op

# Run progress: 43.41% complete, ETA 05:32:15
# Fork: 2 of 3
# Warmup Iteration   1: 0.357 ns/op
# Warmup Iteration   2: 0.349 ns/op
# Warmup Iteration   3: 0.354 ns/op
Iteration   1: 0.351 ns/op
Iteration   2: 0.349 ns/op
Iteration   3: 0.352 ns/op
Iteration   4: 0.352 ns/op
Iteration   5: 0.351 ns/op

# Run progress: 43.43% complete, ETA 05:32:06
# Fork: 3 of 3
# Warmup Iteration   1: 0.358 ns/op
# Warmup Iteration   2: 0.355 ns/op
# Warmup Iteration   3: 0.352 ns/op
Iteration   1: 0.349 ns/op
Iteration   2: 0.349 ns/op
Iteration   3: 0.348 ns/op
Iteration   4: 0.349 ns/op
Iteration   5: 0.349 ns/op


Result "kotlin_benchmarks.callconv.Inline64byte.Q64byte_args2_targets2":
  0.350 ±(99.9%) 0.002 ns/op [Average]
  (min, avg, max) = (0.348, 0.350, 0.356), stdev = 0.002
  CI (99.9%): [0.348, 0.352] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.callconv.Inline64byte.Q64byte_args2_targets3

# Run progress: 43.46% complete, ETA 05:31:57
# Fork: 1 of 3
# Warmup Iteration   1: 88.404 ns/op
# Warmup Iteration   2: 90.970 ns/op
# Warmup Iteration   3: 94.269 ns/op
Iteration   1: 92.219 ns/op
Iteration   2: 92.765 ns/op
Iteration   3: 93.752 ns/op
Iteration   4: 93.872 ns/op
Iteration   5: 93.230 ns/op

# Run progress: 43.48% complete, ETA 05:31:48
# Fork: 2 of 3
# Warmup Iteration   1: 86.845 ns/op
# Warmup Iteration   2: 87.253 ns/op
# Warmup Iteration   3: 87.622 ns/op
Iteration   1: 88.342 ns/op
Iteration   2: 87.406 ns/op
Iteration   3: 87.560 ns/op
Iteration   4: 87.769 ns/op
Iteration   5: 87.696 ns/op

# Run progress: 43.50% complete, ETA 05:31:39
# Fork: 3 of 3
# Warmup Iteration   1: 85.547 ns/op
# Warmup Iteration   2: 87.853 ns/op
# Warmup Iteration   3: 88.200 ns/op
Iteration   1: 88.575 ns/op
Iteration   2: 88.713 ns/op
Iteration   3: 88.427 ns/op
Iteration   4: 88.340 ns/op
Iteration   5: 89.917 ns/op


Result "kotlin_benchmarks.callconv.Inline64byte.Q64byte_args2_targets3":
  89.906 ±(99.9%) 2.659 ns/op [Average]
  (min, avg, max) = (87.406, 89.906, 93.872), stdev = 2.487
  CI (99.9%): [87.247, 92.564] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.callconv.Inline64byte.Q64byte_args4_targets0

# Run progress: 43.53% complete, ETA 05:31:30
# Fork: 1 of 3
# Warmup Iteration   1: 0.207 ns/op
# Warmup Iteration   2: 0.202 ns/op
# Warmup Iteration   3: 0.202 ns/op
Iteration   1: 0.202 ns/op
Iteration   2: 0.202 ns/op
Iteration   3: 0.202 ns/op
Iteration   4: 0.203 ns/op
Iteration   5: 0.202 ns/op

# Run progress: 43.55% complete, ETA 05:31:21
# Fork: 2 of 3
# Warmup Iteration   1: 0.204 ns/op
# Warmup Iteration   2: 0.203 ns/op
# Warmup Iteration   3: 0.203 ns/op
Iteration   1: 0.202 ns/op
Iteration   2: 0.202 ns/op
Iteration   3: 0.201 ns/op
Iteration   4: 0.201 ns/op
Iteration   5: 0.202 ns/op

# Run progress: 43.58% complete, ETA 05:31:12
# Fork: 3 of 3
# Warmup Iteration   1: 0.204 ns/op
# Warmup Iteration   2: 0.202 ns/op
# Warmup Iteration   3: 0.207 ns/op
Iteration   1: 0.202 ns/op
Iteration   2: 0.202 ns/op
Iteration   3: 0.202 ns/op
Iteration   4: 0.202 ns/op
Iteration   5: 0.202 ns/op


Result "kotlin_benchmarks.callconv.Inline64byte.Q64byte_args4_targets0":
  0.202 ±(99.9%) 0.001 ns/op [Average]
  (min, avg, max) = (0.201, 0.202, 0.203), stdev = 0.001
  CI (99.9%): [0.201, 0.202] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.callconv.Inline64byte.Q64byte_args4_targets1

# Run progress: 43.60% complete, ETA 05:31:03
# Fork: 1 of 3
# Warmup Iteration   1: 0.214 ns/op
# Warmup Iteration   2: 0.204 ns/op
# Warmup Iteration   3: 0.203 ns/op
Iteration   1: 0.203 ns/op
Iteration   2: 0.207 ns/op
Iteration   3: 0.205 ns/op
Iteration   4: 0.206 ns/op
Iteration   5: 0.206 ns/op

# Run progress: 43.63% complete, ETA 05:30:54
# Fork: 2 of 3
# Warmup Iteration   1: 0.205 ns/op
# Warmup Iteration   2: 0.202 ns/op
# Warmup Iteration   3: 0.202 ns/op
Iteration   1: 0.204 ns/op
Iteration   2: 0.211 ns/op
Iteration   3: 0.202 ns/op
Iteration   4: 0.202 ns/op
Iteration   5: 0.202 ns/op

# Run progress: 43.65% complete, ETA 05:30:45
# Fork: 3 of 3
# Warmup Iteration   1: 0.211 ns/op
# Warmup Iteration   2: 0.204 ns/op
# Warmup Iteration   3: 0.203 ns/op
Iteration   1: 0.204 ns/op
Iteration   2: 0.203 ns/op
Iteration   3: 0.205 ns/op
Iteration   4: 0.206 ns/op
Iteration   5: 0.205 ns/op


Result "kotlin_benchmarks.callconv.Inline64byte.Q64byte_args4_targets1":
  0.205 ±(99.9%) 0.003 ns/op [Average]
  (min, avg, max) = (0.202, 0.205, 0.211), stdev = 0.002
  CI (99.9%): [0.202, 0.207] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.callconv.Inline64byte.Q64byte_args4_targets2

# Run progress: 43.68% complete, ETA 05:30:36
# Fork: 1 of 3
# Warmup Iteration   1: 0.363 ns/op
# Warmup Iteration   2: 0.352 ns/op
# Warmup Iteration   3: 0.352 ns/op
Iteration   1: 0.351 ns/op
Iteration   2: 0.351 ns/op
Iteration   3: 0.352 ns/op
Iteration   4: 0.352 ns/op
Iteration   5: 0.359 ns/op

# Run progress: 43.70% complete, ETA 05:30:27
# Fork: 2 of 3
# Warmup Iteration   1: 0.356 ns/op
# Warmup Iteration   2: 0.352 ns/op
# Warmup Iteration   3: 0.359 ns/op
Iteration   1: 0.359 ns/op
Iteration   2: 0.359 ns/op
Iteration   3: 0.359 ns/op
Iteration   4: 0.357 ns/op
Iteration   5: 0.352 ns/op

# Run progress: 43.73% complete, ETA 05:30:18
# Fork: 3 of 3
# Warmup Iteration   1: 0.357 ns/op
# Warmup Iteration   2: 0.352 ns/op
# Warmup Iteration   3: 0.351 ns/op
Iteration   1: 0.352 ns/op
Iteration   2: 0.351 ns/op
Iteration   3: 0.352 ns/op
Iteration   4: 0.352 ns/op
Iteration   5: 0.352 ns/op


Result "kotlin_benchmarks.callconv.Inline64byte.Q64byte_args4_targets2":
  0.354 ±(99.9%) 0.004 ns/op [Average]
  (min, avg, max) = (0.351, 0.354, 0.359), stdev = 0.003
  CI (99.9%): [0.350, 0.358] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.callconv.Inline64byte.Q64byte_args4_targets3

# Run progress: 43.75% complete, ETA 05:30:09
# Fork: 1 of 3
# Warmup Iteration   1: 99.066 ns/op
# Warmup Iteration   2: 99.587 ns/op
# Warmup Iteration   3: 100.274 ns/op
Iteration   1: 98.564 ns/op
Iteration   2: 97.568 ns/op
Iteration   3: 97.213 ns/op
Iteration   4: 97.771 ns/op
Iteration   5: 97.856 ns/op

# Run progress: 43.77% complete, ETA 05:30:00
# Fork: 2 of 3
# Warmup Iteration   1: 94.639 ns/op
# Warmup Iteration   2: 97.419 ns/op
# Warmup Iteration   3: 97.469 ns/op
Iteration   1: 97.982 ns/op
Iteration   2: 98.295 ns/op
Iteration   3: 97.690 ns/op
Iteration   4: 97.785 ns/op
Iteration   5: 97.941 ns/op

# Run progress: 43.80% complete, ETA 05:29:51
# Fork: 3 of 3
# Warmup Iteration   1: 96.841 ns/op
# Warmup Iteration   2: 98.633 ns/op
# Warmup Iteration   3: 98.858 ns/op
Iteration   1: 99.725 ns/op
Iteration   2: 100.505 ns/op
Iteration   3: 99.657 ns/op
Iteration   4: 98.269 ns/op
Iteration   5: 97.907 ns/op


Result "kotlin_benchmarks.callconv.Inline64byte.Q64byte_args4_targets3":
  98.315 ±(99.9%) 0.990 ns/op [Average]
  (min, avg, max) = (97.213, 98.315, 100.505), stdev = 0.926
  CI (99.9%): [97.325, 99.306] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.callconv.Inline64byte.Q64byte_args8_targets0

# Run progress: 43.82% complete, ETA 05:29:42
# Fork: 1 of 3
# Warmup Iteration   1: 0.218 ns/op
# Warmup Iteration   2: 0.210 ns/op
# Warmup Iteration   3: 0.210 ns/op
Iteration   1: 0.210 ns/op
Iteration   2: 0.210 ns/op
Iteration   3: 0.210 ns/op
Iteration   4: 0.211 ns/op
Iteration   5: 0.211 ns/op

# Run progress: 43.85% complete, ETA 05:29:33
# Fork: 2 of 3
# Warmup Iteration   1: 0.211 ns/op
# Warmup Iteration   2: 0.208 ns/op
# Warmup Iteration   3: 0.211 ns/op
Iteration   1: 0.211 ns/op
Iteration   2: 0.211 ns/op
Iteration   3: 0.208 ns/op
Iteration   4: 0.208 ns/op
Iteration   5: 0.208 ns/op

# Run progress: 43.87% complete, ETA 05:29:24
# Fork: 3 of 3
# Warmup Iteration   1: 0.212 ns/op
# Warmup Iteration   2: 0.209 ns/op
# Warmup Iteration   3: 0.209 ns/op
Iteration   1: 0.208 ns/op
Iteration   2: 0.208 ns/op
Iteration   3: 0.209 ns/op
Iteration   4: 0.209 ns/op
Iteration   5: 0.212 ns/op


Result "kotlin_benchmarks.callconv.Inline64byte.Q64byte_args8_targets0":
  0.210 ±(99.9%) 0.002 ns/op [Average]
  (min, avg, max) = (0.208, 0.210, 0.212), stdev = 0.001
  CI (99.9%): [0.208, 0.211] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.callconv.Inline64byte.Q64byte_args8_targets1

# Run progress: 43.90% complete, ETA 05:29:15
# Fork: 1 of 3
# Warmup Iteration   1: 0.216 ns/op
# Warmup Iteration   2: 0.211 ns/op
# Warmup Iteration   3: 0.209 ns/op
Iteration   1: 0.212 ns/op
Iteration   2: 0.210 ns/op
Iteration   3: 0.209 ns/op
Iteration   4: 0.208 ns/op
Iteration   5: 0.208 ns/op

# Run progress: 43.92% complete, ETA 05:29:06
# Fork: 2 of 3
# Warmup Iteration   1: 0.218 ns/op
# Warmup Iteration   2: 0.210 ns/op
# Warmup Iteration   3: 0.210 ns/op
Iteration   1: 0.210 ns/op
Iteration   2: 0.210 ns/op
Iteration   3: 0.210 ns/op
Iteration   4: 0.209 ns/op
Iteration   5: 0.210 ns/op

# Run progress: 43.95% complete, ETA 05:28:57
# Fork: 3 of 3
# Warmup Iteration   1: 0.213 ns/op
# Warmup Iteration   2: 0.212 ns/op
# Warmup Iteration   3: 0.210 ns/op
Iteration   1: 0.210 ns/op
Iteration   2: 0.208 ns/op
Iteration   3: 0.208 ns/op
Iteration   4: 0.208 ns/op
Iteration   5: 0.208 ns/op


Result "kotlin_benchmarks.callconv.Inline64byte.Q64byte_args8_targets1":
  0.209 ±(99.9%) 0.001 ns/op [Average]
  (min, avg, max) = (0.208, 0.209, 0.212), stdev = 0.001
  CI (99.9%): [0.208, 0.210] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.callconv.Inline64byte.Q64byte_args8_targets2

# Run progress: 43.97% complete, ETA 05:28:48
# Fork: 1 of 3
# Warmup Iteration   1: 0.363 ns/op
# Warmup Iteration   2: 0.355 ns/op
# Warmup Iteration   3: 0.356 ns/op
Iteration   1: 0.355 ns/op
Iteration   2: 0.361 ns/op
Iteration   3: 0.356 ns/op
Iteration   4: 0.359 ns/op
Iteration   5: 0.363 ns/op

# Run progress: 44.00% complete, ETA 05:28:38
# Fork: 2 of 3
# Warmup Iteration   1: 0.363 ns/op
# Warmup Iteration   2: 0.358 ns/op
# Warmup Iteration   3: 0.351 ns/op
Iteration   1: 0.351 ns/op
Iteration   2: 0.353 ns/op
Iteration   3: 0.363 ns/op
Iteration   4: 0.734 ns/op
Iteration   5: 0.733 ns/op

# Run progress: 44.02% complete, ETA 05:28:29
# Fork: 3 of 3
# Warmup Iteration   1: 0.777 ns/op
# Warmup Iteration   2: 0.743 ns/op
# Warmup Iteration   3: 0.741 ns/op
Iteration   1: 0.740 ns/op
Iteration   2: 0.740 ns/op
Iteration   3: 0.740 ns/op
Iteration   4: 0.740 ns/op
Iteration   5: 0.759 ns/op


Result "kotlin_benchmarks.callconv.Inline64byte.Q64byte_args8_targets2":
  0.536 ±(99.9%) 0.212 ns/op [Average]
  (min, avg, max) = (0.351, 0.536, 0.759), stdev = 0.198
  CI (99.9%): [0.325, 0.748] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.callconv.Inline64byte.Q64byte_args8_targets3

# Run progress: 44.04% complete, ETA 05:28:21
# Fork: 1 of 3
# Warmup Iteration   1: 228.858 ns/op
# Warmup Iteration   2: 241.902 ns/op
# Warmup Iteration   3: 241.084 ns/op
Iteration   1: 244.538 ns/op
Iteration   2: 244.956 ns/op
Iteration   3: 244.766 ns/op
Iteration   4: 245.000 ns/op
Iteration   5: 245.341 ns/op

# Run progress: 44.07% complete, ETA 05:28:12
# Fork: 2 of 3
# Warmup Iteration   1: 237.967 ns/op
# Warmup Iteration   2: 242.704 ns/op
# Warmup Iteration   3: 241.574 ns/op
Iteration   1: 243.729 ns/op
Iteration   2: 243.382 ns/op
Iteration   3: 243.310 ns/op
Iteration   4: 242.733 ns/op
Iteration   5: 243.403 ns/op

# Run progress: 44.09% complete, ETA 05:28:03
# Fork: 3 of 3
# Warmup Iteration   1: 245.857 ns/op
# Warmup Iteration   2: 276.281 ns/op
# Warmup Iteration   3: 267.263 ns/op
Iteration   1: 172.678 ns/op
Iteration   2: 255.127 ns/op
Iteration   3: 310.246 ns/op
Iteration   4: 185.539 ns/op
Iteration   5: 118.206 ns/op


Result "kotlin_benchmarks.callconv.Inline64byte.Q64byte_args8_targets3":
  232.197 ±(99.9%) 46.738 ns/op [Average]
  (min, avg, max) = (118.206, 232.197, 310.246), stdev = 43.719
  CI (99.9%): [185.459, 278.935] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.callconv.Inline64int.Q64int_args1_targets0

# Run progress: 44.12% complete, ETA 05:27:55
# Fork: 1 of 3
# Warmup Iteration   1: 0.199 ns/op
# Warmup Iteration   2: 0.197 ns/op
# Warmup Iteration   3: 0.197 ns/op
Iteration   1: 0.197 ns/op
Iteration   2: 0.198 ns/op
Iteration   3: 0.197 ns/op
Iteration   4: 0.197 ns/op
Iteration   5: 0.197 ns/op

# Run progress: 44.14% complete, ETA 05:27:45
# Fork: 2 of 3
# Warmup Iteration   1: 0.198 ns/op
# Warmup Iteration   2: 0.197 ns/op
# Warmup Iteration   3: 0.197 ns/op
Iteration   1: 0.197 ns/op
Iteration   2: 0.197 ns/op
Iteration   3: 0.197 ns/op
Iteration   4: 0.197 ns/op
Iteration   5: 0.197 ns/op

# Run progress: 44.17% complete, ETA 05:27:36
# Fork: 3 of 3
# Warmup Iteration   1: 0.198 ns/op
# Warmup Iteration   2: 0.197 ns/op
# Warmup Iteration   3: 0.197 ns/op
Iteration   1: 0.197 ns/op
Iteration   2: 0.196 ns/op
Iteration   3: 0.197 ns/op
Iteration   4: 0.198 ns/op
Iteration   5: 0.199 ns/op


Result "kotlin_benchmarks.callconv.Inline64int.Q64int_args1_targets0":
  0.197 ±(99.9%) 0.001 ns/op [Average]
  (min, avg, max) = (0.196, 0.197, 0.199), stdev = 0.001
  CI (99.9%): [0.196, 0.198] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.callconv.Inline64int.Q64int_args1_targets1

# Run progress: 44.19% complete, ETA 05:27:27
# Fork: 1 of 3
# Warmup Iteration   1: 0.202 ns/op
# Warmup Iteration   2: 0.199 ns/op
# Warmup Iteration   3: 0.196 ns/op
Iteration   1: 0.204 ns/op
Iteration   2: 0.197 ns/op
Iteration   3: 0.197 ns/op
Iteration   4: 0.197 ns/op
Iteration   5: 0.197 ns/op

# Run progress: 44.22% complete, ETA 05:27:18
# Fork: 2 of 3
# Warmup Iteration   1: 0.198 ns/op
# Warmup Iteration   2: 0.197 ns/op
# Warmup Iteration   3: 0.197 ns/op
Iteration   1: 0.197 ns/op
Iteration   2: 0.196 ns/op
Iteration   3: 0.196 ns/op
Iteration   4: 0.198 ns/op
Iteration   5: 0.200 ns/op

# Run progress: 44.24% complete, ETA 05:27:09
# Fork: 3 of 3
# Warmup Iteration   1: 0.202 ns/op
# Warmup Iteration   2: 0.197 ns/op
# Warmup Iteration   3: 0.197 ns/op
Iteration   1: 0.197 ns/op
Iteration   2: 0.199 ns/op
Iteration   3: 0.199 ns/op
Iteration   4: 0.197 ns/op
Iteration   5: 0.197 ns/op


Result "kotlin_benchmarks.callconv.Inline64int.Q64int_args1_targets1":
  0.198 ±(99.9%) 0.002 ns/op [Average]
  (min, avg, max) = (0.196, 0.198, 0.204), stdev = 0.002
  CI (99.9%): [0.196, 0.200] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.callconv.Inline64int.Q64int_args1_targets2

# Run progress: 44.26% complete, ETA 05:27:00
# Fork: 1 of 3
# Warmup Iteration   1: 0.350 ns/op
# Warmup Iteration   2: 0.345 ns/op
# Warmup Iteration   3: 0.345 ns/op
Iteration   1: 0.349 ns/op
Iteration   2: 0.348 ns/op
Iteration   3: 0.348 ns/op
Iteration   4: 0.348 ns/op
Iteration   5: 0.347 ns/op

# Run progress: 44.29% complete, ETA 05:26:51
# Fork: 2 of 3
# Warmup Iteration   1: 0.349 ns/op
# Warmup Iteration   2: 0.418 ns/op
# Warmup Iteration   3: 0.346 ns/op
Iteration   1: 0.345 ns/op
Iteration   2: 0.345 ns/op
Iteration   3: 0.346 ns/op
Iteration   4: 0.345 ns/op
Iteration   5: 0.345 ns/op

# Run progress: 44.31% complete, ETA 05:26:42
# Fork: 3 of 3
# Warmup Iteration   1: 0.351 ns/op
# Warmup Iteration   2: 0.348 ns/op
# Warmup Iteration   3: 0.351 ns/op
Iteration   1: 0.351 ns/op
Iteration   2: 0.352 ns/op
Iteration   3: 0.345 ns/op
Iteration   4: 0.345 ns/op
Iteration   5: 0.346 ns/op


Result "kotlin_benchmarks.callconv.Inline64int.Q64int_args1_targets2":
  0.347 ±(99.9%) 0.002 ns/op [Average]
  (min, avg, max) = (0.345, 0.347, 0.352), stdev = 0.002
  CI (99.9%): [0.345, 0.349] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.callconv.Inline64int.Q64int_args1_targets3

# Run progress: 44.34% complete, ETA 05:26:33
# Fork: 1 of 3
# Warmup Iteration   1: 79.541 ns/op
# Warmup Iteration   2: 84.878 ns/op
# Warmup Iteration   3: 83.045 ns/op
Iteration   1: 83.119 ns/op
Iteration   2: 83.300 ns/op
Iteration   3: 83.169 ns/op
Iteration   4: 83.132 ns/op
Iteration   5: 83.206 ns/op

# Run progress: 44.36% complete, ETA 05:26:24
# Fork: 2 of 3
# Warmup Iteration   1: 81.171 ns/op
# Warmup Iteration   2: 83.416 ns/op
# Warmup Iteration   3: 83.287 ns/op
Iteration   1: 82.838 ns/op
Iteration   2: 82.756 ns/op
Iteration   3: 83.474 ns/op
Iteration   4: 83.103 ns/op
Iteration   5: 83.532 ns/op

# Run progress: 44.39% complete, ETA 05:26:15
# Fork: 3 of 3
# Warmup Iteration   1: 82.982 ns/op
# Warmup Iteration   2: 83.369 ns/op
# Warmup Iteration   3: 82.827 ns/op
Iteration   1: 82.858 ns/op
Iteration   2: 82.893 ns/op
Iteration   3: 83.338 ns/op
Iteration   4: 84.696 ns/op
Iteration   5: 82.794 ns/op


Result "kotlin_benchmarks.callconv.Inline64int.Q64int_args1_targets3":
  83.214 ±(99.9%) 0.509 ns/op [Average]
  (min, avg, max) = (82.756, 83.214, 84.696), stdev = 0.476
  CI (99.9%): [82.705, 83.723] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.callconv.Inline64int.Q64int_args2_targets0

# Run progress: 44.41% complete, ETA 05:26:06
# Fork: 1 of 3
# Warmup Iteration   1: 0.200 ns/op
# Warmup Iteration   2: 0.200 ns/op
# Warmup Iteration   3: 0.204 ns/op
Iteration   1: 0.204 ns/op
Iteration   2: 0.204 ns/op
Iteration   3: 0.199 ns/op
Iteration   4: 0.198 ns/op
Iteration   5: 0.198 ns/op

# Run progress: 44.44% complete, ETA 05:25:57
# Fork: 2 of 3
# Warmup Iteration   1: 0.200 ns/op
# Warmup Iteration   2: 0.198 ns/op
# Warmup Iteration   3: 0.198 ns/op
Iteration   1: 0.199 ns/op
Iteration   2: 0.198 ns/op
Iteration   3: 0.198 ns/op
Iteration   4: 0.200 ns/op
Iteration   5: 0.200 ns/op

# Run progress: 44.46% complete, ETA 05:25:48
# Fork: 3 of 3
# Warmup Iteration   1: 0.203 ns/op
# Warmup Iteration   2: 0.200 ns/op
# Warmup Iteration   3: 0.200 ns/op
Iteration   1: 0.200 ns/op
Iteration   2: 0.198 ns/op
Iteration   3: 0.198 ns/op
Iteration   4: 0.199 ns/op
Iteration   5: 0.198 ns/op


Result "kotlin_benchmarks.callconv.Inline64int.Q64int_args2_targets0":
  0.200 ±(99.9%) 0.002 ns/op [Average]
  (min, avg, max) = (0.198, 0.200, 0.204), stdev = 0.002
  CI (99.9%): [0.197, 0.202] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.callconv.Inline64int.Q64int_args2_targets1

# Run progress: 44.49% complete, ETA 05:25:39
# Fork: 1 of 3
# Warmup Iteration   1: 0.201 ns/op
# Warmup Iteration   2: 0.198 ns/op
# Warmup Iteration   3: 0.198 ns/op
Iteration   1: 0.198 ns/op
Iteration   2: 0.200 ns/op
Iteration   3: 0.198 ns/op
Iteration   4: 0.198 ns/op
Iteration   5: 0.199 ns/op

# Run progress: 44.51% complete, ETA 05:25:30
# Fork: 2 of 3
# Warmup Iteration   1: 0.204 ns/op
# Warmup Iteration   2: 0.202 ns/op
# Warmup Iteration   3: 0.202 ns/op
Iteration   1: 0.201 ns/op
Iteration   2: 0.198 ns/op
Iteration   3: 0.198 ns/op
Iteration   4: 0.198 ns/op
Iteration   5: 0.198 ns/op

# Run progress: 44.53% complete, ETA 05:25:21
# Fork: 3 of 3
# Warmup Iteration   1: 0.201 ns/op
# Warmup Iteration   2: 0.199 ns/op
# Warmup Iteration   3: 0.198 ns/op
Iteration   1: 0.198 ns/op
Iteration   2: 0.198 ns/op
Iteration   3: 0.197 ns/op
Iteration   4: 0.198 ns/op
Iteration   5: 0.199 ns/op


Result "kotlin_benchmarks.callconv.Inline64int.Q64int_args2_targets1":
  0.199 ±(99.9%) 0.001 ns/op [Average]
  (min, avg, max) = (0.197, 0.199, 0.201), stdev = 0.001
  CI (99.9%): [0.198, 0.199] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.callconv.Inline64int.Q64int_args2_targets2

# Run progress: 44.56% complete, ETA 05:25:12
# Fork: 1 of 3
# Warmup Iteration   1: 0.355 ns/op
# Warmup Iteration   2: 0.353 ns/op
# Warmup Iteration   3: 0.353 ns/op
Iteration   1: 0.347 ns/op
Iteration   2: 0.347 ns/op
Iteration   3: 0.346 ns/op
Iteration   4: 0.346 ns/op
Iteration   5: 0.346 ns/op

# Run progress: 44.58% complete, ETA 05:25:03
# Fork: 2 of 3
# Warmup Iteration   1: 0.352 ns/op
# Warmup Iteration   2: 0.349 ns/op
# Warmup Iteration   3: 0.349 ns/op
Iteration   1: 0.349 ns/op
Iteration   2: 0.351 ns/op
Iteration   3: 0.350 ns/op
Iteration   4: 0.351 ns/op
Iteration   5: 0.351 ns/op

# Run progress: 44.61% complete, ETA 05:24:54
# Fork: 3 of 3
# Warmup Iteration   1: 0.351 ns/op
# Warmup Iteration   2: 0.346 ns/op
# Warmup Iteration   3: 0.346 ns/op
Iteration   1: 0.346 ns/op
Iteration   2: 0.348 ns/op
Iteration   3: 0.345 ns/op
Iteration   4: 0.345 ns/op
Iteration   5: 0.345 ns/op


Result "kotlin_benchmarks.callconv.Inline64int.Q64int_args2_targets2":
  0.348 ±(99.9%) 0.002 ns/op [Average]
  (min, avg, max) = (0.345, 0.348, 0.351), stdev = 0.002
  CI (99.9%): [0.345, 0.350] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.callconv.Inline64int.Q64int_args2_targets3

# Run progress: 44.63% complete, ETA 05:24:45
# Fork: 1 of 3
# Warmup Iteration   1: 84.767 ns/op
# Warmup Iteration   2: 86.744 ns/op
# Warmup Iteration   3: 87.332 ns/op
Iteration   1: 87.516 ns/op
Iteration   2: 89.655 ns/op
Iteration   3: 90.527 ns/op
Iteration   4: 89.365 ns/op
Iteration   5: 89.173 ns/op

# Run progress: 44.66% complete, ETA 05:24:36
# Fork: 2 of 3
# Warmup Iteration   1: 85.024 ns/op
# Warmup Iteration   2: 89.097 ns/op
# Warmup Iteration   3: 86.920 ns/op
Iteration   1: 86.735 ns/op
Iteration   2: 86.849 ns/op
Iteration   3: 86.806 ns/op
Iteration   4: 86.607 ns/op
Iteration   5: 87.164 ns/op

# Run progress: 44.68% complete, ETA 05:24:27
# Fork: 3 of 3
# Warmup Iteration   1: 85.132 ns/op
# Warmup Iteration   2: 86.670 ns/op
# Warmup Iteration   3: 86.979 ns/op
Iteration   1: 86.931 ns/op
Iteration   2: 86.590 ns/op
Iteration   3: 87.260 ns/op
Iteration   4: 87.305 ns/op
Iteration   5: 87.403 ns/op


Result "kotlin_benchmarks.callconv.Inline64int.Q64int_args2_targets3":
  87.726 ±(99.9%) 1.370 ns/op [Average]
  (min, avg, max) = (86.590, 87.726, 90.527), stdev = 1.281
  CI (99.9%): [86.356, 89.095] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.callconv.Inline64int.Q64int_args4_targets0

# Run progress: 44.71% complete, ETA 05:24:18
# Fork: 1 of 3
# Warmup Iteration   1: 0.205 ns/op
# Warmup Iteration   2: 0.202 ns/op
# Warmup Iteration   3: 0.202 ns/op
Iteration   1: 0.202 ns/op
Iteration   2: 0.202 ns/op
Iteration   3: 0.202 ns/op
Iteration   4: 0.202 ns/op
Iteration   5: 0.202 ns/op

# Run progress: 44.73% complete, ETA 05:24:09
# Fork: 2 of 3
# Warmup Iteration   1: 0.204 ns/op
# Warmup Iteration   2: 0.202 ns/op
# Warmup Iteration   3: 0.201 ns/op
Iteration   1: 0.201 ns/op
Iteration   2: 0.201 ns/op
Iteration   3: 0.201 ns/op
Iteration   4: 0.202 ns/op
Iteration   5: 0.203 ns/op

# Run progress: 44.75% complete, ETA 05:24:00
# Fork: 3 of 3
# Warmup Iteration   1: 0.205 ns/op
# Warmup Iteration   2: 0.202 ns/op
# Warmup Iteration   3: 0.203 ns/op
Iteration   1: 0.201 ns/op
Iteration   2: 0.201 ns/op
Iteration   3: 0.201 ns/op
Iteration   4: 0.201 ns/op
Iteration   5: 0.202 ns/op


Result "kotlin_benchmarks.callconv.Inline64int.Q64int_args4_targets0":
  0.202 ±(99.9%) 0.001 ns/op [Average]
  (min, avg, max) = (0.201, 0.202, 0.203), stdev = 0.001
  CI (99.9%): [0.201, 0.202] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.callconv.Inline64int.Q64int_args4_targets1

# Run progress: 44.78% complete, ETA 05:23:51
# Fork: 1 of 3
# Warmup Iteration   1: 0.204 ns/op
# Warmup Iteration   2: 0.202 ns/op
# Warmup Iteration   3: 0.201 ns/op
Iteration   1: 0.201 ns/op
Iteration   2: 0.202 ns/op
Iteration   3: 0.201 ns/op
Iteration   4: 0.203 ns/op
Iteration   5: 0.202 ns/op

# Run progress: 44.80% complete, ETA 05:23:42
# Fork: 2 of 3
# Warmup Iteration   1: 0.204 ns/op
# Warmup Iteration   2: 0.202 ns/op
# Warmup Iteration   3: 0.202 ns/op
Iteration   1: 0.202 ns/op
Iteration   2: 0.201 ns/op
Iteration   3: 0.330 ns/op
Iteration   4: 0.421 ns/op
Iteration   5: 0.420 ns/op

# Run progress: 44.83% complete, ETA 05:23:33
# Fork: 3 of 3
# Warmup Iteration   1: 0.432 ns/op
# Warmup Iteration   2: 0.422 ns/op
# Warmup Iteration   3: 0.420 ns/op
Iteration   1: 0.419 ns/op
Iteration   2: 0.409 ns/op
Iteration   3: 0.418 ns/op
Iteration   4: 0.419 ns/op
Iteration   5: 0.420 ns/op


Result "kotlin_benchmarks.callconv.Inline64int.Q64int_args4_targets1":
  0.311 ±(99.9%) 0.116 ns/op [Average]
  (min, avg, max) = (0.201, 0.311, 0.421), stdev = 0.108
  CI (99.9%): [0.196, 0.427] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.callconv.Inline64int.Q64int_args4_targets2

# Run progress: 44.85% complete, ETA 05:23:25
# Fork: 1 of 3
# Warmup Iteration   1: 0.749 ns/op
# Warmup Iteration   2: 0.731 ns/op
# Warmup Iteration   3: 0.729 ns/op
Iteration   1: 0.729 ns/op
Iteration   2: 0.728 ns/op
Iteration   3: 0.729 ns/op
Iteration   4: 0.732 ns/op
Iteration   5: 0.729 ns/op

# Run progress: 44.88% complete, ETA 05:23:16
# Fork: 2 of 3
# Warmup Iteration   1: 0.757 ns/op
# Warmup Iteration   2: 0.740 ns/op
# Warmup Iteration   3: 0.729 ns/op
Iteration   1: 0.730 ns/op
Iteration   2: 0.728 ns/op
Iteration   3: 0.729 ns/op
Iteration   4: 0.729 ns/op
Iteration   5: 0.732 ns/op

# Run progress: 44.90% complete, ETA 05:23:07
# Fork: 3 of 3
# Warmup Iteration   1: 0.419 ns/op
# Warmup Iteration   2: 0.583 ns/op
# Warmup Iteration   3: 0.448 ns/op
Iteration   1: 0.350 ns/op
Iteration   2: 0.350 ns/op
Iteration   3: 0.350 ns/op
Iteration   4: 0.349 ns/op
Iteration   5: 0.352 ns/op


Result "kotlin_benchmarks.callconv.Inline64int.Q64int_args4_targets2":
  0.603 ±(99.9%) 0.198 ns/op [Average]
  (min, avg, max) = (0.349, 0.603, 0.732), stdev = 0.185
  CI (99.9%): [0.405, 0.801] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.callconv.Inline64int.Q64int_args4_targets3

# Run progress: 44.93% complete, ETA 05:23:00
# Fork: 1 of 3
# Warmup Iteration   1: 93.625 ns/op
# Warmup Iteration   2: 96.362 ns/op
# Warmup Iteration   3: 96.332 ns/op
Iteration   1: 97.016 ns/op
Iteration   2: 98.863 ns/op
Iteration   3: 96.409 ns/op
Iteration   4: 96.565 ns/op
Iteration   5: 96.516 ns/op

# Run progress: 44.95% complete, ETA 05:22:51
# Fork: 2 of 3
# Warmup Iteration   1: 94.983 ns/op
# Warmup Iteration   2: 96.492 ns/op
# Warmup Iteration   3: 96.403 ns/op
Iteration   1: 96.170 ns/op
Iteration   2: 96.299 ns/op
Iteration   3: 96.242 ns/op
Iteration   4: 96.364 ns/op
Iteration   5: 96.118 ns/op

# Run progress: 44.98% complete, ETA 05:22:42
# Fork: 3 of 3
# Warmup Iteration   1: 97.208 ns/op
# Warmup Iteration   2: 97.720 ns/op
# Warmup Iteration   3: 97.887 ns/op
Iteration   1: 98.773 ns/op
Iteration   2: 97.919 ns/op
Iteration   3: 96.647 ns/op
Iteration   4: 96.778 ns/op
Iteration   5: 99.860 ns/op


Result "kotlin_benchmarks.callconv.Inline64int.Q64int_args4_targets3":
  97.103 ±(99.9%) 1.257 ns/op [Average]
  (min, avg, max) = (96.118, 97.103, 99.860), stdev = 1.176
  CI (99.9%): [95.845, 98.360] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.callconv.Inline64int.Q64int_args8_targets0

# Run progress: 45.00% complete, ETA 05:22:33
# Fork: 1 of 3
# Warmup Iteration   1: 0.211 ns/op
# Warmup Iteration   2: 0.210 ns/op
# Warmup Iteration   3: 0.208 ns/op
Iteration   1: 0.208 ns/op
Iteration   2: 0.208 ns/op
Iteration   3: 0.208 ns/op
Iteration   4: 0.209 ns/op
Iteration   5: 0.208 ns/op

# Run progress: 45.02% complete, ETA 05:22:24
# Fork: 2 of 3
# Warmup Iteration   1: 0.211 ns/op
# Warmup Iteration   2: 0.208 ns/op
# Warmup Iteration   3: 0.211 ns/op
Iteration   1: 0.209 ns/op
Iteration   2: 0.208 ns/op
Iteration   3: 0.208 ns/op
Iteration   4: 0.208 ns/op
Iteration   5: 0.208 ns/op

# Run progress: 45.05% complete, ETA 05:22:15
# Fork: 3 of 3
# Warmup Iteration   1: 0.211 ns/op
# Warmup Iteration   2: 0.208 ns/op
# Warmup Iteration   3: 0.210 ns/op
Iteration   1: 0.208 ns/op
Iteration   2: 0.208 ns/op
Iteration   3: 0.210 ns/op
Iteration   4: 0.207 ns/op
Iteration   5: 0.207 ns/op


Result "kotlin_benchmarks.callconv.Inline64int.Q64int_args8_targets0":
  0.208 ±(99.9%) 0.001 ns/op [Average]
  (min, avg, max) = (0.207, 0.208, 0.210), stdev = 0.001
  CI (99.9%): [0.207, 0.209] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.callconv.Inline64int.Q64int_args8_targets1

# Run progress: 45.07% complete, ETA 05:22:06
# Fork: 1 of 3
# Warmup Iteration   1: 0.214 ns/op
# Warmup Iteration   2: 0.208 ns/op
# Warmup Iteration   3: 0.208 ns/op
Iteration   1: 0.207 ns/op
Iteration   2: 0.208 ns/op
Iteration   3: 0.210 ns/op
Iteration   4: 0.208 ns/op
Iteration   5: 0.208 ns/op

# Run progress: 45.10% complete, ETA 05:21:57
# Fork: 2 of 3
# Warmup Iteration   1: 0.211 ns/op
# Warmup Iteration   2: 0.209 ns/op
# Warmup Iteration   3: 0.208 ns/op
Iteration   1: 0.208 ns/op
Iteration   2: 0.208 ns/op
Iteration   3: 0.208 ns/op
Iteration   4: 0.208 ns/op
Iteration   5: 0.208 ns/op

# Run progress: 45.12% complete, ETA 05:21:48
# Fork: 3 of 3
# Warmup Iteration   1: 0.211 ns/op
# Warmup Iteration   2: 0.209 ns/op
# Warmup Iteration   3: 0.209 ns/op
Iteration   1: 0.208 ns/op
Iteration   2: 0.208 ns/op
Iteration   3: 0.211 ns/op
Iteration   4: 0.208 ns/op
Iteration   5: 0.208 ns/op


Result "kotlin_benchmarks.callconv.Inline64int.Q64int_args8_targets1":
  0.208 ±(99.9%) 0.001 ns/op [Average]
  (min, avg, max) = (0.207, 0.208, 0.211), stdev = 0.001
  CI (99.9%): [0.207, 0.209] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.callconv.Inline64int.Q64int_args8_targets2

# Run progress: 45.15% complete, ETA 05:21:39
# Fork: 1 of 3
# Warmup Iteration   1: 0.362 ns/op
# Warmup Iteration   2: 0.352 ns/op
# Warmup Iteration   3: 0.348 ns/op
Iteration   1: 0.348 ns/op
Iteration   2: 0.349 ns/op
Iteration   3: 0.348 ns/op
Iteration   4: 0.351 ns/op
Iteration   5: 0.352 ns/op

# Run progress: 45.17% complete, ETA 05:21:30
# Fork: 2 of 3
# Warmup Iteration   1: 0.363 ns/op
# Warmup Iteration   2: 0.352 ns/op
# Warmup Iteration   3: 0.350 ns/op
Iteration   1: 0.349 ns/op
Iteration   2: 0.361 ns/op
Iteration   3: 0.348 ns/op
Iteration   4: 0.348 ns/op
Iteration   5: 0.349 ns/op

# Run progress: 45.20% complete, ETA 05:21:21
# Fork: 3 of 3
# Warmup Iteration   1: 0.358 ns/op
# Warmup Iteration   2: 0.352 ns/op
# Warmup Iteration   3: 0.348 ns/op
Iteration   1: 0.348 ns/op
Iteration   2: 0.348 ns/op
Iteration   3: 0.348 ns/op
Iteration   4: 0.348 ns/op
Iteration   5: 0.350 ns/op


Result "kotlin_benchmarks.callconv.Inline64int.Q64int_args8_targets2":
  0.350 ±(99.9%) 0.004 ns/op [Average]
  (min, avg, max) = (0.348, 0.350, 0.361), stdev = 0.003
  CI (99.9%): [0.346, 0.353] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.callconv.Inline64int.Q64int_args8_targets3

# Run progress: 45.22% complete, ETA 05:21:12
# Fork: 1 of 3
# Warmup Iteration   1: 111.644 ns/op
# Warmup Iteration   2: 114.835 ns/op
# Warmup Iteration   3: 117.811 ns/op
Iteration   1: 116.504 ns/op
Iteration   2: 116.376 ns/op
Iteration   3: 116.763 ns/op
Iteration   4: 116.322 ns/op
Iteration   5: 116.726 ns/op

# Run progress: 45.25% complete, ETA 05:21:04
# Fork: 2 of 3
# Warmup Iteration   1: 114.168 ns/op
# Warmup Iteration   2: 114.878 ns/op
# Warmup Iteration   3: 117.326 ns/op
Iteration   1: 116.629 ns/op
Iteration   2: 116.112 ns/op
Iteration   3: 115.912 ns/op
Iteration   4: 117.261 ns/op
Iteration   5: 118.693 ns/op

# Run progress: 45.27% complete, ETA 05:20:55
# Fork: 3 of 3
# Warmup Iteration   1: 115.122 ns/op
# Warmup Iteration   2: 115.414 ns/op
# Warmup Iteration   3: 122.302 ns/op
Iteration   1: 116.703 ns/op
Iteration   2: 116.415 ns/op
Iteration   3: 116.390 ns/op
Iteration   4: 117.239 ns/op
Iteration   5: 116.763 ns/op


Result "kotlin_benchmarks.callconv.Inline64int.Q64int_args8_targets3":
  116.720 ±(99.9%) 0.701 ns/op [Average]
  (min, avg, max) = (115.912, 116.720, 118.693), stdev = 0.656
  CI (99.9%): [116.020, 117.421] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.callconv.Inline64long.Q64long_args1_targets0

# Run progress: 45.29% complete, ETA 05:20:47
# Fork: 1 of 3
# Warmup Iteration   1: 0.197 ns/op
# Warmup Iteration   2: 0.196 ns/op
# Warmup Iteration   3: 0.200 ns/op
Iteration   1: 0.197 ns/op
Iteration   2: 0.196 ns/op
Iteration   3: 0.196 ns/op
Iteration   4: 0.199 ns/op
Iteration   5: 0.200 ns/op

# Run progress: 45.32% complete, ETA 05:20:38
# Fork: 2 of 3
# Warmup Iteration   1: 0.197 ns/op
# Warmup Iteration   2: 0.195 ns/op
# Warmup Iteration   3: 0.195 ns/op
Iteration   1: 0.195 ns/op
Iteration   2: 0.195 ns/op
Iteration   3: 0.195 ns/op
Iteration   4: 0.195 ns/op
Iteration   5: 0.195 ns/op

# Run progress: 45.34% complete, ETA 05:20:29
# Fork: 3 of 3
# Warmup Iteration   1: 0.198 ns/op
# Warmup Iteration   2: 0.195 ns/op
# Warmup Iteration   3: 0.195 ns/op
Iteration   1: 0.195 ns/op
Iteration   2: 0.197 ns/op
Iteration   3: 0.197 ns/op
Iteration   4: 0.197 ns/op
Iteration   5: 0.196 ns/op


Result "kotlin_benchmarks.callconv.Inline64long.Q64long_args1_targets0":
  0.196 ±(99.9%) 0.002 ns/op [Average]
  (min, avg, max) = (0.195, 0.196, 0.200), stdev = 0.001
  CI (99.9%): [0.195, 0.198] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.callconv.Inline64long.Q64long_args1_targets1

# Run progress: 45.37% complete, ETA 05:20:20
# Fork: 1 of 3
# Warmup Iteration   1: 0.197 ns/op
# Warmup Iteration   2: 0.200 ns/op
# Warmup Iteration   3: 0.195 ns/op
Iteration   1: 0.195 ns/op
Iteration   2: 0.195 ns/op
Iteration   3: 0.195 ns/op
Iteration   4: 0.195 ns/op
Iteration   5: 0.195 ns/op

# Run progress: 45.39% complete, ETA 05:20:11
# Fork: 2 of 3
# Warmup Iteration   1: 0.202 ns/op
# Warmup Iteration   2: 0.195 ns/op
# Warmup Iteration   3: 0.196 ns/op
Iteration   1: 0.198 ns/op
Iteration   2: 0.200 ns/op
Iteration   3: 0.201 ns/op
Iteration   4: 0.199 ns/op
Iteration   5: 0.195 ns/op

# Run progress: 45.42% complete, ETA 05:20:02
# Fork: 3 of 3
# Warmup Iteration   1: 0.203 ns/op
# Warmup Iteration   2: 0.196 ns/op
# Warmup Iteration   3: 0.195 ns/op
Iteration   1: 0.195 ns/op
Iteration   2: 0.195 ns/op
Iteration   3: 0.195 ns/op
Iteration   4: 0.195 ns/op
Iteration   5: 0.195 ns/op


Result "kotlin_benchmarks.callconv.Inline64long.Q64long_args1_targets1":
  0.196 ±(99.9%) 0.002 ns/op [Average]
  (min, avg, max) = (0.195, 0.196, 0.201), stdev = 0.002
  CI (99.9%): [0.194, 0.198] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.callconv.Inline64long.Q64long_args1_targets2

# Run progress: 45.44% complete, ETA 05:19:53
# Fork: 1 of 3
# Warmup Iteration   1: 0.344 ns/op
# Warmup Iteration   2: 0.346 ns/op
# Warmup Iteration   3: 0.342 ns/op
Iteration   1: 0.342 ns/op
Iteration   2: 0.342 ns/op
Iteration   3: 0.342 ns/op
Iteration   4: 0.342 ns/op
Iteration   5: 0.343 ns/op

# Run progress: 45.47% complete, ETA 05:19:44
# Fork: 2 of 3
# Warmup Iteration   1: 0.346 ns/op
# Warmup Iteration   2: 0.345 ns/op
# Warmup Iteration   3: 0.412 ns/op
Iteration   1: 0.411 ns/op
Iteration   2: 0.412 ns/op
Iteration   3: 0.411 ns/op
Iteration   4: 0.411 ns/op
Iteration   5: 0.419 ns/op

# Run progress: 45.49% complete, ETA 05:19:35
# Fork: 3 of 3
# Warmup Iteration   1: 0.350 ns/op
# Warmup Iteration   2: 0.350 ns/op
# Warmup Iteration   3: 0.347 ns/op
Iteration   1: 0.345 ns/op
Iteration   2: 0.344 ns/op
Iteration   3: 0.343 ns/op
Iteration   4: 0.345 ns/op
Iteration   5: 0.346 ns/op


Result "kotlin_benchmarks.callconv.Inline64long.Q64long_args1_targets2":
  0.367 ±(99.9%) 0.036 ns/op [Average]
  (min, avg, max) = (0.342, 0.367, 0.419), stdev = 0.034
  CI (99.9%): [0.330, 0.403] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.callconv.Inline64long.Q64long_args1_targets3

# Run progress: 45.51% complete, ETA 05:19:26
# Fork: 1 of 3
# Warmup Iteration   1: 79.072 ns/op
# Warmup Iteration   2: 82.457 ns/op
# Warmup Iteration   3: 82.535 ns/op
Iteration   1: 82.196 ns/op
Iteration   2: 82.417 ns/op
Iteration   3: 82.390 ns/op
Iteration   4: 83.634 ns/op
Iteration   5: 83.402 ns/op

# Run progress: 45.54% complete, ETA 05:19:17
# Fork: 2 of 3
# Warmup Iteration   1: 81.090 ns/op
# Warmup Iteration   2: 83.037 ns/op
# Warmup Iteration   3: 83.941 ns/op
Iteration   1: 84.159 ns/op
Iteration   2: 82.976 ns/op
Iteration   3: 83.251 ns/op
Iteration   4: 83.452 ns/op
Iteration   5: 83.637 ns/op

# Run progress: 45.56% complete, ETA 05:19:08
# Fork: 3 of 3
# Warmup Iteration   1: 83.700 ns/op
# Warmup Iteration   2: 83.023 ns/op
# Warmup Iteration   3: 84.884 ns/op
Iteration   1: 82.770 ns/op
Iteration   2: 82.984 ns/op
Iteration   3: 83.001 ns/op
Iteration   4: 82.849 ns/op
Iteration   5: 82.795 ns/op


Result "kotlin_benchmarks.callconv.Inline64long.Q64long_args1_targets3":
  83.061 ±(99.9%) 0.571 ns/op [Average]
  (min, avg, max) = (82.196, 83.061, 84.159), stdev = 0.535
  CI (99.9%): [82.489, 83.632] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.callconv.Inline64long.Q64long_args2_targets0

# Run progress: 45.59% complete, ETA 05:18:59
# Fork: 1 of 3
# Warmup Iteration   1: 0.206 ns/op
# Warmup Iteration   2: 0.199 ns/op
# Warmup Iteration   3: 0.197 ns/op
Iteration   1: 0.197 ns/op
Iteration   2: 0.197 ns/op
Iteration   3: 0.197 ns/op
Iteration   4: 0.197 ns/op
Iteration   5: 0.197 ns/op

# Run progress: 45.61% complete, ETA 05:18:50
# Fork: 2 of 3
# Warmup Iteration   1: 0.198 ns/op
# Warmup Iteration   2: 0.197 ns/op
# Warmup Iteration   3: 0.196 ns/op
Iteration   1: 0.197 ns/op
Iteration   2: 0.197 ns/op
Iteration   3: 0.405 ns/op
Iteration   4: 0.409 ns/op
Iteration   5: 0.408 ns/op

# Run progress: 45.64% complete, ETA 05:18:41
# Fork: 3 of 3
# Warmup Iteration   1: 0.419 ns/op
# Warmup Iteration   2: 0.411 ns/op
# Warmup Iteration   3: 0.414 ns/op
Iteration   1: 0.412 ns/op
Iteration   2: 0.410 ns/op
Iteration   3: 0.410 ns/op
Iteration   4: 0.410 ns/op
Iteration   5: 0.410 ns/op


Result "kotlin_benchmarks.callconv.Inline64long.Q64long_args2_targets0":
  0.310 ±(99.9%) 0.117 ns/op [Average]
  (min, avg, max) = (0.197, 0.310, 0.412), stdev = 0.110
  CI (99.9%): [0.193, 0.427] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.callconv.Inline64long.Q64long_args2_targets1

# Run progress: 45.66% complete, ETA 05:18:32
# Fork: 1 of 3
# Warmup Iteration   1: 0.420 ns/op
# Warmup Iteration   2: 0.411 ns/op
# Warmup Iteration   3: 0.410 ns/op
Iteration   1: 0.410 ns/op
Iteration   2: 0.410 ns/op
Iteration   3: 0.410 ns/op
Iteration   4: 0.411 ns/op
Iteration   5: 0.410 ns/op

# Run progress: 45.69% complete, ETA 05:18:23
# Fork: 2 of 3
# Warmup Iteration   1: 0.421 ns/op
# Warmup Iteration   2: 0.411 ns/op
# Warmup Iteration   3: 0.410 ns/op
Iteration   1: 0.416 ns/op
Iteration   2: 0.410 ns/op
Iteration   3: 0.410 ns/op
Iteration   4: 0.411 ns/op
Iteration   5: 0.410 ns/op

# Run progress: 45.71% complete, ETA 05:18:15
# Fork: 3 of 3
# Warmup Iteration   1: 0.463 ns/op
# Warmup Iteration   2: 0.439 ns/op
# Warmup Iteration   3: 0.356 ns/op
Iteration   1: 0.523 ns/op
Iteration   2: 0.541 ns/op
Iteration   3: 0.289 ns/op
Iteration   4: 0.197 ns/op
Iteration   5: 0.197 ns/op


Result "kotlin_benchmarks.callconv.Inline64long.Q64long_args2_targets1":
  0.390 ±(99.9%) 0.103 ns/op [Average]
  (min, avg, max) = (0.197, 0.390, 0.541), stdev = 0.096
  CI (99.9%): [0.287, 0.493] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.callconv.Inline64long.Q64long_args2_targets2

# Run progress: 45.74% complete, ETA 05:18:06
# Fork: 1 of 3
# Warmup Iteration   1: 0.350 ns/op
# Warmup Iteration   2: 0.347 ns/op
# Warmup Iteration   3: 0.357 ns/op
Iteration   1: 0.357 ns/op
Iteration   2: 0.355 ns/op
Iteration   3: 0.355 ns/op
Iteration   4: 0.356 ns/op
Iteration   5: 0.355 ns/op

# Run progress: 45.76% complete, ETA 05:17:57
# Fork: 2 of 3
# Warmup Iteration   1: 0.350 ns/op
# Warmup Iteration   2: 0.346 ns/op
# Warmup Iteration   3: 0.345 ns/op
Iteration   1: 0.345 ns/op
Iteration   2: 0.346 ns/op
Iteration   3: 0.346 ns/op
Iteration   4: 0.346 ns/op
Iteration   5: 0.346 ns/op

# Run progress: 45.78% complete, ETA 05:17:48
# Fork: 3 of 3
# Warmup Iteration   1: 0.350 ns/op
# Warmup Iteration   2: 0.347 ns/op
# Warmup Iteration   3: 0.346 ns/op
Iteration   1: 0.346 ns/op
Iteration   2: 0.346 ns/op
Iteration   3: 0.347 ns/op
Iteration   4: 0.345 ns/op
Iteration   5: 0.345 ns/op


Result "kotlin_benchmarks.callconv.Inline64long.Q64long_args2_targets2":
  0.349 ±(99.9%) 0.005 ns/op [Average]
  (min, avg, max) = (0.345, 0.349, 0.357), stdev = 0.005
  CI (99.9%): [0.344, 0.354] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.callconv.Inline64long.Q64long_args2_targets3

# Run progress: 45.81% complete, ETA 05:17:39
# Fork: 1 of 3
# Warmup Iteration   1: 82.569 ns/op
# Warmup Iteration   2: 85.937 ns/op
# Warmup Iteration   3: 85.191 ns/op
Iteration   1: 85.865 ns/op
Iteration   2: 88.312 ns/op
Iteration   3: 81.341 ns/op
Iteration   4: 81.213 ns/op
Iteration   5: 81.164 ns/op

# Run progress: 45.83% complete, ETA 05:17:30
# Fork: 2 of 3
# Warmup Iteration   1: 85.983 ns/op
# Warmup Iteration   2: 87.027 ns/op
# Warmup Iteration   3: 86.787 ns/op
Iteration   1: 88.621 ns/op
Iteration   2: 87.092 ns/op
Iteration   3: 86.287 ns/op
Iteration   4: 86.490 ns/op
Iteration   5: 86.099 ns/op

# Run progress: 45.86% complete, ETA 05:17:21
# Fork: 3 of 3
# Warmup Iteration   1: 82.689 ns/op
# Warmup Iteration   2: 87.251 ns/op
# Warmup Iteration   3: 86.374 ns/op
Iteration   1: 86.619 ns/op
Iteration   2: 87.210 ns/op
Iteration   3: 87.249 ns/op
Iteration   4: 86.382 ns/op
Iteration   5: 87.477 ns/op


Result "kotlin_benchmarks.callconv.Inline64long.Q64long_args2_targets3":
  85.828 ±(99.9%) 2.666 ns/op [Average]
  (min, avg, max) = (81.164, 85.828, 88.621), stdev = 2.494
  CI (99.9%): [83.162, 88.494] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.callconv.Inline64long.Q64long_args4_targets0

# Run progress: 45.88% complete, ETA 05:17:12
# Fork: 1 of 3
# Warmup Iteration   1: 0.202 ns/op
# Warmup Iteration   2: 0.200 ns/op
# Warmup Iteration   3: 0.200 ns/op
Iteration   1: 0.200 ns/op
Iteration   2: 0.200 ns/op
Iteration   3: 0.200 ns/op
Iteration   4: 0.200 ns/op
Iteration   5: 0.200 ns/op

# Run progress: 45.91% complete, ETA 05:17:03
# Fork: 2 of 3
# Warmup Iteration   1: 0.202 ns/op
# Warmup Iteration   2: 0.200 ns/op
# Warmup Iteration   3: 0.200 ns/op
Iteration   1: 0.202 ns/op
Iteration   2: 0.206 ns/op
Iteration   3: 0.205 ns/op
Iteration   4: 0.205 ns/op
Iteration   5: 0.205 ns/op

# Run progress: 45.93% complete, ETA 05:16:54
# Fork: 3 of 3
# Warmup Iteration   1: 0.205 ns/op
# Warmup Iteration   2: 0.201 ns/op
# Warmup Iteration   3: 0.200 ns/op
Iteration   1: 0.206 ns/op
Iteration   2: 0.203 ns/op
Iteration   3: 0.201 ns/op
Iteration   4: 0.200 ns/op
Iteration   5: 0.201 ns/op


Result "kotlin_benchmarks.callconv.Inline64long.Q64long_args4_targets0":
  0.202 ±(99.9%) 0.003 ns/op [Average]
  (min, avg, max) = (0.200, 0.202, 0.206), stdev = 0.002
  CI (99.9%): [0.200, 0.205] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.callconv.Inline64long.Q64long_args4_targets1

# Run progress: 45.96% complete, ETA 05:16:45
# Fork: 1 of 3
# Warmup Iteration   1: 0.202 ns/op
# Warmup Iteration   2: 0.200 ns/op
# Warmup Iteration   3: 0.200 ns/op
Iteration   1: 0.200 ns/op
Iteration   2: 0.200 ns/op
Iteration   3: 0.200 ns/op
Iteration   4: 0.202 ns/op
Iteration   5: 0.203 ns/op

# Run progress: 45.98% complete, ETA 05:16:36
# Fork: 2 of 3
# Warmup Iteration   1: 0.205 ns/op
# Warmup Iteration   2: 0.200 ns/op
# Warmup Iteration   3: 0.200 ns/op
Iteration   1: 0.201 ns/op
Iteration   2: 0.200 ns/op
Iteration   3: 0.200 ns/op
Iteration   4: 0.200 ns/op
Iteration   5: 0.200 ns/op

# Run progress: 46.00% complete, ETA 05:16:27
# Fork: 3 of 3
# Warmup Iteration   1: 0.202 ns/op
# Warmup Iteration   2: 0.203 ns/op
# Warmup Iteration   3: 0.200 ns/op
Iteration   1: 0.200 ns/op
Iteration   2: 0.201 ns/op
Iteration   3: 0.202 ns/op
Iteration   4: 0.204 ns/op
Iteration   5: 0.199 ns/op


Result "kotlin_benchmarks.callconv.Inline64long.Q64long_args4_targets1":
  0.201 ±(99.9%) 0.001 ns/op [Average]
  (min, avg, max) = (0.199, 0.201, 0.204), stdev = 0.001
  CI (99.9%): [0.199, 0.202] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.callconv.Inline64long.Q64long_args4_targets2

# Run progress: 46.03% complete, ETA 05:16:18
# Fork: 1 of 3
# Warmup Iteration   1: 0.350 ns/op
# Warmup Iteration   2: 0.349 ns/op
# Warmup Iteration   3: 0.348 ns/op
Iteration   1: 0.345 ns/op
Iteration   2: 0.346 ns/op
Iteration   3: 0.348 ns/op
Iteration   4: 0.345 ns/op
Iteration   5: 0.345 ns/op

# Run progress: 46.05% complete, ETA 05:16:09
# Fork: 2 of 3
# Warmup Iteration   1: 0.350 ns/op
# Warmup Iteration   2: 0.346 ns/op
# Warmup Iteration   3: 0.345 ns/op
Iteration   1: 0.345 ns/op
Iteration   2: 0.347 ns/op
Iteration   3: 0.349 ns/op
Iteration   4: 0.349 ns/op
Iteration   5: 0.345 ns/op

# Run progress: 46.08% complete, ETA 05:16:01
# Fork: 3 of 3
# Warmup Iteration   1: 0.350 ns/op
# Warmup Iteration   2: 0.353 ns/op
# Warmup Iteration   3: 0.345 ns/op
Iteration   1: 0.345 ns/op
Iteration   2: 0.346 ns/op
Iteration   3: 0.346 ns/op
Iteration   4: 0.346 ns/op
Iteration   5: 0.345 ns/op


Result "kotlin_benchmarks.callconv.Inline64long.Q64long_args4_targets2":
  0.346 ±(99.9%) 0.002 ns/op [Average]
  (min, avg, max) = (0.345, 0.346, 0.349), stdev = 0.001
  CI (99.9%): [0.345, 0.348] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.callconv.Inline64long.Q64long_args4_targets3

# Run progress: 46.10% complete, ETA 05:15:52
# Fork: 1 of 3
# Warmup Iteration   1: 91.932 ns/op
# Warmup Iteration   2: 96.006 ns/op
# Warmup Iteration   3: 95.604 ns/op
Iteration   1: 95.625 ns/op
Iteration   2: 95.745 ns/op
Iteration   3: 95.892 ns/op
Iteration   4: 96.446 ns/op
Iteration   5: 96.184 ns/op

# Run progress: 46.13% complete, ETA 05:15:43
# Fork: 2 of 3
# Warmup Iteration   1: 95.043 ns/op
# Warmup Iteration   2: 95.608 ns/op
# Warmup Iteration   3: 95.220 ns/op
Iteration   1: 95.221 ns/op
Iteration   2: 95.374 ns/op
Iteration   3: 95.337 ns/op
Iteration   4: 95.331 ns/op
Iteration   5: 95.102 ns/op

# Run progress: 46.15% complete, ETA 05:15:34
# Fork: 3 of 3
# Warmup Iteration   1: 91.398 ns/op
# Warmup Iteration   2: 96.759 ns/op
# Warmup Iteration   3: 96.875 ns/op
Iteration   1: 96.847 ns/op
Iteration   2: 95.338 ns/op
Iteration   3: 96.927 ns/op
Iteration   4: 95.990 ns/op
Iteration   5: 95.510 ns/op


Result "kotlin_benchmarks.callconv.Inline64long.Q64long_args4_targets3":
  95.791 ±(99.9%) 0.622 ns/op [Average]
  (min, avg, max) = (95.102, 95.791, 96.927), stdev = 0.582
  CI (99.9%): [95.169, 96.413] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.callconv.Inline64long.Q64long_args8_targets0

# Run progress: 46.18% complete, ETA 05:15:25
# Fork: 1 of 3
# Warmup Iteration   1: 0.212 ns/op
# Warmup Iteration   2: 0.207 ns/op
# Warmup Iteration   3: 0.207 ns/op
Iteration   1: 0.207 ns/op
Iteration   2: 0.206 ns/op
Iteration   3: 0.206 ns/op
Iteration   4: 0.206 ns/op
Iteration   5: 0.207 ns/op

# Run progress: 46.20% complete, ETA 05:15:16
# Fork: 2 of 3
# Warmup Iteration   1: 0.210 ns/op
# Warmup Iteration   2: 0.207 ns/op
# Warmup Iteration   3: 0.206 ns/op
Iteration   1: 0.208 ns/op
Iteration   2: 0.208 ns/op
Iteration   3: 0.208 ns/op
Iteration   4: 0.206 ns/op
Iteration   5: 0.206 ns/op

# Run progress: 46.23% complete, ETA 05:15:07
# Fork: 3 of 3
# Warmup Iteration   1: 0.209 ns/op
# Warmup Iteration   2: 0.207 ns/op
# Warmup Iteration   3: 0.206 ns/op
Iteration   1: 0.207 ns/op
Iteration   2: 0.207 ns/op
Iteration   3: 0.206 ns/op
Iteration   4: 0.207 ns/op
Iteration   5: 0.207 ns/op


Result "kotlin_benchmarks.callconv.Inline64long.Q64long_args8_targets0":
  0.207 ±(99.9%) 0.001 ns/op [Average]
  (min, avg, max) = (0.206, 0.207, 0.208), stdev = 0.001
  CI (99.9%): [0.206, 0.208] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.callconv.Inline64long.Q64long_args8_targets1

# Run progress: 46.25% complete, ETA 05:14:58
# Fork: 1 of 3
# Warmup Iteration   1: 0.209 ns/op
# Warmup Iteration   2: 0.207 ns/op
# Warmup Iteration   3: 0.207 ns/op
Iteration   1: 0.208 ns/op
Iteration   2: 0.206 ns/op
Iteration   3: 0.206 ns/op
Iteration   4: 0.207 ns/op
Iteration   5: 0.212 ns/op

# Run progress: 46.27% complete, ETA 05:14:49
# Fork: 2 of 3
# Warmup Iteration   1: 0.209 ns/op
# Warmup Iteration   2: 0.207 ns/op
# Warmup Iteration   3: 0.206 ns/op
Iteration   1: 0.207 ns/op
Iteration   2: 0.206 ns/op
Iteration   3: 0.206 ns/op
Iteration   4: 0.207 ns/op
Iteration   5: 0.206 ns/op

# Run progress: 46.30% complete, ETA 05:14:40
# Fork: 3 of 3
# Warmup Iteration   1: 0.209 ns/op
# Warmup Iteration   2: 0.207 ns/op
# Warmup Iteration   3: 0.208 ns/op
Iteration   1: 0.206 ns/op
Iteration   2: 0.208 ns/op
Iteration   3: 0.207 ns/op
Iteration   4: 0.206 ns/op
Iteration   5: 0.206 ns/op


Result "kotlin_benchmarks.callconv.Inline64long.Q64long_args8_targets1":
  0.207 ±(99.9%) 0.002 ns/op [Average]
  (min, avg, max) = (0.206, 0.207, 0.212), stdev = 0.002
  CI (99.9%): [0.205, 0.209] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.callconv.Inline64long.Q64long_args8_targets2

# Run progress: 46.32% complete, ETA 05:14:31
# Fork: 1 of 3
# Warmup Iteration   1: 0.357 ns/op
# Warmup Iteration   2: 0.349 ns/op
# Warmup Iteration   3: 0.349 ns/op
Iteration   1: 0.348 ns/op
Iteration   2: 0.348 ns/op
Iteration   3: 0.348 ns/op
Iteration   4: 0.348 ns/op
Iteration   5: 0.349 ns/op

# Run progress: 46.35% complete, ETA 05:14:22
# Fork: 2 of 3
# Warmup Iteration   1: 0.355 ns/op
# Warmup Iteration   2: 0.351 ns/op
# Warmup Iteration   3: 0.350 ns/op
Iteration   1: 0.349 ns/op
Iteration   2: 0.349 ns/op
Iteration   3: 0.349 ns/op
Iteration   4: 0.355 ns/op
Iteration   5: 0.348 ns/op

# Run progress: 46.37% complete, ETA 05:14:13
# Fork: 3 of 3
# Warmup Iteration   1: 0.354 ns/op
# Warmup Iteration   2: 0.352 ns/op
# Warmup Iteration   3: 0.348 ns/op
Iteration   1: 0.348 ns/op
Iteration   2: 0.348 ns/op
Iteration   3: 0.348 ns/op
Iteration   4: 0.348 ns/op
Iteration   5: 0.346 ns/op


Result "kotlin_benchmarks.callconv.Inline64long.Q64long_args8_targets2":
  0.349 ±(99.9%) 0.002 ns/op [Average]
  (min, avg, max) = (0.346, 0.349, 0.355), stdev = 0.002
  CI (99.9%): [0.347, 0.351] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.callconv.Inline64long.Q64long_args8_targets3

# Run progress: 46.40% complete, ETA 05:14:04
# Fork: 1 of 3
# Warmup Iteration   1: 113.244 ns/op
# Warmup Iteration   2: 115.855 ns/op
# Warmup Iteration   3: 116.355 ns/op
Iteration   1: 116.392 ns/op
Iteration   2: 115.076 ns/op
Iteration   3: 114.237 ns/op
Iteration   4: 116.239 ns/op
Iteration   5: 114.101 ns/op

# Run progress: 46.42% complete, ETA 05:13:55
# Fork: 2 of 3
# Warmup Iteration   1: 111.269 ns/op
# Warmup Iteration   2: 113.551 ns/op
# Warmup Iteration   3: 113.789 ns/op
Iteration   1: 113.909 ns/op
Iteration   2: 114.105 ns/op
Iteration   3: 113.959 ns/op
Iteration   4: 113.897 ns/op
Iteration   5: 120.577 ns/op

# Run progress: 46.45% complete, ETA 05:13:46
# Fork: 3 of 3
# Warmup Iteration   1: 225.927 ns/op
# Warmup Iteration   2: 237.054 ns/op
# Warmup Iteration   3: 235.654 ns/op
Iteration   1: 238.756 ns/op
Iteration   2: 240.228 ns/op
Iteration   3: 239.933 ns/op
Iteration   4: 242.154 ns/op
Iteration   5: 238.637 ns/op


Result "kotlin_benchmarks.callconv.Inline64long.Q64long_args8_targets3":
  156.813 ±(99.9%) 65.076 ns/op [Average]
  (min, avg, max) = (113.897, 156.813, 242.154), stdev = 60.872
  CI (99.9%): [91.738, 221.889] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.callconv.PrimitiveByte.byte_args1_targets0

# Run progress: 46.47% complete, ETA 05:13:38
# Fork: 1 of 3
# Warmup Iteration   1: 0.417 ns/op
# Warmup Iteration   2: 0.407 ns/op
# Warmup Iteration   3: 0.406 ns/op
Iteration   1: 0.407 ns/op
Iteration   2: 0.407 ns/op
Iteration   3: 0.407 ns/op
Iteration   4: 0.407 ns/op
Iteration   5: 0.407 ns/op

# Run progress: 46.50% complete, ETA 05:13:29
# Fork: 2 of 3
# Warmup Iteration   1: 0.416 ns/op
# Warmup Iteration   2: 0.408 ns/op
# Warmup Iteration   3: 0.408 ns/op
Iteration   1: 0.407 ns/op
Iteration   2: 0.407 ns/op
Iteration   3: 0.407 ns/op
Iteration   4: 0.407 ns/op
Iteration   5: 0.407 ns/op

# Run progress: 46.52% complete, ETA 05:13:20
# Fork: 3 of 3
# Warmup Iteration   1: 0.415 ns/op
# Warmup Iteration   2: 0.408 ns/op
# Warmup Iteration   3: 0.407 ns/op
Iteration   1: 0.294 ns/op
Iteration   2: 0.195 ns/op
Iteration   3: 0.195 ns/op
Iteration   4: 0.229 ns/op
Iteration   5: 0.222 ns/op


Result "kotlin_benchmarks.callconv.PrimitiveByte.byte_args1_targets0":
  0.347 ±(99.9%) 0.097 ns/op [Average]
  (min, avg, max) = (0.195, 0.347, 0.407), stdev = 0.090
  CI (99.9%): [0.250, 0.444] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.callconv.PrimitiveByte.byte_args1_targets1

# Run progress: 46.54% complete, ETA 05:13:11
# Fork: 1 of 3
# Warmup Iteration   1: 0.197 ns/op
# Warmup Iteration   2: 0.195 ns/op
# Warmup Iteration   3: 0.195 ns/op
Iteration   1: 0.195 ns/op
Iteration   2: 0.195 ns/op
Iteration   3: 0.195 ns/op
Iteration   4: 0.195 ns/op
Iteration   5: 0.195 ns/op

# Run progress: 46.57% complete, ETA 05:13:02
# Fork: 2 of 3
# Warmup Iteration   1: 0.197 ns/op
# Warmup Iteration   2: 0.196 ns/op
# Warmup Iteration   3: 0.195 ns/op
Iteration   1: 0.195 ns/op
Iteration   2: 0.197 ns/op
Iteration   3: 0.194 ns/op
Iteration   4: 0.195 ns/op
Iteration   5: 0.196 ns/op

# Run progress: 46.59% complete, ETA 05:12:53
# Fork: 3 of 3
# Warmup Iteration   1: 0.200 ns/op
# Warmup Iteration   2: 0.198 ns/op
# Warmup Iteration   3: 0.196 ns/op
Iteration   1: 0.195 ns/op
Iteration   2: 0.195 ns/op
Iteration   3: 0.195 ns/op
Iteration   4: 0.195 ns/op
Iteration   5: 0.195 ns/op


Result "kotlin_benchmarks.callconv.PrimitiveByte.byte_args1_targets1":
  0.195 ±(99.9%) 0.001 ns/op [Average]
  (min, avg, max) = (0.194, 0.195, 0.197), stdev = 0.001
  CI (99.9%): [0.195, 0.196] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.callconv.PrimitiveByte.byte_args1_targets2

# Run progress: 46.62% complete, ETA 05:12:45
# Fork: 1 of 3
# Warmup Iteration   1: 0.346 ns/op
# Warmup Iteration   2: 0.342 ns/op
# Warmup Iteration   3: 0.345 ns/op
Iteration   1: 0.342 ns/op
Iteration   2: 0.342 ns/op
Iteration   3: 0.342 ns/op
Iteration   4: 0.340 ns/op
Iteration   5: 0.341 ns/op

# Run progress: 46.64% complete, ETA 05:12:36
# Fork: 2 of 3
# Warmup Iteration   1: 0.346 ns/op
# Warmup Iteration   2: 0.344 ns/op
# Warmup Iteration   3: 0.341 ns/op
Iteration   1: 0.343 ns/op
Iteration   2: 0.360 ns/op
Iteration   3: 0.343 ns/op
Iteration   4: 0.347 ns/op
Iteration   5: 0.343 ns/op

# Run progress: 46.67% complete, ETA 05:12:27
# Fork: 3 of 3
# Warmup Iteration   1: 0.346 ns/op
# Warmup Iteration   2: 0.342 ns/op
# Warmup Iteration   3: 0.342 ns/op
Iteration   1: 0.342 ns/op
Iteration   2: 0.342 ns/op
Iteration   3: 0.344 ns/op
Iteration   4: 0.351 ns/op
Iteration   5: 0.348 ns/op


Result "kotlin_benchmarks.callconv.PrimitiveByte.byte_args1_targets2":
  0.345 ±(99.9%) 0.006 ns/op [Average]
  (min, avg, max) = (0.340, 0.345, 0.360), stdev = 0.005
  CI (99.9%): [0.339, 0.350] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.callconv.PrimitiveByte.byte_args1_targets3

# Run progress: 46.69% complete, ETA 05:12:18
# Fork: 1 of 3
# Warmup Iteration   1: 2.914 ns/op
# Warmup Iteration   2: 2.789 ns/op
# Warmup Iteration   3: 2.830 ns/op
Iteration   1: 2.883 ns/op
Iteration   2: 2.846 ns/op
Iteration   3: 2.851 ns/op
Iteration   4: 2.954 ns/op
Iteration   5: 2.844 ns/op

# Run progress: 46.72% complete, ETA 05:12:09
# Fork: 2 of 3
# Warmup Iteration   1: 2.838 ns/op
# Warmup Iteration   2: 2.824 ns/op
# Warmup Iteration   3: 2.853 ns/op
Iteration   1: 2.839 ns/op
Iteration   2: 2.834 ns/op
Iteration   3: 2.838 ns/op
Iteration   4: 2.880 ns/op
Iteration   5: 2.880 ns/op

# Run progress: 46.74% complete, ETA 05:12:00
# Fork: 3 of 3
# Warmup Iteration   1: 2.859 ns/op
# Warmup Iteration   2: 2.811 ns/op
# Warmup Iteration   3: 2.842 ns/op
Iteration   1: 2.883 ns/op
Iteration   2: 2.850 ns/op
Iteration   3: 2.853 ns/op
Iteration   4: 2.847 ns/op
Iteration   5: 2.855 ns/op


Result "kotlin_benchmarks.callconv.PrimitiveByte.byte_args1_targets3":
  2.863 ±(99.9%) 0.033 ns/op [Average]
  (min, avg, max) = (2.834, 2.863, 2.954), stdev = 0.031
  CI (99.9%): [2.830, 2.895] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.callconv.PrimitiveByte.byte_args2_targets0

# Run progress: 46.76% complete, ETA 05:11:51
# Fork: 1 of 3
# Warmup Iteration   1: 0.197 ns/op
# Warmup Iteration   2: 0.195 ns/op
# Warmup Iteration   3: 0.196 ns/op
Iteration   1: 0.195 ns/op
Iteration   2: 0.195 ns/op
Iteration   3: 0.195 ns/op
Iteration   4: 0.195 ns/op
Iteration   5: 0.195 ns/op

# Run progress: 46.79% complete, ETA 05:11:42
# Fork: 2 of 3
# Warmup Iteration   1: 0.197 ns/op
# Warmup Iteration   2: 0.195 ns/op
# Warmup Iteration   3: 0.195 ns/op
Iteration   1: 0.195 ns/op
Iteration   2: 0.195 ns/op
Iteration   3: 0.195 ns/op
Iteration   4: 0.196 ns/op
Iteration   5: 0.195 ns/op

# Run progress: 46.81% complete, ETA 05:11:33
# Fork: 3 of 3
# Warmup Iteration   1: 0.196 ns/op
# Warmup Iteration   2: 0.195 ns/op
# Warmup Iteration   3: 0.195 ns/op
Iteration   1: 0.196 ns/op
Iteration   2: 0.197 ns/op
Iteration   3: 0.197 ns/op
Iteration   4: 0.197 ns/op
Iteration   5: 0.196 ns/op


Result "kotlin_benchmarks.callconv.PrimitiveByte.byte_args2_targets0":
  0.196 ±(99.9%) 0.001 ns/op [Average]
  (min, avg, max) = (0.195, 0.196, 0.197), stdev = 0.001
  CI (99.9%): [0.195, 0.196] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.callconv.PrimitiveByte.byte_args2_targets1

# Run progress: 46.84% complete, ETA 05:11:24
# Fork: 1 of 3
# Warmup Iteration   1: 0.197 ns/op
# Warmup Iteration   2: 0.204 ns/op
# Warmup Iteration   3: 0.195 ns/op
Iteration   1: 0.195 ns/op
Iteration   2: 0.195 ns/op
Iteration   3: 0.195 ns/op
Iteration   4: 0.195 ns/op
Iteration   5: 0.195 ns/op

# Run progress: 46.86% complete, ETA 05:11:15
# Fork: 2 of 3
# Warmup Iteration   1: 0.197 ns/op
# Warmup Iteration   2: 0.195 ns/op
# Warmup Iteration   3: 0.195 ns/op
Iteration   1: 0.195 ns/op
Iteration   2: 0.195 ns/op
Iteration   3: 0.197 ns/op
Iteration   4: 0.197 ns/op
Iteration   5: 0.195 ns/op

# Run progress: 46.89% complete, ETA 05:11:06
# Fork: 3 of 3
# Warmup Iteration   1: 0.198 ns/op
# Warmup Iteration   2: 0.195 ns/op
# Warmup Iteration   3: 0.195 ns/op
Iteration   1: 0.195 ns/op
Iteration   2: 0.196 ns/op
Iteration   3: 0.195 ns/op
Iteration   4: 0.195 ns/op
Iteration   5: 0.195 ns/op


Result "kotlin_benchmarks.callconv.PrimitiveByte.byte_args2_targets1":
  0.195 ±(99.9%) 0.001 ns/op [Average]
  (min, avg, max) = (0.195, 0.195, 0.197), stdev = 0.001
  CI (99.9%): [0.195, 0.196] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.callconv.PrimitiveByte.byte_args2_targets2

# Run progress: 46.91% complete, ETA 05:10:58
# Fork: 1 of 3
# Warmup Iteration   1: 0.346 ns/op
# Warmup Iteration   2: 0.342 ns/op
# Warmup Iteration   3: 0.351 ns/op
Iteration   1: 0.353 ns/op
Iteration   2: 0.352 ns/op
Iteration   3: 0.354 ns/op
Iteration   4: 0.353 ns/op
Iteration   5: 0.408 ns/op

# Run progress: 46.94% complete, ETA 05:10:49
# Fork: 2 of 3
# Warmup Iteration   1: 0.347 ns/op
# Warmup Iteration   2: 0.343 ns/op
# Warmup Iteration   3: 0.352 ns/op
Iteration   1: 0.355 ns/op
Iteration   2: 0.352 ns/op
Iteration   3: 0.351 ns/op
Iteration   4: 0.352 ns/op
Iteration   5: 0.352 ns/op

# Run progress: 46.96% complete, ETA 05:10:40
# Fork: 3 of 3
# Warmup Iteration   1: 0.345 ns/op
# Warmup Iteration   2: 0.343 ns/op
# Warmup Iteration   3: 0.353 ns/op
Iteration   1: 0.358 ns/op
Iteration   2: 0.355 ns/op
Iteration   3: 0.360 ns/op
Iteration   4: 0.358 ns/op
Iteration   5: 0.352 ns/op


Result "kotlin_benchmarks.callconv.PrimitiveByte.byte_args2_targets2":
  0.358 ±(99.9%) 0.015 ns/op [Average]
  (min, avg, max) = (0.351, 0.358, 0.408), stdev = 0.014
  CI (99.9%): [0.342, 0.373] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.callconv.PrimitiveByte.byte_args2_targets3

# Run progress: 46.99% complete, ETA 05:10:31
# Fork: 1 of 3
# Warmup Iteration   1: 2.860 ns/op
# Warmup Iteration   2: 2.853 ns/op
# Warmup Iteration   3: 2.900 ns/op
Iteration   1: 2.960 ns/op
Iteration   2: 2.846 ns/op
Iteration   3: 2.858 ns/op
Iteration   4: 2.841 ns/op
Iteration   5: 2.841 ns/op

# Run progress: 47.01% complete, ETA 05:10:22
# Fork: 2 of 3
# Warmup Iteration   1: 2.557 ns/op
# Warmup Iteration   2: 2.551 ns/op
# Warmup Iteration   3: 2.557 ns/op
Iteration   1: 2.537 ns/op
Iteration   2: 2.552 ns/op
Iteration   3: 2.514 ns/op
Iteration   4: 2.523 ns/op
Iteration   5: 2.545 ns/op

# Run progress: 47.03% complete, ETA 05:10:13
# Fork: 3 of 3
# Warmup Iteration   1: 2.851 ns/op
# Warmup Iteration   2: 2.848 ns/op
# Warmup Iteration   3: 2.845 ns/op
Iteration   1: 2.834 ns/op
Iteration   2: 2.844 ns/op
Iteration   3: 2.841 ns/op
Iteration   4: 2.841 ns/op
Iteration   5: 2.846 ns/op


Result "kotlin_benchmarks.callconv.PrimitiveByte.byte_args2_targets3":
  2.748 ±(99.9%) 0.171 ns/op [Average]
  (min, avg, max) = (2.514, 2.748, 2.960), stdev = 0.160
  CI (99.9%): [2.578, 2.919] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.callconv.PrimitiveByte.byte_args4_targets0

# Run progress: 47.06% complete, ETA 05:10:04
# Fork: 1 of 3
# Warmup Iteration   1: 0.201 ns/op
# Warmup Iteration   2: 0.197 ns/op
# Warmup Iteration   3: 0.196 ns/op
Iteration   1: 0.197 ns/op
Iteration   2: 0.197 ns/op
Iteration   3: 0.195 ns/op
Iteration   4: 0.196 ns/op
Iteration   5: 0.198 ns/op

# Run progress: 47.08% complete, ETA 05:09:55
# Fork: 2 of 3
# Warmup Iteration   1: 0.197 ns/op
# Warmup Iteration   2: 0.195 ns/op
# Warmup Iteration   3: 0.195 ns/op
Iteration   1: 0.195 ns/op
Iteration   2: 0.195 ns/op
Iteration   3: 0.195 ns/op
Iteration   4: 0.196 ns/op
Iteration   5: 0.195 ns/op

# Run progress: 47.11% complete, ETA 05:09:46
# Fork: 3 of 3
# Warmup Iteration   1: 0.197 ns/op
# Warmup Iteration   2: 0.195 ns/op
# Warmup Iteration   3: 0.197 ns/op
Iteration   1: 0.196 ns/op
Iteration   2: 0.195 ns/op
Iteration   3: 0.195 ns/op
Iteration   4: 0.196 ns/op
Iteration   5: 0.196 ns/op


Result "kotlin_benchmarks.callconv.PrimitiveByte.byte_args4_targets0":
  0.196 ±(99.9%) 0.001 ns/op [Average]
  (min, avg, max) = (0.195, 0.196, 0.198), stdev = 0.001
  CI (99.9%): [0.195, 0.197] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.callconv.PrimitiveByte.byte_args4_targets1

# Run progress: 47.13% complete, ETA 05:09:37
# Fork: 1 of 3
# Warmup Iteration   1: 0.198 ns/op
# Warmup Iteration   2: 0.196 ns/op
# Warmup Iteration   3: 0.195 ns/op
Iteration   1: 0.195 ns/op
Iteration   2: 0.195 ns/op
Iteration   3: 0.195 ns/op
Iteration   4: 0.195 ns/op
Iteration   5: 0.197 ns/op

# Run progress: 47.16% complete, ETA 05:09:28
# Fork: 2 of 3
# Warmup Iteration   1: 0.200 ns/op
# Warmup Iteration   2: 0.199 ns/op
# Warmup Iteration   3: 0.196 ns/op
Iteration   1: 0.196 ns/op
Iteration   2: 0.195 ns/op
Iteration   3: 0.195 ns/op
Iteration   4: 0.195 ns/op
Iteration   5: 0.195 ns/op

# Run progress: 47.18% complete, ETA 05:09:19
# Fork: 3 of 3
# Warmup Iteration   1: 0.198 ns/op
# Warmup Iteration   2: 0.196 ns/op
# Warmup Iteration   3: 0.195 ns/op
Iteration   1: 0.195 ns/op
Iteration   2: 0.195 ns/op
Iteration   3: 0.195 ns/op
Iteration   4: 0.195 ns/op
Iteration   5: 0.198 ns/op


Result "kotlin_benchmarks.callconv.PrimitiveByte.byte_args4_targets1":
  0.195 ±(99.9%) 0.001 ns/op [Average]
  (min, avg, max) = (0.195, 0.195, 0.198), stdev = 0.001
  CI (99.9%): [0.195, 0.196] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.callconv.PrimitiveByte.byte_args4_targets2

# Run progress: 47.21% complete, ETA 05:09:10
# Fork: 1 of 3
# Warmup Iteration   1: 0.363 ns/op
# Warmup Iteration   2: 0.348 ns/op
# Warmup Iteration   3: 0.342 ns/op
Iteration   1: 0.342 ns/op
Iteration   2: 0.348 ns/op
Iteration   3: 0.342 ns/op
Iteration   4: 0.359 ns/op
Iteration   5: 0.383 ns/op

# Run progress: 47.23% complete, ETA 05:09:01
# Fork: 2 of 3
# Warmup Iteration   1: 0.348 ns/op
# Warmup Iteration   2: 0.345 ns/op
# Warmup Iteration   3: 0.343 ns/op
Iteration   1: 0.420 ns/op
Iteration   2: 0.495 ns/op
Iteration   3: 0.623 ns/op
Iteration   4: 0.806 ns/op
Iteration   5: 0.711 ns/op

# Run progress: 47.25% complete, ETA 05:08:52
# Fork: 3 of 3
# Warmup Iteration   1: 0.729 ns/op
# Warmup Iteration   2: 0.713 ns/op
# Warmup Iteration   3: 0.713 ns/op
Iteration   1: 0.716 ns/op
Iteration   2: 0.713 ns/op
Iteration   3: 0.715 ns/op
Iteration   4: 0.714 ns/op
Iteration   5: 0.713 ns/op


Result "kotlin_benchmarks.callconv.PrimitiveByte.byte_args4_targets2":
  0.560 ±(99.9%) 0.190 ns/op [Average]
  (min, avg, max) = (0.342, 0.560, 0.806), stdev = 0.178
  CI (99.9%): [0.370, 0.750] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.callconv.PrimitiveByte.byte_args4_targets3

# Run progress: 47.28% complete, ETA 05:08:44
# Fork: 1 of 3
# Warmup Iteration   1: 6.006 ns/op
# Warmup Iteration   2: 5.936 ns/op
# Warmup Iteration   3: 5.931 ns/op
Iteration   1: 5.934 ns/op
Iteration   2: 5.937 ns/op
Iteration   3: 5.937 ns/op
Iteration   4: 5.918 ns/op
Iteration   5: 5.955 ns/op

# Run progress: 47.30% complete, ETA 05:08:35
# Fork: 2 of 3
# Warmup Iteration   1: 7.052 ns/op
# Warmup Iteration   2: 7.164 ns/op
# Warmup Iteration   3: 7.812 ns/op
Iteration   1: 8.674 ns/op
Iteration   2: 7.966 ns/op
Iteration   3: 7.150 ns/op
Iteration   4: 7.626 ns/op
Iteration   5: 9.198 ns/op

# Run progress: 47.33% complete, ETA 05:08:26
# Fork: 3 of 3
# Warmup Iteration   1: 7.963 ns/op
# Warmup Iteration   2: 7.457 ns/op
# Warmup Iteration   3: 3.441 ns/op
Iteration   1: 2.852 ns/op
Iteration   2: 2.836 ns/op
Iteration   3: 2.839 ns/op
Iteration   4: 2.841 ns/op
Iteration   5: 2.826 ns/op


Result "kotlin_benchmarks.callconv.PrimitiveByte.byte_args4_targets3":
  5.633 ±(99.9%) 2.444 ns/op [Average]
  (min, avg, max) = (2.826, 5.633, 9.198), stdev = 2.286
  CI (99.9%): [3.188, 8.077] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.callconv.PrimitiveByte.byte_args8_targets0

# Run progress: 47.35% complete, ETA 05:08:21
# Fork: 1 of 3
# Warmup Iteration   1: 0.198 ns/op
# Warmup Iteration   2: 0.196 ns/op
# Warmup Iteration   3: 0.195 ns/op
Iteration   1: 0.194 ns/op
Iteration   2: 0.194 ns/op
Iteration   3: 0.195 ns/op
Iteration   4: 0.197 ns/op
Iteration   5: 0.195 ns/op

# Run progress: 47.38% complete, ETA 05:08:12
# Fork: 2 of 3
# Warmup Iteration   1: 0.197 ns/op
# Warmup Iteration   2: 0.196 ns/op
# Warmup Iteration   3: 0.196 ns/op
Iteration   1: 0.197 ns/op
Iteration   2: 0.198 ns/op
Iteration   3: 0.197 ns/op
Iteration   4: 0.197 ns/op
Iteration   5: 0.196 ns/op

# Run progress: 47.40% complete, ETA 05:08:03
# Fork: 3 of 3
# Warmup Iteration   1: 0.197 ns/op
# Warmup Iteration   2: 0.196 ns/op
# Warmup Iteration   3: 0.197 ns/op
Iteration   1: 0.197 ns/op
Iteration   2: 0.195 ns/op
Iteration   3: 0.198 ns/op
Iteration   4: 0.195 ns/op
Iteration   5: 0.196 ns/op


Result "kotlin_benchmarks.callconv.PrimitiveByte.byte_args8_targets0":
  0.196 ±(99.9%) 0.002 ns/op [Average]
  (min, avg, max) = (0.194, 0.196, 0.198), stdev = 0.001
  CI (99.9%): [0.195, 0.198] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.callconv.PrimitiveByte.byte_args8_targets1

# Run progress: 47.43% complete, ETA 05:07:54
# Fork: 1 of 3
# Warmup Iteration   1: 0.200 ns/op
# Warmup Iteration   2: 0.199 ns/op
# Warmup Iteration   3: 0.195 ns/op
Iteration   1: 0.198 ns/op
Iteration   2: 0.195 ns/op
Iteration   3: 0.198 ns/op
Iteration   4: 0.195 ns/op
Iteration   5: 0.198 ns/op

# Run progress: 47.45% complete, ETA 05:07:45
# Fork: 2 of 3
# Warmup Iteration   1: 0.197 ns/op
# Warmup Iteration   2: 0.195 ns/op
# Warmup Iteration   3: 0.198 ns/op
Iteration   1: 0.224 ns/op
Iteration   2: 0.196 ns/op
Iteration   3: 0.195 ns/op
Iteration   4: 0.195 ns/op
Iteration   5: 0.195 ns/op

# Run progress: 47.48% complete, ETA 05:07:36
# Fork: 3 of 3
# Warmup Iteration   1: 0.197 ns/op
# Warmup Iteration   2: 0.197 ns/op
# Warmup Iteration   3: 0.195 ns/op
Iteration   1: 0.196 ns/op
Iteration   2: 0.197 ns/op
Iteration   3: 0.195 ns/op
Iteration   4: 0.196 ns/op
Iteration   5: 0.197 ns/op


Result "kotlin_benchmarks.callconv.PrimitiveByte.byte_args8_targets1":
  0.198 ±(99.9%) 0.008 ns/op [Average]
  (min, avg, max) = (0.195, 0.198, 0.224), stdev = 0.007
  CI (99.9%): [0.190, 0.206] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.callconv.PrimitiveByte.byte_args8_targets2

# Run progress: 47.50% complete, ETA 05:07:27
# Fork: 1 of 3
# Warmup Iteration   1: 0.349 ns/op
# Warmup Iteration   2: 0.343 ns/op
# Warmup Iteration   3: 0.354 ns/op
Iteration   1: 0.349 ns/op
Iteration   2: 0.348 ns/op
Iteration   3: 0.348 ns/op
Iteration   4: 0.349 ns/op
Iteration   5: 0.354 ns/op

# Run progress: 47.52% complete, ETA 05:07:18
# Fork: 2 of 3
# Warmup Iteration   1: 0.354 ns/op
# Warmup Iteration   2: 0.350 ns/op
# Warmup Iteration   3: 0.345 ns/op
Iteration   1: 0.344 ns/op
Iteration   2: 0.343 ns/op
Iteration   3: 0.343 ns/op
Iteration   4: 0.348 ns/op
Iteration   5: 0.342 ns/op

# Run progress: 47.55% complete, ETA 05:07:09
# Fork: 3 of 3
# Warmup Iteration   1: 0.348 ns/op
# Warmup Iteration   2: 0.344 ns/op
# Warmup Iteration   3: 0.343 ns/op
Iteration   1: 0.342 ns/op
Iteration   2: 0.342 ns/op
Iteration   3: 0.342 ns/op
Iteration   4: 0.344 ns/op
Iteration   5: 0.348 ns/op


Result "kotlin_benchmarks.callconv.PrimitiveByte.byte_args8_targets2":
  0.346 ±(99.9%) 0.004 ns/op [Average]
  (min, avg, max) = (0.342, 0.346, 0.354), stdev = 0.004
  CI (99.9%): [0.342, 0.350] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.callconv.PrimitiveByte.byte_args8_targets3

# Run progress: 47.57% complete, ETA 05:07:00
# Fork: 1 of 3
# Warmup Iteration   1: 2.895 ns/op
# Warmup Iteration   2: 2.794 ns/op
# Warmup Iteration   3: 2.861 ns/op
Iteration   1: 2.833 ns/op
Iteration   2: 2.872 ns/op
Iteration   3: 2.845 ns/op
Iteration   4: 2.928 ns/op
Iteration   5: 2.963 ns/op

# Run progress: 47.60% complete, ETA 05:06:52
# Fork: 2 of 3
# Warmup Iteration   1: 3.137 ns/op
# Warmup Iteration   2: 3.121 ns/op
# Warmup Iteration   3: 3.157 ns/op
Iteration   1: 3.153 ns/op
Iteration   2: 3.161 ns/op
Iteration   3: 3.176 ns/op
Iteration   4: 3.158 ns/op
Iteration   5: 3.178 ns/op

# Run progress: 47.62% complete, ETA 05:06:43
# Fork: 3 of 3
# Warmup Iteration   1: 3.143 ns/op
# Warmup Iteration   2: 3.147 ns/op
# Warmup Iteration   3: 3.159 ns/op
Iteration   1: 3.162 ns/op
Iteration   2: 3.168 ns/op
Iteration   3: 3.218 ns/op
Iteration   4: 3.203 ns/op
Iteration   5: 3.154 ns/op


Result "kotlin_benchmarks.callconv.PrimitiveByte.byte_args8_targets3":
  3.078 ±(99.9%) 0.153 ns/op [Average]
  (min, avg, max) = (2.833, 3.078, 3.218), stdev = 0.143
  CI (99.9%): [2.925, 3.231] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.callconv.PrimitiveInt.int_args1_targets0

# Run progress: 47.65% complete, ETA 05:06:34
# Fork: 1 of 3
# Warmup Iteration   1: 0.197 ns/op
# Warmup Iteration   2: 0.198 ns/op
# Warmup Iteration   3: 0.196 ns/op
Iteration   1: 0.196 ns/op
Iteration   2: 0.195 ns/op
Iteration   3: 0.195 ns/op
Iteration   4: 0.199 ns/op
Iteration   5: 0.196 ns/op

# Run progress: 47.67% complete, ETA 05:06:25
# Fork: 2 of 3
# Warmup Iteration   1: 0.198 ns/op
# Warmup Iteration   2: 0.197 ns/op
# Warmup Iteration   3: 0.196 ns/op
Iteration   1: 0.197 ns/op
Iteration   2: 0.200 ns/op
Iteration   3: 0.196 ns/op
Iteration   4: 0.195 ns/op
Iteration   5: 0.196 ns/op

# Run progress: 47.70% complete, ETA 05:06:16
# Fork: 3 of 3
# Warmup Iteration   1: 0.197 ns/op
# Warmup Iteration   2: 0.197 ns/op
# Warmup Iteration   3: 0.196 ns/op
Iteration   1: 0.196 ns/op
Iteration   2: 0.196 ns/op
Iteration   3: 0.198 ns/op
Iteration   4: 0.195 ns/op
Iteration   5: 0.196 ns/op


Result "kotlin_benchmarks.callconv.PrimitiveInt.int_args1_targets0":
  0.197 ±(99.9%) 0.001 ns/op [Average]
  (min, avg, max) = (0.195, 0.197, 0.200), stdev = 0.001
  CI (99.9%): [0.195, 0.198] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.callconv.PrimitiveInt.int_args1_targets1

# Run progress: 47.72% complete, ETA 05:06:07
# Fork: 1 of 3
# Warmup Iteration   1: 0.198 ns/op
# Warmup Iteration   2: 0.197 ns/op
# Warmup Iteration   3: 0.197 ns/op
Iteration   1: 0.196 ns/op
Iteration   2: 0.202 ns/op
Iteration   3: 0.195 ns/op
Iteration   4: 0.195 ns/op
Iteration   5: 0.196 ns/op

# Run progress: 47.75% complete, ETA 05:05:58
# Fork: 2 of 3
# Warmup Iteration   1: 0.197 ns/op
# Warmup Iteration   2: 0.196 ns/op
# Warmup Iteration   3: 0.195 ns/op
Iteration   1: 0.195 ns/op
Iteration   2: 0.198 ns/op
Iteration   3: 0.194 ns/op
Iteration   4: 0.195 ns/op
Iteration   5: 0.198 ns/op

# Run progress: 47.77% complete, ETA 05:05:49
# Fork: 3 of 3
# Warmup Iteration   1: 0.198 ns/op
# Warmup Iteration   2: 0.198 ns/op
# Warmup Iteration   3: 0.204 ns/op
Iteration   1: 0.196 ns/op
Iteration   2: 0.196 ns/op
Iteration   3: 0.196 ns/op
Iteration   4: 0.196 ns/op
Iteration   5: 0.195 ns/op


Result "kotlin_benchmarks.callconv.PrimitiveInt.int_args1_targets1":
  0.196 ±(99.9%) 0.002 ns/op [Average]
  (min, avg, max) = (0.194, 0.196, 0.202), stdev = 0.002
  CI (99.9%): [0.194, 0.198] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.callconv.PrimitiveInt.int_args1_targets2

# Run progress: 47.79% complete, ETA 05:05:40
# Fork: 1 of 3
# Warmup Iteration   1: 0.345 ns/op
# Warmup Iteration   2: 0.343 ns/op
# Warmup Iteration   3: 0.342 ns/op
Iteration   1: 0.342 ns/op
Iteration   2: 0.343 ns/op
Iteration   3: 0.346 ns/op
Iteration   4: 0.345 ns/op
Iteration   5: 0.346 ns/op

# Run progress: 47.82% complete, ETA 05:05:31
# Fork: 2 of 3
# Warmup Iteration   1: 0.346 ns/op
# Warmup Iteration   2: 0.347 ns/op
# Warmup Iteration   3: 0.346 ns/op
Iteration   1: 0.362 ns/op
Iteration   2: 0.344 ns/op
Iteration   3: 0.343 ns/op
Iteration   4: 0.344 ns/op
Iteration   5: 0.342 ns/op

# Run progress: 47.84% complete, ETA 05:05:22
# Fork: 3 of 3
# Warmup Iteration   1: 0.348 ns/op
# Warmup Iteration   2: 0.343 ns/op
# Warmup Iteration   3: 0.352 ns/op
Iteration   1: 0.342 ns/op
Iteration   2: 0.344 ns/op
Iteration   3: 0.345 ns/op
Iteration   4: 0.347 ns/op
Iteration   5: 0.345 ns/op


Result "kotlin_benchmarks.callconv.PrimitiveInt.int_args1_targets2":
  0.345 ±(99.9%) 0.005 ns/op [Average]
  (min, avg, max) = (0.342, 0.345, 0.362), stdev = 0.005
  CI (99.9%): [0.340, 0.350] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.callconv.PrimitiveInt.int_args1_targets3

# Run progress: 47.87% complete, ETA 05:05:13
# Fork: 1 of 3
# Warmup Iteration   1: 2.554 ns/op
# Warmup Iteration   2: 2.544 ns/op
# Warmup Iteration   3: 2.614 ns/op
Iteration   1: 2.532 ns/op
Iteration   2: 2.536 ns/op
Iteration   3: 2.547 ns/op
Iteration   4: 2.543 ns/op
Iteration   5: 2.545 ns/op

# Run progress: 47.89% complete, ETA 05:05:05
# Fork: 2 of 3
# Warmup Iteration   1: 2.851 ns/op
# Warmup Iteration   2: 2.869 ns/op
# Warmup Iteration   3: 2.859 ns/op
Iteration   1: 2.895 ns/op
Iteration   2: 2.869 ns/op
Iteration   3: 2.843 ns/op
Iteration   4: 2.861 ns/op
Iteration   5: 2.854 ns/op

# Run progress: 47.92% complete, ETA 05:04:56
# Fork: 3 of 3
# Warmup Iteration   1: 2.848 ns/op
# Warmup Iteration   2: 2.827 ns/op
# Warmup Iteration   3: 2.842 ns/op
Iteration   1: 2.847 ns/op
Iteration   2: 2.843 ns/op
Iteration   3: 2.864 ns/op
Iteration   4: 2.831 ns/op
Iteration   5: 2.843 ns/op


Result "kotlin_benchmarks.callconv.PrimitiveInt.int_args1_targets3":
  2.750 ±(99.9%) 0.165 ns/op [Average]
  (min, avg, max) = (2.532, 2.750, 2.895), stdev = 0.154
  CI (99.9%): [2.585, 2.915] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.callconv.PrimitiveInt.int_args2_targets0

# Run progress: 47.94% complete, ETA 05:04:47
# Fork: 1 of 3
# Warmup Iteration   1: 0.198 ns/op
# Warmup Iteration   2: 0.195 ns/op
# Warmup Iteration   3: 0.195 ns/op
Iteration   1: 0.196 ns/op
Iteration   2: 0.197 ns/op
Iteration   3: 0.196 ns/op
Iteration   4: 0.196 ns/op
Iteration   5: 0.196 ns/op

# Run progress: 47.97% complete, ETA 05:04:38
# Fork: 2 of 3
# Warmup Iteration   1: 0.197 ns/op
# Warmup Iteration   2: 0.196 ns/op
# Warmup Iteration   3: 0.195 ns/op
Iteration   1: 0.196 ns/op
Iteration   2: 0.195 ns/op
Iteration   3: 0.195 ns/op
Iteration   4: 0.195 ns/op
Iteration   5: 0.195 ns/op

# Run progress: 47.99% complete, ETA 05:04:29
# Fork: 3 of 3
# Warmup Iteration   1: 0.197 ns/op
# Warmup Iteration   2: 0.196 ns/op
# Warmup Iteration   3: 0.197 ns/op
Iteration   1: 0.196 ns/op
Iteration   2: 0.197 ns/op
Iteration   3: 0.195 ns/op
Iteration   4: 0.196 ns/op
Iteration   5: 0.196 ns/op


Result "kotlin_benchmarks.callconv.PrimitiveInt.int_args2_targets0":
  0.196 ±(99.9%) 0.001 ns/op [Average]
  (min, avg, max) = (0.195, 0.196, 0.197), stdev = 0.001
  CI (99.9%): [0.195, 0.197] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.callconv.PrimitiveInt.int_args2_targets1

# Run progress: 48.01% complete, ETA 05:04:20
# Fork: 1 of 3
# Warmup Iteration   1: 0.198 ns/op
# Warmup Iteration   2: 0.196 ns/op
# Warmup Iteration   3: 0.201 ns/op
Iteration   1: 0.199 ns/op
Iteration   2: 0.195 ns/op
Iteration   3: 0.195 ns/op
Iteration   4: 0.196 ns/op
Iteration   5: 0.196 ns/op

# Run progress: 48.04% complete, ETA 05:04:11
# Fork: 2 of 3
# Warmup Iteration   1: 0.197 ns/op
# Warmup Iteration   2: 0.197 ns/op
# Warmup Iteration   3: 0.197 ns/op
Iteration   1: 0.195 ns/op
Iteration   2: 0.196 ns/op
Iteration   3: 0.198 ns/op
Iteration   4: 0.197 ns/op
Iteration   5: 0.196 ns/op

# Run progress: 48.06% complete, ETA 05:04:02
# Fork: 3 of 3
# Warmup Iteration   1: 0.199 ns/op
# Warmup Iteration   2: 0.214 ns/op
# Warmup Iteration   3: 0.228 ns/op
Iteration   1: 0.201 ns/op
Iteration   2: 0.203 ns/op
Iteration   3: 0.210 ns/op
Iteration   4: 0.249 ns/op
Iteration   5: 0.266 ns/op


Result "kotlin_benchmarks.callconv.PrimitiveInt.int_args2_targets1":
  0.206 ±(99.9%) 0.023 ns/op [Average]
  (min, avg, max) = (0.195, 0.206, 0.266), stdev = 0.021
  CI (99.9%): [0.183, 0.229] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.callconv.PrimitiveInt.int_args2_targets2

# Run progress: 48.09% complete, ETA 05:03:53
# Fork: 1 of 3
# Warmup Iteration   1: 0.446 ns/op
# Warmup Iteration   2: 0.384 ns/op
# Warmup Iteration   3: 0.377 ns/op
Iteration   1: 0.376 ns/op
Iteration   2: 0.355 ns/op
Iteration   3: 0.356 ns/op
Iteration   4: 0.353 ns/op
Iteration   5: 0.364 ns/op

# Run progress: 48.11% complete, ETA 05:03:44
# Fork: 2 of 3
# Warmup Iteration   1: 0.510 ns/op
# Warmup Iteration   2: 0.415 ns/op
# Warmup Iteration   3: 0.386 ns/op
Iteration   1: 0.357 ns/op
Iteration   2: 0.395 ns/op
Iteration   3: 0.446 ns/op
Iteration   4: 0.453 ns/op
Iteration   5: 0.437 ns/op

# Run progress: 48.14% complete, ETA 05:03:36
# Fork: 3 of 3
# Warmup Iteration   1: 0.350 ns/op
# Warmup Iteration   2: 0.345 ns/op
# Warmup Iteration   3: 0.353 ns/op
Iteration   1: 0.353 ns/op
Iteration   2: 0.357 ns/op
Iteration   3: 0.355 ns/op
Iteration   4: 0.368 ns/op
Iteration   5: 0.402 ns/op


Result "kotlin_benchmarks.callconv.PrimitiveInt.int_args2_targets2":
  0.382 ±(99.9%) 0.039 ns/op [Average]
  (min, avg, max) = (0.353, 0.382, 0.453), stdev = 0.036
  CI (99.9%): [0.343, 0.420] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.callconv.PrimitiveInt.int_args2_targets3

# Run progress: 48.16% complete, ETA 05:03:27
# Fork: 1 of 3
# Warmup Iteration   1: 5.699 ns/op
# Warmup Iteration   2: 5.888 ns/op
# Warmup Iteration   3: 5.916 ns/op
Iteration   1: 5.921 ns/op
Iteration   2: 5.948 ns/op
Iteration   3: 5.901 ns/op
Iteration   4: 5.893 ns/op
Iteration   5: 5.890 ns/op

# Run progress: 48.19% complete, ETA 05:03:18
# Fork: 2 of 3
# Warmup Iteration   1: 6.035 ns/op
# Warmup Iteration   2: 5.914 ns/op
# Warmup Iteration   3: 5.880 ns/op
Iteration   1: 5.943 ns/op
Iteration   2: 5.888 ns/op
Iteration   3: 5.917 ns/op
Iteration   4: 5.921 ns/op
Iteration   5: 5.888 ns/op

# Run progress: 48.21% complete, ETA 05:03:09
# Fork: 3 of 3
# Warmup Iteration   1: 5.975 ns/op
# Warmup Iteration   2: 5.914 ns/op
# Warmup Iteration   3: 5.889 ns/op
Iteration   1: 5.883 ns/op
Iteration   2: 5.911 ns/op
Iteration   3: 5.883 ns/op
Iteration   4: 7.114 ns/op
Iteration   5: 3.013 ns/op


Result "kotlin_benchmarks.callconv.PrimitiveInt.int_args2_targets3":
  5.794 ±(99.9%) 0.888 ns/op [Average]
  (min, avg, max) = (3.013, 5.794, 7.114), stdev = 0.830
  CI (99.9%): [4.907, 6.682] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.callconv.PrimitiveInt.int_args4_targets0

# Run progress: 48.24% complete, ETA 05:03:00
# Fork: 1 of 3
# Warmup Iteration   1: 0.285 ns/op
# Warmup Iteration   2: 0.316 ns/op
# Warmup Iteration   3: 0.222 ns/op
Iteration   1: 0.196 ns/op
Iteration   2: 0.196 ns/op
Iteration   3: 0.197 ns/op
Iteration   4: 0.195 ns/op
Iteration   5: 0.195 ns/op

# Run progress: 48.26% complete, ETA 05:02:52
# Fork: 2 of 3
# Warmup Iteration   1: 0.198 ns/op
# Warmup Iteration   2: 0.197 ns/op
# Warmup Iteration   3: 0.195 ns/op
Iteration   1: 0.196 ns/op
Iteration   2: 0.195 ns/op
Iteration   3: 0.197 ns/op
Iteration   4: 0.195 ns/op
Iteration   5: 0.195 ns/op

# Run progress: 48.28% complete, ETA 05:02:43
# Fork: 3 of 3
# Warmup Iteration   1: 0.201 ns/op
# Warmup Iteration   2: 0.197 ns/op
# Warmup Iteration   3: 0.195 ns/op
Iteration   1: 0.199 ns/op
Iteration   2: 0.198 ns/op
Iteration   3: 0.196 ns/op
Iteration   4: 0.195 ns/op
Iteration   5: 0.195 ns/op


Result "kotlin_benchmarks.callconv.PrimitiveInt.int_args4_targets0":
  0.196 ±(99.9%) 0.001 ns/op [Average]
  (min, avg, max) = (0.195, 0.196, 0.199), stdev = 0.001
  CI (99.9%): [0.195, 0.197] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.callconv.PrimitiveInt.int_args4_targets1

# Run progress: 48.31% complete, ETA 05:02:34
# Fork: 1 of 3
# Warmup Iteration   1: 0.197 ns/op
# Warmup Iteration   2: 0.197 ns/op
# Warmup Iteration   3: 0.196 ns/op
Iteration   1: 0.195 ns/op
Iteration   2: 0.196 ns/op
Iteration   3: 0.195 ns/op
Iteration   4: 0.195 ns/op
Iteration   5: 0.197 ns/op

# Run progress: 48.33% complete, ETA 05:02:25
# Fork: 2 of 3
# Warmup Iteration   1: 0.200 ns/op
# Warmup Iteration   2: 0.197 ns/op
# Warmup Iteration   3: 0.197 ns/op
Iteration   1: 0.200 ns/op
Iteration   2: 0.200 ns/op
Iteration   3: 0.195 ns/op
Iteration   4: 0.195 ns/op
Iteration   5: 0.196 ns/op

# Run progress: 48.36% complete, ETA 05:02:16
# Fork: 3 of 3
# Warmup Iteration   1: 0.197 ns/op
# Warmup Iteration   2: 0.197 ns/op
# Warmup Iteration   3: 0.196 ns/op
Iteration   1: 0.195 ns/op
Iteration   2: 0.196 ns/op
Iteration   3: 0.197 ns/op
Iteration   4: 0.198 ns/op
Iteration   5: 0.196 ns/op


Result "kotlin_benchmarks.callconv.PrimitiveInt.int_args4_targets1":
  0.196 ±(99.9%) 0.002 ns/op [Average]
  (min, avg, max) = (0.195, 0.196, 0.200), stdev = 0.002
  CI (99.9%): [0.195, 0.198] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.callconv.PrimitiveInt.int_args4_targets2

# Run progress: 48.38% complete, ETA 05:02:07
# Fork: 1 of 3
# Warmup Iteration   1: 0.347 ns/op
# Warmup Iteration   2: 0.344 ns/op
# Warmup Iteration   3: 0.346 ns/op
Iteration   1: 0.342 ns/op
Iteration   2: 0.342 ns/op
Iteration   3: 0.342 ns/op
Iteration   4: 0.342 ns/op
Iteration   5: 0.343 ns/op

# Run progress: 48.41% complete, ETA 05:01:58
# Fork: 2 of 3
# Warmup Iteration   1: 0.356 ns/op
# Warmup Iteration   2: 0.343 ns/op
# Warmup Iteration   3: 0.343 ns/op
Iteration   1: 0.348 ns/op
Iteration   2: 0.344 ns/op
Iteration   3: 0.343 ns/op
Iteration   4: 0.342 ns/op
Iteration   5: 0.339 ns/op

# Run progress: 48.43% complete, ETA 05:01:49
# Fork: 3 of 3
# Warmup Iteration   1: 0.348 ns/op
# Warmup Iteration   2: 0.343 ns/op
# Warmup Iteration   3: 0.348 ns/op
Iteration   1: 0.342 ns/op
Iteration   2: 0.343 ns/op
Iteration   3: 0.344 ns/op
Iteration   4: 0.346 ns/op
Iteration   5: 0.342 ns/op


Result "kotlin_benchmarks.callconv.PrimitiveInt.int_args4_targets2":
  0.343 ±(99.9%) 0.002 ns/op [Average]
  (min, avg, max) = (0.339, 0.343, 0.348), stdev = 0.002
  CI (99.9%): [0.341, 0.345] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.callconv.PrimitiveInt.int_args4_targets3

# Run progress: 48.46% complete, ETA 05:01:42
# Fork: 1 of 3
# Warmup Iteration   1: 2.856 ns/op
# Warmup Iteration   2: 2.837 ns/op
# Warmup Iteration   3: 2.851 ns/op
Iteration   1: 2.859 ns/op
Iteration   2: 2.853 ns/op
Iteration   3: 2.858 ns/op
Iteration   4: 2.859 ns/op
Iteration   5: 2.825 ns/op

# Run progress: 48.48% complete, ETA 05:01:33
# Fork: 2 of 3
# Warmup Iteration   1: 2.853 ns/op
# Warmup Iteration   2: 2.836 ns/op
# Warmup Iteration   3: 2.856 ns/op
Iteration   1: 2.842 ns/op
Iteration   2: 2.854 ns/op
Iteration   3: 2.847 ns/op
Iteration   4: 2.842 ns/op
Iteration   5: 2.864 ns/op

# Run progress: 48.50% complete, ETA 05:01:24
# Fork: 3 of 3
# Warmup Iteration   1: 2.854 ns/op
# Warmup Iteration   2: 2.840 ns/op
# Warmup Iteration   3: 2.862 ns/op
Iteration   1: 2.844 ns/op
Iteration   2: 2.804 ns/op
Iteration   3: 2.817 ns/op
Iteration   4: 2.859 ns/op
Iteration   5: 2.825 ns/op


Result "kotlin_benchmarks.callconv.PrimitiveInt.int_args4_targets3":
  2.844 ±(99.9%) 0.019 ns/op [Average]
  (min, avg, max) = (2.804, 2.844, 2.864), stdev = 0.018
  CI (99.9%): [2.824, 2.863] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.callconv.PrimitiveInt.int_args8_targets0

# Run progress: 48.53% complete, ETA 05:01:15
# Fork: 1 of 3
# Warmup Iteration   1: 0.197 ns/op
# Warmup Iteration   2: 0.195 ns/op
# Warmup Iteration   3: 0.196 ns/op
Iteration   1: 0.196 ns/op
Iteration   2: 0.196 ns/op
Iteration   3: 0.195 ns/op
Iteration   4: 0.198 ns/op
Iteration   5: 0.195 ns/op

# Run progress: 48.55% complete, ETA 05:01:06
# Fork: 2 of 3
# Warmup Iteration   1: 0.198 ns/op
# Warmup Iteration   2: 0.198 ns/op
# Warmup Iteration   3: 0.196 ns/op
Iteration   1: 0.197 ns/op
Iteration   2: 0.198 ns/op
Iteration   3: 0.196 ns/op
Iteration   4: 0.197 ns/op
Iteration   5: 0.198 ns/op

# Run progress: 48.58% complete, ETA 05:00:57
# Fork: 3 of 3
# Warmup Iteration   1: 0.201 ns/op
# Warmup Iteration   2: 0.196 ns/op
# Warmup Iteration   3: 0.195 ns/op
Iteration   1: 0.195 ns/op
Iteration   2: 0.196 ns/op
Iteration   3: 0.195 ns/op
Iteration   4: 0.196 ns/op
Iteration   5: 0.196 ns/op


Result "kotlin_benchmarks.callconv.PrimitiveInt.int_args8_targets0":
  0.196 ±(99.9%) 0.001 ns/op [Average]
  (min, avg, max) = (0.195, 0.196, 0.198), stdev = 0.001
  CI (99.9%): [0.195, 0.197] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.callconv.PrimitiveInt.int_args8_targets1

# Run progress: 48.60% complete, ETA 05:00:49
# Fork: 1 of 3
# Warmup Iteration   1: 0.199 ns/op
# Warmup Iteration   2: 0.197 ns/op
# Warmup Iteration   3: 0.200 ns/op
Iteration   1: 0.199 ns/op
Iteration   2: 0.198 ns/op
Iteration   3: 0.196 ns/op
Iteration   4: 0.198 ns/op
Iteration   5: 0.199 ns/op

# Run progress: 48.63% complete, ETA 05:00:40
# Fork: 2 of 3
# Warmup Iteration   1: 0.197 ns/op
# Warmup Iteration   2: 0.195 ns/op
# Warmup Iteration   3: 0.195 ns/op
Iteration   1: 0.195 ns/op
Iteration   2: 0.197 ns/op
Iteration   3: 0.196 ns/op
Iteration   4: 0.195 ns/op
Iteration   5: 0.196 ns/op

# Run progress: 48.65% complete, ETA 05:00:31
# Fork: 3 of 3
# Warmup Iteration   1: 0.198 ns/op
# Warmup Iteration   2: 0.196 ns/op
# Warmup Iteration   3: 0.196 ns/op
Iteration   1: 0.196 ns/op
Iteration   2: 0.197 ns/op
Iteration   3: 0.195 ns/op
Iteration   4: 0.195 ns/op
Iteration   5: 0.195 ns/op


Result "kotlin_benchmarks.callconv.PrimitiveInt.int_args8_targets1":
  0.197 ±(99.9%) 0.001 ns/op [Average]
  (min, avg, max) = (0.195, 0.197, 0.199), stdev = 0.001
  CI (99.9%): [0.195, 0.198] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.callconv.PrimitiveInt.int_args8_targets2

# Run progress: 48.68% complete, ETA 05:00:22
# Fork: 1 of 3
# Warmup Iteration   1: 0.346 ns/op
# Warmup Iteration   2: 0.343 ns/op
# Warmup Iteration   3: 0.355 ns/op
Iteration   1: 0.352 ns/op
Iteration   2: 0.355 ns/op
Iteration   3: 0.352 ns/op
Iteration   4: 0.355 ns/op
Iteration   5: 0.352 ns/op

# Run progress: 48.70% complete, ETA 05:00:13
# Fork: 2 of 3
# Warmup Iteration   1: 0.348 ns/op
# Warmup Iteration   2: 0.344 ns/op
# Warmup Iteration   3: 0.353 ns/op
Iteration   1: 0.361 ns/op
Iteration   2: 0.355 ns/op
Iteration   3: 0.357 ns/op
Iteration   4: 0.354 ns/op
Iteration   5: 0.355 ns/op

# Run progress: 48.73% complete, ETA 05:00:04
# Fork: 3 of 3
# Warmup Iteration   1: 0.361 ns/op
# Warmup Iteration   2: 0.343 ns/op
# Warmup Iteration   3: 0.352 ns/op
Iteration   1: 0.352 ns/op
Iteration   2: 0.353 ns/op
Iteration   3: 0.354 ns/op
Iteration   4: 0.352 ns/op
Iteration   5: 0.354 ns/op


Result "kotlin_benchmarks.callconv.PrimitiveInt.int_args8_targets2":
  0.354 ±(99.9%) 0.003 ns/op [Average]
  (min, avg, max) = (0.352, 0.354, 0.361), stdev = 0.002
  CI (99.9%): [0.352, 0.357] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.callconv.PrimitiveInt.int_args8_targets3

# Run progress: 48.75% complete, ETA 04:59:56
# Fork: 1 of 3
# Warmup Iteration   1: 3.299 ns/op
# Warmup Iteration   2: 3.202 ns/op
# Warmup Iteration   3: 3.453 ns/op
Iteration   1: 3.635 ns/op
Iteration   2: 3.825 ns/op
Iteration   3: 4.057 ns/op
Iteration   4: 4.368 ns/op
Iteration   5: 3.946 ns/op

# Run progress: 48.77% complete, ETA 04:59:47
# Fork: 2 of 3
# Warmup Iteration   1: 3.384 ns/op
# Warmup Iteration   2: 3.147 ns/op
# Warmup Iteration   3: 3.143 ns/op
Iteration   1: 3.387 ns/op
Iteration   2: 3.958 ns/op
Iteration   3: 4.256 ns/op
Iteration   4: 3.869 ns/op
Iteration   5: 3.225 ns/op

# Run progress: 48.80% complete, ETA 04:59:38
# Fork: 3 of 3
# Warmup Iteration   1: 3.140 ns/op
# Warmup Iteration   2: 3.143 ns/op
# Warmup Iteration   3: 3.058 ns/op
Iteration   1: 3.137 ns/op
Iteration   2: 3.294 ns/op
Iteration   3: 3.741 ns/op
Iteration   4: 4.010 ns/op
Iteration   5: 3.749 ns/op


Result "kotlin_benchmarks.callconv.PrimitiveInt.int_args8_targets3":
  3.764 ±(99.9%) 0.394 ns/op [Average]
  (min, avg, max) = (3.137, 3.764, 4.368), stdev = 0.369
  CI (99.9%): [3.370, 4.158] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.callconv.PrimitiveLong.long_args1_targets0

# Run progress: 48.82% complete, ETA 04:59:29
# Fork: 1 of 3
# Warmup Iteration   1: 0.203 ns/op
# Warmup Iteration   2: 0.239 ns/op
# Warmup Iteration   3: 0.249 ns/op
Iteration   1: 0.243 ns/op
Iteration   2: 0.201 ns/op
Iteration   3: 0.196 ns/op
Iteration   4: 0.197 ns/op
Iteration   5: 0.196 ns/op

# Run progress: 48.85% complete, ETA 04:59:20
# Fork: 2 of 3
# Warmup Iteration   1: 0.200 ns/op
# Warmup Iteration   2: 0.216 ns/op
# Warmup Iteration   3: 0.353 ns/op
Iteration   1: 0.407 ns/op
Iteration   2: 0.407 ns/op
Iteration   3: 0.407 ns/op
Iteration   4: 0.407 ns/op
Iteration   5: 0.407 ns/op

# Run progress: 48.87% complete, ETA 04:59:11
# Fork: 3 of 3
# Warmup Iteration   1: 0.419 ns/op
# Warmup Iteration   2: 0.410 ns/op
# Warmup Iteration   3: 0.412 ns/op
Iteration   1: 0.408 ns/op
Iteration   2: 0.408 ns/op
Iteration   3: 0.407 ns/op
Iteration   4: 0.406 ns/op
Iteration   5: 0.407 ns/op


Result "kotlin_benchmarks.callconv.PrimitiveLong.long_args1_targets0":
  0.340 ±(99.9%) 0.105 ns/op [Average]
  (min, avg, max) = (0.196, 0.340, 0.408), stdev = 0.098
  CI (99.9%): [0.235, 0.445] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.callconv.PrimitiveLong.long_args1_targets1

# Run progress: 48.90% complete, ETA 04:59:02
# Fork: 1 of 3
# Warmup Iteration   1: 0.422 ns/op
# Warmup Iteration   2: 0.407 ns/op
# Warmup Iteration   3: 0.406 ns/op
Iteration   1: 0.408 ns/op
Iteration   2: 0.407 ns/op
Iteration   3: 0.407 ns/op
Iteration   4: 0.413 ns/op
Iteration   5: 0.511 ns/op

# Run progress: 48.92% complete, ETA 04:58:54
# Fork: 2 of 3
# Warmup Iteration   1: 0.257 ns/op
# Warmup Iteration   2: 0.242 ns/op
# Warmup Iteration   3: 0.218 ns/op
Iteration   1: 0.196 ns/op
Iteration   2: 0.195 ns/op
Iteration   3: 0.195 ns/op
Iteration   4: 0.196 ns/op
Iteration   5: 0.197 ns/op

# Run progress: 48.95% complete, ETA 04:58:46
# Fork: 3 of 3
# Warmup Iteration   1: 0.197 ns/op
# Warmup Iteration   2: 0.201 ns/op
# Warmup Iteration   3: 0.195 ns/op
Iteration   1: 0.195 ns/op
Iteration   2: 0.196 ns/op
Iteration   3: 0.195 ns/op
Iteration   4: 0.195 ns/op
Iteration   5: 0.195 ns/op


Result "kotlin_benchmarks.callconv.PrimitiveLong.long_args1_targets1":
  0.273 ±(99.9%) 0.125 ns/op [Average]
  (min, avg, max) = (0.195, 0.273, 0.511), stdev = 0.117
  CI (99.9%): [0.149, 0.398] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.callconv.PrimitiveLong.long_args1_targets2

# Run progress: 48.97% complete, ETA 04:58:37
# Fork: 1 of 3
# Warmup Iteration   1: 0.346 ns/op
# Warmup Iteration   2: 0.343 ns/op
# Warmup Iteration   3: 0.343 ns/op
Iteration   1: 0.342 ns/op
Iteration   2: 0.342 ns/op
Iteration   3: 0.344 ns/op
Iteration   4: 0.345 ns/op
Iteration   5: 0.344 ns/op

# Run progress: 49.00% complete, ETA 04:58:28
# Fork: 2 of 3
# Warmup Iteration   1: 0.345 ns/op
# Warmup Iteration   2: 0.342 ns/op
# Warmup Iteration   3: 0.342 ns/op
Iteration   1: 0.342 ns/op
Iteration   2: 0.345 ns/op
Iteration   3: 0.343 ns/op
Iteration   4: 0.345 ns/op
Iteration   5: 0.342 ns/op

# Run progress: 49.02% complete, ETA 04:58:19
# Fork: 3 of 3
# Warmup Iteration   1: 0.346 ns/op
# Warmup Iteration   2: 0.347 ns/op
# Warmup Iteration   3: 0.342 ns/op
Iteration   1: 0.342 ns/op
Iteration   2: 0.343 ns/op
Iteration   3: 0.342 ns/op
Iteration   4: 0.344 ns/op
Iteration   5: 0.343 ns/op


Result "kotlin_benchmarks.callconv.PrimitiveLong.long_args1_targets2":
  0.343 ±(99.9%) 0.001 ns/op [Average]
  (min, avg, max) = (0.342, 0.343, 0.345), stdev = 0.001
  CI (99.9%): [0.342, 0.345] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.callconv.PrimitiveLong.long_args1_targets3

# Run progress: 49.04% complete, ETA 04:58:10
# Fork: 1 of 3
# Warmup Iteration   1: 2.883 ns/op
# Warmup Iteration   2: 2.862 ns/op
# Warmup Iteration   3: 2.880 ns/op
Iteration   1: 2.837 ns/op
Iteration   2: 2.845 ns/op
Iteration   3: 2.855 ns/op
Iteration   4: 2.844 ns/op
Iteration   5: 2.855 ns/op

# Run progress: 49.07% complete, ETA 04:58:02
# Fork: 2 of 3
# Warmup Iteration   1: 2.911 ns/op
# Warmup Iteration   2: 2.866 ns/op
# Warmup Iteration   3: 2.846 ns/op
Iteration   1: 2.862 ns/op
Iteration   2: 2.865 ns/op
Iteration   3: 2.845 ns/op
Iteration   4: 2.835 ns/op
Iteration   5: 2.836 ns/op

# Run progress: 49.09% complete, ETA 04:57:53
# Fork: 3 of 3
# Warmup Iteration   1: 2.855 ns/op
# Warmup Iteration   2: 2.846 ns/op
# Warmup Iteration   3: 2.834 ns/op
Iteration   1: 2.858 ns/op
Iteration   2: 2.841 ns/op
Iteration   3: 2.849 ns/op
Iteration   4: 2.858 ns/op
Iteration   5: 2.847 ns/op


Result "kotlin_benchmarks.callconv.PrimitiveLong.long_args1_targets3":
  2.849 ±(99.9%) 0.010 ns/op [Average]
  (min, avg, max) = (2.835, 2.849, 2.865), stdev = 0.010
  CI (99.9%): [2.839, 2.859] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.callconv.PrimitiveLong.long_args2_targets0

# Run progress: 49.12% complete, ETA 04:57:44
# Fork: 1 of 3
# Warmup Iteration   1: 0.199 ns/op
# Warmup Iteration   2: 0.197 ns/op
# Warmup Iteration   3: 0.197 ns/op
Iteration   1: 0.193 ns/op
Iteration   2: 0.192 ns/op
Iteration   3: 0.192 ns/op
Iteration   4: 0.195 ns/op
Iteration   5: 0.197 ns/op

# Run progress: 49.14% complete, ETA 04:57:35
# Fork: 2 of 3
# Warmup Iteration   1: 0.196 ns/op
# Warmup Iteration   2: 0.197 ns/op
# Warmup Iteration   3: 0.195 ns/op
Iteration   1: 0.196 ns/op
Iteration   2: 0.196 ns/op
Iteration   3: 0.195 ns/op
Iteration   4: 0.197 ns/op
Iteration   5: 0.196 ns/op

# Run progress: 49.17% complete, ETA 04:57:26
# Fork: 3 of 3
# Warmup Iteration   1: 0.198 ns/op
# Warmup Iteration   2: 0.197 ns/op
# Warmup Iteration   3: 0.196 ns/op
Iteration   1: 0.196 ns/op
Iteration   2: 0.196 ns/op
Iteration   3: 0.196 ns/op
Iteration   4: 0.196 ns/op
Iteration   5: 0.195 ns/op


Result "kotlin_benchmarks.callconv.PrimitiveLong.long_args2_targets0":
  0.195 ±(99.9%) 0.002 ns/op [Average]
  (min, avg, max) = (0.192, 0.195, 0.197), stdev = 0.002
  CI (99.9%): [0.194, 0.197] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.callconv.PrimitiveLong.long_args2_targets1

# Run progress: 49.19% complete, ETA 04:57:17
# Fork: 1 of 3
# Warmup Iteration   1: 0.198 ns/op
# Warmup Iteration   2: 0.196 ns/op
# Warmup Iteration   3: 0.195 ns/op
Iteration   1: 0.195 ns/op
Iteration   2: 0.196 ns/op
Iteration   3: 0.195 ns/op
Iteration   4: 0.195 ns/op
Iteration   5: 0.195 ns/op

# Run progress: 49.22% complete, ETA 04:57:08
# Fork: 2 of 3
# Warmup Iteration   1: 0.200 ns/op
# Warmup Iteration   2: 0.199 ns/op
# Warmup Iteration   3: 0.197 ns/op
Iteration   1: 0.197 ns/op
Iteration   2: 0.195 ns/op
Iteration   3: 0.197 ns/op
Iteration   4: 0.196 ns/op
Iteration   5: 0.198 ns/op

# Run progress: 49.24% complete, ETA 04:56:59
# Fork: 3 of 3
# Warmup Iteration   1: 0.198 ns/op
# Warmup Iteration   2: 0.195 ns/op
# Warmup Iteration   3: 0.198 ns/op
Iteration   1: 0.196 ns/op
Iteration   2: 0.195 ns/op
Iteration   3: 0.196 ns/op
Iteration   4: 0.196 ns/op
Iteration   5: 0.195 ns/op


Result "kotlin_benchmarks.callconv.PrimitiveLong.long_args2_targets1":
  0.196 ±(99.9%) 0.001 ns/op [Average]
  (min, avg, max) = (0.195, 0.196, 0.198), stdev = 0.001
  CI (99.9%): [0.195, 0.197] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.callconv.PrimitiveLong.long_args2_targets2

# Run progress: 49.26% complete, ETA 04:56:51
# Fork: 1 of 3
# Warmup Iteration   1: 0.349 ns/op
# Warmup Iteration   2: 0.343 ns/op
# Warmup Iteration   3: 0.352 ns/op
Iteration   1: 0.352 ns/op
Iteration   2: 0.354 ns/op
Iteration   3: 0.353 ns/op
Iteration   4: 0.352 ns/op
Iteration   5: 0.352 ns/op

# Run progress: 49.29% complete, ETA 04:56:42
# Fork: 2 of 3
# Warmup Iteration   1: 0.346 ns/op
# Warmup Iteration   2: 0.343 ns/op
# Warmup Iteration   3: 0.352 ns/op
Iteration   1: 0.353 ns/op
Iteration   2: 0.352 ns/op
Iteration   3: 0.353 ns/op
Iteration   4: 0.353 ns/op
Iteration   5: 0.356 ns/op

# Run progress: 49.31% complete, ETA 04:56:33
# Fork: 3 of 3
# Warmup Iteration   1: 0.352 ns/op
# Warmup Iteration   2: 0.346 ns/op
# Warmup Iteration   3: 0.354 ns/op
Iteration   1: 0.357 ns/op
Iteration   2: 0.354 ns/op
Iteration   3: 0.351 ns/op
Iteration   4: 0.354 ns/op
Iteration   5: 0.354 ns/op


Result "kotlin_benchmarks.callconv.PrimitiveLong.long_args2_targets2":
  0.353 ±(99.9%) 0.002 ns/op [Average]
  (min, avg, max) = (0.351, 0.353, 0.357), stdev = 0.001
  CI (99.9%): [0.352, 0.355] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.callconv.PrimitiveLong.long_args2_targets3

# Run progress: 49.34% complete, ETA 04:56:24
# Fork: 1 of 3
# Warmup Iteration   1: 2.882 ns/op
# Warmup Iteration   2: 2.833 ns/op
# Warmup Iteration   3: 2.827 ns/op
Iteration   1: 2.828 ns/op
Iteration   2: 2.826 ns/op
Iteration   3: 2.821 ns/op
Iteration   4: 2.834 ns/op
Iteration   5: 2.830 ns/op

# Run progress: 49.36% complete, ETA 04:56:15
# Fork: 2 of 3
# Warmup Iteration   1: 2.883 ns/op
# Warmup Iteration   2: 2.887 ns/op
# Warmup Iteration   3: 2.843 ns/op
Iteration   1: 2.837 ns/op
Iteration   2: 3.093 ns/op
Iteration   3: 3.615 ns/op
Iteration   4: 3.740 ns/op
Iteration   5: 3.546 ns/op

# Run progress: 49.39% complete, ETA 04:56:06
# Fork: 3 of 3
# Warmup Iteration   1: 2.863 ns/op
# Warmup Iteration   2: 2.857 ns/op
# Warmup Iteration   3: 2.834 ns/op
Iteration   1: 3.008 ns/op
Iteration   2: 3.259 ns/op
Iteration   3: 2.918 ns/op
Iteration   4: 2.871 ns/op
Iteration   5: 2.839 ns/op


Result "kotlin_benchmarks.callconv.PrimitiveLong.long_args2_targets3":
  3.058 ±(99.9%) 0.347 ns/op [Average]
  (min, avg, max) = (2.821, 3.058, 3.740), stdev = 0.325
  CI (99.9%): [2.711, 3.405] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.callconv.PrimitiveLong.long_args4_targets0

# Run progress: 49.41% complete, ETA 04:55:57
# Fork: 1 of 3
# Warmup Iteration   1: 0.198 ns/op
# Warmup Iteration   2: 0.197 ns/op
# Warmup Iteration   3: 0.196 ns/op
Iteration   1: 0.196 ns/op
Iteration   2: 0.197 ns/op
Iteration   3: 0.196 ns/op
Iteration   4: 0.199 ns/op
Iteration   5: 0.195 ns/op

# Run progress: 49.44% complete, ETA 04:55:48
# Fork: 2 of 3
# Warmup Iteration   1: 0.225 ns/op
# Warmup Iteration   2: 0.259 ns/op
# Warmup Iteration   3: 0.266 ns/op
Iteration   1: 0.221 ns/op
Iteration   2: 0.195 ns/op
Iteration   3: 0.196 ns/op
Iteration   4: 0.198 ns/op
Iteration   5: 0.215 ns/op

# Run progress: 49.46% complete, ETA 04:55:40
# Fork: 3 of 3
# Warmup Iteration   1: 0.200 ns/op
# Warmup Iteration   2: 0.196 ns/op
# Warmup Iteration   3: 0.195 ns/op
Iteration   1: 0.210 ns/op
Iteration   2: 0.243 ns/op
Iteration   3: 0.242 ns/op
Iteration   4: 0.234 ns/op
Iteration   5: 0.197 ns/op


Result "kotlin_benchmarks.callconv.PrimitiveLong.long_args4_targets0":
  0.209 ±(99.9%) 0.019 ns/op [Average]
  (min, avg, max) = (0.195, 0.209, 0.243), stdev = 0.018
  CI (99.9%): [0.190, 0.228] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.callconv.PrimitiveLong.long_args4_targets1

# Run progress: 49.49% complete, ETA 04:55:31
# Fork: 1 of 3
# Warmup Iteration   1: 0.197 ns/op
# Warmup Iteration   2: 0.225 ns/op
# Warmup Iteration   3: 0.230 ns/op
Iteration   1: 0.227 ns/op
Iteration   2: 0.199 ns/op
Iteration   3: 0.195 ns/op
Iteration   4: 0.196 ns/op
Iteration   5: 0.196 ns/op

# Run progress: 49.51% complete, ETA 04:55:22
# Fork: 2 of 3
# Warmup Iteration   1: 0.199 ns/op
# Warmup Iteration   2: 0.197 ns/op
# Warmup Iteration   3: 0.195 ns/op
Iteration   1: 0.332 ns/op
Iteration   2: 0.407 ns/op
Iteration   3: 0.410 ns/op
Iteration   4: 0.407 ns/op
Iteration   5: 0.413 ns/op

# Run progress: 49.53% complete, ETA 04:55:13
# Fork: 3 of 3
# Warmup Iteration   1: 0.417 ns/op
# Warmup Iteration   2: 0.408 ns/op
# Warmup Iteration   3: 0.407 ns/op
Iteration   1: 0.409 ns/op
Iteration   2: 0.407 ns/op
Iteration   3: 0.407 ns/op
Iteration   4: 0.407 ns/op
Iteration   5: 0.406 ns/op


Result "kotlin_benchmarks.callconv.PrimitiveLong.long_args4_targets1":
  0.335 ±(99.9%) 0.106 ns/op [Average]
  (min, avg, max) = (0.195, 0.335, 0.413), stdev = 0.099
  CI (99.9%): [0.229, 0.440] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.callconv.PrimitiveLong.long_args4_targets2

# Run progress: 49.56% complete, ETA 04:55:04
# Fork: 1 of 3
# Warmup Iteration   1: 0.733 ns/op
# Warmup Iteration   2: 0.861 ns/op
# Warmup Iteration   3: 0.729 ns/op
Iteration   1: 0.721 ns/op
Iteration   2: 0.714 ns/op
Iteration   3: 0.715 ns/op
Iteration   4: 0.716 ns/op
Iteration   5: 0.723 ns/op

# Run progress: 49.58% complete, ETA 04:54:56
# Fork: 2 of 3
# Warmup Iteration   1: 0.398 ns/op
# Warmup Iteration   2: 0.475 ns/op
# Warmup Iteration   3: 0.399 ns/op
Iteration   1: 0.343 ns/op
Iteration   2: 0.347 ns/op
Iteration   3: 0.342 ns/op
Iteration   4: 0.343 ns/op
Iteration   5: 0.346 ns/op

# Run progress: 49.61% complete, ETA 04:54:49
# Fork: 3 of 3
# Warmup Iteration   1: 0.354 ns/op
# Warmup Iteration   2: 0.343 ns/op
# Warmup Iteration   3: 0.344 ns/op
Iteration   1: 0.345 ns/op
Iteration   2: 0.343 ns/op
Iteration   3: 0.342 ns/op
Iteration   4: 0.346 ns/op
Iteration   5: 0.342 ns/op


Result "kotlin_benchmarks.callconv.PrimitiveLong.long_args4_targets2":
  0.469 ±(99.9%) 0.195 ns/op [Average]
  (min, avg, max) = (0.342, 0.469, 0.723), stdev = 0.182
  CI (99.9%): [0.274, 0.663] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.callconv.PrimitiveLong.long_args4_targets3

# Run progress: 49.63% complete, ETA 04:54:40
# Fork: 1 of 3
# Warmup Iteration   1: 2.857 ns/op
# Warmup Iteration   2: 2.847 ns/op
# Warmup Iteration   3: 2.834 ns/op
Iteration   1: 2.849 ns/op
Iteration   2: 2.849 ns/op
Iteration   3: 2.834 ns/op
Iteration   4: 2.836 ns/op
Iteration   5: 2.878 ns/op

# Run progress: 49.66% complete, ETA 04:54:31
# Fork: 2 of 3
# Warmup Iteration   1: 2.853 ns/op
# Warmup Iteration   2: 2.832 ns/op
# Warmup Iteration   3: 2.850 ns/op
Iteration   1: 2.815 ns/op
Iteration   2: 2.808 ns/op
Iteration   3: 2.846 ns/op
Iteration   4: 2.864 ns/op
Iteration   5: 2.852 ns/op

# Run progress: 49.68% complete, ETA 04:54:22
# Fork: 3 of 3
# Warmup Iteration   1: 2.848 ns/op
# Warmup Iteration   2: 2.831 ns/op
# Warmup Iteration   3: 3.129 ns/op
Iteration   1: 3.432 ns/op
Iteration   2: 3.283 ns/op
Iteration   3: 2.946 ns/op
Iteration   4: 3.048 ns/op
Iteration   5: 2.834 ns/op


Result "kotlin_benchmarks.callconv.PrimitiveLong.long_args4_targets3":
  2.932 ±(99.9%) 0.198 ns/op [Average]
  (min, avg, max) = (2.808, 2.932, 3.432), stdev = 0.185
  CI (99.9%): [2.734, 3.130] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.callconv.PrimitiveLong.long_args8_targets0

# Run progress: 49.71% complete, ETA 04:54:13
# Fork: 1 of 3
# Warmup Iteration   1: 0.197 ns/op
# Warmup Iteration   2: 0.196 ns/op
# Warmup Iteration   3: 0.196 ns/op
Iteration   1: 0.196 ns/op
Iteration   2: 0.195 ns/op
Iteration   3: 0.195 ns/op
Iteration   4: 0.195 ns/op
Iteration   5: 0.195 ns/op

# Run progress: 49.73% complete, ETA 04:54:04
# Fork: 2 of 3
# Warmup Iteration   1: 0.199 ns/op
# Warmup Iteration   2: 0.198 ns/op
# Warmup Iteration   3: 0.197 ns/op
Iteration   1: 0.197 ns/op
Iteration   2: 0.197 ns/op
Iteration   3: 0.195 ns/op
Iteration   4: 0.195 ns/op
Iteration   5: 0.195 ns/op

# Run progress: 49.75% complete, ETA 04:53:56
# Fork: 3 of 3
# Warmup Iteration   1: 0.198 ns/op
# Warmup Iteration   2: 0.196 ns/op
# Warmup Iteration   3: 0.195 ns/op
Iteration   1: 0.197 ns/op
Iteration   2: 0.195 ns/op
Iteration   3: 0.202 ns/op
Iteration   4: 0.196 ns/op
Iteration   5: 0.197 ns/op


Result "kotlin_benchmarks.callconv.PrimitiveLong.long_args8_targets0":
  0.196 ±(99.9%) 0.002 ns/op [Average]
  (min, avg, max) = (0.195, 0.196, 0.202), stdev = 0.002
  CI (99.9%): [0.194, 0.198] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.callconv.PrimitiveLong.long_args8_targets1

# Run progress: 49.78% complete, ETA 04:53:47
# Fork: 1 of 3
# Warmup Iteration   1: 0.198 ns/op
# Warmup Iteration   2: 0.195 ns/op
# Warmup Iteration   3: 0.196 ns/op
Iteration   1: 0.196 ns/op
Iteration   2: 0.195 ns/op
Iteration   3: 0.198 ns/op
Iteration   4: 0.196 ns/op
Iteration   5: 0.195 ns/op

# Run progress: 49.80% complete, ETA 04:53:38
# Fork: 2 of 3
# Warmup Iteration   1: 0.198 ns/op
# Warmup Iteration   2: 0.196 ns/op
# Warmup Iteration   3: 0.195 ns/op
Iteration   1: 0.197 ns/op
Iteration   2: 0.196 ns/op
Iteration   3: 0.196 ns/op
Iteration   4: 0.200 ns/op
Iteration   5: 0.195 ns/op

# Run progress: 49.83% complete, ETA 04:53:29
# Fork: 3 of 3
# Warmup Iteration   1: 0.198 ns/op
# Warmup Iteration   2: 0.196 ns/op
# Warmup Iteration   3: 0.195 ns/op
Iteration   1: 0.197 ns/op
Iteration   2: 0.198 ns/op
Iteration   3: 0.195 ns/op
Iteration   4: 0.195 ns/op
Iteration   5: 0.195 ns/op


Result "kotlin_benchmarks.callconv.PrimitiveLong.long_args8_targets1":
  0.196 ±(99.9%) 0.002 ns/op [Average]
  (min, avg, max) = (0.195, 0.196, 0.200), stdev = 0.001
  CI (99.9%): [0.195, 0.198] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.callconv.PrimitiveLong.long_args8_targets2

# Run progress: 49.85% complete, ETA 04:53:20
# Fork: 1 of 3
# Warmup Iteration   1: 0.348 ns/op
# Warmup Iteration   2: 0.344 ns/op
# Warmup Iteration   3: 0.352 ns/op
Iteration   1: 0.352 ns/op
Iteration   2: 0.353 ns/op
Iteration   3: 0.354 ns/op
Iteration   4: 0.353 ns/op
Iteration   5: 0.356 ns/op

# Run progress: 49.88% complete, ETA 04:53:11
# Fork: 2 of 3
# Warmup Iteration   1: 0.347 ns/op
# Warmup Iteration   2: 0.343 ns/op
# Warmup Iteration   3: 0.367 ns/op
Iteration   1: 0.352 ns/op
Iteration   2: 0.352 ns/op
Iteration   3: 0.356 ns/op
Iteration   4: 0.354 ns/op
Iteration   5: 0.354 ns/op

# Run progress: 49.90% complete, ETA 04:53:02
# Fork: 3 of 3
# Warmup Iteration   1: 0.347 ns/op
# Warmup Iteration   2: 0.343 ns/op
# Warmup Iteration   3: 0.352 ns/op
Iteration   1: 0.352 ns/op
Iteration   2: 0.356 ns/op
Iteration   3: 0.356 ns/op
Iteration   4: 0.353 ns/op
Iteration   5: 0.354 ns/op


Result "kotlin_benchmarks.callconv.PrimitiveLong.long_args8_targets2":
  0.354 ±(99.9%) 0.002 ns/op [Average]
  (min, avg, max) = (0.352, 0.354, 0.356), stdev = 0.002
  CI (99.9%): [0.352, 0.355] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: kotlin_benchmarks.callconv.PrimitiveLong.long_args8_targets3

# Run progress: 49.93% complete, ETA 04:52:53
# Fork: 1 of 3
# Warmup Iteration   1: 3.148 ns/op
# Warmup Iteration   2: 3.125 ns/op
# Warmup Iteration   3: 3.152 ns/op
Iteration   1: 3.250 ns/op
Iteration   2: 3.122 ns/op
Iteration   3: 3.140 ns/op
Iteration   4: 3.135 ns/op
Iteration   5: 3.176 ns/op

# Run progress: 49.95% complete, ETA 04:52:44
# Fork: 2 of 3
# Warmup Iteration   1: 3.089 ns/op
# Warmup Iteration   2: 3.121 ns/op
# Warmup Iteration   3: 3.140 ns/op
Iteration   1: 3.126 ns/op
Iteration   2: 3.171 ns/op
Iteration   3: 3.171 ns/op
Iteration   4: 3.179 ns/op
Iteration   5: 3.117 ns/op

# Run progress: 49.98% complete, ETA 04:52:37
# Fork: 3 of 3
# Warmup Iteration   1: 3.128 ns/op
# Warmup Iteration   2: 3.106 ns/op
# Warmup Iteration   3: 3.135 ns/op
Iteration   1: 3.133 ns/op
Iteration   2: 3.234 ns/op
Iteration   3: 3.140 ns/op
Iteration   4: 3.144 ns/op
Iteration   5: 3.140 ns/op


Result "kotlin_benchmarks.callconv.PrimitiveLong.long_args8_targets3":
  3.159 ±(99.9%) 0.042 ns/op [Average]
  (min, avg, max) = (3.117, 3.159, 3.250), stdev = 0.039
  CI (99.9%): [3.116, 3.201] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.copy.Identity32int.ref_arraycopy
# Parameters: (size = 100)

# Run progress: 50.00% complete, ETA 04:52:29
# Fork: 1 of 3
# Warmup Iteration   1: 9.493 ns/op
# Warmup Iteration   2: 9.462 ns/op
# Warmup Iteration   3: 9.468 ns/op
Iteration   1: 9.453 ns/op
Iteration   2: 9.500 ns/op
Iteration   3: 9.654 ns/op
Iteration   4: 9.501 ns/op
Iteration   5: 9.494 ns/op

# Run progress: 50.02% complete, ETA 04:52:20
# Fork: 2 of 3
# Warmup Iteration   1: 12.263 ns/op
# Warmup Iteration   2: 12.284 ns/op
# Warmup Iteration   3: 12.361 ns/op
Iteration   1: 12.336 ns/op
Iteration   2: 21.236 ns/op
Iteration   3: 12.433 ns/op
Iteration   4: 12.357 ns/op
Iteration   5: 12.342 ns/op

# Run progress: 50.05% complete, ETA 04:52:11
# Fork: 3 of 3
# Warmup Iteration   1: 9.345 ns/op
# Warmup Iteration   2: 9.347 ns/op
# Warmup Iteration   3: 9.307 ns/op
Iteration   1: 9.502 ns/op
Iteration   2: 9.485 ns/op
Iteration   3: 9.324 ns/op
Iteration   4: 9.298 ns/op
Iteration   5: 9.269 ns/op


Result "org.openjdk.bench.valhalla.array.copy.Identity32int.ref_arraycopy":
  11.012 ±(99.9%) 3.338 ns/op [Average]
  (min, avg, max) = (9.269, 11.012, 21.236), stdev = 3.122
  CI (99.9%): [7.674, 14.350] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.copy.Identity32int.ref_arraycopy
# Parameters: (size = 1000000)

# Run progress: 50.07% complete, ETA 04:52:02
# Fork: 1 of 3
# Warmup Iteration   1: 86426.553 ns/op
# Warmup Iteration   2: 82068.140 ns/op
# Warmup Iteration   3: 95255.839 ns/op
Iteration   1: 76980.132 ns/op
Iteration   2: 82724.795 ns/op
Iteration   3: 85182.856 ns/op
Iteration   4: 85832.540 ns/op
Iteration   5: 84240.458 ns/op

# Run progress: 50.10% complete, ETA 04:51:53
# Fork: 2 of 3
# Warmup Iteration   1: 70353.869 ns/op
# Warmup Iteration   2: 71299.384 ns/op
# Warmup Iteration   3: 69009.921 ns/op
Iteration   1: 73021.202 ns/op
Iteration   2: 73010.391 ns/op
Iteration   3: 70832.590 ns/op
Iteration   4: 74164.657 ns/op
Iteration   5: 86499.596 ns/op

# Run progress: 50.12% complete, ETA 04:51:44
# Fork: 3 of 3
# Warmup Iteration   1: 80506.273 ns/op
# Warmup Iteration   2: 84908.506 ns/op
# Warmup Iteration   3: 83842.528 ns/op
Iteration   1: 83908.949 ns/op
Iteration   2: 84370.127 ns/op
Iteration   3: 83948.203 ns/op
Iteration   4: 79258.297 ns/op
Iteration   5: 81211.151 ns/op


Result "org.openjdk.bench.valhalla.array.copy.Identity32int.ref_arraycopy":
  80345.730 ±(99.9%) 5739.259 ns/op [Average]
  (min, avg, max) = (70832.590, 80345.730, 86499.596), stdev = 5368.506
  CI (99.9%): [74606.471, 86084.988] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.copy.Identity32int.ref_copy
# Parameters: (size = 100)

# Run progress: 50.15% complete, ETA 04:51:35
# Fork: 1 of 3
# Warmup Iteration   1: 76.771 ns/op
# Warmup Iteration   2: 76.511 ns/op
# Warmup Iteration   3: 77.063 ns/op
Iteration   1: 77.236 ns/op
Iteration   2: 76.674 ns/op
Iteration   3: 76.147 ns/op
Iteration   4: 76.311 ns/op
Iteration   5: 76.338 ns/op

# Run progress: 50.17% complete, ETA 04:51:26
# Fork: 2 of 3
# Warmup Iteration   1: 77.002 ns/op
# Warmup Iteration   2: 76.581 ns/op
# Warmup Iteration   3: 76.441 ns/op
Iteration   1: 76.352 ns/op
Iteration   2: 76.241 ns/op
Iteration   3: 76.176 ns/op
Iteration   4: 76.543 ns/op
Iteration   5: 76.233 ns/op

# Run progress: 50.20% complete, ETA 04:51:18
# Fork: 3 of 3
# Warmup Iteration   1: 77.583 ns/op
# Warmup Iteration   2: 77.385 ns/op
# Warmup Iteration   3: 76.550 ns/op
Iteration   1: 76.175 ns/op
Iteration   2: 75.988 ns/op
Iteration   3: 76.048 ns/op
Iteration   4: 75.866 ns/op
Iteration   5: 75.798 ns/op


Result "org.openjdk.bench.valhalla.array.copy.Identity32int.ref_copy":
  76.275 ±(99.9%) 0.376 ns/op [Average]
  (min, avg, max) = (75.798, 76.275, 77.236), stdev = 0.352
  CI (99.9%): [75.899, 76.651] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.copy.Identity32int.ref_copy
# Parameters: (size = 1000000)

# Run progress: 50.22% complete, ETA 04:51:09
# Fork: 1 of 3
# Warmup Iteration   1: 30696633.559 ns/op
# Warmup Iteration   2: 34709216.966 ns/op
# Warmup Iteration   3: 35010522.966 ns/op
Iteration   1: 35384438.207 ns/op
Iteration   2: 35887653.286 ns/op
Iteration   3: 36003377.897 ns/op
Iteration   4: 30619942.412 ns/op
Iteration   5: 33721576.400 ns/op

# Run progress: 50.25% complete, ETA 04:51:00
# Fork: 2 of 3
# Warmup Iteration   1: 34719608.333 ns/op
# Warmup Iteration   2: 32334095.063 ns/op
# Warmup Iteration   3: 30614450.758 ns/op
Iteration   1: 31080940.667 ns/op
Iteration   2: 31679351.000 ns/op
Iteration   3: 31588621.212 ns/op
Iteration   4: 33114380.355 ns/op
Iteration   5: 30314095.588 ns/op

# Run progress: 50.27% complete, ETA 04:50:51
# Fork: 3 of 3
# Warmup Iteration   1: 31170678.030 ns/op
# Warmup Iteration   2: 32364591.125 ns/op
# Warmup Iteration   3: 33668379.167 ns/op
Iteration   1: 30317229.176 ns/op
Iteration   2: 32580959.677 ns/op
Iteration   3: 30846790.394 ns/op
Iteration   4: 30073136.029 ns/op
Iteration   5: 31953894.531 ns/op


Result "org.openjdk.bench.valhalla.array.copy.Identity32int.ref_copy":
  32344425.789 ±(99.9%) 2196488.417 ns/op [Average]
  (min, avg, max) = (30073136.029, 32344425.789, 36003377.897), stdev = 2054596.629
  CI (99.9%): [30147937.371, 34540914.206] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.copy.Inline128int.Ref_to_Val_arraycopy
# Parameters: (size = 100)

# Run progress: 50.29% complete, ETA 04:50:43
# Fork: 1 of 3
# Warmup Iteration   1: 9.627 ns/op
# Warmup Iteration   2: 9.558 ns/op
# Warmup Iteration   3: 9.530 ns/op
Iteration   1: 9.547 ns/op
Iteration   2: 9.531 ns/op
Iteration   3: 9.540 ns/op
Iteration   4: 9.528 ns/op
Iteration   5: 9.529 ns/op

# Run progress: 50.32% complete, ETA 04:50:34
# Fork: 2 of 3
# Warmup Iteration   1: 9.614 ns/op
# Warmup Iteration   2: 9.639 ns/op
# Warmup Iteration   3: 9.550 ns/op
Iteration   1: 9.542 ns/op
Iteration   2: 9.568 ns/op
Iteration   3: 9.537 ns/op
Iteration   4: 9.731 ns/op
Iteration   5: 9.602 ns/op

# Run progress: 50.34% complete, ETA 04:50:25
# Fork: 3 of 3
# Warmup Iteration   1: 9.572 ns/op
# Warmup Iteration   2: 9.551 ns/op
# Warmup Iteration   3: 9.557 ns/op
Iteration   1: 9.740 ns/op
Iteration   2: 9.530 ns/op
Iteration   3: 9.534 ns/op
Iteration   4: 9.532 ns/op
Iteration   5: 9.536 ns/op


Result "org.openjdk.bench.valhalla.array.copy.Inline128int.Ref_to_Val_arraycopy":
  9.569 ±(99.9%) 0.075 ns/op [Average]
  (min, avg, max) = (9.528, 9.569, 9.740), stdev = 0.071
  CI (99.9%): [9.493, 9.644] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.copy.Inline128int.Ref_to_Val_arraycopy
# Parameters: (size = 1000000)

# Run progress: 50.37% complete, ETA 04:50:16
# Fork: 1 of 3
# Warmup Iteration   1: 86453.972 ns/op
# Warmup Iteration   2: 85613.522 ns/op
# Warmup Iteration   3: 85734.708 ns/op
Iteration   1: 78956.462 ns/op
Iteration   2: 77557.356 ns/op
Iteration   3: 78535.431 ns/op
Iteration   4: 77615.814 ns/op
Iteration   5: 74892.260 ns/op

# Run progress: 50.39% complete, ETA 04:50:07
# Fork: 2 of 3
# Warmup Iteration   1: 70183.688 ns/op
# Warmup Iteration   2: 71072.389 ns/op
# Warmup Iteration   3: 82344.155 ns/op
Iteration   1: 81103.250 ns/op
Iteration   2: 82247.364 ns/op
Iteration   3: 79998.760 ns/op
Iteration   4: 85203.258 ns/op
Iteration   5: 84803.994 ns/op

# Run progress: 50.42% complete, ETA 04:49:58
# Fork: 3 of 3
# Warmup Iteration   1: 84951.169 ns/op
# Warmup Iteration   2: 80577.272 ns/op
# Warmup Iteration   3: 80317.124 ns/op
Iteration   1: 80873.068 ns/op
Iteration   2: 76479.358 ns/op
Iteration   3: 74377.277 ns/op
Iteration   4: 74311.852 ns/op
Iteration   5: 75167.709 ns/op


Result "org.openjdk.bench.valhalla.array.copy.Inline128int.Ref_to_Val_arraycopy":
  78808.214 ±(99.9%) 3796.583 ns/op [Average]
  (min, avg, max) = (74311.852, 78808.214, 85203.258), stdev = 3551.326
  CI (99.9%): [75011.632, 82604.797] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.copy.Inline128int.Ref_to_Val_copy
# Parameters: (size = 100)

# Run progress: 50.44% complete, ETA 04:49:50
# Fork: 1 of 3
# Warmup Iteration   1: 179.960 ns/op
# Warmup Iteration   2: 179.029 ns/op
# Warmup Iteration   3: 178.310 ns/op
Iteration   1: 178.289 ns/op
Iteration   2: 178.145 ns/op
Iteration   3: 179.836 ns/op
Iteration   4: 178.576 ns/op
Iteration   5: 178.248 ns/op

# Run progress: 50.47% complete, ETA 04:49:41
# Fork: 2 of 3
# Warmup Iteration   1: 178.205 ns/op
# Warmup Iteration   2: 178.096 ns/op
# Warmup Iteration   3: 177.800 ns/op
Iteration   1: 178.486 ns/op
Iteration   2: 182.469 ns/op
Iteration   3: 180.878 ns/op
Iteration   4: 180.386 ns/op
Iteration   5: 178.684 ns/op

# Run progress: 50.49% complete, ETA 04:49:32
# Fork: 3 of 3
# Warmup Iteration   1: 178.680 ns/op
# Warmup Iteration   2: 178.205 ns/op
# Warmup Iteration   3: 177.412 ns/op
Iteration   1: 176.693 ns/op
Iteration   2: 178.400 ns/op
Iteration   3: 176.728 ns/op
Iteration   4: 176.563 ns/op
Iteration   5: 176.501 ns/op


Result "org.openjdk.bench.valhalla.array.copy.Inline128int.Ref_to_Val_copy":
  178.592 ±(99.9%) 1.831 ns/op [Average]
  (min, avg, max) = (176.501, 178.592, 182.469), stdev = 1.713
  CI (99.9%): [176.761, 180.423] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.copy.Inline128int.Ref_to_Val_copy
# Parameters: (size = 1000000)

# Run progress: 50.51% complete, ETA 04:49:23
# Fork: 1 of 3
# Warmup Iteration   1: 28306491.889 ns/op
# Warmup Iteration   2: 28330212.944 ns/op
# Warmup Iteration   3: 28038597.973 ns/op
Iteration   1: 26596637.821 ns/op
Iteration   2: 27093646.921 ns/op
Iteration   3: 29094040.486 ns/op
Iteration   4: 27881360.351 ns/op
Iteration   5: 27046447.368 ns/op

# Run progress: 50.54% complete, ETA 04:49:15
# Fork: 2 of 3
# Warmup Iteration   1: 24262321.429 ns/op
# Warmup Iteration   2: 27531385.135 ns/op
# Warmup Iteration   3: 32068170.563 ns/op
Iteration   1: 27183941.868 ns/op
Iteration   2: 27448308.568 ns/op
Iteration   3: 28126169.000 ns/op
Iteration   4: 27651327.703 ns/op
Iteration   5: 27051559.211 ns/op

# Run progress: 50.56% complete, ETA 04:49:06
# Fork: 3 of 3
# Warmup Iteration   1: 26158822.641 ns/op
# Warmup Iteration   2: 27160259.868 ns/op
# Warmup Iteration   3: 26751921.053 ns/op
Iteration   1: 26031634.615 ns/op
Iteration   2: 25431958.325 ns/op
Iteration   3: 29433702.371 ns/op
Iteration   4: 28545872.694 ns/op
Iteration   5: 28561563.639 ns/op


Result "org.openjdk.bench.valhalla.array.copy.Inline128int.Ref_to_Val_copy":
  27545211.396 ±(99.9%) 1176457.849 ns/op [Average]
  (min, avg, max) = (25431958.325, 27545211.396, 29433702.371), stdev = 1100459.402
  CI (99.9%): [26368753.547, 28721669.245] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.copy.Inline128int.Val_to_Ref_arraycopy
# Parameters: (size = 100)

# Run progress: 50.59% complete, ETA 04:48:57
# Fork: 1 of 3
# Warmup Iteration   1: 19.397 ns/op
# Warmup Iteration   2: 19.364 ns/op
# Warmup Iteration   3: 19.422 ns/op
Iteration   1: 19.417 ns/op
Iteration   2: 19.360 ns/op
Iteration   3: 19.413 ns/op
Iteration   4: 19.371 ns/op
Iteration   5: 19.416 ns/op

# Run progress: 50.61% complete, ETA 04:48:48
# Fork: 2 of 3
# Warmup Iteration   1: 9.595 ns/op
# Warmup Iteration   2: 9.550 ns/op
# Warmup Iteration   3: 9.585 ns/op
Iteration   1: 9.696 ns/op
Iteration   2: 9.630 ns/op
Iteration   3: 9.542 ns/op
Iteration   4: 9.592 ns/op
Iteration   5: 9.984 ns/op

# Run progress: 50.64% complete, ETA 04:48:40
# Fork: 3 of 3
# Warmup Iteration   1: 10.243 ns/op
# Warmup Iteration   2: 9.611 ns/op
# Warmup Iteration   3: 12.722 ns/op
Iteration   1: 20.102 ns/op
Iteration   2: 25.831 ns/op
Iteration   3: 22.502 ns/op
Iteration   4: 20.481 ns/op
Iteration   5: 19.864 ns/op


Result "org.openjdk.bench.valhalla.array.copy.Inline128int.Val_to_Ref_arraycopy":
  16.947 ±(99.9%) 5.954 ns/op [Average]
  (min, avg, max) = (9.542, 16.947, 25.831), stdev = 5.569
  CI (99.9%): [10.993, 22.901] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.copy.Inline128int.Val_to_Ref_arraycopy
# Parameters: (size = 1000000)

# Run progress: 50.66% complete, ETA 04:48:31
# Fork: 1 of 3
# Warmup Iteration   1: 133715.833 ns/op
# Warmup Iteration   2: 144961.820 ns/op
# Warmup Iteration   3: 174270.953 ns/op
Iteration   1: 155389.543 ns/op
Iteration   2: 156445.182 ns/op
Iteration   3: 164865.731 ns/op
Iteration   4: 187717.027 ns/op
Iteration   5: 202116.189 ns/op

# Run progress: 50.69% complete, ETA 04:48:22
# Fork: 2 of 3
# Warmup Iteration   1: 205737.228 ns/op
# Warmup Iteration   2: 226597.725 ns/op
# Warmup Iteration   3: 215875.828 ns/op
Iteration   1: 212932.617 ns/op
Iteration   2: 215413.209 ns/op
Iteration   3: 223090.281 ns/op
Iteration   4: 198797.031 ns/op
Iteration   5: 195311.533 ns/op

# Run progress: 50.71% complete, ETA 04:48:14
# Fork: 3 of 3
# Warmup Iteration   1: 211712.751 ns/op
# Warmup Iteration   2: 232363.287 ns/op
# Warmup Iteration   3: 247624.642 ns/op
Iteration   1: 267000.429 ns/op
Iteration   2: 260452.307 ns/op
Iteration   3: 255846.289 ns/op
Iteration   4: 113637.234 ns/op
Iteration   5: 139394.543 ns/op


Result "org.openjdk.bench.valhalla.array.copy.Inline128int.Val_to_Ref_arraycopy":
  196560.610 ±(99.9%) 48196.520 ns/op [Average]
  (min, avg, max) = (113637.234, 196560.610, 267000.429), stdev = 45083.055
  CI (99.9%): [148364.089, 244757.130] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.copy.Inline128int.Val_to_Ref_copy
# Parameters: (size = 100)

# Run progress: 50.74% complete, ETA 04:48:06
# Fork: 1 of 3
# Warmup Iteration   1: 453.676 ns/op
# Warmup Iteration   2: 234.757 ns/op
# Warmup Iteration   3: 178.317 ns/op
Iteration   1: 178.605 ns/op
Iteration   2: 179.885 ns/op
Iteration   3: 178.913 ns/op
Iteration   4: 178.086 ns/op
Iteration   5: 178.497 ns/op

# Run progress: 50.76% complete, ETA 04:47:57
# Fork: 2 of 3
# Warmup Iteration   1: 180.269 ns/op
# Warmup Iteration   2: 178.994 ns/op
# Warmup Iteration   3: 178.569 ns/op
Iteration   1: 178.872 ns/op
Iteration   2: 179.227 ns/op
Iteration   3: 178.260 ns/op
Iteration   4: 178.769 ns/op
Iteration   5: 183.374 ns/op

# Run progress: 50.78% complete, ETA 04:47:48
# Fork: 3 of 3
# Warmup Iteration   1: 179.222 ns/op
# Warmup Iteration   2: 177.521 ns/op
# Warmup Iteration   3: 178.296 ns/op
Iteration   1: 178.211 ns/op
Iteration   2: 178.370 ns/op
Iteration   3: 178.171 ns/op
Iteration   4: 178.426 ns/op
Iteration   5: 178.361 ns/op


Result "org.openjdk.bench.valhalla.array.copy.Inline128int.Val_to_Ref_copy":
  178.935 ±(99.9%) 1.406 ns/op [Average]
  (min, avg, max) = (178.086, 178.935, 183.374), stdev = 1.315
  CI (99.9%): [177.529, 180.341] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.copy.Inline128int.Val_to_Ref_copy
# Parameters: (size = 1000000)

# Run progress: 50.81% complete, ETA 04:47:39
# Fork: 1 of 3
# Warmup Iteration   1: 27530177.946 ns/op
# Warmup Iteration   2: 26061692.308 ns/op
# Warmup Iteration   3: 26059995.718 ns/op
Iteration   1: 26030139.974 ns/op
Iteration   2: 27433503.289 ns/op
Iteration   3: 26068704.150 ns/op
Iteration   4: 28629005.778 ns/op
Iteration   5: 27405748.865 ns/op

# Run progress: 50.83% complete, ETA 04:47:30
# Fork: 2 of 3
# Warmup Iteration   1: 26899333.342 ns/op
# Warmup Iteration   2: 28298821.750 ns/op
# Warmup Iteration   3: 26286755.333 ns/op
Iteration   1: 28377472.222 ns/op
Iteration   2: 30734377.515 ns/op
Iteration   3: 26945138.158 ns/op
Iteration   4: 31890179.688 ns/op
Iteration   5: 30103257.353 ns/op

# Run progress: 50.86% complete, ETA 04:47:22
# Fork: 3 of 3
# Warmup Iteration   1: 28081737.278 ns/op
# Warmup Iteration   2: 27984873.861 ns/op
# Warmup Iteration   3: 26714213.816 ns/op
Iteration   1: 23608844.977 ns/op
Iteration   2: 21284589.417 ns/op
Iteration   3: 26081942.308 ns/op
Iteration   4: 21980038.957 ns/op
Iteration   5: 16412460.339 ns/op


Result "org.openjdk.bench.valhalla.array.copy.Inline128int.Val_to_Ref_copy":
  26199026.866 ±(99.9%) 4303697.611 ns/op [Average]
  (min, avg, max) = (16412460.339, 26199026.866, 31890179.688), stdev = 4025681.416
  CI (99.9%): [21895329.255, 30502724.477] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.copy.Inline128int.Val_to_Val_arraycopy
# Parameters: (size = 100)

# Run progress: 50.88% complete, ETA 04:47:13
# Fork: 1 of 3
# Warmup Iteration   1: 9.583 ns/op
# Warmup Iteration   2: 9.583 ns/op
# Warmup Iteration   3: 9.558 ns/op
Iteration   1: 9.642 ns/op
Iteration   2: 9.532 ns/op
Iteration   3: 9.573 ns/op
Iteration   4: 9.552 ns/op
Iteration   5: 9.534 ns/op

# Run progress: 50.91% complete, ETA 04:47:04
# Fork: 2 of 3
# Warmup Iteration   1: 9.617 ns/op
# Warmup Iteration   2: 9.770 ns/op
# Warmup Iteration   3: 9.628 ns/op
Iteration   1: 9.712 ns/op
Iteration   2: 9.814 ns/op
Iteration   3: 9.751 ns/op
Iteration   4: 9.617 ns/op
Iteration   5: 9.612 ns/op

# Run progress: 50.93% complete, ETA 04:46:55
# Fork: 3 of 3
# Warmup Iteration   1: 9.648 ns/op
# Warmup Iteration   2: 9.702 ns/op
# Warmup Iteration   3: 9.646 ns/op
Iteration   1: 9.662 ns/op
Iteration   2: 9.625 ns/op
Iteration   3: 9.634 ns/op
Iteration   4: 9.658 ns/op
Iteration   5: 9.604 ns/op


Result "org.openjdk.bench.valhalla.array.copy.Inline128int.Val_to_Val_arraycopy":
  9.635 ±(99.9%) 0.084 ns/op [Average]
  (min, avg, max) = (9.532, 9.635, 9.814), stdev = 0.078
  CI (99.9%): [9.551, 9.719] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.copy.Inline128int.Val_to_Val_arraycopy
# Parameters: (size = 1000000)

# Run progress: 50.96% complete, ETA 04:46:46
# Fork: 1 of 3
# Warmup Iteration   1: 83814.261 ns/op
# Warmup Iteration   2: 74521.397 ns/op
# Warmup Iteration   3: 71696.724 ns/op
Iteration   1: 77029.261 ns/op
Iteration   2: 84795.448 ns/op
Iteration   3: 84432.611 ns/op
Iteration   4: 84667.872 ns/op
Iteration   5: 79722.594 ns/op

# Run progress: 50.98% complete, ETA 04:46:38
# Fork: 2 of 3
# Warmup Iteration   1: 71891.414 ns/op
# Warmup Iteration   2: 81967.373 ns/op
# Warmup Iteration   3: 81896.560 ns/op
Iteration   1: 82370.261 ns/op
Iteration   2: 83155.284 ns/op
Iteration   3: 79357.788 ns/op
Iteration   4: 75665.531 ns/op
Iteration   5: 73087.067 ns/op

# Run progress: 51.00% complete, ETA 04:46:29
# Fork: 3 of 3
# Warmup Iteration   1: 76039.355 ns/op
# Warmup Iteration   2: 73986.473 ns/op
# Warmup Iteration   3: 73755.811 ns/op
Iteration   1: 82105.675 ns/op
Iteration   2: 83578.003 ns/op
Iteration   3: 82931.335 ns/op
Iteration   4: 82365.306 ns/op
Iteration   5: 80897.470 ns/op


Result "org.openjdk.bench.valhalla.array.copy.Inline128int.Val_to_Val_arraycopy":
  81077.434 ±(99.9%) 3733.130 ns/op [Average]
  (min, avg, max) = (73087.067, 81077.434, 84795.448), stdev = 3491.972
  CI (99.9%): [77344.304, 84810.564] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.copy.Inline128int.Val_to_Val_copy
# Parameters: (size = 100)

# Run progress: 51.03% complete, ETA 04:46:20
# Fork: 1 of 3
# Warmup Iteration   1: 177.932 ns/op
# Warmup Iteration   2: 177.701 ns/op
# Warmup Iteration   3: 177.958 ns/op
Iteration   1: 179.681 ns/op
Iteration   2: 178.394 ns/op
Iteration   3: 178.193 ns/op
Iteration   4: 177.988 ns/op
Iteration   5: 178.015 ns/op

# Run progress: 51.05% complete, ETA 04:46:11
# Fork: 2 of 3
# Warmup Iteration   1: 179.264 ns/op
# Warmup Iteration   2: 178.921 ns/op
# Warmup Iteration   3: 178.482 ns/op
Iteration   1: 177.890 ns/op
Iteration   2: 178.059 ns/op
Iteration   3: 179.239 ns/op
Iteration   4: 177.820 ns/op
Iteration   5: 177.917 ns/op

# Run progress: 51.08% complete, ETA 04:46:02
# Fork: 3 of 3
# Warmup Iteration   1: 178.451 ns/op
# Warmup Iteration   2: 177.683 ns/op
# Warmup Iteration   3: 176.882 ns/op
Iteration   1: 176.614 ns/op
Iteration   2: 176.469 ns/op
Iteration   3: 176.292 ns/op
Iteration   4: 176.095 ns/op
Iteration   5: 176.488 ns/op


Result "org.openjdk.bench.valhalla.array.copy.Inline128int.Val_to_Val_copy":
  177.677 ±(99.9%) 1.148 ns/op [Average]
  (min, avg, max) = (176.095, 177.677, 179.681), stdev = 1.074
  CI (99.9%): [176.529, 178.825] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.copy.Inline128int.Val_to_Val_copy
# Parameters: (size = 1000000)

# Run progress: 51.10% complete, ETA 04:45:54
# Fork: 1 of 3
# Warmup Iteration   1: 25695610.425 ns/op
# Warmup Iteration   2: 28099650.444 ns/op
# Warmup Iteration   3: 27183902.027 ns/op
Iteration   1: 28524629.639 ns/op
Iteration   2: 27453206.081 ns/op
Iteration   3: 30767804.303 ns/op
Iteration   4: 29672533.088 ns/op
Iteration   5: 30653285.364 ns/op

# Run progress: 51.13% complete, ETA 04:45:45
# Fork: 2 of 3
# Warmup Iteration   1: 28718357.639 ns/op
# Warmup Iteration   2: 30805135.121 ns/op
# Warmup Iteration   3: 28994627.371 ns/op
Iteration   1: 28922185.194 ns/op
Iteration   2: 30367102.941 ns/op
Iteration   3: 32192260.438 ns/op
Iteration   4: 28527135.417 ns/op
Iteration   5: 26855976.974 ns/op

# Run progress: 51.15% complete, ETA 04:45:36
# Fork: 3 of 3
# Warmup Iteration   1: 26537611.103 ns/op
# Warmup Iteration   2: 28571888.889 ns/op
# Warmup Iteration   3: 31549852.273 ns/op
Iteration   1: 29749507.143 ns/op
Iteration   2: 30359312.500 ns/op
Iteration   3: 25464854.175 ns/op
Iteration   4: 29675411.765 ns/op
Iteration   5: 27623775.892 ns/op


Result "org.openjdk.bench.valhalla.array.copy.Inline128int.Val_to_Val_copy":
  29120598.728 ±(99.9%) 1870399.714 ns/op [Average]
  (min, avg, max) = (25464854.175, 29120598.728, 32192260.438), stdev = 1749573.053
  CI (99.9%): [27250199.014, 30990998.441] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.copy.Inline32int.Ref_to_Val_arraycopy
# Parameters: (size = 100)

# Run progress: 51.18% complete, ETA 04:45:28
# Fork: 1 of 3
# Warmup Iteration   1: 9.856 ns/op
# Warmup Iteration   2: 9.888 ns/op
# Warmup Iteration   3: 10.043 ns/op
Iteration   1: 9.962 ns/op
Iteration   2: 9.830 ns/op
Iteration   3: 9.829 ns/op
Iteration   4: 9.836 ns/op
Iteration   5: 10.287 ns/op

# Run progress: 51.20% complete, ETA 04:45:19
# Fork: 2 of 3
# Warmup Iteration   1: 9.898 ns/op
# Warmup Iteration   2: 9.890 ns/op
# Warmup Iteration   3: 9.909 ns/op
Iteration   1: 9.965 ns/op
Iteration   2: 9.868 ns/op
Iteration   3: 9.866 ns/op
Iteration   4: 9.867 ns/op
Iteration   5: 9.863 ns/op

# Run progress: 51.23% complete, ETA 04:45:10
# Fork: 3 of 3
# Warmup Iteration   1: 10.050 ns/op
# Warmup Iteration   2: 10.150 ns/op
# Warmup Iteration   3: 10.150 ns/op
Iteration   1: 10.145 ns/op
Iteration   2: 10.129 ns/op
Iteration   3: 9.996 ns/op
Iteration   4: 9.994 ns/op
Iteration   5: 10.208 ns/op


Result "org.openjdk.bench.valhalla.array.copy.Inline32int.Ref_to_Val_arraycopy":
  9.976 ±(99.9%) 0.160 ns/op [Average]
  (min, avg, max) = (9.829, 9.976, 10.287), stdev = 0.150
  CI (99.9%): [9.816, 10.137] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.copy.Inline32int.Ref_to_Val_arraycopy
# Parameters: (size = 1000000)

# Run progress: 51.25% complete, ETA 04:45:01
# Fork: 1 of 3
# Warmup Iteration   1: 82722.385 ns/op
# Warmup Iteration   2: 80653.119 ns/op
# Warmup Iteration   3: 82777.075 ns/op
Iteration   1: 83264.364 ns/op
Iteration   2: 83042.996 ns/op
Iteration   3: 78294.974 ns/op
Iteration   4: 77521.163 ns/op
Iteration   5: 77852.747 ns/op

# Run progress: 51.27% complete, ETA 04:44:52
# Fork: 2 of 3
# Warmup Iteration   1: 75028.288 ns/op
# Warmup Iteration   2: 71504.479 ns/op
# Warmup Iteration   3: 65880.524 ns/op
Iteration   1: 84238.695 ns/op
Iteration   2: 86216.499 ns/op
Iteration   3: 81843.280 ns/op
Iteration   4: 82352.597 ns/op
Iteration   5: 83809.538 ns/op

# Run progress: 51.30% complete, ETA 04:44:44
# Fork: 3 of 3
# Warmup Iteration   1: 83488.977 ns/op
# Warmup Iteration   2: 79835.642 ns/op
# Warmup Iteration   3: 77230.866 ns/op
Iteration   1: 83864.522 ns/op
Iteration   2: 83491.886 ns/op
Iteration   3: 84043.282 ns/op
Iteration   4: 71839.076 ns/op
Iteration   5: 82836.285 ns/op


Result "org.openjdk.bench.valhalla.array.copy.Inline32int.Ref_to_Val_arraycopy":
  81634.127 ±(99.9%) 3955.940 ns/op [Average]
  (min, avg, max) = (71839.076, 81634.127, 86216.499), stdev = 3700.389
  CI (99.9%): [77678.187, 85590.067] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.copy.Inline32int.Ref_to_Val_copy
# Parameters: (size = 100)

# Run progress: 51.32% complete, ETA 04:44:35
# Fork: 1 of 3
# Warmup Iteration   1: 77.243 ns/op
# Warmup Iteration   2: 76.742 ns/op
# Warmup Iteration   3: 77.516 ns/op
Iteration   1: 77.155 ns/op
Iteration   2: 77.680 ns/op
Iteration   3: 79.067 ns/op
Iteration   4: 77.977 ns/op
Iteration   5: 77.702 ns/op

# Run progress: 51.35% complete, ETA 04:44:26
# Fork: 2 of 3
# Warmup Iteration   1: 76.942 ns/op
# Warmup Iteration   2: 76.816 ns/op
# Warmup Iteration   3: 77.761 ns/op
Iteration   1: 77.850 ns/op
Iteration   2: 77.670 ns/op
Iteration   3: 77.734 ns/op
Iteration   4: 76.769 ns/op
Iteration   5: 77.734 ns/op

# Run progress: 51.37% complete, ETA 04:44:17
# Fork: 3 of 3
# Warmup Iteration   1: 78.183 ns/op
# Warmup Iteration   2: 77.031 ns/op
# Warmup Iteration   3: 78.092 ns/op
Iteration   1: 77.456 ns/op
Iteration   2: 77.359 ns/op
Iteration   3: 77.547 ns/op
Iteration   4: 77.817 ns/op
Iteration   5: 77.892 ns/op


Result "org.openjdk.bench.valhalla.array.copy.Inline32int.Ref_to_Val_copy":
  77.694 ±(99.9%) 0.526 ns/op [Average]
  (min, avg, max) = (76.769, 77.694, 79.067), stdev = 0.492
  CI (99.9%): [77.168, 78.220] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.copy.Inline32int.Ref_to_Val_copy
# Parameters: (size = 1000000)

# Run progress: 51.40% complete, ETA 04:44:08
# Fork: 1 of 3
# Warmup Iteration   1: 26767325.658 ns/op
# Warmup Iteration   2: 28242067.111 ns/op
# Warmup Iteration   3: 30328450.971 ns/op
Iteration   1: 26785509.868 ns/op
Iteration   2: 26562573.474 ns/op
Iteration   3: 28232542.833 ns/op
Iteration   4: 26417926.282 ns/op
Iteration   5: 27605122.730 ns/op

# Run progress: 51.42% complete, ETA 04:43:59
# Fork: 2 of 3
# Warmup Iteration   1: 27722611.486 ns/op
# Warmup Iteration   2: 26432461.538 ns/op
# Warmup Iteration   3: 25866988.550 ns/op
Iteration   1: 24894759.146 ns/op
Iteration   2: 26874862.947 ns/op
Iteration   3: 24699890.244 ns/op
Iteration   4: 27703708.351 ns/op
Iteration   5: 32031829.438 ns/op

# Run progress: 51.45% complete, ETA 04:43:51
# Fork: 3 of 3
# Warmup Iteration   1: 27300652.027 ns/op
# Warmup Iteration   2: 30281014.706 ns/op
# Warmup Iteration   3: 21135876.694 ns/op
Iteration   1: 28838620.257 ns/op
Iteration   2: 28766268.528 ns/op
Iteration   3: 26291397.436 ns/op
Iteration   4: 26253592.949 ns/op
Iteration   5: 24599104.167 ns/op


Result "org.openjdk.bench.valhalla.array.copy.Inline32int.Ref_to_Val_copy":
  27103847.243 ±(99.9%) 2043960.109 ns/op [Average]
  (min, avg, max) = (24599104.167, 27103847.243, 32031829.438), stdev = 1911921.554
  CI (99.9%): [25059887.135, 29147807.352] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.copy.Inline32int.Val_to_Ref_arraycopy
# Parameters: (size = 100)

# Run progress: 51.47% complete, ETA 04:43:42
# Fork: 1 of 3
# Warmup Iteration   1: 10.084 ns/op
# Warmup Iteration   2: 10.025 ns/op
# Warmup Iteration   3: 10.001 ns/op
Iteration   1: 10.013 ns/op
Iteration   2: 9.985 ns/op
Iteration   3: 9.986 ns/op
Iteration   4: 10.053 ns/op
Iteration   5: 9.993 ns/op

# Run progress: 51.50% complete, ETA 04:43:33
# Fork: 2 of 3
# Warmup Iteration   1: 10.037 ns/op
# Warmup Iteration   2: 10.153 ns/op
# Warmup Iteration   3: 10.768 ns/op
Iteration   1: 10.625 ns/op
Iteration   2: 11.972 ns/op
Iteration   3: 15.439 ns/op
Iteration   4: 16.650 ns/op
Iteration   5: 14.139 ns/op

# Run progress: 51.52% complete, ETA 04:43:24
# Fork: 3 of 3
# Warmup Iteration   1: 10.745 ns/op
# Warmup Iteration   2: 10.855 ns/op
# Warmup Iteration   3: 13.097 ns/op
Iteration   1: 14.850 ns/op
Iteration   2: 17.446 ns/op
Iteration   3: 22.998 ns/op
Iteration   4: 20.854 ns/op
Iteration   5: 20.842 ns/op


Result "org.openjdk.bench.valhalla.array.copy.Inline32int.Val_to_Ref_arraycopy":
  14.390 ±(99.9%) 4.861 ns/op [Average]
  (min, avg, max) = (9.985, 14.390, 22.998), stdev = 4.547
  CI (99.9%): [9.529, 19.251] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.copy.Inline32int.Val_to_Ref_arraycopy
# Parameters: (size = 1000000)

# Run progress: 51.54% complete, ETA 04:43:16
# Fork: 1 of 3
# Warmup Iteration   1: 158038.591 ns/op
# Warmup Iteration   2: 177593.929 ns/op
# Warmup Iteration   3: 176319.891 ns/op
Iteration   1: 177433.401 ns/op
Iteration   2: 178149.956 ns/op
Iteration   3: 178533.912 ns/op
Iteration   4: 176540.539 ns/op
Iteration   5: 143267.066 ns/op

# Run progress: 51.57% complete, ETA 04:43:07
# Fork: 2 of 3
# Warmup Iteration   1: 176947.584 ns/op
# Warmup Iteration   2: 183654.704 ns/op
# Warmup Iteration   3: 191318.170 ns/op
Iteration   1: 212547.731 ns/op
Iteration   2: 214745.585 ns/op
Iteration   3: 229049.907 ns/op
Iteration   4: 225166.872 ns/op
Iteration   5: 191493.199 ns/op

# Run progress: 51.59% complete, ETA 04:42:59
# Fork: 3 of 3
# Warmup Iteration   1: 165030.304 ns/op
# Warmup Iteration   2: 185764.701 ns/op
# Warmup Iteration   3: 213357.163 ns/op
Iteration   1: 226872.909 ns/op
Iteration   2: 229986.292 ns/op
Iteration   3: 184781.838 ns/op
Iteration   4: 165693.240 ns/op
Iteration   5: 150679.352 ns/op


Result "org.openjdk.bench.valhalla.array.copy.Inline32int.Val_to_Ref_arraycopy":
  192329.453 ±(99.9%) 30932.634 ns/op [Average]
  (min, avg, max) = (143267.066, 192329.453, 229986.292), stdev = 28934.405
  CI (99.9%): [161396.819, 223262.087] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.copy.Inline32int.Val_to_Ref_copy
# Parameters: (size = 100)

# Run progress: 51.62% complete, ETA 04:42:50
# Fork: 1 of 3
# Warmup Iteration   1: 109.562 ns/op
# Warmup Iteration   2: 76.615 ns/op
# Warmup Iteration   3: 77.786 ns/op
Iteration   1: 78.951 ns/op
Iteration   2: 77.179 ns/op
Iteration   3: 79.012 ns/op
Iteration   4: 78.422 ns/op
Iteration   5: 77.038 ns/op

# Run progress: 51.64% complete, ETA 04:42:41
# Fork: 2 of 3
# Warmup Iteration   1: 78.028 ns/op
# Warmup Iteration   2: 77.486 ns/op
# Warmup Iteration   3: 77.360 ns/op
Iteration   1: 77.523 ns/op
Iteration   2: 78.316 ns/op
Iteration   3: 77.480 ns/op
Iteration   4: 77.701 ns/op
Iteration   5: 77.830 ns/op

# Run progress: 51.67% complete, ETA 04:42:32
# Fork: 3 of 3
# Warmup Iteration   1: 78.003 ns/op
# Warmup Iteration   2: 78.049 ns/op
# Warmup Iteration   3: 76.674 ns/op
Iteration   1: 77.527 ns/op
Iteration   2: 77.384 ns/op
Iteration   3: 78.390 ns/op
Iteration   4: 78.435 ns/op
Iteration   5: 79.719 ns/op


Result "org.openjdk.bench.valhalla.array.copy.Inline32int.Val_to_Ref_copy":
  78.060 ±(99.9%) 0.822 ns/op [Average]
  (min, avg, max) = (77.038, 78.060, 79.719), stdev = 0.769
  CI (99.9%): [77.239, 78.882] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.copy.Inline32int.Val_to_Ref_copy
# Parameters: (size = 1000000)

# Run progress: 51.69% complete, ETA 04:42:24
# Fork: 1 of 3
# Warmup Iteration   1: 43986762.696 ns/op
# Warmup Iteration   2: 38868439.115 ns/op
# Warmup Iteration   3: 45827592.818 ns/op
Iteration   1: 55200546.053 ns/op
Iteration   2: 40421548.320 ns/op
Iteration   3: 42534720.500 ns/op
Iteration   4: 43014345.458 ns/op
Iteration   5: 49735666.667 ns/op

# Run progress: 51.72% complete, ETA 04:42:15
# Fork: 2 of 3
# Warmup Iteration   1: 47974227.273 ns/op
# Warmup Iteration   2: 50872813.476 ns/op
# Warmup Iteration   3: 49187464.286 ns/op
Iteration   1: 53388563.579 ns/op
Iteration   2: 54527456.158 ns/op
Iteration   3: 53026828.947 ns/op
Iteration   4: 48236221.591 ns/op
Iteration   5: 51501731.250 ns/op

# Run progress: 51.74% complete, ETA 04:42:06
# Fork: 3 of 3
# Warmup Iteration   1: 42307140.625 ns/op
# Warmup Iteration   2: 45820236.727 ns/op
# Warmup Iteration   3: 36404909.214 ns/op
Iteration   1: 19438719.558 ns/op
Iteration   2: 23972801.595 ns/op
Iteration   3: 16092896.825 ns/op
Iteration   4: 26820623.923 ns/op
Iteration   5: 45792435.591 ns/op


Result "org.openjdk.bench.valhalla.array.copy.Inline32int.Val_to_Ref_copy":
  41580340.401 ±(99.9%) 14350424.126 ns/op [Average]
  (min, avg, max) = (16092896.825, 41580340.401, 55200546.053), stdev = 13423395.632
  CI (99.9%): [27229916.275, 55930764.527] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.copy.Inline32int.Val_to_Val_arraycopy
# Parameters: (size = 100)

# Run progress: 51.76% complete, ETA 04:41:58
# Fork: 1 of 3
# Warmup Iteration   1: 9.840 ns/op
# Warmup Iteration   2: 9.825 ns/op
# Warmup Iteration   3: 9.834 ns/op
Iteration   1: 9.860 ns/op
Iteration   2: 9.906 ns/op
Iteration   3: 9.816 ns/op
Iteration   4: 9.837 ns/op
Iteration   5: 9.870 ns/op

# Run progress: 51.79% complete, ETA 04:41:49
# Fork: 2 of 3
# Warmup Iteration   1: 9.866 ns/op
# Warmup Iteration   2: 9.891 ns/op
# Warmup Iteration   3: 9.867 ns/op
Iteration   1: 9.878 ns/op
Iteration   2: 9.982 ns/op
Iteration   3: 9.846 ns/op
Iteration   4: 9.880 ns/op
Iteration   5: 9.845 ns/op

# Run progress: 51.81% complete, ETA 04:41:40
# Fork: 3 of 3
# Warmup Iteration   1: 10.016 ns/op
# Warmup Iteration   2: 10.143 ns/op
# Warmup Iteration   3: 10.018 ns/op
Iteration   1: 9.985 ns/op
Iteration   2: 10.243 ns/op
Iteration   3: 10.012 ns/op
Iteration   4: 10.044 ns/op
Iteration   5: 9.928 ns/op


Result "org.openjdk.bench.valhalla.array.copy.Inline32int.Val_to_Val_arraycopy":
  9.929 ±(99.9%) 0.119 ns/op [Average]
  (min, avg, max) = (9.816, 9.929, 10.243), stdev = 0.111
  CI (99.9%): [9.810, 10.048] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.copy.Inline32int.Val_to_Val_arraycopy
# Parameters: (size = 1000000)

# Run progress: 51.84% complete, ETA 04:41:31
# Fork: 1 of 3
# Warmup Iteration   1: 80552.331 ns/op
# Warmup Iteration   2: 78961.886 ns/op
# Warmup Iteration   3: 84229.411 ns/op
Iteration   1: 84908.976 ns/op
Iteration   2: 82237.344 ns/op
Iteration   3: 75420.580 ns/op
Iteration   4: 78496.699 ns/op
Iteration   5: 82460.738 ns/op

# Run progress: 51.86% complete, ETA 04:41:22
# Fork: 2 of 3
# Warmup Iteration   1: 86800.669 ns/op
# Warmup Iteration   2: 85403.957 ns/op
# Warmup Iteration   3: 72866.927 ns/op
Iteration   1: 74179.014 ns/op
Iteration   2: 84102.098 ns/op
Iteration   3: 83923.324 ns/op
Iteration   4: 83539.405 ns/op
Iteration   5: 82244.233 ns/op

# Run progress: 51.89% complete, ETA 04:41:13
# Fork: 3 of 3
# Warmup Iteration   1: 80831.502 ns/op
# Warmup Iteration   2: 76010.746 ns/op
# Warmup Iteration   3: 80903.023 ns/op
Iteration   1: 84415.457 ns/op
Iteration   2: 81820.852 ns/op
Iteration   3: 72793.531 ns/op
Iteration   4: 84476.249 ns/op
Iteration   5: 83803.041 ns/op


Result "org.openjdk.bench.valhalla.array.copy.Inline32int.Val_to_Val_arraycopy":
  81254.769 ±(99.9%) 4311.280 ns/op [Average]
  (min, avg, max) = (72793.531, 81254.769, 84908.976), stdev = 4032.774
  CI (99.9%): [76943.490, 85566.049] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.copy.Inline32int.Val_to_Val_copy
# Parameters: (size = 100)

# Run progress: 51.91% complete, ETA 04:41:05
# Fork: 1 of 3
# Warmup Iteration   1: 78.650 ns/op
# Warmup Iteration   2: 77.120 ns/op
# Warmup Iteration   3: 77.529 ns/op
Iteration   1: 78.060 ns/op
Iteration   2: 77.848 ns/op
Iteration   3: 78.174 ns/op
Iteration   4: 78.184 ns/op
Iteration   5: 79.208 ns/op

# Run progress: 51.94% complete, ETA 04:40:56
# Fork: 2 of 3
# Warmup Iteration   1: 79.008 ns/op
# Warmup Iteration   2: 76.782 ns/op
# Warmup Iteration   3: 78.219 ns/op
Iteration   1: 78.134 ns/op
Iteration   2: 77.831 ns/op
Iteration   3: 79.062 ns/op
Iteration   4: 78.091 ns/op
Iteration   5: 78.162 ns/op

# Run progress: 51.96% complete, ETA 04:40:47
# Fork: 3 of 3
# Warmup Iteration   1: 77.197 ns/op
# Warmup Iteration   2: 76.964 ns/op
# Warmup Iteration   3: 78.140 ns/op
Iteration   1: 78.324 ns/op
Iteration   2: 78.351 ns/op
Iteration   3: 77.124 ns/op
Iteration   4: 77.841 ns/op
Iteration   5: 78.649 ns/op


Result "org.openjdk.bench.valhalla.array.copy.Inline32int.Val_to_Val_copy":
  78.203 ±(99.9%) 0.541 ns/op [Average]
  (min, avg, max) = (77.124, 78.203, 79.208), stdev = 0.506
  CI (99.9%): [77.662, 78.744] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.copy.Inline32int.Val_to_Val_copy
# Parameters: (size = 1000000)

# Run progress: 51.99% complete, ETA 04:40:38
# Fork: 1 of 3
# Warmup Iteration   1: 20953949.646 ns/op
# Warmup Iteration   2: 16191734.127 ns/op
# Warmup Iteration   3: 23698444.767 ns/op
Iteration   1: 20576559.160 ns/op
Iteration   2: 28379046.306 ns/op
Iteration   3: 26237394.231 ns/op
Iteration   4: 19711245.981 ns/op
Iteration   5: 20543382.653 ns/op

# Run progress: 52.01% complete, ETA 04:40:29
# Fork: 2 of 3
# Warmup Iteration   1: 23002279.341 ns/op
# Warmup Iteration   2: 20027997.596 ns/op
# Warmup Iteration   3: 27028345.395 ns/op
Iteration   1: 20926325.521 ns/op
Iteration   2: 20407618.340 ns/op
Iteration   3: 19806761.212 ns/op
Iteration   4: 22637224.067 ns/op
Iteration   5: 22460114.822 ns/op

# Run progress: 52.03% complete, ETA 04:40:21
# Fork: 3 of 3
# Warmup Iteration   1: 18849263.889 ns/op
# Warmup Iteration   2: 21495540.787 ns/op
# Warmup Iteration   3: 22027038.043 ns/op
Iteration   1: 25068367.878 ns/op
Iteration   2: 27788867.108 ns/op
Iteration   3: 22607828.804 ns/op
Iteration   4: 24045689.907 ns/op
Iteration   5: 25461239.575 ns/op


Result "org.openjdk.bench.valhalla.array.copy.Inline32int.Val_to_Val_copy":
  23110511.038 ±(99.9%) 3105174.858 ns/op [Average]
  (min, avg, max) = (19711245.981, 23110511.038, 28379046.306), stdev = 2904582.489
  CI (99.9%): [20005336.179, 26215685.896] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.copy.Inline64byte.Ref_to_Val_arraycopy
# Parameters: (size = 100)

# Run progress: 52.06% complete, ETA 04:40:12
# Fork: 1 of 3
# Warmup Iteration   1: 9.732 ns/op
# Warmup Iteration   2: 9.680 ns/op
# Warmup Iteration   3: 9.575 ns/op
Iteration   1: 9.605 ns/op
Iteration   2: 9.558 ns/op
Iteration   3: 9.684 ns/op
Iteration   4: 9.567 ns/op
Iteration   5: 9.576 ns/op

# Run progress: 52.08% complete, ETA 04:40:03
# Fork: 2 of 3
# Warmup Iteration   1: 10.895 ns/op
# Warmup Iteration   2: 9.638 ns/op
# Warmup Iteration   3: 9.665 ns/op
Iteration   1: 9.691 ns/op
Iteration   2: 9.727 ns/op
Iteration   3: 9.750 ns/op
Iteration   4: 9.671 ns/op
Iteration   5: 9.708 ns/op

# Run progress: 52.11% complete, ETA 04:39:54
# Fork: 3 of 3
# Warmup Iteration   1: 9.573 ns/op
# Warmup Iteration   2: 9.568 ns/op
# Warmup Iteration   3: 9.558 ns/op
Iteration   1: 9.559 ns/op
Iteration   2: 9.725 ns/op
Iteration   3: 9.646 ns/op
Iteration   4: 9.570 ns/op
Iteration   5: 9.654 ns/op


Result "org.openjdk.bench.valhalla.array.copy.Inline64byte.Ref_to_Val_arraycopy":
  9.646 ±(99.9%) 0.073 ns/op [Average]
  (min, avg, max) = (9.558, 9.646, 9.750), stdev = 0.068
  CI (99.9%): [9.573, 9.719] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.copy.Inline64byte.Ref_to_Val_arraycopy
# Parameters: (size = 1000000)

# Run progress: 52.13% complete, ETA 04:39:45
# Fork: 1 of 3
# Warmup Iteration   1: 70643.670 ns/op
# Warmup Iteration   2: 80925.883 ns/op
# Warmup Iteration   3: 76032.822 ns/op
Iteration   1: 83089.957 ns/op
Iteration   2: 84582.719 ns/op
Iteration   3: 79755.701 ns/op
Iteration   4: 83988.731 ns/op
Iteration   5: 84049.305 ns/op

# Run progress: 52.16% complete, ETA 04:39:37
# Fork: 2 of 3
# Warmup Iteration   1: 82284.331 ns/op
# Warmup Iteration   2: 81998.856 ns/op
# Warmup Iteration   3: 83923.774 ns/op
Iteration   1: 84962.577 ns/op
Iteration   2: 84487.655 ns/op
Iteration   3: 88588.873 ns/op
Iteration   4: 78939.200 ns/op
Iteration   5: 73795.343 ns/op

# Run progress: 52.18% complete, ETA 04:39:28
# Fork: 3 of 3
# Warmup Iteration   1: 72144.357 ns/op
# Warmup Iteration   2: 80354.145 ns/op
# Warmup Iteration   3: 98842.181 ns/op
Iteration   1: 102906.282 ns/op
Iteration   2: 98091.942 ns/op
Iteration   3: 86660.641 ns/op
Iteration   4: 82299.638 ns/op
Iteration   5: 82858.707 ns/op


Result "org.openjdk.bench.valhalla.array.copy.Inline64byte.Ref_to_Val_arraycopy":
  85270.485 ±(99.9%) 7635.926 ns/op [Average]
  (min, avg, max) = (73795.343, 85270.485, 102906.282), stdev = 7142.650
  CI (99.9%): [77634.558, 92906.411] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.copy.Inline64byte.Ref_to_Val_copy
# Parameters: (size = 100)

# Run progress: 52.21% complete, ETA 04:39:19
# Fork: 1 of 3
# Warmup Iteration   1: 188.031 ns/op
# Warmup Iteration   2: 204.185 ns/op
# Warmup Iteration   3: 179.648 ns/op
Iteration   1: 178.455 ns/op
Iteration   2: 206.735 ns/op
Iteration   3: 210.206 ns/op
Iteration   4: 190.876 ns/op
Iteration   5: 177.385 ns/op

# Run progress: 52.23% complete, ETA 04:39:10
# Fork: 2 of 3
# Warmup Iteration   1: 180.111 ns/op
# Warmup Iteration   2: 185.290 ns/op
# Warmup Iteration   3: 183.567 ns/op
Iteration   1: 178.668 ns/op
Iteration   2: 179.151 ns/op
Iteration   3: 180.965 ns/op
Iteration   4: 188.033 ns/op
Iteration   5: 224.628 ns/op

# Run progress: 52.25% complete, ETA 04:39:02
# Fork: 3 of 3
# Warmup Iteration   1: 251.699 ns/op
# Warmup Iteration   2: 219.716 ns/op
# Warmup Iteration   3: 178.670 ns/op
Iteration   1: 182.901 ns/op
Iteration   2: 209.731 ns/op
Iteration   3: 200.952 ns/op
Iteration   4: 186.881 ns/op
Iteration   5: 181.561 ns/op


Result "org.openjdk.bench.valhalla.array.copy.Inline64byte.Ref_to_Val_copy":
  191.809 ±(99.9%) 15.918 ns/op [Average]
  (min, avg, max) = (177.385, 191.809, 224.628), stdev = 14.889
  CI (99.9%): [175.891, 207.726] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.copy.Inline64byte.Ref_to_Val_copy
# Parameters: (size = 1000000)

# Run progress: 52.28% complete, ETA 04:38:53
# Fork: 1 of 3
# Warmup Iteration   1: 24685784.714 ns/op
# Warmup Iteration   2: 29602027.371 ns/op
# Warmup Iteration   3: 26816410.079 ns/op
Iteration   1: 24684415.659 ns/op
Iteration   2: 24008171.619 ns/op
Iteration   3: 27861225.216 ns/op
Iteration   4: 32934091.387 ns/op
Iteration   5: 24539589.286 ns/op

# Run progress: 52.30% complete, ETA 04:38:45
# Fork: 2 of 3
# Warmup Iteration   1: 24999044.707 ns/op
# Warmup Iteration   2: 22844403.711 ns/op
# Warmup Iteration   3: 23263966.864 ns/op
Iteration   1: 32540414.000 ns/op
Iteration   2: 31297380.030 ns/op
Iteration   3: 30344950.758 ns/op
Iteration   4: 24378301.595 ns/op
Iteration   5: 26744064.684 ns/op

# Run progress: 52.33% complete, ETA 04:38:36
# Fork: 3 of 3
# Warmup Iteration   1: 27334924.342 ns/op
# Warmup Iteration   2: 28941390.457 ns/op
# Warmup Iteration   3: 23007017.045 ns/op
Iteration   1: 28188360.351 ns/op
Iteration   2: 22388956.489 ns/op
Iteration   3: 25325197.925 ns/op
Iteration   4: 25840143.750 ns/op
Iteration   5: 24140073.405 ns/op


Result "org.openjdk.bench.valhalla.array.copy.Inline64byte.Ref_to_Val_copy":
  27014355.744 ±(99.9%) 3598387.355 ns/op [Average]
  (min, avg, max) = (22388956.489, 27014355.744, 32934091.387), stdev = 3365933.765
  CI (99.9%): [23415968.388, 30612743.099] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.copy.Inline64byte.Val_to_Ref_arraycopy
# Parameters: (size = 100)

# Run progress: 52.35% complete, ETA 04:38:27
# Fork: 1 of 3
# Warmup Iteration   1: 9.646 ns/op
# Warmup Iteration   2: 11.462 ns/op
# Warmup Iteration   3: 13.476 ns/op
Iteration   1: 13.139 ns/op
Iteration   2: 11.419 ns/op
Iteration   3: 9.579 ns/op
Iteration   4: 9.568 ns/op
Iteration   5: 10.778 ns/op

# Run progress: 52.38% complete, ETA 04:38:19
# Fork: 2 of 3
# Warmup Iteration   1: 13.766 ns/op
# Warmup Iteration   2: 13.079 ns/op
# Warmup Iteration   3: 12.629 ns/op
Iteration   1: 10.122 ns/op
Iteration   2: 12.287 ns/op
Iteration   3: 19.967 ns/op
Iteration   4: 19.930 ns/op
Iteration   5: 19.989 ns/op

# Run progress: 52.40% complete, ETA 04:38:10
# Fork: 3 of 3
# Warmup Iteration   1: 20.026 ns/op
# Warmup Iteration   2: 20.058 ns/op
# Warmup Iteration   3: 19.931 ns/op
Iteration   1: 19.992 ns/op
Iteration   2: 20.049 ns/op
Iteration   3: 22.243 ns/op
Iteration   4: 20.293 ns/op
Iteration   5: 20.324 ns/op


Result "org.openjdk.bench.valhalla.array.copy.Inline64byte.Val_to_Ref_arraycopy":
  15.979 ±(99.9%) 5.291 ns/op [Average]
  (min, avg, max) = (9.568, 15.979, 22.243), stdev = 4.949
  CI (99.9%): [10.688, 21.269] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.copy.Inline64byte.Val_to_Ref_arraycopy
# Parameters: (size = 1000000)

# Run progress: 52.43% complete, ETA 04:38:01
# Fork: 1 of 3
# Warmup Iteration   1: 176114.272 ns/op
# Warmup Iteration   2: 176392.431 ns/op
# Warmup Iteration   3: 182443.989 ns/op
Iteration   1: 172393.067 ns/op
Iteration   2: 160347.831 ns/op
Iteration   3: 163727.386 ns/op
Iteration   4: 196293.237 ns/op
Iteration   5: 210255.212 ns/op

# Run progress: 52.45% complete, ETA 04:37:53
# Fork: 2 of 3
# Warmup Iteration   1: 206395.476 ns/op
# Warmup Iteration   2: 214479.862 ns/op
# Warmup Iteration   3: 214384.744 ns/op
Iteration   1: 192273.744 ns/op
Iteration   2: 135197.316 ns/op
Iteration   3: 134633.458 ns/op
Iteration   4: 166954.995 ns/op
Iteration   5: 164307.347 ns/op

# Run progress: 52.48% complete, ETA 04:37:44
# Fork: 3 of 3
# Warmup Iteration   1: 77424.232 ns/op
# Warmup Iteration   2: 82089.119 ns/op
# Warmup Iteration   3: 83906.861 ns/op
Iteration   1: 84815.281 ns/op
Iteration   2: 84039.312 ns/op
Iteration   3: 78250.342 ns/op
Iteration   4: 87133.604 ns/op
Iteration   5: 85072.692 ns/op


Result "org.openjdk.bench.valhalla.array.copy.Inline64byte.Val_to_Ref_arraycopy":
  141046.322 ±(99.9%) 49502.985 ns/op [Average]
  (min, avg, max) = (78250.342, 141046.322, 210255.212), stdev = 46305.122
  CI (99.9%): [91543.337, 190549.306] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.copy.Inline64byte.Val_to_Ref_copy
# Parameters: (size = 100)

# Run progress: 52.50% complete, ETA 04:37:36
# Fork: 1 of 3
# Warmup Iteration   1: 179.080 ns/op
# Warmup Iteration   2: 177.408 ns/op
# Warmup Iteration   3: 178.627 ns/op
Iteration   1: 178.757 ns/op
Iteration   2: 179.398 ns/op
Iteration   3: 177.866 ns/op
Iteration   4: 179.337 ns/op
Iteration   5: 180.355 ns/op

# Run progress: 52.52% complete, ETA 04:37:27
# Fork: 2 of 3
# Warmup Iteration   1: 178.145 ns/op
# Warmup Iteration   2: 178.778 ns/op
# Warmup Iteration   3: 178.723 ns/op
Iteration   1: 178.536 ns/op
Iteration   2: 177.719 ns/op
Iteration   3: 182.223 ns/op
Iteration   4: 178.407 ns/op
Iteration   5: 180.301 ns/op

# Run progress: 52.55% complete, ETA 04:37:18
# Fork: 3 of 3
# Warmup Iteration   1: 179.804 ns/op
# Warmup Iteration   2: 178.962 ns/op
# Warmup Iteration   3: 180.062 ns/op
Iteration   1: 179.425 ns/op
Iteration   2: 178.481 ns/op
Iteration   3: 179.160 ns/op
Iteration   4: 179.423 ns/op
Iteration   5: 178.583 ns/op


Result "org.openjdk.bench.valhalla.array.copy.Inline64byte.Val_to_Ref_copy":
  179.198 ±(99.9%) 1.211 ns/op [Average]
  (min, avg, max) = (177.719, 179.198, 182.223), stdev = 1.133
  CI (99.9%): [177.987, 180.409] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.copy.Inline64byte.Val_to_Ref_copy
# Parameters: (size = 1000000)

# Run progress: 52.57% complete, ETA 04:37:09
# Fork: 1 of 3
# Warmup Iteration   1: 33740808.333 ns/op
# Warmup Iteration   2: 26224904.923 ns/op
# Warmup Iteration   3: 25166657.300 ns/op
Iteration   1: 42959704.875 ns/op
Iteration   2: 26307976.513 ns/op
Iteration   3: 27292473.684 ns/op
Iteration   4: 22808810.200 ns/op
Iteration   5: 22447345.356 ns/op

# Run progress: 52.60% complete, ETA 04:37:01
# Fork: 2 of 3
# Warmup Iteration   1: 21283364.583 ns/op
# Warmup Iteration   2: 21176016.500 ns/op
# Warmup Iteration   3: 25352104.175 ns/op
Iteration   1: 23528344.977 ns/op
Iteration   2: 24637984.756 ns/op
Iteration   3: 16638028.689 ns/op
Iteration   4: 16177546.371 ns/op
Iteration   5: 17841199.561 ns/op

# Run progress: 52.62% complete, ETA 04:36:54
# Fork: 3 of 3
# Warmup Iteration   1: 15422883.833 ns/op
# Warmup Iteration   2: 15433479.803 ns/op
# Warmup Iteration   3: 24752261.905 ns/op
Iteration   1: 20693680.265 ns/op
Iteration   2: 15940504.563 ns/op
Iteration   3: 21969844.872 ns/op
Iteration   4: 26812536.184 ns/op
Iteration   5: 25589851.050 ns/op


Result "org.openjdk.bench.valhalla.array.copy.Inline64byte.Val_to_Ref_copy":
  23443055.461 ±(99.9%) 7109803.653 ns/op [Average]
  (min, avg, max) = (15940504.563, 23443055.461, 42959704.875), stdev = 6650514.749
  CI (99.9%): [16333251.808, 30552859.114] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.copy.Inline64byte.Val_to_Val_arraycopy
# Parameters: (size = 100)

# Run progress: 52.65% complete, ETA 04:36:45
# Fork: 1 of 3
# Warmup Iteration   1: 9.478 ns/op
# Warmup Iteration   2: 9.599 ns/op
# Warmup Iteration   3: 9.676 ns/op
Iteration   1: 9.687 ns/op
Iteration   2: 9.547 ns/op
Iteration   3: 9.566 ns/op
Iteration   4: 9.633 ns/op
Iteration   5: 9.583 ns/op

# Run progress: 52.67% complete, ETA 04:36:37
# Fork: 2 of 3
# Warmup Iteration   1: 10.014 ns/op
# Warmup Iteration   2: 9.903 ns/op
# Warmup Iteration   3: 9.755 ns/op
Iteration   1: 9.673 ns/op
Iteration   2: 9.644 ns/op
Iteration   3: 9.664 ns/op
Iteration   4: 9.673 ns/op
Iteration   5: 9.579 ns/op

# Run progress: 52.70% complete, ETA 04:36:28
# Fork: 3 of 3
# Warmup Iteration   1: 9.573 ns/op
# Warmup Iteration   2: 9.675 ns/op
# Warmup Iteration   3: 9.738 ns/op
Iteration   1: 9.574 ns/op
Iteration   2: 9.608 ns/op
Iteration   3: 9.654 ns/op
Iteration   4: 9.558 ns/op
Iteration   5: 9.889 ns/op


Result "org.openjdk.bench.valhalla.array.copy.Inline64byte.Val_to_Val_arraycopy":
  9.635 ±(99.9%) 0.090 ns/op [Average]
  (min, avg, max) = (9.547, 9.635, 9.889), stdev = 0.084
  CI (99.9%): [9.545, 9.726] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.copy.Inline64byte.Val_to_Val_arraycopy
# Parameters: (size = 1000000)

# Run progress: 52.72% complete, ETA 04:36:19
# Fork: 1 of 3
# Warmup Iteration   1: 84680.726 ns/op
# Warmup Iteration   2: 85914.439 ns/op
# Warmup Iteration   3: 80633.362 ns/op
Iteration   1: 80033.796 ns/op
Iteration   2: 83398.160 ns/op
Iteration   3: 74879.501 ns/op
Iteration   4: 76219.828 ns/op
Iteration   5: 74811.880 ns/op

# Run progress: 52.75% complete, ETA 04:36:10
# Fork: 2 of 3
# Warmup Iteration   1: 72022.308 ns/op
# Warmup Iteration   2: 79822.284 ns/op
# Warmup Iteration   3: 83299.348 ns/op
Iteration   1: 82624.339 ns/op
Iteration   2: 81182.491 ns/op
Iteration   3: 82696.432 ns/op
Iteration   4: 83191.487 ns/op
Iteration   5: 84279.689 ns/op

# Run progress: 52.77% complete, ETA 04:36:01
# Fork: 3 of 3
# Warmup Iteration   1: 80855.211 ns/op
# Warmup Iteration   2: 82880.212 ns/op
# Warmup Iteration   3: 83532.609 ns/op
Iteration   1: 83714.227 ns/op
Iteration   2: 80454.204 ns/op
Iteration   3: 83617.450 ns/op
Iteration   4: 79110.902 ns/op
Iteration   5: 73032.336 ns/op


Result "org.openjdk.bench.valhalla.array.copy.Inline64byte.Val_to_Val_arraycopy":
  80216.448 ±(99.9%) 4028.081 ns/op [Average]
  (min, avg, max) = (73032.336, 80216.448, 84279.689), stdev = 3767.869
  CI (99.9%): [76188.367, 84244.529] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.copy.Inline64byte.Val_to_Val_copy
# Parameters: (size = 100)

# Run progress: 52.79% complete, ETA 04:35:53
# Fork: 1 of 3
# Warmup Iteration   1: 180.233 ns/op
# Warmup Iteration   2: 178.438 ns/op
# Warmup Iteration   3: 179.128 ns/op
Iteration   1: 180.057 ns/op
Iteration   2: 177.091 ns/op
Iteration   3: 179.737 ns/op
Iteration   4: 179.394 ns/op
Iteration   5: 178.222 ns/op

# Run progress: 52.82% complete, ETA 04:35:44
# Fork: 2 of 3
# Warmup Iteration   1: 178.326 ns/op
# Warmup Iteration   2: 178.363 ns/op
# Warmup Iteration   3: 178.989 ns/op
Iteration   1: 179.202 ns/op
Iteration   2: 179.768 ns/op
Iteration   3: 180.700 ns/op
Iteration   4: 179.859 ns/op
Iteration   5: 179.877 ns/op

# Run progress: 52.84% complete, ETA 04:35:35
# Fork: 3 of 3
# Warmup Iteration   1: 180.580 ns/op
# Warmup Iteration   2: 180.517 ns/op
# Warmup Iteration   3: 179.153 ns/op
Iteration   1: 178.977 ns/op
Iteration   2: 178.554 ns/op
Iteration   3: 178.344 ns/op
Iteration   4: 178.129 ns/op
Iteration   5: 179.197 ns/op


Result "org.openjdk.bench.valhalla.array.copy.Inline64byte.Val_to_Val_copy":
  179.140 ±(99.9%) 0.999 ns/op [Average]
  (min, avg, max) = (177.091, 179.140, 180.700), stdev = 0.934
  CI (99.9%): [178.141, 180.139] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.copy.Inline64byte.Val_to_Val_copy
# Parameters: (size = 1000000)

# Run progress: 52.87% complete, ETA 04:35:26
# Fork: 1 of 3
# Warmup Iteration   1: 26803355.263 ns/op
# Warmup Iteration   2: 25652240.625 ns/op
# Warmup Iteration   3: 28090472.222 ns/op
Iteration   1: 21676751.766 ns/op
Iteration   2: 21231494.792 ns/op
Iteration   3: 23954151.163 ns/op
Iteration   4: 33979308.333 ns/op
Iteration   5: 26155694.800 ns/op

# Run progress: 52.89% complete, ETA 04:35:18
# Fork: 2 of 3
# Warmup Iteration   1: 25345330.268 ns/op
# Warmup Iteration   2: 26099893.154 ns/op
# Warmup Iteration   3: 23144428.711 ns/op
Iteration   1: 22398530.804 ns/op
Iteration   2: 22571157.609 ns/op
Iteration   3: 24772610.756 ns/op
Iteration   4: 24888794.732 ns/op
Iteration   5: 23040106.489 ns/op

# Run progress: 52.92% complete, ETA 04:35:09
# Fork: 3 of 3
# Warmup Iteration   1: 23384204.545 ns/op
# Warmup Iteration   2: 26379903.846 ns/op
# Warmup Iteration   3: 23209267.045 ns/op
Iteration   1: 23295164.822 ns/op
Iteration   2: 26285938.026 ns/op
Iteration   3: 33588643.806 ns/op
Iteration   4: 25865422.925 ns/op
Iteration   5: 24672780.488 ns/op


Result "org.openjdk.bench.valhalla.array.copy.Inline64byte.Val_to_Val_copy":
  25225103.421 ±(99.9%) 4073829.024 ns/op [Average]
  (min, avg, max) = (21231494.792, 25225103.421, 33979308.333), stdev = 3810662.197
  CI (99.9%): [21151274.396, 29298932.445] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.copy.Inline64int.Ref_to_Val_arraycopy
# Parameters: (size = 100)

# Run progress: 52.94% complete, ETA 04:35:01
# Fork: 1 of 3
# Warmup Iteration   1: 9.769 ns/op
# Warmup Iteration   2: 9.724 ns/op
# Warmup Iteration   3: 9.685 ns/op
Iteration   1: 9.759 ns/op
Iteration   2: 9.775 ns/op
Iteration   3: 9.686 ns/op
Iteration   4: 9.730 ns/op
Iteration   5: 9.683 ns/op

# Run progress: 52.97% complete, ETA 04:34:52
# Fork: 2 of 3
# Warmup Iteration   1: 9.677 ns/op
# Warmup Iteration   2: 9.784 ns/op
# Warmup Iteration   3: 9.707 ns/op
Iteration   1: 9.529 ns/op
Iteration   2: 9.678 ns/op
Iteration   3: 9.731 ns/op
Iteration   4: 9.854 ns/op
Iteration   5: 9.650 ns/op

# Run progress: 52.99% complete, ETA 04:34:43
# Fork: 3 of 3
# Warmup Iteration   1: 9.702 ns/op
# Warmup Iteration   2: 9.649 ns/op
# Warmup Iteration   3: 9.687 ns/op
Iteration   1: 9.719 ns/op
Iteration   2: 9.682 ns/op
Iteration   3: 9.650 ns/op
Iteration   4: 9.627 ns/op
Iteration   5: 9.660 ns/op


Result "org.openjdk.bench.valhalla.array.copy.Inline64int.Ref_to_Val_arraycopy":
  9.694 ±(99.9%) 0.079 ns/op [Average]
  (min, avg, max) = (9.529, 9.694, 9.854), stdev = 0.074
  CI (99.9%): [9.615, 9.773] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.copy.Inline64int.Ref_to_Val_arraycopy
# Parameters: (size = 1000000)

# Run progress: 53.01% complete, ETA 04:34:34
# Fork: 1 of 3
# Warmup Iteration   1: 86376.627 ns/op
# Warmup Iteration   2: 74996.656 ns/op
# Warmup Iteration   3: 80907.212 ns/op
Iteration   1: 75004.134 ns/op
Iteration   2: 69711.747 ns/op
Iteration   3: 79152.835 ns/op
Iteration   4: 84987.863 ns/op
Iteration   5: 84712.086 ns/op

# Run progress: 53.04% complete, ETA 04:34:25
# Fork: 2 of 3
# Warmup Iteration   1: 94096.586 ns/op
# Warmup Iteration   2: 86188.261 ns/op
# Warmup Iteration   3: 88996.847 ns/op
Iteration   1: 111151.454 ns/op
Iteration   2: 119758.979 ns/op
Iteration   3: 115376.999 ns/op
Iteration   4: 92772.055 ns/op
Iteration   5: 86045.599 ns/op

# Run progress: 53.06% complete, ETA 04:34:17
# Fork: 3 of 3
# Warmup Iteration   1: 85032.962 ns/op
# Warmup Iteration   2: 83555.009 ns/op
# Warmup Iteration   3: 70893.904 ns/op
Iteration   1: 77695.524 ns/op
Iteration   2: 73698.886 ns/op
Iteration   3: 80578.441 ns/op
Iteration   4: 83090.273 ns/op
Iteration   5: 107587.447 ns/op


Result "org.openjdk.bench.valhalla.array.copy.Inline64int.Ref_to_Val_arraycopy":
  89421.622 ±(99.9%) 17298.279 ns/op [Average]
  (min, avg, max) = (69711.747, 89421.622, 119758.979), stdev = 16180.821
  CI (99.9%): [72123.343, 106719.900] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.copy.Inline64int.Ref_to_Val_copy
# Parameters: (size = 100)

# Run progress: 53.09% complete, ETA 04:34:08
# Fork: 1 of 3
# Warmup Iteration   1: 197.600 ns/op
# Warmup Iteration   2: 178.144 ns/op
# Warmup Iteration   3: 180.347 ns/op
Iteration   1: 192.306 ns/op
Iteration   2: 199.586 ns/op
Iteration   3: 181.139 ns/op
Iteration   4: 181.256 ns/op
Iteration   5: 221.493 ns/op

# Run progress: 53.11% complete, ETA 04:33:59
# Fork: 2 of 3
# Warmup Iteration   1: 242.941 ns/op
# Warmup Iteration   2: 208.364 ns/op
# Warmup Iteration   3: 179.304 ns/op
Iteration   1: 179.327 ns/op
Iteration   2: 180.193 ns/op
Iteration   3: 210.210 ns/op
Iteration   4: 213.880 ns/op
Iteration   5: 210.271 ns/op

# Run progress: 53.14% complete, ETA 04:33:50
# Fork: 3 of 3
# Warmup Iteration   1: 179.633 ns/op
# Warmup Iteration   2: 191.990 ns/op
# Warmup Iteration   3: 220.605 ns/op
Iteration   1: 224.158 ns/op
Iteration   2: 214.220 ns/op
Iteration   3: 179.512 ns/op
Iteration   4: 178.421 ns/op
Iteration   5: 203.850 ns/op


Result "org.openjdk.bench.valhalla.array.copy.Inline64int.Ref_to_Val_copy":
  197.988 ±(99.9%) 18.241 ns/op [Average]
  (min, avg, max) = (178.421, 197.988, 224.158), stdev = 17.063
  CI (99.9%): [179.747, 216.229] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.copy.Inline64int.Ref_to_Val_copy
# Parameters: (size = 1000000)

# Run progress: 53.16% complete, ETA 04:33:41
# Fork: 1 of 3
# Warmup Iteration   1: 22948479.622 ns/op
# Warmup Iteration   2: 25332355.683 ns/op
# Warmup Iteration   3: 23780962.209 ns/op
Iteration   1: 25469490.854 ns/op
Iteration   2: 31180774.000 ns/op
Iteration   3: 26684705.128 ns/op
Iteration   4: 25351323.950 ns/op
Iteration   5: 24139970.930 ns/op

# Run progress: 53.19% complete, ETA 04:33:33
# Fork: 2 of 3
# Warmup Iteration   1: 25792664.600 ns/op
# Warmup Iteration   2: 28959645.229 ns/op
# Warmup Iteration   3: 25124348.585 ns/op
Iteration   1: 23982012.581 ns/op
Iteration   2: 36667068.464 ns/op
Iteration   3: 36300736.607 ns/op
Iteration   4: 44057498.292 ns/op
Iteration   5: 38319408.963 ns/op

# Run progress: 53.21% complete, ETA 04:33:24
# Fork: 3 of 3
# Warmup Iteration   1: 35796465.267 ns/op
# Warmup Iteration   2: 34035559.733 ns/op
# Warmup Iteration   3: 40166434.308 ns/op
Iteration   1: 38587267.615 ns/op
Iteration   2: 43665260.870 ns/op
Iteration   3: 48002570.091 ns/op
Iteration   4: 42583515.625 ns/op
Iteration   5: 41488370.000 ns/op


Result "org.openjdk.bench.valhalla.array.copy.Inline64int.Ref_to_Val_copy":
  35098664.931 ±(99.9%) 8857304.760 ns/op [Average]
  (min, avg, max) = (23982012.581, 35098664.931, 48002570.091), stdev = 8285128.369
  CI (99.9%): [26241360.171, 43955969.692] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.copy.Inline64int.Val_to_Ref_arraycopy
# Parameters: (size = 100)

# Run progress: 53.24% complete, ETA 04:33:16
# Fork: 1 of 3
# Warmup Iteration   1: 20.358 ns/op
# Warmup Iteration   2: 20.403 ns/op
# Warmup Iteration   3: 20.235 ns/op
Iteration   1: 20.151 ns/op
Iteration   2: 20.325 ns/op
Iteration   3: 20.156 ns/op
Iteration   4: 20.361 ns/op
Iteration   5: 20.152 ns/op

# Run progress: 53.26% complete, ETA 04:33:07
# Fork: 2 of 3
# Warmup Iteration   1: 9.619 ns/op
# Warmup Iteration   2: 11.977 ns/op
# Warmup Iteration   3: 11.013 ns/op
Iteration   1: 9.739 ns/op
Iteration   2: 9.567 ns/op
Iteration   3: 9.567 ns/op
Iteration   4: 9.573 ns/op
Iteration   5: 9.564 ns/op

# Run progress: 53.28% complete, ETA 04:33:00
# Fork: 3 of 3
# Warmup Iteration   1: 9.603 ns/op
# Warmup Iteration   2: 9.578 ns/op
# Warmup Iteration   3: 9.657 ns/op
Iteration   1: 9.632 ns/op
Iteration   2: 9.599 ns/op
Iteration   3: 9.607 ns/op
Iteration   4: 9.712 ns/op
Iteration   5: 9.581 ns/op


Result "org.openjdk.bench.valhalla.array.copy.Inline64int.Val_to_Ref_arraycopy":
  13.152 ±(99.9%) 5.538 ns/op [Average]
  (min, avg, max) = (9.564, 13.152, 20.361), stdev = 5.180
  CI (99.9%): [7.615, 18.690] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.copy.Inline64int.Val_to_Ref_arraycopy
# Parameters: (size = 1000000)

# Run progress: 53.31% complete, ETA 04:32:51
# Fork: 1 of 3
# Warmup Iteration   1: 71007.179 ns/op
# Warmup Iteration   2: 77278.726 ns/op
# Warmup Iteration   3: 83812.809 ns/op
Iteration   1: 83706.419 ns/op
Iteration   2: 84975.711 ns/op
Iteration   3: 80834.188 ns/op
Iteration   4: 85004.131 ns/op
Iteration   5: 84778.918 ns/op

# Run progress: 53.33% complete, ETA 04:32:42
# Fork: 2 of 3
# Warmup Iteration   1: 86181.768 ns/op
# Warmup Iteration   2: 85603.698 ns/op
# Warmup Iteration   3: 85492.683 ns/op
Iteration   1: 84153.212 ns/op
Iteration   2: 82954.223 ns/op
Iteration   3: 70508.043 ns/op
Iteration   4: 70598.693 ns/op
Iteration   5: 74197.034 ns/op

# Run progress: 53.36% complete, ETA 04:32:33
# Fork: 3 of 3
# Warmup Iteration   1: 76810.317 ns/op
# Warmup Iteration   2: 85754.823 ns/op
# Warmup Iteration   3: 85662.171 ns/op
Iteration   1: 86717.135 ns/op
Iteration   2: 85483.247 ns/op
Iteration   3: 81576.136 ns/op
Iteration   4: 84169.253 ns/op
Iteration   5: 96368.020 ns/op


Result "org.openjdk.bench.valhalla.array.copy.Inline64int.Val_to_Ref_arraycopy":
  82401.624 ±(99.9%) 7008.268 ns/op [Average]
  (min, avg, max) = (70508.043, 82401.624, 96368.020), stdev = 6555.539
  CI (99.9%): [75393.356, 89409.892] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.copy.Inline64int.Val_to_Ref_copy
# Parameters: (size = 100)

# Run progress: 53.38% complete, ETA 04:32:25
# Fork: 1 of 3
# Warmup Iteration   1: 179.048 ns/op
# Warmup Iteration   2: 178.962 ns/op
# Warmup Iteration   3: 179.634 ns/op
Iteration   1: 178.539 ns/op
Iteration   2: 179.443 ns/op
Iteration   3: 179.270 ns/op
Iteration   4: 179.955 ns/op
Iteration   5: 179.009 ns/op

# Run progress: 53.41% complete, ETA 04:32:16
# Fork: 2 of 3
# Warmup Iteration   1: 178.757 ns/op
# Warmup Iteration   2: 177.846 ns/op
# Warmup Iteration   3: 178.527 ns/op
Iteration   1: 178.649 ns/op
Iteration   2: 181.272 ns/op
Iteration   3: 178.157 ns/op
Iteration   4: 178.857 ns/op
Iteration   5: 178.771 ns/op

# Run progress: 53.43% complete, ETA 04:32:07
# Fork: 3 of 3
# Warmup Iteration   1: 180.245 ns/op
# Warmup Iteration   2: 178.075 ns/op
# Warmup Iteration   3: 185.383 ns/op
Iteration   1: 178.454 ns/op
Iteration   2: 178.449 ns/op
Iteration   3: 178.557 ns/op
Iteration   4: 179.134 ns/op
Iteration   5: 178.528 ns/op


Result "org.openjdk.bench.valhalla.array.copy.Inline64int.Val_to_Ref_copy":
  179.003 ±(99.9%) 0.833 ns/op [Average]
  (min, avg, max) = (178.157, 179.003, 181.272), stdev = 0.779
  CI (99.9%): [178.170, 179.836] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.copy.Inline64int.Val_to_Ref_copy
# Parameters: (size = 1000000)

# Run progress: 53.46% complete, ETA 04:31:58
# Fork: 1 of 3
# Warmup Iteration   1: 25592675.000 ns/op
# Warmup Iteration   2: 23546757.767 ns/op
# Warmup Iteration   3: 23077680.886 ns/op
Iteration   1: 23330488.636 ns/op
Iteration   2: 24214417.667 ns/op
Iteration   3: 24145912.690 ns/op
Iteration   4: 25119853.125 ns/op
Iteration   5: 20415532.500 ns/op

# Run progress: 53.48% complete, ETA 04:31:50
# Fork: 2 of 3
# Warmup Iteration   1: 23386394.372 ns/op
# Warmup Iteration   2: 23066161.932 ns/op
# Warmup Iteration   3: 23741226.744 ns/op
Iteration   1: 22233151.283 ns/op
Iteration   2: 22411505.556 ns/op
Iteration   3: 22313192.935 ns/op
Iteration   4: 26753957.237 ns/op
Iteration   5: 27518250.000 ns/op

# Run progress: 53.50% complete, ETA 04:31:41
# Fork: 3 of 3
# Warmup Iteration   1: 22365375.000 ns/op
# Warmup Iteration   2: 23016612.682 ns/op
# Warmup Iteration   3: 23282678.977 ns/op
Iteration   1: 22589812.956 ns/op
Iteration   2: 25985957.256 ns/op
Iteration   3: 23977408.738 ns/op
Iteration   4: 21074710.938 ns/op
Iteration   5: 24977664.634 ns/op


Result "org.openjdk.bench.valhalla.array.copy.Inline64int.Val_to_Ref_copy":
  23804121.077 ±(99.9%) 2174869.835 ns/op [Average]
  (min, avg, max) = (20415532.500, 23804121.077, 27518250.000), stdev = 2034374.594
  CI (99.9%): [21629251.241, 25978990.912] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.copy.Inline64int.Val_to_Val_arraycopy
# Parameters: (size = 100)

# Run progress: 53.53% complete, ETA 04:31:32
# Fork: 1 of 3
# Warmup Iteration   1: 9.813 ns/op
# Warmup Iteration   2: 9.819 ns/op
# Warmup Iteration   3: 9.664 ns/op
Iteration   1: 9.624 ns/op
Iteration   2: 9.683 ns/op
Iteration   3: 9.652 ns/op
Iteration   4: 9.844 ns/op
Iteration   5: 9.595 ns/op

# Run progress: 53.55% complete, ETA 04:31:23
# Fork: 2 of 3
# Warmup Iteration   1: 9.708 ns/op
# Warmup Iteration   2: 9.798 ns/op
# Warmup Iteration   3: 9.604 ns/op
Iteration   1: 9.643 ns/op
Iteration   2: 9.618 ns/op
Iteration   3: 9.616 ns/op
Iteration   4: 9.633 ns/op
Iteration   5: 9.623 ns/op

# Run progress: 53.58% complete, ETA 04:31:14
# Fork: 3 of 3
# Warmup Iteration   1: 9.903 ns/op
# Warmup Iteration   2: 9.639 ns/op
# Warmup Iteration   3: 9.554 ns/op
Iteration   1: 9.574 ns/op
Iteration   2: 9.566 ns/op
Iteration   3: 9.842 ns/op
Iteration   4: 9.544 ns/op
Iteration   5: 9.582 ns/op


Result "org.openjdk.bench.valhalla.array.copy.Inline64int.Val_to_Val_arraycopy":
  9.642 ±(99.9%) 0.095 ns/op [Average]
  (min, avg, max) = (9.544, 9.642, 9.844), stdev = 0.089
  CI (99.9%): [9.548, 9.737] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.copy.Inline64int.Val_to_Val_arraycopy
# Parameters: (size = 1000000)

# Run progress: 53.60% complete, ETA 04:31:06
# Fork: 1 of 3
# Warmup Iteration   1: 81358.568 ns/op
# Warmup Iteration   2: 84962.518 ns/op
# Warmup Iteration   3: 85977.267 ns/op
Iteration   1: 83037.039 ns/op
Iteration   2: 79983.808 ns/op
Iteration   3: 80336.595 ns/op
Iteration   4: 84782.742 ns/op
Iteration   5: 83734.056 ns/op

# Run progress: 53.63% complete, ETA 04:30:57
# Fork: 2 of 3
# Warmup Iteration   1: 83238.181 ns/op
# Warmup Iteration   2: 72610.185 ns/op
# Warmup Iteration   3: 71997.393 ns/op
Iteration   1: 75202.472 ns/op
Iteration   2: 81598.852 ns/op
Iteration   3: 82781.824 ns/op
Iteration   4: 89695.661 ns/op
Iteration   5: 88403.790 ns/op

# Run progress: 53.65% complete, ETA 04:30:48
# Fork: 3 of 3
# Warmup Iteration   1: 79433.971 ns/op
# Warmup Iteration   2: 100547.121 ns/op
# Warmup Iteration   3: 104470.188 ns/op
Iteration   1: 103359.784 ns/op
Iteration   2: 87501.859 ns/op
Iteration   3: 85747.734 ns/op
Iteration   4: 96263.596 ns/op
Iteration   5: 99818.408 ns/op


Result "org.openjdk.bench.valhalla.array.copy.Inline64int.Val_to_Val_arraycopy":
  86816.548 ±(99.9%) 8277.869 ns/op [Average]
  (min, avg, max) = (75202.472, 86816.548, 103359.784), stdev = 7743.123
  CI (99.9%): [78538.679, 95094.417] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.copy.Inline64int.Val_to_Val_copy
# Parameters: (size = 100)

# Run progress: 53.68% complete, ETA 04:30:39
# Fork: 1 of 3
# Warmup Iteration   1: 182.414 ns/op
# Warmup Iteration   2: 179.207 ns/op
# Warmup Iteration   3: 179.724 ns/op
Iteration   1: 178.121 ns/op
Iteration   2: 180.275 ns/op
Iteration   3: 188.882 ns/op
Iteration   4: 196.129 ns/op
Iteration   5: 178.281 ns/op

# Run progress: 53.70% complete, ETA 04:30:31
# Fork: 2 of 3
# Warmup Iteration   1: 217.532 ns/op
# Warmup Iteration   2: 242.437 ns/op
# Warmup Iteration   3: 234.792 ns/op
Iteration   1: 194.238 ns/op
Iteration   2: 178.238 ns/op
Iteration   3: 183.188 ns/op
Iteration   4: 210.722 ns/op
Iteration   5: 219.143 ns/op

# Run progress: 53.73% complete, ETA 04:30:22
# Fork: 3 of 3
# Warmup Iteration   1: 182.895 ns/op
# Warmup Iteration   2: 180.027 ns/op
# Warmup Iteration   3: 178.865 ns/op
Iteration   1: 193.766 ns/op
Iteration   2: 219.498 ns/op
Iteration   3: 223.616 ns/op
Iteration   4: 210.518 ns/op
Iteration   5: 179.148 ns/op


Result "org.openjdk.bench.valhalla.array.copy.Inline64int.Val_to_Val_copy":
  195.584 ±(99.9%) 18.022 ns/op [Average]
  (min, avg, max) = (178.121, 195.584, 223.616), stdev = 16.858
  CI (99.9%): [177.562, 213.606] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.copy.Inline64int.Val_to_Val_copy
# Parameters: (size = 1000000)

# Run progress: 53.75% complete, ETA 04:30:13
# Fork: 1 of 3
# Warmup Iteration   1: 24912697.146 ns/op
# Warmup Iteration   2: 26114505.333 ns/op
# Warmup Iteration   3: 27821094.595 ns/op
Iteration   1: 25016118.902 ns/op
Iteration   2: 25339045.825 ns/op
Iteration   3: 26718759.868 ns/op
Iteration   4: 25579654.175 ns/op
Iteration   5: 22941029.364 ns/op

# Run progress: 53.77% complete, ETA 04:30:04
# Fork: 2 of 3
# Warmup Iteration   1: 24109891.857 ns/op
# Warmup Iteration   2: 24326378.976 ns/op
# Warmup Iteration   3: 31026445.727 ns/op
Iteration   1: 24711296.756 ns/op
Iteration   2: 22434263.587 ns/op
Iteration   3: 29173937.500 ns/op
Iteration   4: 22417849.630 ns/op
Iteration   5: 25982646.359 ns/op

# Run progress: 53.80% complete, ETA 04:29:56
# Fork: 3 of 3
# Warmup Iteration   1: 25990915.590 ns/op
# Warmup Iteration   2: 26303502.128 ns/op
# Warmup Iteration   3: 20416885.000 ns/op
Iteration   1: 25399398.975 ns/op
Iteration   2: 28283457.216 ns/op
Iteration   3: 26663383.763 ns/op
Iteration   4: 22760017.600 ns/op
Iteration   5: 24477621.140 ns/op


Result "org.openjdk.bench.valhalla.array.copy.Inline64int.Val_to_Val_copy":
  25193232.044 ±(99.9%) 2172281.454 ns/op [Average]
  (min, avg, max) = (22417849.630, 25193232.044, 29173937.500), stdev = 2031953.420
  CI (99.9%): [23020950.590, 27365513.498] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.copy.InlineOpt.Ref_to_Val_arraycopy
# Parameters: (size = 100)

# Run progress: 53.82% complete, ETA 04:29:47
# Fork: 1 of 3
# Warmup Iteration   1: 10.148 ns/op
# Warmup Iteration   2: 10.965 ns/op
# Warmup Iteration   3: 12.673 ns/op
Iteration   1: 19.657 ns/op
Iteration   2: 21.198 ns/op
Iteration   3: 21.026 ns/op
Iteration   4: 21.025 ns/op
Iteration   5: 21.027 ns/op

# Run progress: 53.85% complete, ETA 04:29:38
# Fork: 2 of 3
# Warmup Iteration   1: 21.020 ns/op
# Warmup Iteration   2: 21.176 ns/op
# Warmup Iteration   3: 20.859 ns/op
Iteration   1: 20.854 ns/op
Iteration   2: 20.897 ns/op
Iteration   3: 21.046 ns/op
Iteration   4: 21.085 ns/op
Iteration   5: 21.521 ns/op

# Run progress: 53.87% complete, ETA 04:29:30
# Fork: 3 of 3
# Warmup Iteration   1: 20.754 ns/op
# Warmup Iteration   2: 20.824 ns/op
# Warmup Iteration   3: 20.605 ns/op
Iteration   1: 21.773 ns/op
Iteration   2: 22.108 ns/op
Iteration   3: 24.225 ns/op
Iteration   4: 27.920 ns/op
Iteration   5: 13.305 ns/op


Result "org.openjdk.bench.valhalla.array.copy.InlineOpt.Ref_to_Val_arraycopy":
  21.245 ±(99.9%) 3.137 ns/op [Average]
  (min, avg, max) = (13.305, 21.245, 27.920), stdev = 2.935
  CI (99.9%): [18.107, 24.382] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.copy.InlineOpt.Ref_to_Val_arraycopy
# Parameters: (size = 1000000)

# Run progress: 53.90% complete, ETA 04:29:21
# Fork: 1 of 3
# Warmup Iteration   1: 140108.296 ns/op
# Warmup Iteration   2: 117976.461 ns/op
# Warmup Iteration   3: 88972.617 ns/op
Iteration   1: 83589.492 ns/op
Iteration   2: 85260.750 ns/op
Iteration   3: 80875.341 ns/op
Iteration   4: 79482.642 ns/op
Iteration   5: 81465.246 ns/op

# Run progress: 53.92% complete, ETA 04:29:12
# Fork: 2 of 3
# Warmup Iteration   1: 83543.745 ns/op
# Warmup Iteration   2: 82789.499 ns/op
# Warmup Iteration   3: 85053.333 ns/op
Iteration   1: 84746.069 ns/op
Iteration   2: 85020.558 ns/op
Iteration   3: 80714.440 ns/op
Iteration   4: 80991.490 ns/op
Iteration   5: 82992.661 ns/op

# Run progress: 53.95% complete, ETA 04:29:04
# Fork: 3 of 3
# Warmup Iteration   1: 85168.496 ns/op
# Warmup Iteration   2: 86069.397 ns/op
# Warmup Iteration   3: 85316.739 ns/op
Iteration   1: 83135.119 ns/op
Iteration   2: 84774.881 ns/op
Iteration   3: 75259.435 ns/op
Iteration   4: 73759.850 ns/op
Iteration   5: 83219.352 ns/op


Result "org.openjdk.bench.valhalla.array.copy.InlineOpt.Ref_to_Val_arraycopy":
  81685.822 ±(99.9%) 3655.596 ns/op [Average]
  (min, avg, max) = (73759.850, 81685.822, 85260.750), stdev = 3419.447
  CI (99.9%): [78030.226, 85341.418] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.copy.InlineOpt.Ref_to_Val_copy
# Parameters: (size = 100)

# Run progress: 53.97% complete, ETA 04:28:55
# Fork: 1 of 3
# Warmup Iteration   1: 78.500 ns/op
# Warmup Iteration   2: 78.661 ns/op
# Warmup Iteration   3: 77.719 ns/op
Iteration   1: 77.686 ns/op
Iteration   2: 77.652 ns/op
Iteration   3: 77.625 ns/op
Iteration   4: 77.790 ns/op
Iteration   5: 77.686 ns/op

# Run progress: 54.00% complete, ETA 04:28:46
# Fork: 2 of 3
# Warmup Iteration   1: 77.952 ns/op
# Warmup Iteration   2: 76.863 ns/op
# Warmup Iteration   3: 77.963 ns/op
Iteration   1: 78.668 ns/op
Iteration   2: 77.831 ns/op
Iteration   3: 77.774 ns/op
Iteration   4: 77.601 ns/op
Iteration   5: 78.767 ns/op

# Run progress: 54.02% complete, ETA 04:28:37
# Fork: 3 of 3
# Warmup Iteration   1: 78.021 ns/op
# Warmup Iteration   2: 78.262 ns/op
# Warmup Iteration   3: 77.188 ns/op
Iteration   1: 77.555 ns/op
Iteration   2: 78.142 ns/op
Iteration   3: 78.064 ns/op
Iteration   4: 77.701 ns/op
Iteration   5: 77.735 ns/op


Result "org.openjdk.bench.valhalla.array.copy.InlineOpt.Ref_to_Val_copy":
  77.885 ±(99.9%) 0.400 ns/op [Average]
  (min, avg, max) = (77.555, 77.885, 78.767), stdev = 0.374
  CI (99.9%): [77.485, 78.285] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.copy.InlineOpt.Ref_to_Val_copy
# Parameters: (size = 1000000)

# Run progress: 54.04% complete, ETA 04:28:28
# Fork: 1 of 3
# Warmup Iteration   1: 20213076.660 ns/op
# Warmup Iteration   2: 21044095.245 ns/op
# Warmup Iteration   3: 23329072.222 ns/op
Iteration   1: 23419732.000 ns/op
Iteration   2: 20062733.981 ns/op
Iteration   3: 19537668.269 ns/op
Iteration   4: 23092516.091 ns/op
Iteration   5: 21354673.625 ns/op

# Run progress: 54.07% complete, ETA 04:28:20
# Fork: 2 of 3
# Warmup Iteration   1: 21654945.915 ns/op
# Warmup Iteration   2: 21712239.362 ns/op
# Warmup Iteration   3: 21406894.958 ns/op
Iteration   1: 20726648.320 ns/op
Iteration   2: 21570161.340 ns/op
Iteration   3: 21860280.128 ns/op
Iteration   4: 20470470.820 ns/op
Iteration   5: 20254639.160 ns/op

# Run progress: 54.09% complete, ETA 04:28:11
# Fork: 3 of 3
# Warmup Iteration   1: 21652000.894 ns/op
# Warmup Iteration   2: 23515360.465 ns/op
# Warmup Iteration   3: 19306500.808 ns/op
Iteration   1: 20108587.412 ns/op
Iteration   2: 20601095.840 ns/op
Iteration   3: 22236718.304 ns/op
Iteration   4: 23584298.295 ns/op
Iteration   5: 24724967.262 ns/op


Result "org.openjdk.bench.valhalla.array.copy.InlineOpt.Ref_to_Val_copy":
  21573679.390 ±(99.9%) 1652550.424 ns/op [Average]
  (min, avg, max) = (19537668.269, 21573679.390, 24724967.262), stdev = 1545796.692
  CI (99.9%): [19921128.966, 23226229.814] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.copy.InlineOpt.Val_to_Ref_arraycopy
# Parameters: (size = 100)

# Run progress: 54.12% complete, ETA 04:28:02
# Fork: 1 of 3
# Warmup Iteration   1: 10.200 ns/op
# Warmup Iteration   2: 10.101 ns/op
# Warmup Iteration   3: 10.035 ns/op
Iteration   1: 10.007 ns/op
Iteration   2: 10.065 ns/op
Iteration   3: 10.012 ns/op
Iteration   4: 10.002 ns/op
Iteration   5: 10.040 ns/op

# Run progress: 54.14% complete, ETA 04:27:54
# Fork: 2 of 3
# Warmup Iteration   1: 10.101 ns/op
# Warmup Iteration   2: 10.060 ns/op
# Warmup Iteration   3: 10.138 ns/op
Iteration   1: 10.112 ns/op
Iteration   2: 10.320 ns/op
Iteration   3: 10.146 ns/op
Iteration   4: 10.100 ns/op
Iteration   5: 10.101 ns/op

# Run progress: 54.17% complete, ETA 04:27:45
# Fork: 3 of 3
# Warmup Iteration   1: 9.869 ns/op
# Warmup Iteration   2: 9.890 ns/op
# Warmup Iteration   3: 9.911 ns/op
Iteration   1: 9.840 ns/op
Iteration   2: 9.840 ns/op
Iteration   3: 9.845 ns/op
Iteration   4: 9.906 ns/op
Iteration   5: 9.840 ns/op


Result "org.openjdk.bench.valhalla.array.copy.InlineOpt.Val_to_Ref_arraycopy":
  10.012 ±(99.9%) 0.148 ns/op [Average]
  (min, avg, max) = (9.840, 10.012, 10.320), stdev = 0.139
  CI (99.9%): [9.863, 10.160] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.copy.InlineOpt.Val_to_Ref_arraycopy
# Parameters: (size = 1000000)

# Run progress: 54.19% complete, ETA 04:27:36
# Fork: 1 of 3
# Warmup Iteration   1: 81036.029 ns/op
# Warmup Iteration   2: 82827.450 ns/op
# Warmup Iteration   3: 83926.253 ns/op
Iteration   1: 81263.968 ns/op
Iteration   2: 78779.020 ns/op
Iteration   3: 85796.501 ns/op
Iteration   4: 82638.880 ns/op
Iteration   5: 83066.910 ns/op

# Run progress: 54.22% complete, ETA 04:27:27
# Fork: 2 of 3
# Warmup Iteration   1: 84244.461 ns/op
# Warmup Iteration   2: 84445.516 ns/op
# Warmup Iteration   3: 84175.110 ns/op
Iteration   1: 84479.032 ns/op
Iteration   2: 83394.419 ns/op
Iteration   3: 82575.656 ns/op
Iteration   4: 85068.952 ns/op
Iteration   5: 83013.990 ns/op

# Run progress: 54.24% complete, ETA 04:27:18
# Fork: 3 of 3
# Warmup Iteration   1: 77724.217 ns/op
# Warmup Iteration   2: 78845.000 ns/op
# Warmup Iteration   3: 79173.643 ns/op
Iteration   1: 75430.230 ns/op
Iteration   2: 85169.832 ns/op
Iteration   3: 84124.280 ns/op
Iteration   4: 83397.964 ns/op
Iteration   5: 81839.666 ns/op


Result "org.openjdk.bench.valhalla.array.copy.InlineOpt.Val_to_Ref_arraycopy":
  82669.287 ±(99.9%) 2838.948 ns/op [Average]
  (min, avg, max) = (75430.230, 82669.287, 85796.501), stdev = 2655.553
  CI (99.9%): [79830.339, 85508.234] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.copy.InlineOpt.Val_to_Ref_copy
# Parameters: (size = 100)

# Run progress: 54.26% complete, ETA 04:27:10
# Fork: 1 of 3
# Warmup Iteration   1: 77.036 ns/op
# Warmup Iteration   2: 76.965 ns/op
# Warmup Iteration   3: 77.377 ns/op
Iteration   1: 77.502 ns/op
Iteration   2: 78.027 ns/op
Iteration   3: 77.674 ns/op
Iteration   4: 76.965 ns/op
Iteration   5: 77.471 ns/op

# Run progress: 54.29% complete, ETA 04:27:01
# Fork: 2 of 3
# Warmup Iteration   1: 77.797 ns/op
# Warmup Iteration   2: 78.016 ns/op
# Warmup Iteration   3: 78.016 ns/op
Iteration   1: 77.831 ns/op
Iteration   2: 80.029 ns/op
Iteration   3: 77.662 ns/op
Iteration   4: 77.970 ns/op
Iteration   5: 78.161 ns/op

# Run progress: 54.31% complete, ETA 04:26:52
# Fork: 3 of 3
# Warmup Iteration   1: 77.437 ns/op
# Warmup Iteration   2: 77.168 ns/op
# Warmup Iteration   3: 77.540 ns/op
Iteration   1: 77.722 ns/op
Iteration   2: 77.447 ns/op
Iteration   3: 78.036 ns/op
Iteration   4: 77.885 ns/op
Iteration   5: 78.238 ns/op


Result "org.openjdk.bench.valhalla.array.copy.InlineOpt.Val_to_Ref_copy":
  77.908 ±(99.9%) 0.718 ns/op [Average]
  (min, avg, max) = (76.965, 77.908, 80.029), stdev = 0.672
  CI (99.9%): [77.189, 78.626] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.copy.InlineOpt.Val_to_Ref_copy
# Parameters: (size = 1000000)

# Run progress: 54.34% complete, ETA 04:26:43
# Fork: 1 of 3
# Warmup Iteration   1: 19774587.327 ns/op
# Warmup Iteration   2: 24514924.595 ns/op
# Warmup Iteration   3: 22642878.711 ns/op
Iteration   1: 25765493.750 ns/op
Iteration   2: 22971996.205 ns/op
Iteration   3: 20665145.408 ns/op
Iteration   4: 22332104.152 ns/op
Iteration   5: 22632020.378 ns/op

# Run progress: 54.36% complete, ETA 04:26:35
# Fork: 2 of 3
# Warmup Iteration   1: 19535021.635 ns/op
# Warmup Iteration   2: 21528812.043 ns/op
# Warmup Iteration   3: 20657303.571 ns/op
Iteration   1: 23373876.930 ns/op
Iteration   2: 22798119.318 ns/op
Iteration   3: 21143242.347 ns/op
Iteration   4: 20893023.816 ns/op
Iteration   5: 20327675.820 ns/op

# Run progress: 54.39% complete, ETA 04:26:26
# Fork: 3 of 3
# Warmup Iteration   1: 24078924.595 ns/op
# Warmup Iteration   2: 23095929.932 ns/op
# Warmup Iteration   3: 27077674.568 ns/op
Iteration   1: 24035599.214 ns/op
Iteration   2: 21580195.313 ns/op
Iteration   3: 21532239.362 ns/op
Iteration   4: 21918728.723 ns/op
Iteration   5: 23440217.818 ns/op


Result "org.openjdk.bench.valhalla.array.copy.InlineOpt.Val_to_Ref_copy":
  22360645.237 ±(99.9%) 1548280.137 ns/op [Average]
  (min, avg, max) = (20327675.820, 22360645.237, 25765493.750), stdev = 1448262.200
  CI (99.9%): [20812365.100, 23908925.373] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.copy.InlineOpt.Val_to_Val_arraycopy
# Parameters: (size = 100)

# Run progress: 54.41% complete, ETA 04:26:17
# Fork: 1 of 3
# Warmup Iteration   1: 10.047 ns/op
# Warmup Iteration   2: 10.120 ns/op
# Warmup Iteration   3: 10.059 ns/op
Iteration   1: 10.041 ns/op
Iteration   2: 10.014 ns/op
Iteration   3: 10.014 ns/op
Iteration   4: 10.026 ns/op
Iteration   5: 10.108 ns/op

# Run progress: 54.44% complete, ETA 04:26:08
# Fork: 2 of 3
# Warmup Iteration   1: 10.086 ns/op
# Warmup Iteration   2: 10.491 ns/op
# Warmup Iteration   3: 9.993 ns/op
Iteration   1: 10.005 ns/op
Iteration   2: 9.997 ns/op
Iteration   3: 9.992 ns/op
Iteration   4: 10.016 ns/op
Iteration   5: 10.068 ns/op

# Run progress: 54.46% complete, ETA 04:26:00
# Fork: 3 of 3
# Warmup Iteration   1: 9.935 ns/op
# Warmup Iteration   2: 9.927 ns/op
# Warmup Iteration   3: 10.078 ns/op
Iteration   1: 9.906 ns/op
Iteration   2: 10.488 ns/op
Iteration   3: 9.909 ns/op
Iteration   4: 10.022 ns/op
Iteration   5: 9.897 ns/op


Result "org.openjdk.bench.valhalla.array.copy.InlineOpt.Val_to_Val_arraycopy":
  10.034 ±(99.9%) 0.148 ns/op [Average]
  (min, avg, max) = (9.897, 10.034, 10.488), stdev = 0.139
  CI (99.9%): [9.885, 10.182] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.copy.InlineOpt.Val_to_Val_arraycopy
# Parameters: (size = 1000000)

# Run progress: 54.49% complete, ETA 04:25:51
# Fork: 1 of 3
# Warmup Iteration   1: 84802.881 ns/op
# Warmup Iteration   2: 84888.117 ns/op
# Warmup Iteration   3: 85946.737 ns/op
Iteration   1: 84915.472 ns/op
Iteration   2: 82429.245 ns/op
Iteration   3: 84677.907 ns/op
Iteration   4: 78963.555 ns/op
Iteration   5: 81951.079 ns/op

# Run progress: 54.51% complete, ETA 04:25:42
# Fork: 2 of 3
# Warmup Iteration   1: 85481.404 ns/op
# Warmup Iteration   2: 84756.898 ns/op
# Warmup Iteration   3: 84521.701 ns/op
Iteration   1: 81282.922 ns/op
Iteration   2: 71163.860 ns/op
Iteration   3: 74312.870 ns/op
Iteration   4: 73789.542 ns/op
Iteration   5: 82794.054 ns/op

# Run progress: 54.53% complete, ETA 04:25:33
# Fork: 3 of 3
# Warmup Iteration   1: 82666.340 ns/op
# Warmup Iteration   2: 83834.239 ns/op
# Warmup Iteration   3: 82374.928 ns/op
Iteration   1: 80149.475 ns/op
Iteration   2: 83500.090 ns/op
Iteration   3: 84791.181 ns/op
Iteration   4: 84052.124 ns/op
Iteration   5: 84653.254 ns/op


Result "org.openjdk.bench.valhalla.array.copy.InlineOpt.Val_to_Val_arraycopy":
  80895.109 ±(99.9%) 4751.462 ns/op [Average]
  (min, avg, max) = (71163.860, 80895.109, 84915.472), stdev = 4444.520
  CI (99.9%): [76143.647, 85646.570] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.copy.InlineOpt.Val_to_Val_copy
# Parameters: (size = 100)

# Run progress: 54.56% complete, ETA 04:25:25
# Fork: 1 of 3
# Warmup Iteration   1: 78.009 ns/op
# Warmup Iteration   2: 77.186 ns/op
# Warmup Iteration   3: 77.954 ns/op
Iteration   1: 79.132 ns/op
Iteration   2: 78.479 ns/op
Iteration   3: 78.392 ns/op
Iteration   4: 78.167 ns/op
Iteration   5: 78.523 ns/op

# Run progress: 54.58% complete, ETA 04:25:16
# Fork: 2 of 3
# Warmup Iteration   1: 77.216 ns/op
# Warmup Iteration   2: 77.208 ns/op
# Warmup Iteration   3: 77.868 ns/op
Iteration   1: 77.260 ns/op
Iteration   2: 77.970 ns/op
Iteration   3: 77.954 ns/op
Iteration   4: 77.915 ns/op
Iteration   5: 77.622 ns/op

# Run progress: 54.61% complete, ETA 04:25:07
# Fork: 3 of 3
# Warmup Iteration   1: 77.696 ns/op
# Warmup Iteration   2: 77.555 ns/op
# Warmup Iteration   3: 77.060 ns/op
Iteration   1: 77.496 ns/op
Iteration   2: 77.843 ns/op
Iteration   3: 77.799 ns/op
Iteration   4: 78.000 ns/op
Iteration   5: 77.189 ns/op


Result "org.openjdk.bench.valhalla.array.copy.InlineOpt.Val_to_Val_copy":
  77.983 ±(99.9%) 0.545 ns/op [Average]
  (min, avg, max) = (77.189, 77.983, 79.132), stdev = 0.510
  CI (99.9%): [77.438, 78.528] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.copy.InlineOpt.Val_to_Val_copy
# Parameters: (size = 1000000)

# Run progress: 54.63% complete, ETA 04:24:58
# Fork: 1 of 3
# Warmup Iteration   1: 21210746.521 ns/op
# Warmup Iteration   2: 20943935.750 ns/op
# Warmup Iteration   3: 21993935.696 ns/op
Iteration   1: 20957829.875 ns/op
Iteration   2: 22573367.739 ns/op
Iteration   3: 20556618.184 ns/op
Iteration   4: 21122014.449 ns/op
Iteration   5: 22592833.333 ns/op

# Run progress: 54.66% complete, ETA 04:24:50
# Fork: 2 of 3
# Warmup Iteration   1: 23833941.476 ns/op
# Warmup Iteration   2: 21697007.979 ns/op
# Warmup Iteration   3: 19517998.404 ns/op
Iteration   1: 19831455.059 ns/op
Iteration   2: 25372121.875 ns/op
Iteration   3: 28681894.667 ns/op
Iteration   4: 27939643.000 ns/op
Iteration   5: 21987823.370 ns/op

# Run progress: 54.68% complete, ETA 04:24:41
# Fork: 3 of 3
# Warmup Iteration   1: 21199467.021 ns/op
# Warmup Iteration   2: 21494447.702 ns/op
# Warmup Iteration   3: 21294845.479 ns/op
Iteration   1: 23576744.318 ns/op
Iteration   2: 21895144.022 ns/op
Iteration   3: 20161747.549 ns/op
Iteration   4: 21523598.404 ns/op
Iteration   5: 25674847.925 ns/op


Result "org.openjdk.bench.valhalla.array.copy.InlineOpt.Val_to_Val_copy":
  22963178.918 ±(99.9%) 2945999.956 ns/op [Average]
  (min, avg, max) = (19831455.059, 22963178.918, 28681894.667), stdev = 2755690.187
  CI (99.9%): [20017178.962, 25909178.874] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.copy.Primitive128.p128int_arraycopy
# Parameters: (size = 100)

# Run progress: 54.71% complete, ETA 04:24:32
# Fork: 1 of 3
# Warmup Iteration   1: 28.938 ns/op
# Warmup Iteration   2: 28.827 ns/op
# Warmup Iteration   3: 28.994 ns/op
Iteration   1: 28.742 ns/op
Iteration   2: 28.749 ns/op
Iteration   3: 28.740 ns/op
Iteration   4: 28.735 ns/op
Iteration   5: 28.692 ns/op

# Run progress: 54.73% complete, ETA 04:24:23
# Fork: 2 of 3
# Warmup Iteration   1: 28.840 ns/op
# Warmup Iteration   2: 28.814 ns/op
# Warmup Iteration   3: 28.818 ns/op
Iteration   1: 28.752 ns/op
Iteration   2: 28.812 ns/op
Iteration   3: 28.691 ns/op
Iteration   4: 28.761 ns/op
Iteration   5: 28.722 ns/op

# Run progress: 54.75% complete, ETA 04:24:15
# Fork: 3 of 3
# Warmup Iteration   1: 29.100 ns/op
# Warmup Iteration   2: 29.482 ns/op
# Warmup Iteration   3: 29.252 ns/op
Iteration   1: 28.898 ns/op
Iteration   2: 28.850 ns/op
Iteration   3: 28.899 ns/op
Iteration   4: 28.923 ns/op
Iteration   5: 29.193 ns/op


Result "org.openjdk.bench.valhalla.array.copy.Primitive128.p128int_arraycopy":
  28.811 ±(99.9%) 0.139 ns/op [Average]
  (min, avg, max) = (28.691, 28.811, 29.193), stdev = 0.130
  CI (99.9%): [28.671, 28.950] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.copy.Primitive128.p128int_arraycopy
# Parameters: (size = 1000000)

# Run progress: 54.78% complete, ETA 04:24:06
# Fork: 1 of 3
# Warmup Iteration   1: 444092.414 ns/op
# Warmup Iteration   2: 445042.275 ns/op
# Warmup Iteration   3: 438577.368 ns/op
Iteration   1: 382722.791 ns/op
Iteration   2: 388358.121 ns/op
Iteration   3: 394693.180 ns/op
Iteration   4: 444043.388 ns/op
Iteration   5: 446171.045 ns/op

# Run progress: 54.80% complete, ETA 04:23:57
# Fork: 2 of 3
# Warmup Iteration   1: 413798.373 ns/op
# Warmup Iteration   2: 423037.724 ns/op
# Warmup Iteration   3: 394219.756 ns/op
Iteration   1: 486992.330 ns/op
Iteration   2: 466704.311 ns/op
Iteration   3: 396835.125 ns/op
Iteration   4: 360717.645 ns/op
Iteration   5: 374270.517 ns/op

# Run progress: 54.83% complete, ETA 04:23:48
# Fork: 3 of 3
# Warmup Iteration   1: 450543.617 ns/op
# Warmup Iteration   2: 433108.676 ns/op
# Warmup Iteration   3: 353049.296 ns/op
Iteration   1: 339789.325 ns/op
Iteration   2: 442548.477 ns/op
Iteration   3: 424259.201 ns/op
Iteration   4: 422492.922 ns/op
Iteration   5: 403619.840 ns/op


Result "org.openjdk.bench.valhalla.array.copy.Primitive128.p128int_arraycopy":
  411614.548 ±(99.9%) 43599.756 ns/op [Average]
  (min, avg, max) = (339789.325, 411614.548, 486992.330), stdev = 40783.239
  CI (99.9%): [368014.792, 455214.304] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.copy.Primitive128.p128int_copy
# Parameters: (size = 100)

# Run progress: 54.85% complete, ETA 04:23:39
# Fork: 1 of 3
# Warmup Iteration   1: 21.684 ns/op
# Warmup Iteration   2: 21.527 ns/op
# Warmup Iteration   3: 22.669 ns/op
Iteration   1: 21.483 ns/op
Iteration   2: 21.487 ns/op
Iteration   3: 21.522 ns/op
Iteration   4: 21.509 ns/op
Iteration   5: 21.504 ns/op

# Run progress: 54.88% complete, ETA 04:23:31
# Fork: 2 of 3
# Warmup Iteration   1: 21.333 ns/op
# Warmup Iteration   2: 21.192 ns/op
# Warmup Iteration   3: 21.249 ns/op
Iteration   1: 21.193 ns/op
Iteration   2: 21.175 ns/op
Iteration   3: 21.269 ns/op
Iteration   4: 21.363 ns/op
Iteration   5: 21.252 ns/op

# Run progress: 54.90% complete, ETA 04:23:22
# Fork: 3 of 3
# Warmup Iteration   1: 22.477 ns/op
# Warmup Iteration   2: 21.407 ns/op
# Warmup Iteration   3: 22.042 ns/op
Iteration   1: 21.598 ns/op
Iteration   2: 21.596 ns/op
Iteration   3: 21.499 ns/op
Iteration   4: 21.463 ns/op
Iteration   5: 21.440 ns/op


Result "org.openjdk.bench.valhalla.array.copy.Primitive128.p128int_copy":
  21.424 ±(99.9%) 0.149 ns/op [Average]
  (min, avg, max) = (21.175, 21.424, 21.598), stdev = 0.139
  CI (99.9%): [21.275, 21.572] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.copy.Primitive128.p128int_copy
# Parameters: (size = 1000000)

# Run progress: 54.93% complete, ETA 04:23:13
# Fork: 1 of 3
# Warmup Iteration   1: 565045.497 ns/op
# Warmup Iteration   2: 584712.361 ns/op
# Warmup Iteration   3: 555183.837 ns/op
Iteration   1: 544873.831 ns/op
Iteration   2: 587430.175 ns/op
Iteration   3: 566315.747 ns/op
Iteration   4: 573182.443 ns/op
Iteration   5: 541939.573 ns/op

# Run progress: 54.95% complete, ETA 04:23:04
# Fork: 2 of 3
# Warmup Iteration   1: 556228.536 ns/op
# Warmup Iteration   2: 591614.872 ns/op
# Warmup Iteration   3: 580051.562 ns/op
Iteration   1: 571179.645 ns/op
Iteration   2: 553219.301 ns/op
Iteration   3: 541523.781 ns/op
Iteration   4: 567461.703 ns/op
Iteration   5: 571326.983 ns/op

# Run progress: 54.98% complete, ETA 04:22:55
# Fork: 3 of 3
# Warmup Iteration   1: 561588.585 ns/op
# Warmup Iteration   2: 542670.555 ns/op
# Warmup Iteration   3: 565326.409 ns/op
Iteration   1: 571091.365 ns/op
Iteration   2: 587321.272 ns/op
Iteration   3: 537764.113 ns/op
Iteration   4: 543844.680 ns/op
Iteration   5: 552504.614 ns/op


Result "org.openjdk.bench.valhalla.array.copy.Primitive128.p128int_copy":
  560731.948 ±(99.9%) 17821.172 ns/op [Average]
  (min, avg, max) = (537764.113, 560731.948, 587430.175), stdev = 16669.935
  CI (99.9%): [542910.776, 578553.120] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.copy.Primitive32.p32int_arraycopy
# Parameters: (size = 100)

# Run progress: 55.00% complete, ETA 04:22:47
# Fork: 1 of 3
# Warmup Iteration   1: 7.746 ns/op
# Warmup Iteration   2: 7.724 ns/op
# Warmup Iteration   3: 7.693 ns/op
Iteration   1: 7.688 ns/op
Iteration   2: 7.660 ns/op
Iteration   3: 7.675 ns/op
Iteration   4: 7.675 ns/op
Iteration   5: 7.671 ns/op

# Run progress: 55.02% complete, ETA 04:22:38
# Fork: 2 of 3
# Warmup Iteration   1: 7.770 ns/op
# Warmup Iteration   2: 7.731 ns/op
# Warmup Iteration   3: 7.762 ns/op
Iteration   1: 7.751 ns/op
Iteration   2: 7.695 ns/op
Iteration   3: 7.697 ns/op
Iteration   4: 7.894 ns/op
Iteration   5: 7.692 ns/op

# Run progress: 55.05% complete, ETA 04:22:29
# Fork: 3 of 3
# Warmup Iteration   1: 7.800 ns/op
# Warmup Iteration   2: 7.801 ns/op
# Warmup Iteration   3: 7.828 ns/op
Iteration   1: 7.743 ns/op
Iteration   2: 7.750 ns/op
Iteration   3: 7.746 ns/op
Iteration   4: 7.766 ns/op
Iteration   5: 7.743 ns/op


Result "org.openjdk.bench.valhalla.array.copy.Primitive32.p32int_arraycopy":
  7.723 ±(99.9%) 0.063 ns/op [Average]
  (min, avg, max) = (7.660, 7.723, 7.894), stdev = 0.059
  CI (99.9%): [7.660, 7.786] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.copy.Primitive32.p32int_arraycopy
# Parameters: (size = 1000000)

# Run progress: 55.07% complete, ETA 04:22:20
# Fork: 1 of 3
# Warmup Iteration   1: 83164.787 ns/op
# Warmup Iteration   2: 80747.496 ns/op
# Warmup Iteration   3: 74120.945 ns/op
Iteration   1: 75963.504 ns/op
Iteration   2: 80351.613 ns/op
Iteration   3: 76537.885 ns/op
Iteration   4: 71657.980 ns/op
Iteration   5: 81228.354 ns/op

# Run progress: 55.10% complete, ETA 04:22:11
# Fork: 2 of 3
# Warmup Iteration   1: 82807.016 ns/op
# Warmup Iteration   2: 82854.177 ns/op
# Warmup Iteration   3: 81496.475 ns/op
Iteration   1: 81633.774 ns/op
Iteration   2: 79117.599 ns/op
Iteration   3: 76220.495 ns/op
Iteration   4: 78851.802 ns/op
Iteration   5: 66166.645 ns/op

# Run progress: 55.12% complete, ETA 04:22:03
# Fork: 3 of 3
# Warmup Iteration   1: 79728.871 ns/op
# Warmup Iteration   2: 81997.030 ns/op
# Warmup Iteration   3: 78857.522 ns/op
Iteration   1: 70151.259 ns/op
Iteration   2: 69800.912 ns/op
Iteration   3: 71670.914 ns/op
Iteration   4: 78314.057 ns/op
Iteration   5: 71187.457 ns/op


Result "org.openjdk.bench.valhalla.array.copy.Primitive32.p32int_arraycopy":
  75256.950 ±(99.9%) 5137.868 ns/op [Average]
  (min, avg, max) = (66166.645, 75256.950, 81633.774), stdev = 4805.965
  CI (99.9%): [70119.082, 80394.818] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.copy.Primitive32.p32int_copy
# Parameters: (size = 100)

# Run progress: 55.15% complete, ETA 04:21:54
# Fork: 1 of 3
# Warmup Iteration   1: 9.453 ns/op
# Warmup Iteration   2: 9.373 ns/op
# Warmup Iteration   3: 9.366 ns/op
Iteration   1: 9.314 ns/op
Iteration   2: 9.342 ns/op
Iteration   3: 9.645 ns/op
Iteration   4: 9.332 ns/op
Iteration   5: 9.347 ns/op

# Run progress: 55.17% complete, ETA 04:21:45
# Fork: 2 of 3
# Warmup Iteration   1: 9.435 ns/op
# Warmup Iteration   2: 9.348 ns/op
# Warmup Iteration   3: 9.439 ns/op
Iteration   1: 9.385 ns/op
Iteration   2: 9.376 ns/op
Iteration   3: 9.454 ns/op
Iteration   4: 9.303 ns/op
Iteration   5: 9.415 ns/op

# Run progress: 55.20% complete, ETA 04:21:36
# Fork: 3 of 3
# Warmup Iteration   1: 9.405 ns/op
# Warmup Iteration   2: 9.354 ns/op
# Warmup Iteration   3: 9.377 ns/op
Iteration   1: 9.376 ns/op
Iteration   2: 9.317 ns/op
Iteration   3: 9.314 ns/op
Iteration   4: 9.318 ns/op
Iteration   5: 9.357 ns/op


Result "org.openjdk.bench.valhalla.array.copy.Primitive32.p32int_copy":
  9.373 ±(99.9%) 0.092 ns/op [Average]
  (min, avg, max) = (9.303, 9.373, 9.645), stdev = 0.086
  CI (99.9%): [9.281, 9.465] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.copy.Primitive32.p32int_copy
# Parameters: (size = 1000000)

# Run progress: 55.22% complete, ETA 04:21:28
# Fork: 1 of 3
# Warmup Iteration   1: 90710.922 ns/op
# Warmup Iteration   2: 90806.376 ns/op
# Warmup Iteration   3: 91109.180 ns/op
Iteration   1: 90751.647 ns/op
Iteration   2: 90037.269 ns/op
Iteration   3: 92944.803 ns/op
Iteration   4: 90037.851 ns/op
Iteration   5: 90332.277 ns/op

# Run progress: 55.25% complete, ETA 04:21:19
# Fork: 2 of 3
# Warmup Iteration   1: 90902.744 ns/op
# Warmup Iteration   2: 90572.426 ns/op
# Warmup Iteration   3: 90499.534 ns/op
Iteration   1: 90591.203 ns/op
Iteration   2: 89669.622 ns/op
Iteration   3: 90372.179 ns/op
Iteration   4: 89064.170 ns/op
Iteration   5: 88538.204 ns/op

# Run progress: 55.27% complete, ETA 04:21:10
# Fork: 3 of 3
# Warmup Iteration   1: 90306.178 ns/op
# Warmup Iteration   2: 90341.285 ns/op
# Warmup Iteration   3: 91191.734 ns/op
Iteration   1: 89904.774 ns/op
Iteration   2: 90788.697 ns/op
Iteration   3: 89594.014 ns/op
Iteration   4: 89981.895 ns/op
Iteration   5: 90612.426 ns/op


Result "org.openjdk.bench.valhalla.array.copy.Primitive32.p32int_copy":
  90214.735 ±(99.9%) 1047.443 ns/op [Average]
  (min, avg, max) = (88538.204, 90214.735, 92944.803), stdev = 979.779
  CI (99.9%): [89167.292, 91262.179] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.copy.Primitive64.p64byte_arraycopy
# Parameters: (size = 100)

# Run progress: 55.29% complete, ETA 04:21:01
# Fork: 1 of 3
# Warmup Iteration   1: 15.395 ns/op
# Warmup Iteration   2: 15.371 ns/op
# Warmup Iteration   3: 15.349 ns/op
Iteration   1: 15.386 ns/op
Iteration   2: 15.397 ns/op
Iteration   3: 15.379 ns/op
Iteration   4: 15.303 ns/op
Iteration   5: 16.071 ns/op

# Run progress: 55.32% complete, ETA 04:20:52
# Fork: 2 of 3
# Warmup Iteration   1: 15.591 ns/op
# Warmup Iteration   2: 15.582 ns/op
# Warmup Iteration   3: 15.469 ns/op
Iteration   1: 15.406 ns/op
Iteration   2: 15.450 ns/op
Iteration   3: 15.487 ns/op
Iteration   4: 15.418 ns/op
Iteration   5: 15.449 ns/op

# Run progress: 55.34% complete, ETA 04:20:44
# Fork: 3 of 3
# Warmup Iteration   1: 15.411 ns/op
# Warmup Iteration   2: 15.528 ns/op
# Warmup Iteration   3: 15.401 ns/op
Iteration   1: 15.387 ns/op
Iteration   2: 15.357 ns/op
Iteration   3: 15.314 ns/op
Iteration   4: 15.321 ns/op
Iteration   5: 15.387 ns/op


Result "org.openjdk.bench.valhalla.array.copy.Primitive64.p64byte_arraycopy":
  15.434 ±(99.9%) 0.196 ns/op [Average]
  (min, avg, max) = (15.303, 15.434, 16.071), stdev = 0.183
  CI (99.9%): [15.238, 15.630] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.copy.Primitive64.p64byte_arraycopy
# Parameters: (size = 1000000)

# Run progress: 55.37% complete, ETA 04:20:35
# Fork: 1 of 3
# Warmup Iteration   1: 166716.060 ns/op
# Warmup Iteration   2: 146757.925 ns/op
# Warmup Iteration   3: 166984.419 ns/op
Iteration   1: 170336.854 ns/op
Iteration   2: 170625.333 ns/op
Iteration   3: 163845.940 ns/op
Iteration   4: 161062.892 ns/op
Iteration   5: 158440.288 ns/op

# Run progress: 55.39% complete, ETA 04:20:26
# Fork: 2 of 3
# Warmup Iteration   1: 170125.982 ns/op
# Warmup Iteration   2: 170833.742 ns/op
# Warmup Iteration   3: 165940.289 ns/op
Iteration   1: 163657.479 ns/op
Iteration   2: 163809.767 ns/op
Iteration   3: 166187.165 ns/op
Iteration   4: 165376.726 ns/op
Iteration   5: 133513.724 ns/op

# Run progress: 55.42% complete, ETA 04:20:17
# Fork: 3 of 3
# Warmup Iteration   1: 136565.152 ns/op
# Warmup Iteration   2: 151230.780 ns/op
# Warmup Iteration   3: 174021.021 ns/op
Iteration   1: 170963.573 ns/op
Iteration   2: 169539.324 ns/op
Iteration   3: 163653.282 ns/op
Iteration   4: 164507.811 ns/op
Iteration   5: 167439.114 ns/op


Result "org.openjdk.bench.valhalla.array.copy.Primitive64.p64byte_arraycopy":
  163530.618 ±(99.9%) 9680.475 ns/op [Average]
  (min, avg, max) = (133513.724, 163530.618, 170963.573), stdev = 9055.122
  CI (99.9%): [153850.143, 173211.093] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.copy.Primitive64.p64byte_copy
# Parameters: (size = 100)

# Run progress: 55.44% complete, ETA 04:20:09
# Fork: 1 of 3
# Warmup Iteration   1: 17.792 ns/op
# Warmup Iteration   2: 17.769 ns/op
# Warmup Iteration   3: 17.606 ns/op
Iteration   1: 17.619 ns/op
Iteration   2: 17.519 ns/op
Iteration   3: 17.642 ns/op
Iteration   4: 17.657 ns/op
Iteration   5: 17.690 ns/op

# Run progress: 55.47% complete, ETA 04:20:00
# Fork: 2 of 3
# Warmup Iteration   1: 21.068 ns/op
# Warmup Iteration   2: 21.276 ns/op
# Warmup Iteration   3: 20.650 ns/op
Iteration   1: 20.700 ns/op
Iteration   2: 20.735 ns/op
Iteration   3: 20.765 ns/op
Iteration   4: 20.721 ns/op
Iteration   5: 20.774 ns/op

# Run progress: 55.49% complete, ETA 04:19:51
# Fork: 3 of 3
# Warmup Iteration   1: 20.871 ns/op
# Warmup Iteration   2: 20.779 ns/op
# Warmup Iteration   3: 20.686 ns/op
Iteration   1: 20.821 ns/op
Iteration   2: 20.686 ns/op
Iteration   3: 20.679 ns/op
Iteration   4: 20.882 ns/op
Iteration   5: 21.250 ns/op


Result "org.openjdk.bench.valhalla.array.copy.Primitive64.p64byte_copy":
  19.743 ±(99.9%) 1.664 ns/op [Average]
  (min, avg, max) = (17.519, 19.743, 21.250), stdev = 1.556
  CI (99.9%): [18.079, 21.406] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.copy.Primitive64.p64byte_copy
# Parameters: (size = 1000000)

# Run progress: 55.51% complete, ETA 04:19:42
# Fork: 1 of 3
# Warmup Iteration   1: 199408.971 ns/op
# Warmup Iteration   2: 204396.626 ns/op
# Warmup Iteration   3: 201980.654 ns/op
Iteration   1: 210411.477 ns/op
Iteration   2: 198157.619 ns/op
Iteration   3: 198186.149 ns/op
Iteration   4: 206470.178 ns/op
Iteration   5: 205096.591 ns/op

# Run progress: 55.54% complete, ETA 04:19:33
# Fork: 2 of 3
# Warmup Iteration   1: 203411.026 ns/op
# Warmup Iteration   2: 190944.875 ns/op
# Warmup Iteration   3: 203608.706 ns/op
Iteration   1: 205691.042 ns/op
Iteration   2: 211857.661 ns/op
Iteration   3: 187868.459 ns/op
Iteration   4: 197678.156 ns/op
Iteration   5: 200324.282 ns/op

# Run progress: 55.56% complete, ETA 04:19:25
# Fork: 3 of 3
# Warmup Iteration   1: 211270.316 ns/op
# Warmup Iteration   2: 207197.042 ns/op
# Warmup Iteration   3: 206109.855 ns/op
Iteration   1: 190792.682 ns/op
Iteration   2: 199395.266 ns/op
Iteration   3: 202728.887 ns/op
Iteration   4: 210404.084 ns/op
Iteration   5: 198388.223 ns/op


Result "org.openjdk.bench.valhalla.array.copy.Primitive64.p64byte_copy":
  201563.384 ±(99.9%) 7425.117 ns/op [Average]
  (min, avg, max) = (187868.459, 201563.384, 211857.661), stdev = 6945.459
  CI (99.9%): [194138.266, 208988.501] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.copy.Primitive64.p64int_arraycopy
# Parameters: (size = 100)

# Run progress: 55.59% complete, ETA 04:19:16
# Fork: 1 of 3
# Warmup Iteration   1: 15.404 ns/op
# Warmup Iteration   2: 15.353 ns/op
# Warmup Iteration   3: 15.335 ns/op
Iteration   1: 15.372 ns/op
Iteration   2: 15.308 ns/op
Iteration   3: 15.371 ns/op
Iteration   4: 15.358 ns/op
Iteration   5: 16.092 ns/op

# Run progress: 55.61% complete, ETA 04:19:07
# Fork: 2 of 3
# Warmup Iteration   1: 15.444 ns/op
# Warmup Iteration   2: 15.478 ns/op
# Warmup Iteration   3: 15.495 ns/op
Iteration   1: 15.486 ns/op
Iteration   2: 15.412 ns/op
Iteration   3: 15.581 ns/op
Iteration   4: 15.499 ns/op
Iteration   5: 15.462 ns/op

# Run progress: 55.64% complete, ETA 04:18:58
# Fork: 3 of 3
# Warmup Iteration   1: 15.470 ns/op
# Warmup Iteration   2: 15.573 ns/op
# Warmup Iteration   3: 15.504 ns/op
Iteration   1: 15.507 ns/op
Iteration   2: 15.548 ns/op
Iteration   3: 15.572 ns/op
Iteration   4: 15.410 ns/op
Iteration   5: 15.426 ns/op


Result "org.openjdk.bench.valhalla.array.copy.Primitive64.p64int_arraycopy":
  15.494 ±(99.9%) 0.197 ns/op [Average]
  (min, avg, max) = (15.308, 15.494, 16.092), stdev = 0.184
  CI (99.9%): [15.296, 15.691] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.copy.Primitive64.p64int_arraycopy
# Parameters: (size = 1000000)

# Run progress: 55.66% complete, ETA 04:18:50
# Fork: 1 of 3
# Warmup Iteration   1: 171751.473 ns/op
# Warmup Iteration   2: 164546.906 ns/op
# Warmup Iteration   3: 163513.089 ns/op
Iteration   1: 162242.056 ns/op
Iteration   2: 167957.383 ns/op
Iteration   3: 165416.605 ns/op
Iteration   4: 162519.312 ns/op
Iteration   5: 164980.096 ns/op

# Run progress: 55.69% complete, ETA 04:18:41
# Fork: 2 of 3
# Warmup Iteration   1: 169077.965 ns/op
# Warmup Iteration   2: 168287.123 ns/op
# Warmup Iteration   3: 167010.837 ns/op
Iteration   1: 162739.676 ns/op
Iteration   2: 144189.130 ns/op
Iteration   3: 172940.321 ns/op
Iteration   4: 170353.143 ns/op
Iteration   5: 167370.353 ns/op

# Run progress: 55.71% complete, ETA 04:18:32
# Fork: 3 of 3
# Warmup Iteration   1: 163245.738 ns/op
# Warmup Iteration   2: 168780.013 ns/op
# Warmup Iteration   3: 166951.011 ns/op
Iteration   1: 171291.261 ns/op
Iteration   2: 166017.998 ns/op
Iteration   3: 162039.541 ns/op
Iteration   4: 166386.600 ns/op
Iteration   5: 167352.779 ns/op


Result "org.openjdk.bench.valhalla.array.copy.Primitive64.p64int_arraycopy":
  164919.750 ±(99.9%) 7085.283 ns/op [Average]
  (min, avg, max) = (144189.130, 164919.750, 172940.321), stdev = 6627.579
  CI (99.9%): [157834.467, 172005.034] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.copy.Primitive64.p64int_copy
# Parameters: (size = 100)

# Run progress: 55.74% complete, ETA 04:18:23
# Fork: 1 of 3
# Warmup Iteration   1: 12.465 ns/op
# Warmup Iteration   2: 12.437 ns/op
# Warmup Iteration   3: 12.502 ns/op
Iteration   1: 12.624 ns/op
Iteration   2: 12.435 ns/op
Iteration   3: 12.418 ns/op
Iteration   4: 12.403 ns/op
Iteration   5: 12.458 ns/op

# Run progress: 55.76% complete, ETA 04:18:14
# Fork: 2 of 3
# Warmup Iteration   1: 11.902 ns/op
# Warmup Iteration   2: 11.843 ns/op
# Warmup Iteration   3: 11.813 ns/op
Iteration   1: 11.847 ns/op
Iteration   2: 11.806 ns/op
Iteration   3: 11.886 ns/op
Iteration   4: 11.840 ns/op
Iteration   5: 11.818 ns/op

# Run progress: 55.78% complete, ETA 04:18:06
# Fork: 3 of 3
# Warmup Iteration   1: 12.029 ns/op
# Warmup Iteration   2: 11.853 ns/op
# Warmup Iteration   3: 11.713 ns/op
Iteration   1: 11.731 ns/op
Iteration   2: 11.880 ns/op
Iteration   3: 11.886 ns/op
Iteration   4: 11.804 ns/op
Iteration   5: 11.834 ns/op


Result "org.openjdk.bench.valhalla.array.copy.Primitive64.p64int_copy":
  12.045 ±(99.9%) 0.337 ns/op [Average]
  (min, avg, max) = (11.731, 12.045, 12.624), stdev = 0.315
  CI (99.9%): [11.707, 12.382] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.copy.Primitive64.p64int_copy
# Parameters: (size = 1000000)

# Run progress: 55.81% complete, ETA 04:17:57
# Fork: 1 of 3
# Warmup Iteration   1: 186194.963 ns/op
# Warmup Iteration   2: 183532.734 ns/op
# Warmup Iteration   3: 184739.036 ns/op
Iteration   1: 184395.121 ns/op
Iteration   2: 185323.861 ns/op
Iteration   3: 183879.733 ns/op
Iteration   4: 184887.521 ns/op
Iteration   5: 186270.953 ns/op

# Run progress: 55.83% complete, ETA 04:17:48
# Fork: 2 of 3
# Warmup Iteration   1: 204868.976 ns/op
# Warmup Iteration   2: 192924.776 ns/op
# Warmup Iteration   3: 195558.104 ns/op
Iteration   1: 195156.668 ns/op
Iteration   2: 206335.299 ns/op
Iteration   3: 204978.708 ns/op
Iteration   4: 207248.374 ns/op
Iteration   5: 190406.024 ns/op

# Run progress: 55.86% complete, ETA 04:17:39
# Fork: 3 of 3
# Warmup Iteration   1: 186444.842 ns/op
# Warmup Iteration   2: 185182.829 ns/op
# Warmup Iteration   3: 187503.998 ns/op
Iteration   1: 187110.861 ns/op
Iteration   2: 186271.928 ns/op
Iteration   3: 185979.325 ns/op
Iteration   4: 189975.062 ns/op
Iteration   5: 186591.998 ns/op


Result "org.openjdk.bench.valhalla.array.copy.Primitive64.p64int_copy":
  190987.429 ±(99.9%) 8951.927 ns/op [Average]
  (min, avg, max) = (183879.733, 190987.429, 207248.374), stdev = 8373.638
  CI (99.9%): [182035.502, 199939.356] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.copy.Primitive64.p64long_arraycopy
# Parameters: (size = 100)

# Run progress: 55.88% complete, ETA 04:17:30
# Fork: 1 of 3
# Warmup Iteration   1: 15.455 ns/op
# Warmup Iteration   2: 15.417 ns/op
# Warmup Iteration   3: 15.560 ns/op
Iteration   1: 15.708 ns/op
Iteration   2: 15.581 ns/op
Iteration   3: 15.421 ns/op
Iteration   4: 15.420 ns/op
Iteration   5: 15.464 ns/op

# Run progress: 55.91% complete, ETA 04:17:22
# Fork: 2 of 3
# Warmup Iteration   1: 15.452 ns/op
# Warmup Iteration   2: 15.402 ns/op
# Warmup Iteration   3: 15.458 ns/op
Iteration   1: 15.403 ns/op
Iteration   2: 15.449 ns/op
Iteration   3: 15.557 ns/op
Iteration   4: 15.449 ns/op
Iteration   5: 15.388 ns/op

# Run progress: 55.93% complete, ETA 04:17:13
# Fork: 3 of 3
# Warmup Iteration   1: 15.388 ns/op
# Warmup Iteration   2: 15.431 ns/op
# Warmup Iteration   3: 15.369 ns/op
Iteration   1: 15.869 ns/op
Iteration   2: 15.312 ns/op
Iteration   3: 15.327 ns/op
Iteration   4: 15.404 ns/op
Iteration   5: 15.348 ns/op


Result "org.openjdk.bench.valhalla.array.copy.Primitive64.p64long_arraycopy":
  15.473 ±(99.9%) 0.161 ns/op [Average]
  (min, avg, max) = (15.312, 15.473, 15.869), stdev = 0.151
  CI (99.9%): [15.312, 15.634] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.copy.Primitive64.p64long_arraycopy
# Parameters: (size = 1000000)

# Run progress: 55.96% complete, ETA 04:17:04
# Fork: 1 of 3
# Warmup Iteration   1: 172644.507 ns/op
# Warmup Iteration   2: 167901.323 ns/op
# Warmup Iteration   3: 167043.431 ns/op
Iteration   1: 172024.058 ns/op
Iteration   2: 166942.379 ns/op
Iteration   3: 157367.982 ns/op
Iteration   4: 160733.731 ns/op
Iteration   5: 164643.629 ns/op

# Run progress: 55.98% complete, ETA 04:16:55
# Fork: 2 of 3
# Warmup Iteration   1: 170578.294 ns/op
# Warmup Iteration   2: 139463.075 ns/op
# Warmup Iteration   3: 158340.694 ns/op
Iteration   1: 164760.262 ns/op
Iteration   2: 174610.501 ns/op
Iteration   3: 168524.059 ns/op
Iteration   4: 163659.814 ns/op
Iteration   5: 167920.150 ns/op

# Run progress: 56.00% complete, ETA 04:16:46
# Fork: 3 of 3
# Warmup Iteration   1: 168034.806 ns/op
# Warmup Iteration   2: 171764.985 ns/op
# Warmup Iteration   3: 167857.369 ns/op
Iteration   1: 164780.737 ns/op
Iteration   2: 165200.710 ns/op
Iteration   3: 164614.841 ns/op
Iteration   4: 157601.895 ns/op
Iteration   5: 146500.643 ns/op


Result "org.openjdk.bench.valhalla.array.copy.Primitive64.p64long_arraycopy":
  163992.359 ±(99.9%) 7153.311 ns/op [Average]
  (min, avg, max) = (146500.643, 163992.359, 174610.501), stdev = 6691.211
  CI (99.9%): [156839.049, 171145.670] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.copy.Primitive64.p64long_copy
# Parameters: (size = 100)

# Run progress: 56.03% complete, ETA 04:16:38
# Fork: 1 of 3
# Warmup Iteration   1: 11.069 ns/op
# Warmup Iteration   2: 11.080 ns/op
# Warmup Iteration   3: 11.546 ns/op
Iteration   1: 10.965 ns/op
Iteration   2: 10.958 ns/op
Iteration   3: 10.969 ns/op
Iteration   4: 10.963 ns/op
Iteration   5: 10.968 ns/op

# Run progress: 56.05% complete, ETA 04:16:29
# Fork: 2 of 3
# Warmup Iteration   1: 11.021 ns/op
# Warmup Iteration   2: 11.028 ns/op
# Warmup Iteration   3: 10.948 ns/op
Iteration   1: 10.977 ns/op
Iteration   2: 10.974 ns/op
Iteration   3: 11.034 ns/op
Iteration   4: 11.061 ns/op
Iteration   5: 11.054 ns/op

# Run progress: 56.08% complete, ETA 04:16:20
# Fork: 3 of 3
# Warmup Iteration   1: 11.067 ns/op
# Warmup Iteration   2: 11.004 ns/op
# Warmup Iteration   3: 10.993 ns/op
Iteration   1: 11.015 ns/op
Iteration   2: 11.016 ns/op
Iteration   3: 11.001 ns/op
Iteration   4: 11.012 ns/op
Iteration   5: 11.011 ns/op


Result "org.openjdk.bench.valhalla.array.copy.Primitive64.p64long_copy":
  10.998 ±(99.9%) 0.036 ns/op [Average]
  (min, avg, max) = (10.958, 10.998, 11.061), stdev = 0.034
  CI (99.9%): [10.962, 11.035] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.copy.Primitive64.p64long_copy
# Parameters: (size = 1000000)

# Run progress: 56.10% complete, ETA 04:16:11
# Fork: 1 of 3
# Warmup Iteration   1: 168247.476 ns/op
# Warmup Iteration   2: 165667.008 ns/op
# Warmup Iteration   3: 171395.388 ns/op
Iteration   1: 169250.643 ns/op
Iteration   2: 165182.261 ns/op
Iteration   3: 144508.155 ns/op
Iteration   4: 140120.180 ns/op
Iteration   5: 151356.086 ns/op

# Run progress: 56.13% complete, ETA 04:16:03
# Fork: 2 of 3
# Warmup Iteration   1: 176277.448 ns/op
# Warmup Iteration   2: 169146.843 ns/op
# Warmup Iteration   3: 171015.075 ns/op
Iteration   1: 160674.799 ns/op
Iteration   2: 164547.993 ns/op
Iteration   3: 165975.244 ns/op
Iteration   4: 174205.411 ns/op
Iteration   5: 166126.645 ns/op

# Run progress: 56.15% complete, ETA 04:15:54
# Fork: 3 of 3
# Warmup Iteration   1: 166869.261 ns/op
# Warmup Iteration   2: 171930.710 ns/op
# Warmup Iteration   3: 171897.239 ns/op
Iteration   1: 169693.887 ns/op
Iteration   2: 163528.132 ns/op
Iteration   3: 166129.159 ns/op
Iteration   4: 180179.320 ns/op
Iteration   5: 159926.653 ns/op


Result "org.openjdk.bench.valhalla.array.copy.Primitive64.p64long_copy":
  162760.304 ±(99.9%) 11268.439 ns/op [Average]
  (min, avg, max) = (140120.180, 162760.304, 180179.320), stdev = 10540.505
  CI (99.9%): [151491.865, 174028.744] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Identity32int.Def_to_Ref_as_Ref_arrayfill
# Parameters: (size = 100)

# Run progress: 56.18% complete, ETA 04:15:45
# Fork: 1 of 3
# Warmup Iteration   1: 85.758 ns/op
# Warmup Iteration   2: 86.908 ns/op
# Warmup Iteration   3: 86.802 ns/op
Iteration   1: 86.852 ns/op
Iteration   2: 86.077 ns/op
Iteration   3: 86.561 ns/op
Iteration   4: 86.332 ns/op
Iteration   5: 86.172 ns/op

# Run progress: 56.20% complete, ETA 04:15:36
# Fork: 2 of 3
# Warmup Iteration   1: 93.433 ns/op
# Warmup Iteration   2: 93.917 ns/op
# Warmup Iteration   3: 89.875 ns/op
Iteration   1: 90.490 ns/op
Iteration   2: 89.719 ns/op
Iteration   3: 90.197 ns/op
Iteration   4: 89.569 ns/op
Iteration   5: 90.084 ns/op

# Run progress: 56.23% complete, ETA 04:15:28
# Fork: 3 of 3
# Warmup Iteration   1: 93.260 ns/op
# Warmup Iteration   2: 93.800 ns/op
# Warmup Iteration   3: 90.348 ns/op
Iteration   1: 90.218 ns/op
Iteration   2: 89.631 ns/op
Iteration   3: 89.725 ns/op
Iteration   4: 89.192 ns/op
Iteration   5: 89.718 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Identity32int.Def_to_Ref_as_Ref_arrayfill":
  88.702 ±(99.9%) 1.841 ns/op [Average]
  (min, avg, max) = (86.077, 88.702, 90.490), stdev = 1.722
  CI (99.9%): [86.861, 90.544] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Identity32int.Def_to_Ref_as_Ref_arrayfill
# Parameters: (size = 1000000)

# Run progress: 56.25% complete, ETA 04:15:19
# Fork: 1 of 3
# Warmup Iteration   1: 22610421.289 ns/op
# Warmup Iteration   2: 21113251.729 ns/op
# Warmup Iteration   3: 22136087.848 ns/op
Iteration   1: 21376616.313 ns/op
Iteration   2: 24422305.233 ns/op
Iteration   3: 22468863.239 ns/op
Iteration   4: 26321729.175 ns/op
Iteration   5: 28250746.528 ns/op

# Run progress: 56.27% complete, ETA 04:15:10
# Fork: 2 of 3
# Warmup Iteration   1: 21048574.646 ns/op
# Warmup Iteration   2: 21854993.917 ns/op
# Warmup Iteration   3: 21837936.609 ns/op
Iteration   1: 20921887.755 ns/op
Iteration   2: 22189905.783 ns/op
Iteration   3: 21008009.347 ns/op
Iteration   4: 22608998.156 ns/op
Iteration   5: 22376312.044 ns/op

# Run progress: 56.30% complete, ETA 04:15:02
# Fork: 3 of 3
# Warmup Iteration   1: 22200259.043 ns/op
# Warmup Iteration   2: 23270441.273 ns/op
# Warmup Iteration   3: 21933276.283 ns/op
Iteration   1: 22446644.444 ns/op
Iteration   2: 23273351.318 ns/op
Iteration   3: 26793575.658 ns/op
Iteration   4: 28083096.056 ns/op
Iteration   5: 21569308.511 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Identity32int.Def_to_Ref_as_Ref_arrayfill":
  23607423.304 ±(99.9%) 2712848.324 ns/op [Average]
  (min, avg, max) = (20921887.755, 23607423.304, 28250746.528), stdev = 2537600.006
  CI (99.9%): [20894574.980, 26320271.628] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Identity32int.Def_to_Ref_as_Ref_fill
# Parameters: (size = 100)

# Run progress: 56.32% complete, ETA 04:14:53
# Fork: 1 of 3
# Warmup Iteration   1: 210.937 ns/op
# Warmup Iteration   2: 181.282 ns/op
# Warmup Iteration   3: 185.154 ns/op
Iteration   1: 181.025 ns/op
Iteration   2: 186.267 ns/op
Iteration   3: 179.544 ns/op
Iteration   4: 184.813 ns/op
Iteration   5: 186.263 ns/op

# Run progress: 56.35% complete, ETA 04:14:44
# Fork: 2 of 3
# Warmup Iteration   1: 193.327 ns/op
# Warmup Iteration   2: 177.420 ns/op
# Warmup Iteration   3: 181.034 ns/op
Iteration   1: 177.299 ns/op
Iteration   2: 181.025 ns/op
Iteration   3: 175.987 ns/op
Iteration   4: 175.863 ns/op
Iteration   5: 175.830 ns/op

# Run progress: 56.37% complete, ETA 04:14:35
# Fork: 3 of 3
# Warmup Iteration   1: 192.850 ns/op
# Warmup Iteration   2: 194.398 ns/op
# Warmup Iteration   3: 181.268 ns/op
Iteration   1: 179.360 ns/op
Iteration   2: 181.012 ns/op
Iteration   3: 179.198 ns/op
Iteration   4: 179.551 ns/op
Iteration   5: 180.222 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Identity32int.Def_to_Ref_as_Ref_fill":
  180.217 ±(99.9%) 3.653 ns/op [Average]
  (min, avg, max) = (175.830, 180.217, 186.267), stdev = 3.417
  CI (99.9%): [176.564, 183.871] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Identity32int.Def_to_Ref_as_Ref_fill
# Parameters: (size = 1000000)

# Run progress: 56.40% complete, ETA 04:14:27
# Fork: 1 of 3
# Warmup Iteration   1: 3186906.413 ns/op
# Warmup Iteration   2: 2058407.653 ns/op
# Warmup Iteration   3: 1825431.915 ns/op
Iteration   1: 1856923.406 ns/op
Iteration   2: 2042127.525 ns/op
Iteration   3: 1819703.004 ns/op
Iteration   4: 1786003.239 ns/op
Iteration   5: 1752294.280 ns/op

# Run progress: 56.42% complete, ETA 04:14:18
# Fork: 2 of 3
# Warmup Iteration   1: 2795396.754 ns/op
# Warmup Iteration   2: 1985062.789 ns/op
# Warmup Iteration   3: 1896468.497 ns/op
Iteration   1: 1730611.136 ns/op
Iteration   2: 1753778.863 ns/op
Iteration   3: 1799399.493 ns/op
Iteration   4: 1811044.285 ns/op
Iteration   5: 1805493.629 ns/op

# Run progress: 56.45% complete, ETA 04:14:09
# Fork: 3 of 3
# Warmup Iteration   1: 2774287.203 ns/op
# Warmup Iteration   2: 1879433.628 ns/op
# Warmup Iteration   3: 1921654.230 ns/op
Iteration   1: 1837667.500 ns/op
Iteration   2: 1833341.515 ns/op
Iteration   3: 1818515.145 ns/op
Iteration   4: 1838484.165 ns/op
Iteration   5: 1841797.848 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Identity32int.Def_to_Ref_as_Ref_fill":
  1821812.336 ±(99.9%) 76021.746 ns/op [Average]
  (min, avg, max) = (1730611.136, 1821812.336, 2042127.525), stdev = 71110.789
  CI (99.9%): [1745790.589, 1897834.082] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Identity32int.New_to_Ref_as_Ref_arrayfill
# Parameters: (size = 100)

# Run progress: 56.47% complete, ETA 04:14:00
# Fork: 1 of 3
# Warmup Iteration   1: 90.818 ns/op
# Warmup Iteration   2: 91.114 ns/op
# Warmup Iteration   3: 90.455 ns/op
Iteration   1: 89.911 ns/op
Iteration   2: 89.832 ns/op
Iteration   3: 89.447 ns/op
Iteration   4: 89.700 ns/op
Iteration   5: 90.024 ns/op

# Run progress: 56.50% complete, ETA 04:13:52
# Fork: 2 of 3
# Warmup Iteration   1: 95.894 ns/op
# Warmup Iteration   2: 91.037 ns/op
# Warmup Iteration   3: 90.783 ns/op
Iteration   1: 89.848 ns/op
Iteration   2: 89.803 ns/op
Iteration   3: 89.330 ns/op
Iteration   4: 89.914 ns/op
Iteration   5: 90.259 ns/op

# Run progress: 56.52% complete, ETA 04:13:43
# Fork: 3 of 3
# Warmup Iteration   1: 91.189 ns/op
# Warmup Iteration   2: 90.888 ns/op
# Warmup Iteration   3: 90.137 ns/op
Iteration   1: 90.038 ns/op
Iteration   2: 89.414 ns/op
Iteration   3: 89.924 ns/op
Iteration   4: 90.745 ns/op
Iteration   5: 89.942 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Identity32int.New_to_Ref_as_Ref_arrayfill":
  89.875 ±(99.9%) 0.372 ns/op [Average]
  (min, avg, max) = (89.330, 89.875, 90.745), stdev = 0.348
  CI (99.9%): [89.504, 90.247] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Identity32int.New_to_Ref_as_Ref_arrayfill
# Parameters: (size = 1000000)

# Run progress: 56.54% complete, ETA 04:13:34
# Fork: 1 of 3
# Warmup Iteration   1: 23942515.512 ns/op
# Warmup Iteration   2: 29907595.588 ns/op
# Warmup Iteration   3: 25901192.308 ns/op
Iteration   1: 23285275.568 ns/op
Iteration   2: 22589940.756 ns/op
Iteration   3: 21809320.021 ns/op
Iteration   4: 21841095.745 ns/op
Iteration   5: 23307312.500 ns/op

# Run progress: 56.57% complete, ETA 04:13:25
# Fork: 2 of 3
# Warmup Iteration   1: 22170920.304 ns/op
# Warmup Iteration   2: 22813007.422 ns/op
# Warmup Iteration   3: 23009172.341 ns/op
Iteration   1: 22196618.652 ns/op
Iteration   2: 20371610.840 ns/op
Iteration   3: 23780856.581 ns/op
Iteration   4: 20670710.000 ns/op
Iteration   5: 22931467.818 ns/op

# Run progress: 56.59% complete, ETA 04:13:17
# Fork: 3 of 3
# Warmup Iteration   1: 24914939.024 ns/op
# Warmup Iteration   2: 28367232.639 ns/op
# Warmup Iteration   3: 22063274.809 ns/op
Iteration   1: 23015219.682 ns/op
Iteration   2: 23013082.386 ns/op
Iteration   3: 22276673.913 ns/op
Iteration   4: 21915058.511 ns/op
Iteration   5: 20238185.000 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Identity32int.New_to_Ref_as_Ref_arrayfill":
  22216161.865 ±(99.9%) 1171477.696 ns/op [Average]
  (min, avg, max) = (20238185.000, 22216161.865, 23780856.581), stdev = 1095800.964
  CI (99.9%): [21044684.169, 23387639.561] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Identity32int.New_to_Ref_as_Ref_fill
# Parameters: (size = 100)

# Run progress: 56.62% complete, ETA 04:13:08
# Fork: 1 of 3
# Warmup Iteration   1: 87.641 ns/op
# Warmup Iteration   2: 88.079 ns/op
# Warmup Iteration   3: 83.998 ns/op
Iteration   1: 84.217 ns/op
Iteration   2: 82.815 ns/op
Iteration   3: 82.553 ns/op
Iteration   4: 82.201 ns/op
Iteration   5: 81.863 ns/op

# Run progress: 56.64% complete, ETA 04:12:59
# Fork: 2 of 3
# Warmup Iteration   1: 88.205 ns/op
# Warmup Iteration   2: 87.369 ns/op
# Warmup Iteration   3: 82.280 ns/op
Iteration   1: 82.704 ns/op
Iteration   2: 81.988 ns/op
Iteration   3: 82.461 ns/op
Iteration   4: 82.659 ns/op
Iteration   5: 81.800 ns/op

# Run progress: 56.67% complete, ETA 04:12:51
# Fork: 3 of 3
# Warmup Iteration   1: 91.216 ns/op
# Warmup Iteration   2: 91.380 ns/op
# Warmup Iteration   3: 90.264 ns/op
Iteration   1: 90.046 ns/op
Iteration   2: 90.454 ns/op
Iteration   3: 93.642 ns/op
Iteration   4: 89.239 ns/op
Iteration   5: 89.456 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Identity32int.New_to_Ref_as_Ref_fill":
  85.207 ±(99.9%) 4.358 ns/op [Average]
  (min, avg, max) = (81.800, 85.207, 93.642), stdev = 4.076
  CI (99.9%): [80.849, 89.565] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Identity32int.New_to_Ref_as_Ref_fill
# Parameters: (size = 1000000)

# Run progress: 56.69% complete, ETA 04:12:42
# Fork: 1 of 3
# Warmup Iteration   1: 21768176.404 ns/op
# Warmup Iteration   2: 23447412.791 ns/op
# Warmup Iteration   3: 22937175.182 ns/op
Iteration   1: 21127417.542 ns/op
Iteration   2: 22645900.348 ns/op
Iteration   3: 23013584.273 ns/op
Iteration   4: 20515364.796 ns/op
Iteration   5: 21334698.792 ns/op

# Run progress: 56.72% complete, ETA 04:12:33
# Fork: 2 of 3
# Warmup Iteration   1: 23609542.614 ns/op
# Warmup Iteration   2: 24868813.024 ns/op
# Warmup Iteration   3: 22708537.022 ns/op
Iteration   1: 21544019.979 ns/op
Iteration   2: 22441748.174 ns/op
Iteration   3: 23829177.326 ns/op
Iteration   4: 22501110.200 ns/op
Iteration   5: 29827381.118 ns/op

# Run progress: 56.74% complete, ETA 04:12:24
# Fork: 3 of 3
# Warmup Iteration   1: 21668375.894 ns/op
# Warmup Iteration   2: 24016755.952 ns/op
# Warmup Iteration   3: 22011357.277 ns/op
Iteration   1: 24581745.048 ns/op
Iteration   2: 23467809.116 ns/op
Iteration   3: 22417721.913 ns/op
Iteration   4: 24342499.000 ns/op
Iteration   5: 21886970.479 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Identity32int.New_to_Ref_as_Ref_fill":
  23031809.873 ±(99.9%) 2367253.532 ns/op [Average]
  (min, avg, max) = (20515364.796, 23031809.873, 29827381.118), stdev = 2214330.423
  CI (99.9%): [20664556.342, 25399063.405] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Identity32int.Ref_to_Ref_as_Ref_arrayfillinst
# Parameters: (size = 100)

# Run progress: 56.76% complete, ETA 04:12:16
# Fork: 1 of 3
# Warmup Iteration   1: 71.960 ns/op
# Warmup Iteration   2: 72.012 ns/op
# Warmup Iteration   3: 71.652 ns/op
Iteration   1: 74.412 ns/op
Iteration   2: 72.385 ns/op
Iteration   3: 71.501 ns/op
Iteration   4: 71.471 ns/op
Iteration   5: 71.716 ns/op

# Run progress: 56.79% complete, ETA 04:12:07
# Fork: 2 of 3
# Warmup Iteration   1: 72.380 ns/op
# Warmup Iteration   2: 71.811 ns/op
# Warmup Iteration   3: 71.759 ns/op
Iteration   1: 72.317 ns/op
Iteration   2: 71.837 ns/op
Iteration   3: 71.846 ns/op
Iteration   4: 71.519 ns/op
Iteration   5: 71.831 ns/op

# Run progress: 56.81% complete, ETA 04:11:58
# Fork: 3 of 3
# Warmup Iteration   1: 71.714 ns/op
# Warmup Iteration   2: 71.903 ns/op
# Warmup Iteration   3: 72.862 ns/op
Iteration   1: 71.718 ns/op
Iteration   2: 71.515 ns/op
Iteration   3: 71.504 ns/op
Iteration   4: 71.604 ns/op
Iteration   5: 71.561 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Identity32int.Ref_to_Ref_as_Ref_arrayfillinst":
  71.916 ±(99.9%) 0.797 ns/op [Average]
  (min, avg, max) = (71.471, 71.916, 74.412), stdev = 0.746
  CI (99.9%): [71.118, 72.713] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Identity32int.Ref_to_Ref_as_Ref_arrayfillinst
# Parameters: (size = 1000000)

# Run progress: 56.84% complete, ETA 04:11:49
# Fork: 1 of 3
# Warmup Iteration   1: 22635300.000 ns/op
# Warmup Iteration   2: 24335299.595 ns/op
# Warmup Iteration   3: 23463842.047 ns/op
Iteration   1: 23060250.911 ns/op
Iteration   2: 20862552.735 ns/op
Iteration   3: 23802275.186 ns/op
Iteration   4: 23332532.182 ns/op
Iteration   5: 22906135.432 ns/op

# Run progress: 56.86% complete, ETA 04:11:41
# Fork: 2 of 3
# Warmup Iteration   1: 22527531.489 ns/op
# Warmup Iteration   2: 22710321.289 ns/op
# Warmup Iteration   3: 21017904.776 ns/op
Iteration   1: 29029653.944 ns/op
Iteration   2: 25572445.122 ns/op
Iteration   3: 22258360.500 ns/op
Iteration   4: 22006235.500 ns/op
Iteration   5: 23628326.705 ns/op

# Run progress: 56.89% complete, ETA 04:11:32
# Fork: 3 of 3
# Warmup Iteration   1: 21852994.681 ns/op
# Warmup Iteration   2: 24219506.929 ns/op
# Warmup Iteration   3: 24757201.405 ns/op
Iteration   1: 22993378.689 ns/op
Iteration   2: 21461033.854 ns/op
Iteration   3: 23322971.591 ns/op
Iteration   4: 25443990.625 ns/op
Iteration   5: 24036256.791 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Identity32int.Ref_to_Ref_as_Ref_arrayfillinst":
  23581093.318 ±(99.9%) 2113092.133 ns/op [Average]
  (min, avg, max) = (20862552.735, 23581093.318, 29029653.944), stdev = 1976587.692
  CI (99.9%): [21468001.185, 25694185.451] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Identity32int.Ref_to_Ref_as_Ref_arrayfillstat
# Parameters: (size = 100)

# Run progress: 56.91% complete, ETA 04:11:24
# Fork: 1 of 3
# Warmup Iteration   1: 67.559 ns/op
# Warmup Iteration   2: 69.878 ns/op
# Warmup Iteration   3: 71.222 ns/op
Iteration   1: 71.237 ns/op
Iteration   2: 71.500 ns/op
Iteration   3: 71.439 ns/op
Iteration   4: 71.403 ns/op
Iteration   5: 71.539 ns/op

# Run progress: 56.94% complete, ETA 04:11:15
# Fork: 2 of 3
# Warmup Iteration   1: 67.489 ns/op
# Warmup Iteration   2: 69.722 ns/op
# Warmup Iteration   3: 71.697 ns/op
Iteration   1: 71.392 ns/op
Iteration   2: 71.360 ns/op
Iteration   3: 71.430 ns/op
Iteration   4: 71.256 ns/op
Iteration   5: 72.151 ns/op

# Run progress: 56.96% complete, ETA 04:11:06
# Fork: 3 of 3
# Warmup Iteration   1: 67.567 ns/op
# Warmup Iteration   2: 69.715 ns/op
# Warmup Iteration   3: 72.031 ns/op
Iteration   1: 71.464 ns/op
Iteration   2: 71.359 ns/op
Iteration   3: 71.750 ns/op
Iteration   4: 71.214 ns/op
Iteration   5: 71.340 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Identity32int.Ref_to_Ref_as_Ref_arrayfillstat":
  71.456 ±(99.9%) 0.250 ns/op [Average]
  (min, avg, max) = (71.214, 71.456, 72.151), stdev = 0.234
  CI (99.9%): [71.206, 71.706] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Identity32int.Ref_to_Ref_as_Ref_arrayfillstat
# Parameters: (size = 1000000)

# Run progress: 56.99% complete, ETA 04:10:57
# Fork: 1 of 3
# Warmup Iteration   1: 21659429.085 ns/op
# Warmup Iteration   2: 22881023.156 ns/op
# Warmup Iteration   3: 23031712.114 ns/op
Iteration   1: 23923610.119 ns/op
Iteration   2: 21573560.277 ns/op
Iteration   3: 22172603.261 ns/op
Iteration   4: 23546554.256 ns/op
Iteration   5: 22402892.217 ns/op

# Run progress: 57.01% complete, ETA 04:10:48
# Fork: 2 of 3
# Warmup Iteration   1: 25659067.700 ns/op
# Warmup Iteration   2: 28932358.343 ns/op
# Warmup Iteration   3: 27445958.342 ns/op
Iteration   1: 23613538.767 ns/op
Iteration   2: 22923899.636 ns/op
Iteration   3: 20585426.020 ns/op
Iteration   4: 19559837.346 ns/op
Iteration   5: 24252558.548 ns/op

# Run progress: 57.03% complete, ETA 04:10:40
# Fork: 3 of 3
# Warmup Iteration   1: 21527298.604 ns/op
# Warmup Iteration   2: 21568547.729 ns/op
# Warmup Iteration   3: 23475872.159 ns/op
Iteration   1: 25103096.537 ns/op
Iteration   2: 25466467.725 ns/op
Iteration   3: 24441535.714 ns/op
Iteration   4: 22232175.717 ns/op
Iteration   5: 22108528.978 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Identity32int.Ref_to_Ref_as_Ref_arrayfillstat":
  22927085.675 ±(99.9%) 1755080.766 ns/op [Average]
  (min, avg, max) = (19559837.346, 22927085.675, 25466467.725), stdev = 1641703.638
  CI (99.9%): [21172004.909, 24682166.441] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Identity32int.Ref_to_Ref_as_Ref_fill_fillstat
# Parameters: (size = 100)

# Run progress: 57.06% complete, ETA 04:10:31
# Fork: 1 of 3
# Warmup Iteration   1: 76.472 ns/op
# Warmup Iteration   2: 73.463 ns/op
# Warmup Iteration   3: 73.572 ns/op
Iteration   1: 73.905 ns/op
Iteration   2: 73.639 ns/op
Iteration   3: 73.405 ns/op
Iteration   4: 73.088 ns/op
Iteration   5: 73.265 ns/op

# Run progress: 57.08% complete, ETA 04:10:22
# Fork: 2 of 3
# Warmup Iteration   1: 98.274 ns/op
# Warmup Iteration   2: 73.835 ns/op
# Warmup Iteration   3: 73.733 ns/op
Iteration   1: 73.669 ns/op
Iteration   2: 73.455 ns/op
Iteration   3: 73.394 ns/op
Iteration   4: 73.646 ns/op
Iteration   5: 73.239 ns/op

# Run progress: 57.11% complete, ETA 04:10:14
# Fork: 3 of 3
# Warmup Iteration   1: 73.307 ns/op
# Warmup Iteration   2: 73.886 ns/op
# Warmup Iteration   3: 73.561 ns/op
Iteration   1: 73.925 ns/op
Iteration   2: 73.906 ns/op
Iteration   3: 73.397 ns/op
Iteration   4: 73.278 ns/op
Iteration   5: 73.503 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Identity32int.Ref_to_Ref_as_Ref_fill_fillstat":
  73.514 ±(99.9%) 0.279 ns/op [Average]
  (min, avg, max) = (73.088, 73.514, 73.925), stdev = 0.261
  CI (99.9%): [73.235, 73.793] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Identity32int.Ref_to_Ref_as_Ref_fill_fillstat
# Parameters: (size = 1000000)

# Run progress: 57.13% complete, ETA 04:10:05
# Fork: 1 of 3
# Warmup Iteration   1: 21264743.063 ns/op
# Warmup Iteration   2: 23526076.558 ns/op
# Warmup Iteration   3: 22980938.432 ns/op
Iteration   1: 22329066.130 ns/op
Iteration   2: 20161721.412 ns/op
Iteration   3: 24664514.220 ns/op
Iteration   4: 26471524.132 ns/op
Iteration   5: 29583677.706 ns/op

# Run progress: 57.16% complete, ETA 04:09:56
# Fork: 2 of 3
# Warmup Iteration   1: 22771677.778 ns/op
# Warmup Iteration   2: 22423142.600 ns/op
# Warmup Iteration   3: 22518384.267 ns/op
Iteration   1: 24327377.976 ns/op
Iteration   2: 21562213.542 ns/op
Iteration   3: 21893236.413 ns/op
Iteration   4: 22461638.889 ns/op
Iteration   5: 22436331.522 ns/op

# Run progress: 57.18% complete, ETA 04:09:48
# Fork: 3 of 3
# Warmup Iteration   1: 21983064.326 ns/op
# Warmup Iteration   2: 21584876.766 ns/op
# Warmup Iteration   3: 24007222.860 ns/op
Iteration   1: 21976322.702 ns/op
Iteration   2: 25260517.700 ns/op
Iteration   3: 26385667.744 ns/op
Iteration   4: 26955196.289 ns/op
Iteration   5: 25893028.125 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Identity32int.Ref_to_Ref_as_Ref_fill_fillstat":
  24157468.967 ±(99.9%) 2768261.071 ns/op [Average]
  (min, avg, max) = (20161721.412, 24157468.967, 29583677.706), stdev = 2589433.124
  CI (99.9%): [21389207.896, 26925730.038] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Identity32int.Ref_to_Ref_as_Ref_fillinst
# Parameters: (size = 100)

# Run progress: 57.21% complete, ETA 04:09:39
# Fork: 1 of 3
# Warmup Iteration   1: 74.411 ns/op
# Warmup Iteration   2: 73.715 ns/op
# Warmup Iteration   3: 73.924 ns/op
Iteration   1: 74.404 ns/op
Iteration   2: 73.897 ns/op
Iteration   3: 73.620 ns/op
Iteration   4: 74.375 ns/op
Iteration   5: 73.832 ns/op

# Run progress: 57.23% complete, ETA 04:09:30
# Fork: 2 of 3
# Warmup Iteration   1: 74.134 ns/op
# Warmup Iteration   2: 74.243 ns/op
# Warmup Iteration   3: 74.021 ns/op
Iteration   1: 74.900 ns/op
Iteration   2: 73.722 ns/op
Iteration   3: 73.489 ns/op
Iteration   4: 74.842 ns/op
Iteration   5: 73.904 ns/op

# Run progress: 57.25% complete, ETA 04:09:21
# Fork: 3 of 3
# Warmup Iteration   1: 73.680 ns/op
# Warmup Iteration   2: 74.019 ns/op
# Warmup Iteration   3: 74.015 ns/op
Iteration   1: 74.125 ns/op
Iteration   2: 73.561 ns/op
Iteration   3: 73.524 ns/op
Iteration   4: 73.678 ns/op
Iteration   5: 73.842 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Identity32int.Ref_to_Ref_as_Ref_fillinst":
  73.981 ±(99.9%) 0.487 ns/op [Average]
  (min, avg, max) = (73.489, 73.981, 74.900), stdev = 0.456
  CI (99.9%): [73.494, 74.468] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Identity32int.Ref_to_Ref_as_Ref_fillinst
# Parameters: (size = 1000000)

# Run progress: 57.28% complete, ETA 04:09:13
# Fork: 1 of 3
# Warmup Iteration   1: 20392271.235 ns/op
# Warmup Iteration   2: 21555595.745 ns/op
# Warmup Iteration   3: 23028951.844 ns/op
Iteration   1: 22312502.717 ns/op
Iteration   2: 27458503.378 ns/op
Iteration   3: 25382030.200 ns/op
Iteration   4: 21656703.125 ns/op
Iteration   5: 22945699.795 ns/op

# Run progress: 57.30% complete, ETA 04:09:04
# Fork: 2 of 3
# Warmup Iteration   1: 21148973.083 ns/op
# Warmup Iteration   2: 22115907.609 ns/op
# Warmup Iteration   3: 22453334.267 ns/op
Iteration   1: 24755301.829 ns/op
Iteration   2: 22965893.130 ns/op
Iteration   3: 20853856.306 ns/op
Iteration   4: 22477862.044 ns/op
Iteration   5: 20713729.592 ns/op

# Run progress: 57.33% complete, ETA 04:08:55
# Fork: 3 of 3
# Warmup Iteration   1: 24149216.093 ns/op
# Warmup Iteration   2: 22235991.848 ns/op
# Warmup Iteration   3: 21509296.085 ns/op
Iteration   1: 28786300.000 ns/op
Iteration   2: 27391550.676 ns/op
Iteration   3: 23694020.349 ns/op
Iteration   4: 21913768.617 ns/op
Iteration   5: 21505877.660 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Identity32int.Ref_to_Ref_as_Ref_fillinst":
  23654239.961 ±(99.9%) 2729482.087 ns/op [Average]
  (min, avg, max) = (20713729.592, 23654239.961, 28786300.000), stdev = 2553159.238
  CI (99.9%): [20924757.875, 26383722.048] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.IdentityOpt.Def_to_Ref_as_Ref_arrayfill
# Parameters: (size = 100)

# Run progress: 57.35% complete, ETA 04:08:47
# Fork: 1 of 3
# Warmup Iteration   1: 93.900 ns/op
# Warmup Iteration   2: 93.237 ns/op
# Warmup Iteration   3: 89.879 ns/op
Iteration   1: 90.501 ns/op
Iteration   2: 89.313 ns/op
Iteration   3: 89.734 ns/op
Iteration   4: 89.286 ns/op
Iteration   5: 89.843 ns/op

# Run progress: 57.38% complete, ETA 04:08:38
# Fork: 2 of 3
# Warmup Iteration   1: 87.442 ns/op
# Warmup Iteration   2: 86.695 ns/op
# Warmup Iteration   3: 87.298 ns/op
Iteration   1: 86.282 ns/op
Iteration   2: 86.056 ns/op
Iteration   3: 86.157 ns/op
Iteration   4: 86.322 ns/op
Iteration   5: 86.777 ns/op

# Run progress: 57.40% complete, ETA 04:08:29
# Fork: 3 of 3
# Warmup Iteration   1: 85.999 ns/op
# Warmup Iteration   2: 86.002 ns/op
# Warmup Iteration   3: 86.835 ns/op
Iteration   1: 86.712 ns/op
Iteration   2: 86.061 ns/op
Iteration   3: 86.178 ns/op
Iteration   4: 86.065 ns/op
Iteration   5: 86.997 ns/op


Result "org.openjdk.bench.valhalla.array.fill.IdentityOpt.Def_to_Ref_as_Ref_arrayfill":
  87.486 ±(99.9%) 1.807 ns/op [Average]
  (min, avg, max) = (86.056, 87.486, 90.501), stdev = 1.690
  CI (99.9%): [85.679, 89.293] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.IdentityOpt.Def_to_Ref_as_Ref_arrayfill
# Parameters: (size = 1000000)

# Run progress: 57.43% complete, ETA 04:08:20
# Fork: 1 of 3
# Warmup Iteration   1: 25609325.000 ns/op
# Warmup Iteration   2: 24661132.122 ns/op
# Warmup Iteration   3: 30346177.706 ns/op
Iteration   1: 24675238.829 ns/op
Iteration   2: 23951154.070 ns/op
Iteration   3: 23000569.136 ns/op
Iteration   4: 23734885.651 ns/op
Iteration   5: 24138575.581 ns/op

# Run progress: 57.45% complete, ETA 04:08:12
# Fork: 2 of 3
# Warmup Iteration   1: 23083996.205 ns/op
# Warmup Iteration   2: 22173895.826 ns/op
# Warmup Iteration   3: 24629214.286 ns/op
Iteration   1: 22964567.600 ns/op
Iteration   2: 22247259.043 ns/op
Iteration   3: 22158826.087 ns/op
Iteration   4: 22557240.756 ns/op
Iteration   5: 19028787.037 ns/op

# Run progress: 57.48% complete, ETA 04:08:03
# Fork: 3 of 3
# Warmup Iteration   1: 21107648.438 ns/op
# Warmup Iteration   2: 29740857.143 ns/op
# Warmup Iteration   3: 29205875.000 ns/op
Iteration   1: 23590665.698 ns/op
Iteration   2: 23638961.256 ns/op
Iteration   3: 22291367.761 ns/op
Iteration   4: 22776065.341 ns/op
Iteration   5: 23899806.186 ns/op


Result "org.openjdk.bench.valhalla.array.fill.IdentityOpt.Def_to_Ref_as_Ref_arrayfill":
  22976931.335 ±(99.9%) 1425751.796 ns/op [Average]
  (min, avg, max) = (19028787.037, 22976931.335, 24675238.829), stdev = 1333649.115
  CI (99.9%): [21551179.539, 24402683.132] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.IdentityOpt.Def_to_Ref_as_Ref_fill
# Parameters: (size = 100)

# Run progress: 57.50% complete, ETA 04:07:54
# Fork: 1 of 3
# Warmup Iteration   1: 184.122 ns/op
# Warmup Iteration   2: 179.092 ns/op
# Warmup Iteration   3: 176.685 ns/op
Iteration   1: 176.764 ns/op
Iteration   2: 177.870 ns/op
Iteration   3: 176.486 ns/op
Iteration   4: 176.879 ns/op
Iteration   5: 176.456 ns/op

# Run progress: 57.52% complete, ETA 04:07:46
# Fork: 2 of 3
# Warmup Iteration   1: 195.670 ns/op
# Warmup Iteration   2: 179.104 ns/op
# Warmup Iteration   3: 180.962 ns/op
Iteration   1: 179.089 ns/op
Iteration   2: 180.431 ns/op
Iteration   3: 180.179 ns/op
Iteration   4: 179.814 ns/op
Iteration   5: 179.502 ns/op

# Run progress: 57.55% complete, ETA 04:07:37
# Fork: 3 of 3
# Warmup Iteration   1: 190.198 ns/op
# Warmup Iteration   2: 182.590 ns/op
# Warmup Iteration   3: 179.179 ns/op
Iteration   1: 178.475 ns/op
Iteration   2: 179.303 ns/op
Iteration   3: 198.012 ns/op
Iteration   4: 182.791 ns/op
Iteration   5: 185.816 ns/op


Result "org.openjdk.bench.valhalla.array.fill.IdentityOpt.Def_to_Ref_as_Ref_fill":
  180.524 ±(99.9%) 5.826 ns/op [Average]
  (min, avg, max) = (176.456, 180.524, 198.012), stdev = 5.449
  CI (99.9%): [174.699, 186.350] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.IdentityOpt.Def_to_Ref_as_Ref_fill
# Parameters: (size = 1000000)

# Run progress: 57.57% complete, ETA 04:07:28
# Fork: 1 of 3
# Warmup Iteration   1: 2682110.963 ns/op
# Warmup Iteration   2: 2022652.416 ns/op
# Warmup Iteration   3: 1836075.565 ns/op
Iteration   1: 1840244.026 ns/op
Iteration   2: 1894207.783 ns/op
Iteration   3: 1885081.308 ns/op
Iteration   4: 1851620.115 ns/op
Iteration   5: 1978004.076 ns/op

# Run progress: 57.60% complete, ETA 04:07:19
# Fork: 2 of 3
# Warmup Iteration   1: 2533129.594 ns/op
# Warmup Iteration   2: 1980516.189 ns/op
# Warmup Iteration   3: 2011398.343 ns/op
Iteration   1: 1956620.246 ns/op
Iteration   2: 1841615.514 ns/op
Iteration   3: 1866697.258 ns/op
Iteration   4: 1833471.165 ns/op
Iteration   5: 1860255.402 ns/op

# Run progress: 57.62% complete, ETA 04:07:11
# Fork: 3 of 3
# Warmup Iteration   1: 2710682.193 ns/op
# Warmup Iteration   2: 1899404.661 ns/op
# Warmup Iteration   3: 1867723.920 ns/op
Iteration   1: 1873152.649 ns/op
Iteration   2: 2037408.603 ns/op
Iteration   3: 1838666.131 ns/op
Iteration   4: 1812978.300 ns/op
Iteration   5: 2127247.105 ns/op


Result "org.openjdk.bench.valhalla.array.fill.IdentityOpt.Def_to_Ref_as_Ref_fill":
  1899817.979 ±(99.9%) 94139.278 ns/op [Average]
  (min, avg, max) = (1812978.300, 1899817.979, 2127247.105), stdev = 88057.939
  CI (99.9%): [1805678.701, 1993957.257] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.IdentityOpt.New_to_Ref_as_Ref_arrayfill
# Parameters: (size = 100)

# Run progress: 57.65% complete, ETA 04:07:02
# Fork: 1 of 3
# Warmup Iteration   1: 94.061 ns/op
# Warmup Iteration   2: 89.179 ns/op
# Warmup Iteration   3: 80.619 ns/op
Iteration   1: 83.270 ns/op
Iteration   2: 87.964 ns/op
Iteration   3: 81.520 ns/op
Iteration   4: 84.253 ns/op
Iteration   5: 80.593 ns/op

# Run progress: 57.67% complete, ETA 04:06:53
# Fork: 2 of 3
# Warmup Iteration   1: 95.794 ns/op
# Warmup Iteration   2: 93.351 ns/op
# Warmup Iteration   3: 89.808 ns/op
Iteration   1: 89.539 ns/op
Iteration   2: 90.036 ns/op
Iteration   3: 89.797 ns/op
Iteration   4: 89.523 ns/op
Iteration   5: 89.822 ns/op

# Run progress: 57.70% complete, ETA 04:06:45
# Fork: 3 of 3
# Warmup Iteration   1: 95.393 ns/op
# Warmup Iteration   2: 93.964 ns/op
# Warmup Iteration   3: 89.934 ns/op
Iteration   1: 89.822 ns/op
Iteration   2: 90.013 ns/op
Iteration   3: 89.534 ns/op
Iteration   4: 89.436 ns/op
Iteration   5: 89.729 ns/op


Result "org.openjdk.bench.valhalla.array.fill.IdentityOpt.New_to_Ref_as_Ref_arrayfill":
  87.657 ±(99.9%) 3.633 ns/op [Average]
  (min, avg, max) = (80.593, 87.657, 90.036), stdev = 3.398
  CI (99.9%): [84.024, 91.289] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.IdentityOpt.New_to_Ref_as_Ref_arrayfill
# Parameters: (size = 1000000)

# Run progress: 57.72% complete, ETA 04:06:36
# Fork: 1 of 3
# Warmup Iteration   1: 22529303.457 ns/op
# Warmup Iteration   2: 22994464.977 ns/op
# Warmup Iteration   3: 22368389.822 ns/op
Iteration   1: 24464189.500 ns/op
Iteration   2: 22636671.311 ns/op
Iteration   3: 21949180.851 ns/op
Iteration   4: 21971560.674 ns/op
Iteration   5: 20204780.000 ns/op

# Run progress: 57.75% complete, ETA 04:06:27
# Fork: 2 of 3
# Warmup Iteration   1: 22364212.848 ns/op
# Warmup Iteration   2: 23186780.295 ns/op
# Warmup Iteration   3: 23126199.818 ns/op
Iteration   1: 22742929.622 ns/op
Iteration   2: 26177972.231 ns/op
Iteration   3: 27077690.789 ns/op
Iteration   4: 22861659.091 ns/op
Iteration   5: 23344747.159 ns/op

# Run progress: 57.77% complete, ETA 04:06:18
# Fork: 3 of 3
# Warmup Iteration   1: 21540758.688 ns/op
# Warmup Iteration   2: 22829066.667 ns/op
# Warmup Iteration   3: 21404078.979 ns/op
Iteration   1: 23237169.523 ns/op
Iteration   2: 21159095.500 ns/op
Iteration   3: 23688321.698 ns/op
Iteration   4: 23804886.628 ns/op
Iteration   5: 22932501.844 ns/op


Result "org.openjdk.bench.valhalla.array.fill.IdentityOpt.New_to_Ref_as_Ref_arrayfill":
  23216890.428 ±(99.9%) 1874624.773 ns/op [Average]
  (min, avg, max) = (20204780.000, 23216890.428, 27077690.789), stdev = 1753525.176
  CI (99.9%): [21342265.655, 25091515.201] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.IdentityOpt.New_to_Ref_as_Ref_fill
# Parameters: (size = 100)

# Run progress: 57.79% complete, ETA 04:06:10
# Fork: 1 of 3
# Warmup Iteration   1: 95.580 ns/op
# Warmup Iteration   2: 94.512 ns/op
# Warmup Iteration   3: 90.592 ns/op
Iteration   1: 93.118 ns/op
Iteration   2: 90.070 ns/op
Iteration   3: 90.001 ns/op
Iteration   4: 89.953 ns/op
Iteration   5: 90.197 ns/op

# Run progress: 57.82% complete, ETA 04:06:01
# Fork: 2 of 3
# Warmup Iteration   1: 100.500 ns/op
# Warmup Iteration   2: 94.051 ns/op
# Warmup Iteration   3: 90.499 ns/op
Iteration   1: 90.119 ns/op
Iteration   2: 89.775 ns/op
Iteration   3: 92.260 ns/op
Iteration   4: 89.617 ns/op
Iteration   5: 89.734 ns/op

# Run progress: 57.84% complete, ETA 04:05:52
# Fork: 3 of 3
# Warmup Iteration   1: 91.501 ns/op
# Warmup Iteration   2: 90.997 ns/op
# Warmup Iteration   3: 82.178 ns/op
Iteration   1: 81.027 ns/op
Iteration   2: 81.859 ns/op
Iteration   3: 81.278 ns/op
Iteration   4: 80.938 ns/op
Iteration   5: 81.661 ns/op


Result "org.openjdk.bench.valhalla.array.fill.IdentityOpt.New_to_Ref_as_Ref_fill":
  87.440 ±(99.9%) 4.878 ns/op [Average]
  (min, avg, max) = (80.938, 87.440, 93.118), stdev = 4.562
  CI (99.9%): [82.563, 92.318] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.IdentityOpt.New_to_Ref_as_Ref_fill
# Parameters: (size = 1000000)

# Run progress: 57.87% complete, ETA 04:05:44
# Fork: 1 of 3
# Warmup Iteration   1: 23107979.159 ns/op
# Warmup Iteration   2: 24496572.429 ns/op
# Warmup Iteration   3: 22850582.400 ns/op
Iteration   1: 23016705.556 ns/op
Iteration   2: 23093060.614 ns/op
Iteration   3: 22585050.933 ns/op
Iteration   4: 26552006.410 ns/op
Iteration   5: 23116575.750 ns/op

# Run progress: 57.89% complete, ETA 04:05:35
# Fork: 2 of 3
# Warmup Iteration   1: 23471956.432 ns/op
# Warmup Iteration   2: 25977207.300 ns/op
# Warmup Iteration   3: 30776565.636 ns/op
Iteration   1: 25356746.951 ns/op
Iteration   2: 23089004.622 ns/op
Iteration   3: 21813746.447 ns/op
Iteration   4: 23168071.977 ns/op
Iteration   5: 22738544.444 ns/op

# Run progress: 57.92% complete, ETA 04:05:26
# Fork: 3 of 3
# Warmup Iteration   1: 23623547.488 ns/op
# Warmup Iteration   2: 21738914.894 ns/op
# Warmup Iteration   3: 23661768.395 ns/op
Iteration   1: 24443799.595 ns/op
Iteration   2: 23644611.442 ns/op
Iteration   3: 22062473.404 ns/op
Iteration   4: 20764294.224 ns/op
Iteration   5: 25610897.925 ns/op


Result "org.openjdk.bench.valhalla.array.fill.IdentityOpt.New_to_Ref_as_Ref_fill":
  23403706.020 ±(99.9%) 1632024.638 ns/op [Average]
  (min, avg, max) = (20764294.224, 23403706.020, 26552006.410), stdev = 1526596.859
  CI (99.9%): [21771681.382, 25035730.657] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.IdentityOpt.Ref_to_Ref_as_Ref_arrayfillinst
# Parameters: (size = 100)

# Run progress: 57.94% complete, ETA 04:05:18
# Fork: 1 of 3
# Warmup Iteration   1: 73.067 ns/op
# Warmup Iteration   2: 71.504 ns/op
# Warmup Iteration   3: 72.419 ns/op
Iteration   1: 71.792 ns/op
Iteration   2: 71.970 ns/op
Iteration   3: 72.233 ns/op
Iteration   4: 71.803 ns/op
Iteration   5: 71.569 ns/op

# Run progress: 57.97% complete, ETA 04:05:09
# Fork: 2 of 3
# Warmup Iteration   1: 72.154 ns/op
# Warmup Iteration   2: 71.644 ns/op
# Warmup Iteration   3: 71.571 ns/op
Iteration   1: 72.088 ns/op
Iteration   2: 72.515 ns/op
Iteration   3: 71.808 ns/op
Iteration   4: 71.924 ns/op
Iteration   5: 72.002 ns/op

# Run progress: 57.99% complete, ETA 04:05:00
# Fork: 3 of 3
# Warmup Iteration   1: 73.467 ns/op
# Warmup Iteration   2: 71.492 ns/op
# Warmup Iteration   3: 71.849 ns/op
Iteration   1: 71.660 ns/op
Iteration   2: 72.016 ns/op
Iteration   3: 71.917 ns/op
Iteration   4: 71.556 ns/op
Iteration   5: 71.756 ns/op


Result "org.openjdk.bench.valhalla.array.fill.IdentityOpt.Ref_to_Ref_as_Ref_arrayfillinst":
  71.907 ±(99.9%) 0.269 ns/op [Average]
  (min, avg, max) = (71.556, 71.907, 72.515), stdev = 0.252
  CI (99.9%): [71.638, 72.177] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.IdentityOpt.Ref_to_Ref_as_Ref_arrayfillinst
# Parameters: (size = 1000000)

# Run progress: 58.01% complete, ETA 04:04:52
# Fork: 1 of 3
# Warmup Iteration   1: 24045154.070 ns/op
# Warmup Iteration   2: 23498782.205 ns/op
# Warmup Iteration   3: 23721153.093 ns/op
Iteration   1: 22738848.717 ns/op
Iteration   2: 21709138.021 ns/op
Iteration   3: 23525947.674 ns/op
Iteration   4: 25750025.000 ns/op
Iteration   5: 28360913.194 ns/op

# Run progress: 58.04% complete, ETA 04:04:43
# Fork: 2 of 3
# Warmup Iteration   1: 25577891.675 ns/op
# Warmup Iteration   2: 22119827.891 ns/op
# Warmup Iteration   3: 22389384.043 ns/op
Iteration   1: 25227229.683 ns/op
Iteration   2: 22673179.622 ns/op
Iteration   3: 22577121.289 ns/op
Iteration   4: 23819335.279 ns/op
Iteration   5: 24372182.524 ns/op

# Run progress: 58.06% complete, ETA 04:04:34
# Fork: 3 of 3
# Warmup Iteration   1: 22335733.696 ns/op
# Warmup Iteration   2: 19987807.176 ns/op
# Warmup Iteration   3: 26315132.462 ns/op
Iteration   1: 24885653.762 ns/op
Iteration   2: 24590890.244 ns/op
Iteration   3: 21898507.085 ns/op
Iteration   4: 27571070.946 ns/op
Iteration   5: 26087789.538 ns/op


Result "org.openjdk.bench.valhalla.array.fill.IdentityOpt.Ref_to_Ref_as_Ref_arrayfillinst":
  24385855.505 ±(99.9%) 2119593.412 ns/op [Average]
  (min, avg, max) = (21709138.021, 24385855.505, 28360913.194), stdev = 1982668.993
  CI (99.9%): [22266262.093, 26505448.917] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.IdentityOpt.Ref_to_Ref_as_Ref_arrayfillstat
# Parameters: (size = 100)

# Run progress: 58.09% complete, ETA 04:04:26
# Fork: 1 of 3
# Warmup Iteration   1: 67.831 ns/op
# Warmup Iteration   2: 70.132 ns/op
# Warmup Iteration   3: 71.456 ns/op
Iteration   1: 71.456 ns/op
Iteration   2: 71.498 ns/op
Iteration   3: 71.345 ns/op
Iteration   4: 71.315 ns/op
Iteration   5: 71.256 ns/op

# Run progress: 58.11% complete, ETA 04:04:17
# Fork: 2 of 3
# Warmup Iteration   1: 67.742 ns/op
# Warmup Iteration   2: 69.880 ns/op
# Warmup Iteration   3: 72.330 ns/op
Iteration   1: 73.178 ns/op
Iteration   2: 71.911 ns/op
Iteration   3: 72.673 ns/op
Iteration   4: 71.244 ns/op
Iteration   5: 71.303 ns/op

# Run progress: 58.14% complete, ETA 04:04:08
# Fork: 3 of 3
# Warmup Iteration   1: 67.757 ns/op
# Warmup Iteration   2: 69.907 ns/op
# Warmup Iteration   3: 71.421 ns/op
Iteration   1: 71.416 ns/op
Iteration   2: 71.650 ns/op
Iteration   3: 71.325 ns/op
Iteration   4: 71.423 ns/op
Iteration   5: 71.500 ns/op


Result "org.openjdk.bench.valhalla.array.fill.IdentityOpt.Ref_to_Ref_as_Ref_arrayfillstat":
  71.633 ±(99.9%) 0.598 ns/op [Average]
  (min, avg, max) = (71.244, 71.633, 73.178), stdev = 0.560
  CI (99.9%): [71.035, 72.231] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.IdentityOpt.Ref_to_Ref_as_Ref_arrayfillstat
# Parameters: (size = 1000000)

# Run progress: 58.16% complete, ETA 04:03:59
# Fork: 1 of 3
# Warmup Iteration   1: 25312662.500 ns/op
# Warmup Iteration   2: 23443166.682 ns/op
# Warmup Iteration   3: 23507695.744 ns/op
Iteration   1: 22960404.341 ns/op
Iteration   2: 26664713.667 ns/op
Iteration   3: 26690750.000 ns/op
Iteration   4: 25417143.750 ns/op
Iteration   5: 24171536.714 ns/op

# Run progress: 58.19% complete, ETA 04:03:51
# Fork: 2 of 3
# Warmup Iteration   1: 22266716.500 ns/op
# Warmup Iteration   2: 26641756.579 ns/op
# Warmup Iteration   3: 22427684.783 ns/op
Iteration   1: 23493767.442 ns/op
Iteration   2: 22509710.200 ns/op
Iteration   3: 25806643.750 ns/op
Iteration   4: 23004423.156 ns/op
Iteration   5: 22285702.913 ns/op

# Run progress: 58.21% complete, ETA 04:03:42
# Fork: 3 of 3
# Warmup Iteration   1: 25986715.625 ns/op
# Warmup Iteration   2: 22924495.356 ns/op
# Warmup Iteration   3: 22300171.196 ns/op
Iteration   1: 27658540.579 ns/op
Iteration   2: 29972625.000 ns/op
Iteration   3: 24143534.714 ns/op
Iteration   4: 22378511.761 ns/op
Iteration   5: 21170939.633 ns/op


Result "org.openjdk.bench.valhalla.array.fill.IdentityOpt.Ref_to_Ref_as_Ref_arrayfillstat":
  24555263.175 ±(99.9%) 2590701.297 ns/op [Average]
  (min, avg, max) = (21170939.633, 24555263.175, 29972625.000), stdev = 2423343.601
  CI (99.9%): [21964561.878, 27145964.472] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.IdentityOpt.Ref_to_Ref_as_Ref_fill_fillstat
# Parameters: (size = 100)

# Run progress: 58.24% complete, ETA 04:03:33
# Fork: 1 of 3
# Warmup Iteration   1: 73.630 ns/op
# Warmup Iteration   2: 74.358 ns/op
# Warmup Iteration   3: 73.254 ns/op
Iteration   1: 73.418 ns/op
Iteration   2: 73.374 ns/op
Iteration   3: 73.315 ns/op
Iteration   4: 73.225 ns/op
Iteration   5: 73.330 ns/op

# Run progress: 58.26% complete, ETA 04:03:25
# Fork: 2 of 3
# Warmup Iteration   1: 73.748 ns/op
# Warmup Iteration   2: 74.331 ns/op
# Warmup Iteration   3: 73.759 ns/op
Iteration   1: 73.521 ns/op
Iteration   2: 73.261 ns/op
Iteration   3: 73.314 ns/op
Iteration   4: 74.251 ns/op
Iteration   5: 73.481 ns/op

# Run progress: 58.28% complete, ETA 04:03:16
# Fork: 3 of 3
# Warmup Iteration   1: 73.397 ns/op
# Warmup Iteration   2: 74.107 ns/op
# Warmup Iteration   3: 73.289 ns/op
Iteration   1: 73.640 ns/op
Iteration   2: 73.602 ns/op
Iteration   3: 73.340 ns/op
Iteration   4: 73.314 ns/op
Iteration   5: 73.441 ns/op


Result "org.openjdk.bench.valhalla.array.fill.IdentityOpt.Ref_to_Ref_as_Ref_fill_fillstat":
  73.455 ±(99.9%) 0.268 ns/op [Average]
  (min, avg, max) = (73.225, 73.455, 74.251), stdev = 0.251
  CI (99.9%): [73.187, 73.724] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.IdentityOpt.Ref_to_Ref_as_Ref_fill_fillstat
# Parameters: (size = 1000000)

# Run progress: 58.31% complete, ETA 04:03:07
# Fork: 1 of 3
# Warmup Iteration   1: 23013449.795 ns/op
# Warmup Iteration   2: 25497817.725 ns/op
# Warmup Iteration   3: 27546463.973 ns/op
Iteration   1: 26147335.462 ns/op
Iteration   2: 22735595.356 ns/op
Iteration   3: 21609648.936 ns/op
Iteration   4: 23089263.273 ns/op
Iteration   5: 23981653.786 ns/op

# Run progress: 58.33% complete, ETA 04:02:59
# Fork: 2 of 3
# Warmup Iteration   1: 21017810.771 ns/op
# Warmup Iteration   2: 25260103.125 ns/op
# Warmup Iteration   3: 22470918.478 ns/op
Iteration   1: 23677081.395 ns/op
Iteration   2: 21676983.521 ns/op
Iteration   3: 23606924.419 ns/op
Iteration   4: 25647120.850 ns/op
Iteration   5: 18245467.825 ns/op

# Run progress: 58.36% complete, ETA 04:02:50
# Fork: 3 of 3
# Warmup Iteration   1: 22440567.600 ns/op
# Warmup Iteration   2: 29575955.943 ns/op
# Warmup Iteration   3: 25584197.900 ns/op
Iteration   1: 21394355.896 ns/op
Iteration   2: 21176692.163 ns/op
Iteration   3: 22325227.851 ns/op
Iteration   4: 21804706.553 ns/op
Iteration   5: 23506188.432 ns/op


Result "org.openjdk.bench.valhalla.array.fill.IdentityOpt.Ref_to_Ref_as_Ref_fill_fillstat":
  22708283.048 ±(99.9%) 2057106.493 ns/op [Average]
  (min, avg, max) = (18245467.825, 22708283.048, 26147335.462), stdev = 1924218.690
  CI (99.9%): [20651176.555, 24765389.540] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.IdentityOpt.Ref_to_Ref_as_Ref_fillinst
# Parameters: (size = 100)

# Run progress: 58.38% complete, ETA 04:02:41
# Fork: 1 of 3
# Warmup Iteration   1: 84.502 ns/op
# Warmup Iteration   2: 74.249 ns/op
# Warmup Iteration   3: 74.264 ns/op
Iteration   1: 73.912 ns/op
Iteration   2: 74.059 ns/op
Iteration   3: 74.116 ns/op
Iteration   4: 75.040 ns/op
Iteration   5: 73.922 ns/op

# Run progress: 58.41% complete, ETA 04:02:33
# Fork: 2 of 3
# Warmup Iteration   1: 73.340 ns/op
# Warmup Iteration   2: 73.876 ns/op
# Warmup Iteration   3: 73.783 ns/op
Iteration   1: 73.680 ns/op
Iteration   2: 73.771 ns/op
Iteration   3: 74.283 ns/op
Iteration   4: 73.575 ns/op
Iteration   5: 73.578 ns/op

# Run progress: 58.43% complete, ETA 04:02:24
# Fork: 3 of 3
# Warmup Iteration   1: 74.343 ns/op
# Warmup Iteration   2: 74.748 ns/op
# Warmup Iteration   3: 73.654 ns/op
Iteration   1: 73.635 ns/op
Iteration   2: 73.643 ns/op
Iteration   3: 73.345 ns/op
Iteration   4: 74.135 ns/op
Iteration   5: 73.867 ns/op


Result "org.openjdk.bench.valhalla.array.fill.IdentityOpt.Ref_to_Ref_as_Ref_fillinst":
  73.904 ±(99.9%) 0.433 ns/op [Average]
  (min, avg, max) = (73.345, 73.904, 75.040), stdev = 0.405
  CI (99.9%): [73.471, 74.337] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.IdentityOpt.Ref_to_Ref_as_Ref_fillinst
# Parameters: (size = 1000000)

# Run progress: 58.46% complete, ETA 04:02:15
# Fork: 1 of 3
# Warmup Iteration   1: 21931689.326 ns/op
# Warmup Iteration   2: 20986342.021 ns/op
# Warmup Iteration   3: 23606848.500 ns/op
Iteration   1: 26060006.410 ns/op
Iteration   2: 23014947.909 ns/op
Iteration   3: 22130328.804 ns/op
Iteration   4: 22456312.956 ns/op
Iteration   5: 22495857.422 ns/op

# Run progress: 58.48% complete, ETA 04:02:06
# Fork: 2 of 3
# Warmup Iteration   1: 21442584.213 ns/op
# Warmup Iteration   2: 18790913.593 ns/op
# Warmup Iteration   3: 22738995.378 ns/op
Iteration   1: 24115000.976 ns/op
Iteration   2: 23154938.455 ns/op
Iteration   3: 23921103.227 ns/op
Iteration   4: 24849447.146 ns/op
Iteration   5: 30623926.471 ns/op

# Run progress: 58.50% complete, ETA 04:01:58
# Fork: 3 of 3
# Warmup Iteration   1: 23930199.405 ns/op
# Warmup Iteration   2: 21151138.896 ns/op
# Warmup Iteration   3: 21765906.043 ns/op
Iteration   1: 23066142.045 ns/op
Iteration   2: 22487037.044 ns/op
Iteration   3: 22840610.178 ns/op
Iteration   4: 24083287.791 ns/op
Iteration   5: 23389847.523 ns/op


Result "org.openjdk.bench.valhalla.array.fill.IdentityOpt.Ref_to_Ref_as_Ref_fillinst":
  23912586.291 ±(99.9%) 2276021.960 ns/op [Average]
  (min, avg, max) = (22130328.804, 23912586.291, 30623926.471), stdev = 2128992.353
  CI (99.9%): [21636564.331, 26188608.250] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline128int.Def_to_Ref_as_Ref_arrayfill
# Parameters: (size = 100)

# Run progress: 58.53% complete, ETA 04:01:49
# Fork: 1 of 3
# Warmup Iteration   1: 286.118 ns/op
# Warmup Iteration   2: 335.779 ns/op
# Warmup Iteration   3: 137.025 ns/op
Iteration   1: 136.887 ns/op
Iteration   2: 137.608 ns/op
Iteration   3: 136.674 ns/op
Iteration   4: 135.917 ns/op
Iteration   5: 135.922 ns/op

# Run progress: 58.55% complete, ETA 04:01:40
# Fork: 2 of 3
# Warmup Iteration   1: 284.693 ns/op
# Warmup Iteration   2: 290.121 ns/op
# Warmup Iteration   3: 137.796 ns/op
Iteration   1: 136.761 ns/op
Iteration   2: 135.826 ns/op
Iteration   3: 136.531 ns/op
Iteration   4: 136.228 ns/op
Iteration   5: 136.761 ns/op

# Run progress: 58.58% complete, ETA 04:01:32
# Fork: 3 of 3
# Warmup Iteration   1: 277.089 ns/op
# Warmup Iteration   2: 290.999 ns/op
# Warmup Iteration   3: 137.703 ns/op
Iteration   1: 137.470 ns/op
Iteration   2: 137.181 ns/op
Iteration   3: 138.656 ns/op
Iteration   4: 135.397 ns/op
Iteration   5: 135.652 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline128int.Def_to_Ref_as_Ref_arrayfill":
  136.631 ±(99.9%) 0.925 ns/op [Average]
  (min, avg, max) = (135.397, 136.631, 138.656), stdev = 0.865
  CI (99.9%): [135.706, 137.556] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline128int.Def_to_Ref_as_Ref_arrayfill
# Parameters: (size = 1000000)

# Run progress: 58.60% complete, ETA 04:01:23
# Fork: 1 of 3
# Warmup Iteration   1: 21680532.787 ns/op
# Warmup Iteration   2: 23382217.818 ns/op
# Warmup Iteration   3: 23903367.048 ns/op
Iteration   1: 22704364.822 ns/op
Iteration   2: 26455051.282 ns/op
Iteration   3: 24810170.619 ns/op
Iteration   4: 23495625.000 ns/op
Iteration   5: 23597604.651 ns/op

# Run progress: 58.63% complete, ETA 04:01:14
# Fork: 2 of 3
# Warmup Iteration   1: 23525528.093 ns/op
# Warmup Iteration   2: 24263517.857 ns/op
# Warmup Iteration   3: 23396625.000 ns/op
Iteration   1: 24596809.116 ns/op
Iteration   2: 31231092.182 ns/op
Iteration   3: 28235579.861 ns/op
Iteration   4: 22740674.089 ns/op
Iteration   5: 24099606.143 ns/op

# Run progress: 58.65% complete, ETA 04:01:06
# Fork: 3 of 3
# Warmup Iteration   1: 22953378.689 ns/op
# Warmup Iteration   2: 20020446.078 ns/op
# Warmup Iteration   3: 18150955.357 ns/op
Iteration   1: 22180551.630 ns/op
Iteration   2: 24995859.143 ns/op
Iteration   3: 24913226.634 ns/op
Iteration   4: 22894704.622 ns/op
Iteration   5: 22182306.152 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline128int.Def_to_Ref_as_Ref_arrayfill":
  24608881.730 ±(99.9%) 2635127.174 ns/op [Average]
  (min, avg, max) = (22180551.630, 24608881.730, 31231092.182), stdev = 2464899.594
  CI (99.9%): [21973754.555, 27244008.904] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline128int.Def_to_Ref_as_Ref_fill
# Parameters: (size = 100)

# Run progress: 58.68% complete, ETA 04:00:57
# Fork: 1 of 3
# Warmup Iteration   1: 460.901 ns/op
# Warmup Iteration   2: 425.627 ns/op
# Warmup Iteration   3: 348.791 ns/op
Iteration   1: 350.655 ns/op
Iteration   2: 344.765 ns/op
Iteration   3: 341.914 ns/op
Iteration   4: 336.795 ns/op
Iteration   5: 342.739 ns/op

# Run progress: 58.70% complete, ETA 04:00:48
# Fork: 2 of 3
# Warmup Iteration   1: 476.937 ns/op
# Warmup Iteration   2: 405.413 ns/op
# Warmup Iteration   3: 347.106 ns/op
Iteration   1: 342.020 ns/op
Iteration   2: 342.870 ns/op
Iteration   3: 342.704 ns/op
Iteration   4: 345.364 ns/op
Iteration   5: 344.078 ns/op

# Run progress: 58.73% complete, ETA 04:00:40
# Fork: 3 of 3
# Warmup Iteration   1: 488.452 ns/op
# Warmup Iteration   2: 404.450 ns/op
# Warmup Iteration   3: 357.805 ns/op
Iteration   1: 420.408 ns/op
Iteration   2: 343.148 ns/op
Iteration   3: 341.912 ns/op
Iteration   4: 343.622 ns/op
Iteration   5: 343.250 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline128int.Def_to_Ref_as_Ref_fill":
  348.416 ±(99.9%) 21.501 ns/op [Average]
  (min, avg, max) = (336.795, 348.416, 420.408), stdev = 20.112
  CI (99.9%): [326.915, 369.917] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline128int.Def_to_Ref_as_Ref_fill
# Parameters: (size = 1000000)

# Run progress: 58.75% complete, ETA 04:00:31
# Fork: 1 of 3
# Warmup Iteration   1: 9098689.189 ns/op
# Warmup Iteration   2: 5133881.558 ns/op
# Warmup Iteration   3: 3562856.954 ns/op
Iteration   1: 3653198.624 ns/op
Iteration   2: 3537644.374 ns/op
Iteration   3: 3598826.165 ns/op
Iteration   4: 3511666.813 ns/op
Iteration   5: 3597601.719 ns/op

# Run progress: 58.77% complete, ETA 04:00:22
# Fork: 2 of 3
# Warmup Iteration   1: 8101040.000 ns/op
# Warmup Iteration   2: 4521291.291 ns/op
# Warmup Iteration   3: 3539442.982 ns/op
Iteration   1: 3621241.785 ns/op
Iteration   2: 3558878.092 ns/op
Iteration   3: 3580233.067 ns/op
Iteration   4: 3503017.132 ns/op
Iteration   5: 3538028.409 ns/op

# Run progress: 58.80% complete, ETA 04:00:14
# Fork: 3 of 3
# Warmup Iteration   1: 6970067.531 ns/op
# Warmup Iteration   2: 3878302.042 ns/op
# Warmup Iteration   3: 3610689.139 ns/op
Iteration   1: 3566897.155 ns/op
Iteration   2: 3547582.746 ns/op
Iteration   3: 3557733.156 ns/op
Iteration   4: 3567882.923 ns/op
Iteration   5: 3607543.464 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline128int.Def_to_Ref_as_Ref_fill":
  3569865.042 ±(99.9%) 43710.107 ns/op [Average]
  (min, avg, max) = (3503017.132, 3569865.042, 3653198.624), stdev = 40886.461
  CI (99.9%): [3526154.934, 3613575.149] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline128int.Def_to_Val_as_Val_arrayfill
# Parameters: (size = 100)

# Run progress: 58.82% complete, ETA 04:00:05
# Fork: 1 of 3
# Warmup Iteration   1: 283.634 ns/op
# Warmup Iteration   2: 337.059 ns/op
# Warmup Iteration   3: 138.140 ns/op
Iteration   1: 138.350 ns/op
Iteration   2: 136.056 ns/op
Iteration   3: 136.541 ns/op
Iteration   4: 135.743 ns/op
Iteration   5: 136.159 ns/op

# Run progress: 58.85% complete, ETA 03:59:56
# Fork: 2 of 3
# Warmup Iteration   1: 272.064 ns/op
# Warmup Iteration   2: 226.404 ns/op
# Warmup Iteration   3: 127.572 ns/op
Iteration   1: 126.817 ns/op
Iteration   2: 124.897 ns/op
Iteration   3: 125.171 ns/op
Iteration   4: 125.484 ns/op
Iteration   5: 125.400 ns/op

# Run progress: 58.87% complete, ETA 03:59:48
# Fork: 3 of 3
# Warmup Iteration   1: 283.524 ns/op
# Warmup Iteration   2: 293.988 ns/op
# Warmup Iteration   3: 137.642 ns/op
Iteration   1: 136.586 ns/op
Iteration   2: 135.925 ns/op
Iteration   3: 135.883 ns/op
Iteration   4: 136.336 ns/op
Iteration   5: 135.935 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline128int.Def_to_Val_as_Val_arrayfill":
  132.752 ±(99.9%) 5.686 ns/op [Average]
  (min, avg, max) = (124.897, 132.752, 138.350), stdev = 5.318
  CI (99.9%): [127.067, 138.438] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline128int.Def_to_Val_as_Val_arrayfill
# Parameters: (size = 1000000)

# Run progress: 58.90% complete, ETA 03:59:39
# Fork: 1 of 3
# Warmup Iteration   1: 21680262.404 ns/op
# Warmup Iteration   2: 22273706.522 ns/op
# Warmup Iteration   3: 24505253.976 ns/op
Iteration   1: 19980359.471 ns/op
Iteration   2: 22023787.130 ns/op
Iteration   3: 23788751.930 ns/op
Iteration   4: 19966845.588 ns/op
Iteration   5: 26113338.525 ns/op

# Run progress: 58.92% complete, ETA 03:59:30
# Fork: 2 of 3
# Warmup Iteration   1: 19613110.057 ns/op
# Warmup Iteration   2: 26685121.711 ns/op
# Warmup Iteration   3: 25623375.000 ns/op
Iteration   1: 23227415.727 ns/op
Iteration   2: 22565406.489 ns/op
Iteration   3: 24326743.071 ns/op
Iteration   4: 31007378.788 ns/op
Iteration   5: 23591605.628 ns/op

# Run progress: 58.95% complete, ETA 03:59:22
# Fork: 3 of 3
# Warmup Iteration   1: 22588938.391 ns/op
# Warmup Iteration   2: 22526090.733 ns/op
# Warmup Iteration   3: 23359000.000 ns/op
Iteration   1: 21509438.375 ns/op
Iteration   2: 25551478.125 ns/op
Iteration   3: 22227221.022 ns/op
Iteration   4: 25383860.400 ns/op
Iteration   5: 25143437.500 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline128int.Def_to_Val_as_Val_arrayfill":
  23760471.185 ±(99.9%) 2955309.461 ns/op [Average]
  (min, avg, max) = (19966845.588, 23760471.185, 31007378.788), stdev = 2764398.304
  CI (99.9%): [20805161.723, 26715780.646] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline128int.Def_to_Val_as_Val_fill
# Parameters: (size = 100)

# Run progress: 58.97% complete, ETA 03:59:13
# Fork: 1 of 3
# Warmup Iteration   1: 456.159 ns/op
# Warmup Iteration   2: 396.353 ns/op
# Warmup Iteration   3: 340.356 ns/op
Iteration   1: 340.026 ns/op
Iteration   2: 338.635 ns/op
Iteration   3: 340.632 ns/op
Iteration   4: 336.095 ns/op
Iteration   5: 332.671 ns/op

# Run progress: 59.00% complete, ETA 03:59:04
# Fork: 2 of 3
# Warmup Iteration   1: 467.154 ns/op
# Warmup Iteration   2: 397.049 ns/op
# Warmup Iteration   3: 337.512 ns/op
Iteration   1: 327.330 ns/op
Iteration   2: 338.510 ns/op
Iteration   3: 399.161 ns/op
Iteration   4: 340.883 ns/op
Iteration   5: 340.977 ns/op

# Run progress: 59.02% complete, ETA 03:58:56
# Fork: 3 of 3
# Warmup Iteration   1: 473.960 ns/op
# Warmup Iteration   2: 393.685 ns/op
# Warmup Iteration   3: 349.034 ns/op
Iteration   1: 338.209 ns/op
Iteration   2: 339.472 ns/op
Iteration   3: 339.306 ns/op
Iteration   4: 337.897 ns/op
Iteration   5: 336.746 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline128int.Def_to_Val_as_Val_fill":
  341.770 ±(99.9%) 17.398 ns/op [Average]
  (min, avg, max) = (327.330, 341.770, 399.161), stdev = 16.274
  CI (99.9%): [324.372, 359.168] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline128int.Def_to_Val_as_Val_fill
# Parameters: (size = 1000000)

# Run progress: 59.04% complete, ETA 03:58:47
# Fork: 1 of 3
# Warmup Iteration   1: 7991195.437 ns/op
# Warmup Iteration   2: 4235297.941 ns/op
# Warmup Iteration   3: 3611880.319 ns/op
Iteration   1: 3533661.860 ns/op
Iteration   2: 3519869.338 ns/op
Iteration   3: 3579401.894 ns/op
Iteration   4: 3562165.794 ns/op
Iteration   5: 3846639.574 ns/op

# Run progress: 59.07% complete, ETA 03:58:38
# Fork: 2 of 3
# Warmup Iteration   1: 6859012.190 ns/op
# Warmup Iteration   2: 3657059.116 ns/op
# Warmup Iteration   3: 3524338.011 ns/op
Iteration   1: 3769031.485 ns/op
Iteration   2: 3636367.754 ns/op
Iteration   3: 3582896.201 ns/op
Iteration   4: 3519829.252 ns/op
Iteration   5: 3557938.311 ns/op

# Run progress: 59.09% complete, ETA 03:58:30
# Fork: 3 of 3
# Warmup Iteration   1: 7038816.434 ns/op
# Warmup Iteration   2: 3700050.942 ns/op
# Warmup Iteration   3: 3761533.766 ns/op
Iteration   1: 3510408.420 ns/op
Iteration   2: 3951510.293 ns/op
Iteration   3: 3581722.074 ns/op
Iteration   4: 3596311.683 ns/op
Iteration   5: 3579334.079 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline128int.Def_to_Val_as_Val_fill":
  3621805.867 ±(99.9%) 139130.600 ns/op [Average]
  (min, avg, max) = (3510408.420, 3621805.867, 3951510.293), stdev = 130142.849
  CI (99.9%): [3482675.268, 3760936.467] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline128int.New_to_Ref_as_Ref_arrayfill
# Parameters: (size = 100)

# Run progress: 59.12% complete, ETA 03:58:21
# Fork: 1 of 3
# Warmup Iteration   1: 144.940 ns/op
# Warmup Iteration   2: 138.958 ns/op
# Warmup Iteration   3: 131.090 ns/op
Iteration   1: 131.037 ns/op
Iteration   2: 131.771 ns/op
Iteration   3: 131.120 ns/op
Iteration   4: 131.199 ns/op
Iteration   5: 132.591 ns/op

# Run progress: 59.14% complete, ETA 03:58:12
# Fork: 2 of 3
# Warmup Iteration   1: 145.138 ns/op
# Warmup Iteration   2: 139.114 ns/op
# Warmup Iteration   3: 132.114 ns/op
Iteration   1: 131.400 ns/op
Iteration   2: 132.490 ns/op
Iteration   3: 135.634 ns/op
Iteration   4: 133.512 ns/op
Iteration   5: 131.866 ns/op

# Run progress: 59.17% complete, ETA 03:58:04
# Fork: 3 of 3
# Warmup Iteration   1: 140.376 ns/op
# Warmup Iteration   2: 134.749 ns/op
# Warmup Iteration   3: 132.351 ns/op
Iteration   1: 132.362 ns/op
Iteration   2: 132.928 ns/op
Iteration   3: 132.459 ns/op
Iteration   4: 132.735 ns/op
Iteration   5: 132.495 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline128int.New_to_Ref_as_Ref_arrayfill":
  132.373 ±(99.9%) 1.237 ns/op [Average]
  (min, avg, max) = (131.037, 132.373, 135.634), stdev = 1.157
  CI (99.9%): [131.136, 133.610] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline128int.New_to_Ref_as_Ref_arrayfill
# Parameters: (size = 1000000)

# Run progress: 59.19% complete, ETA 03:57:55
# Fork: 1 of 3
# Warmup Iteration   1: 23831655.318 ns/op
# Warmup Iteration   2: 21829285.468 ns/op
# Warmup Iteration   3: 25772673.975 ns/op
Iteration   1: 22147169.391 ns/op
Iteration   2: 22089682.957 ns/op
Iteration   3: 21197538.188 ns/op
Iteration   4: 29030761.886 ns/op
Iteration   5: 27057163.368 ns/op

# Run progress: 59.22% complete, ETA 03:57:46
# Fork: 2 of 3
# Warmup Iteration   1: 23188718.750 ns/op
# Warmup Iteration   2: 23372325.750 ns/op
# Warmup Iteration   3: 23813522.279 ns/op
Iteration   1: 22014294.391 ns/op
Iteration   2: 23606918.605 ns/op
Iteration   3: 23439537.791 ns/op
Iteration   4: 24485985.119 ns/op
Iteration   5: 24662602.721 ns/op

# Run progress: 59.24% complete, ETA 03:57:38
# Fork: 3 of 3
# Warmup Iteration   1: 21638368.809 ns/op
# Warmup Iteration   2: 24595204.268 ns/op
# Warmup Iteration   3: 25801214.575 ns/op
Iteration   1: 17440254.949 ns/op
Iteration   2: 24549576.220 ns/op
Iteration   3: 25332726.634 ns/op
Iteration   4: 29574829.647 ns/op
Iteration   5: 23075510.409 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline128int.New_to_Ref_as_Ref_arrayfill":
  23980303.485 ±(99.9%) 3279094.967 ns/op [Average]
  (min, avg, max) = (17440254.949, 23980303.485, 29574829.647), stdev = 3067267.467
  CI (99.9%): [20701208.518, 27259398.452] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline128int.New_to_Ref_as_Ref_fill
# Parameters: (size = 100)

# Run progress: 59.26% complete, ETA 03:57:29
# Fork: 1 of 3
# Warmup Iteration   1: 373.741 ns/op
# Warmup Iteration   2: 345.403 ns/op
# Warmup Iteration   3: 249.117 ns/op
Iteration   1: 248.942 ns/op
Iteration   2: 249.690 ns/op
Iteration   3: 248.254 ns/op
Iteration   4: 248.916 ns/op
Iteration   5: 247.977 ns/op

# Run progress: 59.29% complete, ETA 03:57:20
# Fork: 2 of 3
# Warmup Iteration   1: 369.025 ns/op
# Warmup Iteration   2: 347.617 ns/op
# Warmup Iteration   3: 264.324 ns/op
Iteration   1: 258.517 ns/op
Iteration   2: 259.846 ns/op
Iteration   3: 248.248 ns/op
Iteration   4: 247.760 ns/op
Iteration   5: 248.986 ns/op

# Run progress: 59.31% complete, ETA 03:57:11
# Fork: 3 of 3
# Warmup Iteration   1: 375.445 ns/op
# Warmup Iteration   2: 343.806 ns/op
# Warmup Iteration   3: 247.861 ns/op
Iteration   1: 249.919 ns/op
Iteration   2: 249.550 ns/op
Iteration   3: 248.687 ns/op
Iteration   4: 247.964 ns/op
Iteration   5: 248.822 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline128int.New_to_Ref_as_Ref_fill":
  250.139 ±(99.9%) 3.993 ns/op [Average]
  (min, avg, max) = (247.760, 250.139, 259.846), stdev = 3.735
  CI (99.9%): [246.146, 254.132] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline128int.New_to_Ref_as_Ref_fill
# Parameters: (size = 1000000)

# Run progress: 59.34% complete, ETA 03:57:03
# Fork: 1 of 3
# Warmup Iteration   1: 5239792.969 ns/op
# Warmup Iteration   2: 5551647.665 ns/op
# Warmup Iteration   3: 3121317.598 ns/op
Iteration   1: 3086777.695 ns/op
Iteration   2: 2892718.929 ns/op
Iteration   3: 2841048.632 ns/op
Iteration   4: 2742388.701 ns/op
Iteration   5: 2777673.438 ns/op

# Run progress: 59.36% complete, ETA 03:56:54
# Fork: 2 of 3
# Warmup Iteration   1: 4774787.521 ns/op
# Warmup Iteration   2: 3283942.539 ns/op
# Warmup Iteration   3: 4059266.735 ns/op
Iteration   1: 3505866.838 ns/op
Iteration   2: 3037856.245 ns/op
Iteration   3: 3027355.165 ns/op
Iteration   4: 2968357.867 ns/op
Iteration   5: 2730920.177 ns/op

# Run progress: 59.39% complete, ETA 03:56:45
# Fork: 3 of 3
# Warmup Iteration   1: 4796991.071 ns/op
# Warmup Iteration   2: 3045400.807 ns/op
# Warmup Iteration   3: 3084414.890 ns/op
Iteration   1: 2965299.487 ns/op
Iteration   2: 2785252.526 ns/op
Iteration   3: 2958732.284 ns/op
Iteration   4: 3071387.410 ns/op
Iteration   5: 2888952.825 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline128int.New_to_Ref_as_Ref_fill":
  2952039.215 ±(99.9%) 206733.334 ns/op [Average]
  (min, avg, max) = (2730920.177, 2952039.215, 3505866.838), stdev = 193378.489
  CI (99.9%): [2745305.880, 3158772.549] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline128int.New_to_Val_as_Val_arrayfill
# Parameters: (size = 100)

# Run progress: 59.41% complete, ETA 03:56:37
# Fork: 1 of 3
# Warmup Iteration   1: 140.454 ns/op
# Warmup Iteration   2: 134.327 ns/op
# Warmup Iteration   3: 132.718 ns/op
Iteration   1: 132.965 ns/op
Iteration   2: 132.487 ns/op
Iteration   3: 132.548 ns/op
Iteration   4: 132.782 ns/op
Iteration   5: 133.120 ns/op

# Run progress: 59.44% complete, ETA 03:56:28
# Fork: 2 of 3
# Warmup Iteration   1: 140.730 ns/op
# Warmup Iteration   2: 135.633 ns/op
# Warmup Iteration   3: 133.483 ns/op
Iteration   1: 132.560 ns/op
Iteration   2: 133.529 ns/op
Iteration   3: 133.308 ns/op
Iteration   4: 132.409 ns/op
Iteration   5: 133.201 ns/op

# Run progress: 59.46% complete, ETA 03:56:19
# Fork: 3 of 3
# Warmup Iteration   1: 141.296 ns/op
# Warmup Iteration   2: 134.212 ns/op
# Warmup Iteration   3: 132.373 ns/op
Iteration   1: 132.274 ns/op
Iteration   2: 132.312 ns/op
Iteration   3: 132.574 ns/op
Iteration   4: 132.416 ns/op
Iteration   5: 133.524 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline128int.New_to_Val_as_Val_arrayfill":
  132.801 ±(99.9%) 0.469 ns/op [Average]
  (min, avg, max) = (132.274, 132.801, 133.529), stdev = 0.438
  CI (99.9%): [132.332, 133.269] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline128int.New_to_Val_as_Val_arrayfill
# Parameters: (size = 1000000)

# Run progress: 59.49% complete, ETA 03:56:11
# Fork: 1 of 3
# Warmup Iteration   1: 28282352.486 ns/op
# Warmup Iteration   2: 20144336.660 ns/op
# Warmup Iteration   3: 23470974.432 ns/op
Iteration   1: 29832361.529 ns/op
Iteration   2: 29989402.371 ns/op
Iteration   3: 23989263.558 ns/op
Iteration   4: 22052623.234 ns/op
Iteration   5: 24664032.512 ns/op

# Run progress: 59.51% complete, ETA 03:56:02
# Fork: 2 of 3
# Warmup Iteration   1: 23301106.045 ns/op
# Warmup Iteration   2: 23372513.250 ns/op
# Warmup Iteration   3: 22704534.413 ns/op
Iteration   1: 23337380.814 ns/op
Iteration   2: 23424407.205 ns/op
Iteration   3: 23629470.930 ns/op
Iteration   4: 23242626.886 ns/op
Iteration   5: 24872455.268 ns/op

# Run progress: 59.53% complete, ETA 03:55:53
# Fork: 3 of 3
# Warmup Iteration   1: 21852315.104 ns/op
# Warmup Iteration   2: 23653693.182 ns/op
# Warmup Iteration   3: 27571302.919 ns/op
Iteration   1: 25666363.525 ns/op
Iteration   2: 23402569.767 ns/op
Iteration   3: 19856576.804 ns/op
Iteration   4: 23593937.000 ns/op
Iteration   5: 22093923.000 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline128int.New_to_Val_as_Val_arrayfill":
  24243159.627 ±(99.9%) 2851148.768 ns/op [Average]
  (min, avg, max) = (19856576.804, 24243159.627, 29989402.371), stdev = 2666966.327
  CI (99.9%): [21392010.859, 27094308.395] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline128int.New_to_Val_as_Val_fill
# Parameters: (size = 100)

# Run progress: 59.56% complete, ETA 03:55:45
# Fork: 1 of 3
# Warmup Iteration   1: 367.773 ns/op
# Warmup Iteration   2: 343.092 ns/op
# Warmup Iteration   3: 248.285 ns/op
Iteration   1: 247.733 ns/op
Iteration   2: 248.882 ns/op
Iteration   3: 249.380 ns/op
Iteration   4: 249.872 ns/op
Iteration   5: 263.567 ns/op

# Run progress: 59.58% complete, ETA 03:55:36
# Fork: 2 of 3
# Warmup Iteration   1: 370.625 ns/op
# Warmup Iteration   2: 353.010 ns/op
# Warmup Iteration   3: 248.339 ns/op
Iteration   1: 248.898 ns/op
Iteration   2: 249.183 ns/op
Iteration   3: 248.376 ns/op
Iteration   4: 260.534 ns/op
Iteration   5: 248.505 ns/op

# Run progress: 59.61% complete, ETA 03:55:27
# Fork: 3 of 3
# Warmup Iteration   1: 365.344 ns/op
# Warmup Iteration   2: 348.874 ns/op
# Warmup Iteration   3: 250.206 ns/op
Iteration   1: 250.407 ns/op
Iteration   2: 249.085 ns/op
Iteration   3: 248.718 ns/op
Iteration   4: 260.576 ns/op
Iteration   5: 296.909 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline128int.New_to_Val_as_Val_fill":
  254.708 ±(99.9%) 13.676 ns/op [Average]
  (min, avg, max) = (247.733, 254.708, 296.909), stdev = 12.792
  CI (99.9%): [241.033, 268.384] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline128int.New_to_Val_as_Val_fill
# Parameters: (size = 1000000)

# Run progress: 59.63% complete, ETA 03:55:19
# Fork: 1 of 3
# Warmup Iteration   1: 4992518.448 ns/op
# Warmup Iteration   2: 3403577.681 ns/op
# Warmup Iteration   3: 3804926.538 ns/op
Iteration   1: 3366993.750 ns/op
Iteration   2: 2755933.065 ns/op
Iteration   3: 3196586.759 ns/op
Iteration   4: 2819491.760 ns/op
Iteration   5: 2993213.882 ns/op

# Run progress: 59.66% complete, ETA 03:55:10
# Fork: 2 of 3
# Warmup Iteration   1: 4882731.280 ns/op
# Warmup Iteration   2: 3135865.856 ns/op
# Warmup Iteration   3: 3636794.817 ns/op
Iteration   1: 3612259.229 ns/op
Iteration   2: 2772074.773 ns/op
Iteration   3: 2760939.851 ns/op
Iteration   4: 3107915.639 ns/op
Iteration   5: 2699558.869 ns/op

# Run progress: 59.68% complete, ETA 03:55:01
# Fork: 3 of 3
# Warmup Iteration   1: 4737477.804 ns/op
# Warmup Iteration   2: 3050260.073 ns/op
# Warmup Iteration   3: 3427188.068 ns/op
Iteration   1: 2819451.019 ns/op
Iteration   2: 3032225.474 ns/op
Iteration   3: 2761963.913 ns/op
Iteration   4: 2833103.874 ns/op
Iteration   5: 2681516.467 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline128int.New_to_Val_as_Val_fill":
  2947548.555 ±(99.9%) 289932.713 ns/op [Average]
  (min, avg, max) = (2681516.467, 2947548.555, 3612259.229), stdev = 271203.239
  CI (99.9%): [2657615.842, 3237481.267] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline128int.Ref_to_Ref_as_Ref_arrayfillinst
# Parameters: (size = 100)

# Run progress: 59.71% complete, ETA 03:54:53
# Fork: 1 of 3
# Warmup Iteration   1: 114.078 ns/op
# Warmup Iteration   2: 128.740 ns/op
# Warmup Iteration   3: 117.085 ns/op
Iteration   1: 117.904 ns/op
Iteration   2: 117.247 ns/op
Iteration   3: 117.911 ns/op
Iteration   4: 118.468 ns/op
Iteration   5: 118.580 ns/op

# Run progress: 59.73% complete, ETA 03:54:44
# Fork: 2 of 3
# Warmup Iteration   1: 113.691 ns/op
# Warmup Iteration   2: 117.310 ns/op
# Warmup Iteration   3: 116.523 ns/op
Iteration   1: 116.903 ns/op
Iteration   2: 116.451 ns/op
Iteration   3: 116.483 ns/op
Iteration   4: 117.190 ns/op
Iteration   5: 116.373 ns/op

# Run progress: 59.75% complete, ETA 03:54:35
# Fork: 3 of 3
# Warmup Iteration   1: 115.897 ns/op
# Warmup Iteration   2: 116.811 ns/op
# Warmup Iteration   3: 117.194 ns/op
Iteration   1: 116.697 ns/op
Iteration   2: 116.759 ns/op
Iteration   3: 116.066 ns/op
Iteration   4: 116.144 ns/op
Iteration   5: 116.757 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline128int.Ref_to_Ref_as_Ref_arrayfillinst":
  117.062 ±(99.9%) 0.863 ns/op [Average]
  (min, avg, max) = (116.066, 117.062, 118.580), stdev = 0.807
  CI (99.9%): [116.199, 117.925] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline128int.Ref_to_Ref_as_Ref_arrayfillinst
# Parameters: (size = 1000000)

# Run progress: 59.78% complete, ETA 03:54:27
# Fork: 1 of 3
# Warmup Iteration   1: 22715975.933 ns/op
# Warmup Iteration   2: 27258289.432 ns/op
# Warmup Iteration   3: 26581530.711 ns/op
Iteration   1: 21531399.830 ns/op
Iteration   2: 25144512.195 ns/op
Iteration   3: 23968897.302 ns/op
Iteration   4: 23359852.721 ns/op
Iteration   5: 23717958.326 ns/op

# Run progress: 59.80% complete, ETA 03:54:18
# Fork: 2 of 3
# Warmup Iteration   1: 23625255.814 ns/op
# Warmup Iteration   2: 24162243.233 ns/op
# Warmup Iteration   3: 21510972.208 ns/op
Iteration   1: 21545395.404 ns/op
Iteration   2: 23603722.860 ns/op
Iteration   3: 26639327.868 ns/op
Iteration   4: 24554073.405 ns/op
Iteration   5: 26368950.872 ns/op

# Run progress: 59.83% complete, ETA 03:54:09
# Fork: 3 of 3
# Warmup Iteration   1: 28740976.861 ns/op
# Warmup Iteration   2: 26036483.974 ns/op
# Warmup Iteration   3: 23682600.767 ns/op
Iteration   1: 25038827.244 ns/op
Iteration   2: 25637271.875 ns/op
Iteration   3: 19905294.941 ns/op
Iteration   4: 25198197.146 ns/op
Iteration   5: 22740216.500 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline128int.Ref_to_Ref_as_Ref_arrayfillinst":
  23930259.899 ±(99.9%) 2029154.474 ns/op [Average]
  (min, avg, max) = (19905294.941, 23930259.899, 26639327.868), stdev = 1898072.354
  CI (99.9%): [21901105.426, 25959414.373] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline128int.Ref_to_Ref_as_Ref_arrayfillstat
# Parameters: (size = 100)

# Run progress: 59.85% complete, ETA 03:54:01
# Fork: 1 of 3
# Warmup Iteration   1: 116.614 ns/op
# Warmup Iteration   2: 115.944 ns/op
# Warmup Iteration   3: 117.453 ns/op
Iteration   1: 117.631 ns/op
Iteration   2: 117.765 ns/op
Iteration   3: 120.300 ns/op
Iteration   4: 118.369 ns/op
Iteration   5: 117.005 ns/op

# Run progress: 59.88% complete, ETA 03:53:52
# Fork: 2 of 3
# Warmup Iteration   1: 116.455 ns/op
# Warmup Iteration   2: 115.870 ns/op
# Warmup Iteration   3: 117.712 ns/op
Iteration   1: 118.144 ns/op
Iteration   2: 117.361 ns/op
Iteration   3: 117.235 ns/op
Iteration   4: 117.448 ns/op
Iteration   5: 117.053 ns/op

# Run progress: 59.90% complete, ETA 03:53:43
# Fork: 3 of 3
# Warmup Iteration   1: 118.022 ns/op
# Warmup Iteration   2: 116.630 ns/op
# Warmup Iteration   3: 117.175 ns/op
Iteration   1: 118.014 ns/op
Iteration   2: 117.742 ns/op
Iteration   3: 117.688 ns/op
Iteration   4: 116.963 ns/op
Iteration   5: 117.033 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline128int.Ref_to_Ref_as_Ref_arrayfillstat":
  117.717 ±(99.9%) 0.894 ns/op [Average]
  (min, avg, max) = (116.963, 117.717, 120.300), stdev = 0.836
  CI (99.9%): [116.823, 118.611] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline128int.Ref_to_Ref_as_Ref_arrayfillstat
# Parameters: (size = 1000000)

# Run progress: 59.93% complete, ETA 03:53:35
# Fork: 1 of 3
# Warmup Iteration   1: 21430893.229 ns/op
# Warmup Iteration   2: 22573835.178 ns/op
# Warmup Iteration   3: 26682665.625 ns/op
Iteration   1: 21567934.404 ns/op
Iteration   2: 22884887.956 ns/op
Iteration   3: 25424176.829 ns/op
Iteration   4: 21119773.438 ns/op
Iteration   5: 24078677.595 ns/op

# Run progress: 59.95% complete, ETA 03:53:26
# Fork: 2 of 3
# Warmup Iteration   1: 23207618.364 ns/op
# Warmup Iteration   2: 26387358.974 ns/op
# Warmup Iteration   3: 24785270.317 ns/op
Iteration   1: 28908251.200 ns/op
Iteration   2: 22779106.467 ns/op
Iteration   3: 23840702.512 ns/op
Iteration   4: 32026713.531 ns/op
Iteration   5: 24881009.146 ns/op

# Run progress: 59.98% complete, ETA 03:53:17
# Fork: 3 of 3
# Warmup Iteration   1: 23005276.523 ns/op
# Warmup Iteration   2: 24001809.093 ns/op
# Warmup Iteration   3: 24730673.780 ns/op
Iteration   1: 26562522.436 ns/op
Iteration   2: 23771658.907 ns/op
Iteration   3: 22439489.800 ns/op
Iteration   4: 24696801.829 ns/op
Iteration   5: 23457032.953 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline128int.Ref_to_Ref_as_Ref_arrayfillstat":
  24562582.600 ±(99.9%) 3042418.822 ns/op [Average]
  (min, avg, max) = (21119773.438, 24562582.600, 32026713.531), stdev = 2845880.454
  CI (99.9%): [21520163.778, 27605001.422] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline128int.Ref_to_Ref_as_Ref_fillinst
# Parameters: (size = 100)

# Run progress: 60.00% complete, ETA 03:53:09
# Fork: 1 of 3
# Warmup Iteration   1: 138.290 ns/op
# Warmup Iteration   2: 139.139 ns/op
# Warmup Iteration   3: 136.191 ns/op
Iteration   1: 134.157 ns/op
Iteration   2: 138.884 ns/op
Iteration   3: 132.968 ns/op
Iteration   4: 132.789 ns/op
Iteration   5: 132.913 ns/op

# Run progress: 60.02% complete, ETA 03:53:00
# Fork: 2 of 3
# Warmup Iteration   1: 137.874 ns/op
# Warmup Iteration   2: 136.922 ns/op
# Warmup Iteration   3: 129.728 ns/op
Iteration   1: 128.806 ns/op
Iteration   2: 128.641 ns/op
Iteration   3: 128.625 ns/op
Iteration   4: 128.548 ns/op
Iteration   5: 128.822 ns/op

# Run progress: 60.05% complete, ETA 03:52:51
# Fork: 3 of 3
# Warmup Iteration   1: 138.294 ns/op
# Warmup Iteration   2: 138.500 ns/op
# Warmup Iteration   3: 131.268 ns/op
Iteration   1: 133.300 ns/op
Iteration   2: 130.333 ns/op
Iteration   3: 130.388 ns/op
Iteration   4: 130.097 ns/op
Iteration   5: 130.700 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline128int.Ref_to_Ref_as_Ref_fillinst":
  131.331 ±(99.9%) 3.064 ns/op [Average]
  (min, avg, max) = (128.548, 131.331, 138.884), stdev = 2.866
  CI (99.9%): [128.268, 134.395] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline128int.Ref_to_Ref_as_Ref_fillinst
# Parameters: (size = 1000000)

# Run progress: 60.07% complete, ETA 03:52:43
# Fork: 1 of 3
# Warmup Iteration   1: 23934568.452 ns/op
# Warmup Iteration   2: 27173234.216 ns/op
# Warmup Iteration   3: 24099499.023 ns/op
Iteration   1: 26572607.447 ns/op
Iteration   2: 24575594.512 ns/op
Iteration   3: 26939257.684 ns/op
Iteration   4: 26011745.718 ns/op
Iteration   5: 26079045.949 ns/op

# Run progress: 60.10% complete, ETA 03:52:34
# Fork: 2 of 3
# Warmup Iteration   1: 28078890.056 ns/op
# Warmup Iteration   2: 26789810.897 ns/op
# Warmup Iteration   3: 29088411.914 ns/op
Iteration   1: 30841839.471 ns/op
Iteration   2: 24584331.293 ns/op
Iteration   3: 24275440.476 ns/op
Iteration   4: 25451454.175 ns/op
Iteration   5: 27206918.919 ns/op

# Run progress: 60.12% complete, ETA 03:52:25
# Fork: 3 of 3
# Warmup Iteration   1: 23954930.548 ns/op
# Warmup Iteration   2: 26398614.026 ns/op
# Warmup Iteration   3: 26277207.256 ns/op
Iteration   1: 27067589.921 ns/op
Iteration   2: 27377039.405 ns/op
Iteration   3: 25926569.436 ns/op
Iteration   4: 27628532.649 ns/op
Iteration   5: 31219358.606 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline128int.Ref_to_Ref_as_Ref_fillinst":
  26783821.711 ±(99.9%) 2159852.996 ns/op [Average]
  (min, avg, max) = (24275440.476, 26783821.711, 31219358.606), stdev = 2020327.833
  CI (99.9%): [24623968.714, 28943674.707] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline128int.Ref_to_Ref_as_Ref_fillstat
# Parameters: (size = 100)

# Run progress: 60.15% complete, ETA 03:52:17
# Fork: 1 of 3
# Warmup Iteration   1: 144.802 ns/op
# Warmup Iteration   2: 149.229 ns/op
# Warmup Iteration   3: 132.590 ns/op
Iteration   1: 132.991 ns/op
Iteration   2: 132.504 ns/op
Iteration   3: 132.583 ns/op
Iteration   4: 133.856 ns/op
Iteration   5: 132.504 ns/op

# Run progress: 60.17% complete, ETA 03:52:08
# Fork: 2 of 3
# Warmup Iteration   1: 144.504 ns/op
# Warmup Iteration   2: 148.492 ns/op
# Warmup Iteration   3: 133.573 ns/op
Iteration   1: 132.955 ns/op
Iteration   2: 134.125 ns/op
Iteration   3: 132.708 ns/op
Iteration   4: 136.875 ns/op
Iteration   5: 137.242 ns/op

# Run progress: 60.20% complete, ETA 03:51:59
# Fork: 3 of 3
# Warmup Iteration   1: 145.623 ns/op
# Warmup Iteration   2: 151.105 ns/op
# Warmup Iteration   3: 133.429 ns/op
Iteration   1: 133.235 ns/op
Iteration   2: 133.485 ns/op
Iteration   3: 132.625 ns/op
Iteration   4: 133.142 ns/op
Iteration   5: 133.620 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline128int.Ref_to_Ref_as_Ref_fillstat":
  133.630 ±(99.9%) 1.582 ns/op [Average]
  (min, avg, max) = (132.504, 133.630, 137.242), stdev = 1.480
  CI (99.9%): [132.048, 135.212] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline128int.Ref_to_Ref_as_Ref_fillstat
# Parameters: (size = 1000000)

# Run progress: 60.22% complete, ETA 03:51:51
# Fork: 1 of 3
# Warmup Iteration   1: 25524959.375 ns/op
# Warmup Iteration   2: 25425483.325 ns/op
# Warmup Iteration   3: 25403627.100 ns/op
Iteration   1: 26421131.410 ns/op
Iteration   2: 28123175.917 ns/op
Iteration   3: 23079410.045 ns/op
Iteration   4: 24804275.810 ns/op
Iteration   5: 23979659.714 ns/op

# Run progress: 60.25% complete, ETA 03:51:42
# Fork: 2 of 3
# Warmup Iteration   1: 24184247.024 ns/op
# Warmup Iteration   2: 28533237.278 ns/op
# Warmup Iteration   3: 24444747.024 ns/op
Iteration   1: 22965912.022 ns/op
Iteration   2: 24074665.698 ns/op
Iteration   3: 25908610.051 ns/op
Iteration   4: 25262145.825 ns/op
Iteration   5: 26415920.949 ns/op

# Run progress: 60.27% complete, ETA 03:51:33
# Fork: 3 of 3
# Warmup Iteration   1: 25789111.450 ns/op
# Warmup Iteration   2: 25813455.200 ns/op
# Warmup Iteration   3: 27090673.237 ns/op
Iteration   1: 25163398.366 ns/op
Iteration   2: 26512036.333 ns/op
Iteration   3: 36605373.500 ns/op
Iteration   4: 25875684.846 ns/op
Iteration   5: 31394165.344 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline128int.Ref_to_Ref_as_Ref_fillstat":
  26439037.722 ±(99.9%) 3747404.207 ns/op [Average]
  (min, avg, max) = (22965912.022, 26439037.722, 36605373.500), stdev = 3505324.221
  CI (99.9%): [22691633.515, 30186441.929] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline128int.Ref_to_Val_as_Val_arrayfillinst
# Parameters: (size = 100)

# Run progress: 60.29% complete, ETA 03:51:25
# Fork: 1 of 3
# Warmup Iteration   1: 113.755 ns/op
# Warmup Iteration   2: 116.914 ns/op
# Warmup Iteration   3: 116.355 ns/op
Iteration   1: 117.076 ns/op
Iteration   2: 116.517 ns/op
Iteration   3: 116.393 ns/op
Iteration   4: 116.665 ns/op
Iteration   5: 117.088 ns/op

# Run progress: 60.32% complete, ETA 03:51:16
# Fork: 2 of 3
# Warmup Iteration   1: 113.476 ns/op
# Warmup Iteration   2: 116.317 ns/op
# Warmup Iteration   3: 116.235 ns/op
Iteration   1: 116.170 ns/op
Iteration   2: 124.031 ns/op
Iteration   3: 116.190 ns/op
Iteration   4: 115.822 ns/op
Iteration   5: 117.110 ns/op

# Run progress: 60.34% complete, ETA 03:51:07
# Fork: 3 of 3
# Warmup Iteration   1: 113.555 ns/op
# Warmup Iteration   2: 116.543 ns/op
# Warmup Iteration   3: 116.554 ns/op
Iteration   1: 116.351 ns/op
Iteration   2: 116.652 ns/op
Iteration   3: 116.675 ns/op
Iteration   4: 116.455 ns/op
Iteration   5: 118.047 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline128int.Ref_to_Val_as_Val_arrayfillinst":
  117.149 ±(99.9%) 2.111 ns/op [Average]
  (min, avg, max) = (115.822, 117.149, 124.031), stdev = 1.975
  CI (99.9%): [115.038, 119.261] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline128int.Ref_to_Val_as_Val_arrayfillinst
# Parameters: (size = 1000000)

# Run progress: 60.37% complete, ETA 03:50:59
# Fork: 1 of 3
# Warmup Iteration   1: 23134038.889 ns/op
# Warmup Iteration   2: 25538735.756 ns/op
# Warmup Iteration   3: 27157175.447 ns/op
Iteration   1: 22836128.711 ns/op
Iteration   2: 24817983.756 ns/op
Iteration   3: 20240696.680 ns/op
Iteration   4: 24951560.524 ns/op
Iteration   5: 25633789.575 ns/op

# Run progress: 60.39% complete, ETA 03:50:50
# Fork: 2 of 3
# Warmup Iteration   1: 24944345.238 ns/op
# Warmup Iteration   2: 25036825.195 ns/op
# Warmup Iteration   3: 25524838.415 ns/op
Iteration   1: 23074562.500 ns/op
Iteration   2: 23261746.205 ns/op
Iteration   3: 25394170.825 ns/op
Iteration   4: 25158191.049 ns/op
Iteration   5: 22231660.326 ns/op

# Run progress: 60.42% complete, ETA 03:50:41
# Fork: 3 of 3
# Warmup Iteration   1: 22462797.222 ns/op
# Warmup Iteration   2: 25718754.175 ns/op
# Warmup Iteration   3: 27927221.865 ns/op
Iteration   1: 25816709.375 ns/op
Iteration   2: 29923997.559 ns/op
Iteration   3: 28826153.571 ns/op
Iteration   4: 25483526.439 ns/op
Iteration   5: 23101239.591 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline128int.Ref_to_Val_as_Val_arrayfillinst":
  24716807.779 ±(99.9%) 2626928.486 ns/op [Average]
  (min, avg, max) = (20240696.680, 24716807.779, 29923997.559), stdev = 2457230.536
  CI (99.9%): [22089879.293, 27343736.265] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline128int.Ref_to_Val_as_Val_arrayfillstat
# Parameters: (size = 100)

# Run progress: 60.44% complete, ETA 03:50:33
# Fork: 1 of 3
# Warmup Iteration   1: 116.418 ns/op
# Warmup Iteration   2: 116.794 ns/op
# Warmup Iteration   3: 117.110 ns/op
Iteration   1: 117.141 ns/op
Iteration   2: 118.149 ns/op
Iteration   3: 118.046 ns/op
Iteration   4: 116.978 ns/op
Iteration   5: 117.081 ns/op

# Run progress: 60.47% complete, ETA 03:50:24
# Fork: 2 of 3
# Warmup Iteration   1: 116.704 ns/op
# Warmup Iteration   2: 121.989 ns/op
# Warmup Iteration   3: 117.611 ns/op
Iteration   1: 116.823 ns/op
Iteration   2: 116.736 ns/op
Iteration   3: 117.050 ns/op
Iteration   4: 117.220 ns/op
Iteration   5: 117.296 ns/op

# Run progress: 60.49% complete, ETA 03:50:15
# Fork: 3 of 3
# Warmup Iteration   1: 117.009 ns/op
# Warmup Iteration   2: 117.078 ns/op
# Warmup Iteration   3: 117.046 ns/op
Iteration   1: 117.085 ns/op
Iteration   2: 117.205 ns/op
Iteration   3: 117.076 ns/op
Iteration   4: 117.151 ns/op
Iteration   5: 117.086 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline128int.Ref_to_Val_as_Val_arrayfillstat":
  117.208 ±(99.9%) 0.416 ns/op [Average]
  (min, avg, max) = (116.736, 117.208, 118.149), stdev = 0.389
  CI (99.9%): [116.792, 117.624] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline128int.Ref_to_Val_as_Val_arrayfillstat
# Parameters: (size = 1000000)

# Run progress: 60.51% complete, ETA 03:50:07
# Fork: 1 of 3
# Warmup Iteration   1: 25386297.925 ns/op
# Warmup Iteration   2: 23022666.659 ns/op
# Warmup Iteration   3: 25362104.175 ns/op
Iteration   1: 25271708.317 ns/op
Iteration   2: 24664300.595 ns/op
Iteration   3: 22782703.711 ns/op
Iteration   4: 23503918.605 ns/op
Iteration   5: 25786285.561 ns/op

# Run progress: 60.54% complete, ETA 03:49:58
# Fork: 2 of 3
# Warmup Iteration   1: 24577974.190 ns/op
# Warmup Iteration   2: 25109837.415 ns/op
# Warmup Iteration   3: 24415594.238 ns/op
Iteration   1: 23442312.500 ns/op
Iteration   2: 24896252.976 ns/op
Iteration   3: 24356114.071 ns/op
Iteration   4: 21130714.417 ns/op
Iteration   5: 24620250.000 ns/op

# Run progress: 60.56% complete, ETA 03:49:50
# Fork: 3 of 3
# Warmup Iteration   1: 22838396.311 ns/op
# Warmup Iteration   2: 29081855.943 ns/op
# Warmup Iteration   3: 29073991.657 ns/op
Iteration   1: 22990969.682 ns/op
Iteration   2: 24716556.548 ns/op
Iteration   3: 24138564.476 ns/op
Iteration   4: 23497964.140 ns/op
Iteration   5: 23824602.721 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline128int.Ref_to_Val_as_Val_arrayfillstat":
  23974881.221 ±(99.9%) 1234224.713 ns/op [Average]
  (min, avg, max) = (21130714.417, 23974881.221, 25786285.561), stdev = 1154494.563
  CI (99.9%): [22740656.508, 25209105.935] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline128int.Ref_to_Val_as_Val_fillinst
# Parameters: (size = 100)

# Run progress: 60.59% complete, ETA 03:49:41
# Fork: 1 of 3
# Warmup Iteration   1: 138.092 ns/op
# Warmup Iteration   2: 136.475 ns/op
# Warmup Iteration   3: 128.809 ns/op
Iteration   1: 128.822 ns/op
Iteration   2: 129.149 ns/op
Iteration   3: 128.768 ns/op
Iteration   4: 135.042 ns/op
Iteration   5: 128.671 ns/op

# Run progress: 60.61% complete, ETA 03:49:32
# Fork: 2 of 3
# Warmup Iteration   1: 138.663 ns/op
# Warmup Iteration   2: 136.820 ns/op
# Warmup Iteration   3: 128.879 ns/op
Iteration   1: 128.686 ns/op
Iteration   2: 129.831 ns/op
Iteration   3: 128.725 ns/op
Iteration   4: 128.869 ns/op
Iteration   5: 128.745 ns/op

# Run progress: 60.64% complete, ETA 03:49:24
# Fork: 3 of 3
# Warmup Iteration   1: 137.853 ns/op
# Warmup Iteration   2: 136.733 ns/op
# Warmup Iteration   3: 130.600 ns/op
Iteration   1: 130.001 ns/op
Iteration   2: 130.313 ns/op
Iteration   3: 130.943 ns/op
Iteration   4: 141.140 ns/op
Iteration   5: 131.054 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline128int.Ref_to_Val_as_Val_fillinst":
  130.584 ±(99.9%) 3.593 ns/op [Average]
  (min, avg, max) = (128.671, 130.584, 141.140), stdev = 3.361
  CI (99.9%): [126.991, 134.177] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline128int.Ref_to_Val_as_Val_fillinst
# Parameters: (size = 1000000)

# Run progress: 60.66% complete, ETA 03:49:15
# Fork: 1 of 3
# Warmup Iteration   1: 31114965.909 ns/op
# Warmup Iteration   2: 25799332.256 ns/op
# Warmup Iteration   3: 27949878.472 ns/op
Iteration   1: 26021262.821 ns/op
Iteration   2: 26695759.868 ns/op
Iteration   3: 26522782.051 ns/op
Iteration   4: 25987617.538 ns/op
Iteration   5: 24937140.244 ns/op

# Run progress: 60.69% complete, ETA 03:49:06
# Fork: 2 of 3
# Warmup Iteration   1: 25128396.341 ns/op
# Warmup Iteration   2: 27194473.684 ns/op
# Warmup Iteration   3: 26819972.579 ns/op
Iteration   1: 25765870.850 ns/op
Iteration   2: 28211751.108 ns/op
Iteration   3: 25022527.439 ns/op
Iteration   4: 27247435.811 ns/op
Iteration   5: 23756683.140 ns/op

# Run progress: 60.71% complete, ETA 03:48:58
# Fork: 3 of 3
# Warmup Iteration   1: 25961403.125 ns/op
# Warmup Iteration   2: 26338340.821 ns/op
# Warmup Iteration   3: 26730643.632 ns/op
Iteration   1: 25586333.325 ns/op
Iteration   2: 27807439.684 ns/op
Iteration   3: 24668441.049 ns/op
Iteration   4: 26710135.947 ns/op
Iteration   5: 23345936.047 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline128int.Ref_to_Val_as_Val_fillinst":
  25885807.795 ±(99.9%) 1483043.939 ns/op [Average]
  (min, avg, max) = (23345936.047, 25885807.795, 28211751.108), stdev = 1387240.221
  CI (99.9%): [24402763.855, 27368851.734] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline128int.Ref_to_Val_as_Val_fillstat
# Parameters: (size = 100)

# Run progress: 60.74% complete, ETA 03:48:49
# Fork: 1 of 3
# Warmup Iteration   1: 145.444 ns/op
# Warmup Iteration   2: 148.914 ns/op
# Warmup Iteration   3: 132.442 ns/op
Iteration   1: 132.925 ns/op
Iteration   2: 138.964 ns/op
Iteration   3: 137.436 ns/op
Iteration   4: 133.201 ns/op
Iteration   5: 132.567 ns/op

# Run progress: 60.76% complete, ETA 03:48:40
# Fork: 2 of 3
# Warmup Iteration   1: 144.719 ns/op
# Warmup Iteration   2: 149.311 ns/op
# Warmup Iteration   3: 132.559 ns/op
Iteration   1: 133.469 ns/op
Iteration   2: 132.996 ns/op
Iteration   3: 132.861 ns/op
Iteration   4: 133.238 ns/op
Iteration   5: 133.980 ns/op

# Run progress: 60.78% complete, ETA 03:48:31
# Fork: 3 of 3
# Warmup Iteration   1: 145.443 ns/op
# Warmup Iteration   2: 148.899 ns/op
# Warmup Iteration   3: 134.041 ns/op
Iteration   1: 144.654 ns/op
Iteration   2: 133.183 ns/op
Iteration   3: 132.673 ns/op
Iteration   4: 133.427 ns/op
Iteration   5: 133.118 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline128int.Ref_to_Val_as_Val_fillstat":
  134.579 ±(99.9%) 3.562 ns/op [Average]
  (min, avg, max) = (132.567, 134.579, 144.654), stdev = 3.332
  CI (99.9%): [131.017, 138.142] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline128int.Ref_to_Val_as_Val_fillstat
# Parameters: (size = 1000000)

# Run progress: 60.81% complete, ETA 03:48:23
# Fork: 1 of 3
# Warmup Iteration   1: 24062302.571 ns/op
# Warmup Iteration   2: 27022992.316 ns/op
# Warmup Iteration   3: 26949997.789 ns/op
Iteration   1: 25913759.615 ns/op
Iteration   2: 25716050.000 ns/op
Iteration   3: 24172565.476 ns/op
Iteration   4: 25092060.976 ns/op
Iteration   5: 26034969.026 ns/op

# Run progress: 60.83% complete, ETA 03:48:14
# Fork: 2 of 3
# Warmup Iteration   1: 24482379.976 ns/op
# Warmup Iteration   2: 30186497.559 ns/op
# Warmup Iteration   3: 27511810.811 ns/op
Iteration   1: 28324892.361 ns/op
Iteration   2: 29815504.743 ns/op
Iteration   3: 29452502.400 ns/op
Iteration   4: 26018779.923 ns/op
Iteration   5: 28148189.711 ns/op

# Run progress: 60.86% complete, ETA 03:48:06
# Fork: 3 of 3
# Warmup Iteration   1: 24796556.548 ns/op
# Warmup Iteration   2: 27938682.000 ns/op
# Warmup Iteration   3: 26156095.103 ns/op
Iteration   1: 26859763.897 ns/op
Iteration   2: 26796789.474 ns/op
Iteration   3: 28075609.243 ns/op
Iteration   4: 25491900.000 ns/op
Iteration   5: 27126537.263 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline128int.Ref_to_Val_as_Val_fillstat":
  26869324.941 ±(99.9%) 1729123.019 ns/op [Average]
  (min, avg, max) = (24172565.476, 26869324.941, 29815504.743), stdev = 1617422.745
  CI (99.9%): [25140201.921, 28598447.960] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline128int.Val_to_Ref_as_Ref_arrayfillinst
# Parameters: (size = 100)

# Run progress: 60.88% complete, ETA 03:47:57
# Fork: 1 of 3
# Warmup Iteration   1: 116.925 ns/op
# Warmup Iteration   2: 122.557 ns/op
# Warmup Iteration   3: 117.834 ns/op
Iteration   1: 116.158 ns/op
Iteration   2: 116.284 ns/op
Iteration   3: 116.680 ns/op
Iteration   4: 116.582 ns/op
Iteration   5: 115.814 ns/op

# Run progress: 60.91% complete, ETA 03:47:48
# Fork: 2 of 3
# Warmup Iteration   1: 114.243 ns/op
# Warmup Iteration   2: 130.002 ns/op
# Warmup Iteration   3: 117.280 ns/op
Iteration   1: 117.635 ns/op
Iteration   2: 117.438 ns/op
Iteration   3: 116.726 ns/op
Iteration   4: 116.925 ns/op
Iteration   5: 116.914 ns/op

# Run progress: 60.93% complete, ETA 03:47:40
# Fork: 3 of 3
# Warmup Iteration   1: 115.406 ns/op
# Warmup Iteration   2: 118.940 ns/op
# Warmup Iteration   3: 116.882 ns/op
Iteration   1: 116.604 ns/op
Iteration   2: 118.485 ns/op
Iteration   3: 120.982 ns/op
Iteration   4: 118.395 ns/op
Iteration   5: 117.507 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline128int.Val_to_Ref_as_Ref_arrayfillinst":
  117.275 ±(99.9%) 1.366 ns/op [Average]
  (min, avg, max) = (115.814, 117.275, 120.982), stdev = 1.278
  CI (99.9%): [115.909, 118.642] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline128int.Val_to_Ref_as_Ref_arrayfillinst
# Parameters: (size = 1000000)

# Run progress: 60.96% complete, ETA 03:47:31
# Fork: 1 of 3
# Warmup Iteration   1: 24168011.905 ns/op
# Warmup Iteration   2: 23134062.956 ns/op
# Warmup Iteration   3: 25491191.073 ns/op
Iteration   1: 24168917.628 ns/op
Iteration   2: 21749640.064 ns/op
Iteration   3: 22087877.717 ns/op
Iteration   4: 24810002.049 ns/op
Iteration   5: 24789128.049 ns/op

# Run progress: 60.98% complete, ETA 03:47:22
# Fork: 2 of 3
# Warmup Iteration   1: 24175417.643 ns/op
# Warmup Iteration   2: 29573966.417 ns/op
# Warmup Iteration   3: 30542256.333 ns/op
Iteration   1: 26813580.026 ns/op
Iteration   2: 23824838.186 ns/op
Iteration   3: 23089805.556 ns/op
Iteration   4: 26490171.053 ns/op
Iteration   5: 21850988.468 ns/op

# Run progress: 61.00% complete, ETA 03:47:14
# Fork: 3 of 3
# Warmup Iteration   1: 22734620.378 ns/op
# Warmup Iteration   2: 25315563.525 ns/op
# Warmup Iteration   3: 22376896.739 ns/op
Iteration   1: 24857074.628 ns/op
Iteration   2: 24606389.220 ns/op
Iteration   3: 22658885.870 ns/op
Iteration   4: 29743329.647 ns/op
Iteration   5: 24536857.143 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline128int.Val_to_Ref_as_Ref_arrayfillinst":
  24405165.687 ±(99.9%) 2273837.982 ns/op [Average]
  (min, avg, max) = (21749640.064, 24405165.687, 29743329.647), stdev = 2126949.460
  CI (99.9%): [22131327.705, 26679003.669] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline128int.Val_to_Ref_as_Ref_arrayfillstat
# Parameters: (size = 100)

# Run progress: 61.03% complete, ETA 03:47:05
# Fork: 1 of 3
# Warmup Iteration   1: 116.754 ns/op
# Warmup Iteration   2: 116.059 ns/op
# Warmup Iteration   3: 117.124 ns/op
Iteration   1: 117.130 ns/op
Iteration   2: 117.107 ns/op
Iteration   3: 118.009 ns/op
Iteration   4: 117.235 ns/op
Iteration   5: 117.120 ns/op

# Run progress: 61.05% complete, ETA 03:46:56
# Fork: 2 of 3
# Warmup Iteration   1: 116.430 ns/op
# Warmup Iteration   2: 116.517 ns/op
# Warmup Iteration   3: 117.366 ns/op
Iteration   1: 117.094 ns/op
Iteration   2: 117.248 ns/op
Iteration   3: 117.476 ns/op
Iteration   4: 121.285 ns/op
Iteration   5: 119.879 ns/op

# Run progress: 61.08% complete, ETA 03:46:48
# Fork: 3 of 3
# Warmup Iteration   1: 117.161 ns/op
# Warmup Iteration   2: 117.415 ns/op
# Warmup Iteration   3: 117.549 ns/op
Iteration   1: 118.439 ns/op
Iteration   2: 117.626 ns/op
Iteration   3: 118.691 ns/op
Iteration   4: 119.184 ns/op
Iteration   5: 118.271 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline128int.Val_to_Ref_as_Ref_arrayfillstat":
  118.119 ±(99.9%) 1.308 ns/op [Average]
  (min, avg, max) = (117.094, 118.119, 121.285), stdev = 1.224
  CI (99.9%): [116.811, 119.428] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline128int.Val_to_Ref_as_Ref_arrayfillstat
# Parameters: (size = 1000000)

# Run progress: 61.10% complete, ETA 03:46:39
# Fork: 1 of 3
# Warmup Iteration   1: 23629151.163 ns/op
# Warmup Iteration   2: 23637685.070 ns/op
# Warmup Iteration   3: 23882465.116 ns/op
Iteration   1: 23221174.250 ns/op
Iteration   2: 26764211.605 ns/op
Iteration   3: 22613648.543 ns/op
Iteration   4: 25396736.475 ns/op
Iteration   5: 25650841.650 ns/op

# Run progress: 61.13% complete, ETA 03:46:30
# Fork: 2 of 3
# Warmup Iteration   1: 25517377.100 ns/op
# Warmup Iteration   2: 26572018.658 ns/op
# Warmup Iteration   3: 26119465.795 ns/op
Iteration   1: 21137506.063 ns/op
Iteration   2: 27344180.189 ns/op
Iteration   3: 25033604.150 ns/op
Iteration   4: 26331475.410 ns/op
Iteration   5: 22428612.044 ns/op

# Run progress: 61.15% complete, ETA 03:46:22
# Fork: 3 of 3
# Warmup Iteration   1: 22971454.545 ns/op
# Warmup Iteration   2: 26470856.846 ns/op
# Warmup Iteration   3: 21767760.638 ns/op
Iteration   1: 24541164.634 ns/op
Iteration   2: 28716430.971 ns/op
Iteration   3: 26656343.211 ns/op
Iteration   4: 28167516.222 ns/op
Iteration   5: 28275636.583 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline128int.Val_to_Ref_as_Ref_arrayfillstat":
  25485272.133 ±(99.9%) 2480142.449 ns/op [Average]
  (min, avg, max) = (21137506.063, 25485272.133, 28716430.971), stdev = 2319926.786
  CI (99.9%): [23005129.684, 27965414.582] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline128int.Val_to_Ref_as_Ref_fillinst
# Parameters: (size = 100)

# Run progress: 61.18% complete, ETA 03:46:13
# Fork: 1 of 3
# Warmup Iteration   1: 137.196 ns/op
# Warmup Iteration   2: 136.933 ns/op
# Warmup Iteration   3: 130.316 ns/op
Iteration   1: 130.127 ns/op
Iteration   2: 130.295 ns/op
Iteration   3: 130.727 ns/op
Iteration   4: 130.930 ns/op
Iteration   5: 130.450 ns/op

# Run progress: 61.20% complete, ETA 03:46:04
# Fork: 2 of 3
# Warmup Iteration   1: 138.539 ns/op
# Warmup Iteration   2: 137.601 ns/op
# Warmup Iteration   3: 128.539 ns/op
Iteration   1: 128.830 ns/op
Iteration   2: 129.828 ns/op
Iteration   3: 128.883 ns/op
Iteration   4: 128.683 ns/op
Iteration   5: 128.751 ns/op

# Run progress: 61.23% complete, ETA 03:45:56
# Fork: 3 of 3
# Warmup Iteration   1: 137.820 ns/op
# Warmup Iteration   2: 136.920 ns/op
# Warmup Iteration   3: 129.206 ns/op
Iteration   1: 129.326 ns/op
Iteration   2: 128.550 ns/op
Iteration   3: 128.594 ns/op
Iteration   4: 128.846 ns/op
Iteration   5: 129.248 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline128int.Val_to_Ref_as_Ref_fillinst":
  129.471 ±(99.9%) 0.898 ns/op [Average]
  (min, avg, max) = (128.550, 129.471, 130.930), stdev = 0.840
  CI (99.9%): [128.573, 130.369] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline128int.Val_to_Ref_as_Ref_fillinst
# Parameters: (size = 1000000)

# Run progress: 61.25% complete, ETA 03:45:47
# Fork: 1 of 3
# Warmup Iteration   1: 26019352.100 ns/op
# Warmup Iteration   2: 27594035.079 ns/op
# Warmup Iteration   3: 25140072.171 ns/op
Iteration   1: 30781983.576 ns/op
Iteration   2: 28411388.514 ns/op
Iteration   3: 33926790.267 ns/op
Iteration   4: 31838159.091 ns/op
Iteration   5: 23811899.233 ns/op

# Run progress: 61.27% complete, ETA 03:45:38
# Fork: 2 of 3
# Warmup Iteration   1: 25531287.500 ns/op
# Warmup Iteration   2: 28550070.611 ns/op
# Warmup Iteration   3: 25957917.725 ns/op
Iteration   1: 27076247.816 ns/op
Iteration   2: 24119577.535 ns/op
Iteration   3: 26667439.711 ns/op
Iteration   4: 17963127.982 ns/op
Iteration   5: 21481298.766 ns/op

# Run progress: 61.30% complete, ETA 03:45:30
# Fork: 3 of 3
# Warmup Iteration   1: 27603452.703 ns/op
# Warmup Iteration   2: 30654116.441 ns/op
# Warmup Iteration   3: 39724410.269 ns/op
Iteration   1: 37795216.037 ns/op
Iteration   2: 21741983.170 ns/op
Iteration   3: 26698879.368 ns/op
Iteration   4: 47358431.818 ns/op
Iteration   5: 49416878.952 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline128int.Val_to_Ref_as_Ref_fillinst":
  29939286.789 ±(99.9%) 9689383.776 ns/op [Average]
  (min, avg, max) = (17963127.982, 29939286.789, 49416878.952), stdev = 9063455.597
  CI (99.9%): [20249903.013, 39628670.565] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline128int.Val_to_Ref_as_Ref_fillstat
# Parameters: (size = 100)

# Run progress: 61.32% complete, ETA 03:45:21
# Fork: 1 of 3
# Warmup Iteration   1: 150.902 ns/op
# Warmup Iteration   2: 197.048 ns/op
# Warmup Iteration   3: 138.608 ns/op
Iteration   1: 132.370 ns/op
Iteration   2: 132.262 ns/op
Iteration   3: 134.197 ns/op
Iteration   4: 133.495 ns/op
Iteration   5: 134.119 ns/op

# Run progress: 61.35% complete, ETA 03:45:13
# Fork: 2 of 3
# Warmup Iteration   1: 145.112 ns/op
# Warmup Iteration   2: 148.999 ns/op
# Warmup Iteration   3: 133.468 ns/op
Iteration   1: 132.998 ns/op
Iteration   2: 133.203 ns/op
Iteration   3: 133.045 ns/op
Iteration   4: 133.461 ns/op
Iteration   5: 133.332 ns/op

# Run progress: 61.37% complete, ETA 03:45:04
# Fork: 3 of 3
# Warmup Iteration   1: 145.073 ns/op
# Warmup Iteration   2: 148.077 ns/op
# Warmup Iteration   3: 133.625 ns/op
Iteration   1: 134.084 ns/op
Iteration   2: 134.021 ns/op
Iteration   3: 134.673 ns/op
Iteration   4: 134.002 ns/op
Iteration   5: 134.172 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline128int.Val_to_Ref_as_Ref_fillstat":
  133.562 ±(99.9%) 0.750 ns/op [Average]
  (min, avg, max) = (132.262, 133.562, 134.673), stdev = 0.701
  CI (99.9%): [132.813, 134.312] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline128int.Val_to_Ref_as_Ref_fillstat
# Parameters: (size = 1000000)

# Run progress: 61.40% complete, ETA 03:44:55
# Fork: 1 of 3
# Warmup Iteration   1: 44476922.087 ns/op
# Warmup Iteration   2: 45686387.696 ns/op
# Warmup Iteration   3: 46427869.318 ns/op
Iteration   1: 49512890.857 ns/op
Iteration   2: 47150784.091 ns/op
Iteration   3: 46234534.091 ns/op
Iteration   4: 47570871.227 ns/op
Iteration   5: 48437910.714 ns/op

# Run progress: 61.42% complete, ETA 03:44:48
# Fork: 2 of 3
# Warmup Iteration   1: 45499654.000 ns/op
# Warmup Iteration   2: 48150011.905 ns/op
# Warmup Iteration   3: 50523089.600 ns/op
Iteration   1: 50055111.095 ns/op
Iteration   2: 52096364.550 ns/op
Iteration   3: 50266529.762 ns/op
Iteration   4: 49795607.143 ns/op
Iteration   5: 50974806.250 ns/op

# Run progress: 61.45% complete, ETA 03:44:42
# Fork: 3 of 3
# Warmup Iteration   1: 46641411.000 ns/op
# Warmup Iteration   2: 42351306.640 ns/op
# Warmup Iteration   3: 47202047.364 ns/op
Iteration   1: 50862318.750 ns/op
Iteration   2: 50392872.900 ns/op
Iteration   3: 51683612.500 ns/op
Iteration   4: 48785754.000 ns/op
Iteration   5: 52539912.500 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline128int.Val_to_Ref_as_Ref_fillstat":
  49757325.362 ±(99.9%) 1961085.363 ns/op [Average]
  (min, avg, max) = (46234534.091, 49757325.362, 52539912.500), stdev = 1834400.465
  CI (99.9%): [47796239.999, 51718410.725] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline128int.Val_to_Val_as_Val_arrayfillinst
# Parameters: (size = 100)

# Run progress: 61.47% complete, ETA 03:44:34
# Fork: 1 of 3
# Warmup Iteration   1: 114.912 ns/op
# Warmup Iteration   2: 117.500 ns/op
# Warmup Iteration   3: 117.116 ns/op
Iteration   1: 116.973 ns/op
Iteration   2: 116.452 ns/op
Iteration   3: 117.662 ns/op
Iteration   4: 117.477 ns/op
Iteration   5: 117.314 ns/op

# Run progress: 61.50% complete, ETA 03:44:25
# Fork: 2 of 3
# Warmup Iteration   1: 115.025 ns/op
# Warmup Iteration   2: 116.914 ns/op
# Warmup Iteration   3: 118.329 ns/op
Iteration   1: 116.901 ns/op
Iteration   2: 117.007 ns/op
Iteration   3: 116.861 ns/op
Iteration   4: 116.410 ns/op
Iteration   5: 116.701 ns/op

# Run progress: 61.52% complete, ETA 03:44:16
# Fork: 3 of 3
# Warmup Iteration   1: 116.591 ns/op
# Warmup Iteration   2: 118.151 ns/op
# Warmup Iteration   3: 118.810 ns/op
Iteration   1: 119.176 ns/op
Iteration   2: 118.815 ns/op
Iteration   3: 118.027 ns/op
Iteration   4: 118.501 ns/op
Iteration   5: 117.880 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline128int.Val_to_Val_as_Val_arrayfillinst":
  117.477 ±(99.9%) 0.914 ns/op [Average]
  (min, avg, max) = (116.410, 117.477, 119.176), stdev = 0.855
  CI (99.9%): [116.563, 118.391] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline128int.Val_to_Val_as_Val_arrayfillinst
# Parameters: (size = 1000000)

# Run progress: 61.54% complete, ETA 03:44:08
# Fork: 1 of 3
# Warmup Iteration   1: 45472947.478 ns/op
# Warmup Iteration   2: 45856344.217 ns/op
# Warmup Iteration   3: 47807541.682 ns/op
Iteration   1: 48242878.952 ns/op
Iteration   2: 50915325.000 ns/op
Iteration   3: 50567354.200 ns/op
Iteration   4: 49126623.048 ns/op
Iteration   5: 44726746.348 ns/op

# Run progress: 61.57% complete, ETA 03:43:59
# Fork: 2 of 3
# Warmup Iteration   1: 43710753.609 ns/op
# Warmup Iteration   2: 45922935.591 ns/op
# Warmup Iteration   3: 45668324.261 ns/op
Iteration   1: 48020515.905 ns/op
Iteration   2: 47562441.318 ns/op
Iteration   3: 49656081.333 ns/op
Iteration   4: 47386492.409 ns/op
Iteration   5: 48686194.429 ns/op

# Run progress: 61.59% complete, ETA 03:43:51
# Fork: 3 of 3
# Warmup Iteration   1: 47884900.810 ns/op
# Warmup Iteration   2: 51440183.350 ns/op
# Warmup Iteration   3: 49264055.524 ns/op
Iteration   1: 51527864.600 ns/op
Iteration   2: 48098513.905 ns/op
Iteration   3: 50070577.381 ns/op
Iteration   4: 51391783.350 ns/op
Iteration   5: 49275305.524 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline128int.Val_to_Val_as_Val_arrayfillinst":
  49016979.847 ±(99.9%) 1922491.076 ns/op [Average]
  (min, avg, max) = (44726746.348, 49016979.847, 51527864.600), stdev = 1798299.345
  CI (99.9%): [47094488.771, 50939470.923] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline128int.Val_to_Val_as_Val_arrayfillstat
# Parameters: (size = 100)

# Run progress: 61.62% complete, ETA 03:43:42
# Fork: 1 of 3
# Warmup Iteration   1: 117.583 ns/op
# Warmup Iteration   2: 117.777 ns/op
# Warmup Iteration   3: 117.739 ns/op
Iteration   1: 118.075 ns/op
Iteration   2: 123.255 ns/op
Iteration   3: 125.613 ns/op
Iteration   4: 120.347 ns/op
Iteration   5: 116.506 ns/op

# Run progress: 61.64% complete, ETA 03:43:34
# Fork: 2 of 3
# Warmup Iteration   1: 117.153 ns/op
# Warmup Iteration   2: 116.849 ns/op
# Warmup Iteration   3: 118.418 ns/op
Iteration   1: 117.777 ns/op
Iteration   2: 117.489 ns/op
Iteration   3: 117.451 ns/op
Iteration   4: 117.601 ns/op
Iteration   5: 117.044 ns/op

# Run progress: 61.67% complete, ETA 03:43:25
# Fork: 3 of 3
# Warmup Iteration   1: 117.393 ns/op
# Warmup Iteration   2: 117.324 ns/op
# Warmup Iteration   3: 117.486 ns/op
Iteration   1: 118.100 ns/op
Iteration   2: 118.719 ns/op
Iteration   3: 117.434 ns/op
Iteration   4: 115.562 ns/op
Iteration   5: 114.864 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline128int.Val_to_Val_as_Val_arrayfillstat":
  118.389 ±(99.9%) 2.988 ns/op [Average]
  (min, avg, max) = (114.864, 118.389, 125.613), stdev = 2.795
  CI (99.9%): [115.401, 121.377] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline128int.Val_to_Val_as_Val_arrayfillstat
# Parameters: (size = 1000000)

# Run progress: 61.69% complete, ETA 03:43:16
# Fork: 1 of 3
# Warmup Iteration   1: 43445213.542 ns/op
# Warmup Iteration   2: 48269736.095 ns/op
# Warmup Iteration   3: 45934958.348 ns/op
Iteration   1: 47549119.318 ns/op
Iteration   2: 48021757.952 ns/op
Iteration   3: 44990193.826 ns/op
Iteration   4: 52415764.600 ns/op
Iteration   5: 47713430.571 ns/op

# Run progress: 61.72% complete, ETA 03:43:08
# Fork: 2 of 3
# Warmup Iteration   1: 41276926.680 ns/op
# Warmup Iteration   2: 47568253.773 ns/op
# Warmup Iteration   3: 49404069.429 ns/op
Iteration   1: 39145900.654 ns/op
Iteration   2: 45628438.391 ns/op
Iteration   3: 52639745.850 ns/op
Iteration   4: 48034975.364 ns/op
Iteration   5: 50363325.381 ns/op

# Run progress: 61.74% complete, ETA 03:42:59
# Fork: 3 of 3
# Warmup Iteration   1: 42491633.667 ns/op
# Warmup Iteration   2: 45825662.909 ns/op
# Warmup Iteration   3: 54189532.895 ns/op
Iteration   1: 49309837.286 ns/op
Iteration   2: 50665435.400 ns/op
Iteration   3: 47178572.000 ns/op
Iteration   4: 50228654.762 ns/op
Iteration   5: 45541605.087 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline128int.Val_to_Val_as_Val_arrayfillstat":
  47961783.763 ±(99.9%) 3619283.091 ns/op [Average]
  (min, avg, max) = (39145900.654, 47961783.763, 52639745.850), stdev = 3385479.649
  CI (99.9%): [44342500.672, 51581066.854] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline128int.Val_to_Val_as_Val_fillinst
# Parameters: (size = 100)

# Run progress: 61.76% complete, ETA 03:42:51
# Fork: 1 of 3
# Warmup Iteration   1: 134.357 ns/op
# Warmup Iteration   2: 132.661 ns/op
# Warmup Iteration   3: 125.684 ns/op
Iteration   1: 125.550 ns/op
Iteration   2: 124.771 ns/op
Iteration   3: 124.352 ns/op
Iteration   4: 125.236 ns/op
Iteration   5: 124.603 ns/op

# Run progress: 61.79% complete, ETA 03:42:42
# Fork: 2 of 3
# Warmup Iteration   1: 134.283 ns/op
# Warmup Iteration   2: 133.987 ns/op
# Warmup Iteration   3: 127.017 ns/op
Iteration   1: 127.796 ns/op
Iteration   2: 127.855 ns/op
Iteration   3: 127.605 ns/op
Iteration   4: 132.707 ns/op
Iteration   5: 130.979 ns/op

# Run progress: 61.81% complete, ETA 03:42:33
# Fork: 3 of 3
# Warmup Iteration   1: 135.247 ns/op
# Warmup Iteration   2: 132.687 ns/op
# Warmup Iteration   3: 129.964 ns/op
Iteration   1: 129.739 ns/op
Iteration   2: 129.202 ns/op
Iteration   3: 129.518 ns/op
Iteration   4: 129.269 ns/op
Iteration   5: 128.770 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline128int.Val_to_Val_as_Val_fillinst":
  127.863 ±(99.9%) 2.693 ns/op [Average]
  (min, avg, max) = (124.352, 127.863, 132.707), stdev = 2.519
  CI (99.9%): [125.170, 130.557] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline128int.Val_to_Val_as_Val_fillinst
# Parameters: (size = 1000000)

# Run progress: 61.84% complete, ETA 03:42:24
# Fork: 1 of 3
# Warmup Iteration   1: 51508741.700 ns/op
# Warmup Iteration   2: 57319870.333 ns/op
# Warmup Iteration   3: 29507606.472 ns/op
Iteration   1: 52419070.800 ns/op
Iteration   2: 41111748.320 ns/op
Iteration   3: 53033083.368 ns/op
Iteration   4: 54632800.474 ns/op
Iteration   5: 56601511.556 ns/op

# Run progress: 61.86% complete, ETA 03:42:16
# Fork: 2 of 3
# Warmup Iteration   1: 52992953.947 ns/op
# Warmup Iteration   2: 61275473.059 ns/op
# Warmup Iteration   3: 58461953.722 ns/op
Iteration   1: 53178313.579 ns/op
Iteration   2: 53466070.158 ns/op
Iteration   3: 65413031.250 ns/op
Iteration   4: 67601250.000 ns/op
Iteration   5: 63374841.125 ns/op

# Run progress: 61.89% complete, ETA 03:42:07
# Fork: 3 of 3
# Warmup Iteration   1: 59320205.882 ns/op
# Warmup Iteration   2: 50050025.810 ns/op
# Warmup Iteration   3: 55386421.053 ns/op
Iteration   1: 62731698.529 ns/op
Iteration   2: 56565504.611 ns/op
Iteration   3: 52873883.350 ns/op
Iteration   4: 60541093.176 ns/op
Iteration   5: 54685956.158 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline128int.Val_to_Val_as_Val_fillinst":
  56548657.097 ±(99.9%) 7060906.175 ns/op [Average]
  (min, avg, max) = (41111748.320, 56548657.097, 67601250.000), stdev = 6604776.018
  CI (99.9%): [49487750.922, 63609563.272] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline128int.Val_to_Val_as_Val_fillstat
# Parameters: (size = 100)

# Run progress: 61.91% complete, ETA 03:41:59
# Fork: 1 of 3
# Warmup Iteration   1: 140.595 ns/op
# Warmup Iteration   2: 146.209 ns/op
# Warmup Iteration   3: 130.082 ns/op
Iteration   1: 130.294 ns/op
Iteration   2: 130.122 ns/op
Iteration   3: 129.650 ns/op
Iteration   4: 130.375 ns/op
Iteration   5: 130.269 ns/op

# Run progress: 61.94% complete, ETA 03:41:50
# Fork: 2 of 3
# Warmup Iteration   1: 141.323 ns/op
# Warmup Iteration   2: 145.554 ns/op
# Warmup Iteration   3: 129.892 ns/op
Iteration   1: 129.477 ns/op
Iteration   2: 129.293 ns/op
Iteration   3: 129.778 ns/op
Iteration   4: 130.372 ns/op
Iteration   5: 129.928 ns/op

# Run progress: 61.96% complete, ETA 03:41:41
# Fork: 3 of 3
# Warmup Iteration   1: 141.565 ns/op
# Warmup Iteration   2: 145.844 ns/op
# Warmup Iteration   3: 130.041 ns/op
Iteration   1: 132.443 ns/op
Iteration   2: 129.263 ns/op
Iteration   3: 132.971 ns/op
Iteration   4: 131.431 ns/op
Iteration   5: 129.034 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline128int.Val_to_Val_as_Val_fillstat":
  130.313 ±(99.9%) 1.221 ns/op [Average]
  (min, avg, max) = (129.034, 130.313, 132.971), stdev = 1.142
  CI (99.9%): [129.093, 131.534] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline128int.Val_to_Val_as_Val_fillstat
# Parameters: (size = 1000000)

# Run progress: 61.99% complete, ETA 03:41:32
# Fork: 1 of 3
# Warmup Iteration   1: 48227726.190 ns/op
# Warmup Iteration   2: 48216134.455 ns/op
# Warmup Iteration   3: 50373264.550 ns/op
Iteration   1: 55646576.389 ns/op
Iteration   2: 60728250.000 ns/op
Iteration   3: 78401506.385 ns/op
Iteration   4: 62929088.563 ns/op
Iteration   5: 56670682.889 ns/op

# Run progress: 62.01% complete, ETA 03:41:24
# Fork: 2 of 3
# Warmup Iteration   1: 65747804.688 ns/op
# Warmup Iteration   2: 73281863.143 ns/op
# Warmup Iteration   3: 75455684.500 ns/op
Iteration   1: 72523690.500 ns/op
Iteration   2: 59406930.556 ns/op
Iteration   3: 65532239.563 ns/op
Iteration   4: 58254541.667 ns/op
Iteration   5: 54942225.895 ns/op

# Run progress: 62.03% complete, ETA 03:41:15
# Fork: 3 of 3
# Warmup Iteration   1: 50216273.810 ns/op
# Warmup Iteration   2: 51166438.476 ns/op
# Warmup Iteration   3: 54579175.474 ns/op
Iteration   1: 54228125.000 ns/op
Iteration   2: 51761872.950 ns/op
Iteration   3: 50536777.762 ns/op
Iteration   4: 62960721.313 ns/op
Iteration   5: 68068808.333 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline128int.Val_to_Val_as_Val_fillstat":
  60839469.184 ±(99.9%) 8321349.903 ns/op [Average]
  (min, avg, max) = (50536777.762, 60839469.184, 78401506.385), stdev = 7783795.863
  CI (99.9%): [52518119.281, 69160819.087] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline32int.Def_to_Ref_as_Ref_arrayfill
# Parameters: (size = 100)

# Run progress: 62.06% complete, ETA 03:41:07
# Fork: 1 of 3
# Warmup Iteration   1: 67.295 ns/op
# Warmup Iteration   2: 68.007 ns/op
# Warmup Iteration   3: 67.792 ns/op
Iteration   1: 66.159 ns/op
Iteration   2: 66.591 ns/op
Iteration   3: 68.582 ns/op
Iteration   4: 67.803 ns/op
Iteration   5: 68.922 ns/op

# Run progress: 62.08% complete, ETA 03:40:58
# Fork: 2 of 3
# Warmup Iteration   1: 68.120 ns/op
# Warmup Iteration   2: 69.170 ns/op
# Warmup Iteration   3: 67.525 ns/op
Iteration   1: 67.012 ns/op
Iteration   2: 67.168 ns/op
Iteration   3: 69.105 ns/op
Iteration   4: 70.212 ns/op
Iteration   5: 69.601 ns/op

# Run progress: 62.11% complete, ETA 03:40:49
# Fork: 3 of 3
# Warmup Iteration   1: 69.983 ns/op
# Warmup Iteration   2: 71.444 ns/op
# Warmup Iteration   3: 69.905 ns/op
Iteration   1: 68.363 ns/op
Iteration   2: 67.526 ns/op
Iteration   3: 67.930 ns/op
Iteration   4: 67.373 ns/op
Iteration   5: 67.379 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline32int.Def_to_Ref_as_Ref_arrayfill":
  67.982 ±(99.9%) 1.215 ns/op [Average]
  (min, avg, max) = (66.159, 67.982, 70.212), stdev = 1.136
  CI (99.9%): [66.767, 69.197] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline32int.Def_to_Ref_as_Ref_arrayfill
# Parameters: (size = 1000000)

# Run progress: 62.13% complete, ETA 03:40:40
# Fork: 1 of 3
# Warmup Iteration   1: 47469787.864 ns/op
# Warmup Iteration   2: 45947437.500 ns/op
# Warmup Iteration   3: 42574482.625 ns/op
Iteration   1: 49623452.381 ns/op
Iteration   2: 51185112.500 ns/op
Iteration   3: 43279783.000 ns/op
Iteration   4: 47399801.136 ns/op
Iteration   5: 47890812.500 ns/op

# Run progress: 62.16% complete, ETA 03:40:32
# Fork: 2 of 3
# Warmup Iteration   1: 48753918.667 ns/op
# Warmup Iteration   2: 50613750.000 ns/op
# Warmup Iteration   3: 54030050.421 ns/op
Iteration   1: 50361820.850 ns/op
Iteration   2: 46574490.545 ns/op
Iteration   3: 49545680.571 ns/op
Iteration   4: 50182422.619 ns/op
Iteration   5: 53161427.632 ns/op

# Run progress: 62.18% complete, ETA 03:40:23
# Fork: 3 of 3
# Warmup Iteration   1: 43620914.870 ns/op
# Warmup Iteration   2: 52174943.750 ns/op
# Warmup Iteration   3: 51474545.850 ns/op
Iteration   1: 49782755.952 ns/op
Iteration   2: 54446407.895 ns/op
Iteration   3: 42537770.000 ns/op
Iteration   4: 47422189.364 ns/op
Iteration   5: 44110655.826 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline32int.Def_to_Ref_as_Ref_arrayfill":
  48500305.518 ±(99.9%) 3649067.778 ns/op [Average]
  (min, avg, max) = (42537770.000, 48500305.518, 54446407.895), stdev = 3413340.264
  CI (99.9%): [44851237.740, 52149373.296] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline32int.Def_to_Ref_as_Ref_fill
# Parameters: (size = 100)

# Run progress: 62.21% complete, ETA 03:40:14
# Fork: 1 of 3
# Warmup Iteration   1: 67.021 ns/op
# Warmup Iteration   2: 67.841 ns/op
# Warmup Iteration   3: 67.134 ns/op
Iteration   1: 67.193 ns/op
Iteration   2: 66.351 ns/op
Iteration   3: 66.689 ns/op
Iteration   4: 66.367 ns/op
Iteration   5: 66.357 ns/op

# Run progress: 62.23% complete, ETA 03:40:06
# Fork: 2 of 3
# Warmup Iteration   1: 66.733 ns/op
# Warmup Iteration   2: 67.979 ns/op
# Warmup Iteration   3: 66.737 ns/op
Iteration   1: 66.881 ns/op
Iteration   2: 66.512 ns/op
Iteration   3: 66.644 ns/op
Iteration   4: 66.505 ns/op
Iteration   5: 66.117 ns/op

# Run progress: 62.25% complete, ETA 03:39:57
# Fork: 3 of 3
# Warmup Iteration   1: 67.085 ns/op
# Warmup Iteration   2: 67.708 ns/op
# Warmup Iteration   3: 66.638 ns/op
Iteration   1: 66.400 ns/op
Iteration   2: 66.223 ns/op
Iteration   3: 66.534 ns/op
Iteration   4: 66.513 ns/op
Iteration   5: 66.740 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline32int.Def_to_Ref_as_Ref_fill":
  66.535 ±(99.9%) 0.288 ns/op [Average]
  (min, avg, max) = (66.117, 66.535, 67.193), stdev = 0.269
  CI (99.9%): [66.247, 66.823] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline32int.Def_to_Ref_as_Ref_fill
# Parameters: (size = 1000000)

# Run progress: 62.28% complete, ETA 03:39:48
# Fork: 1 of 3
# Warmup Iteration   1: 50815128.952 ns/op
# Warmup Iteration   2: 51571539.600 ns/op
# Warmup Iteration   3: 44222784.435 ns/op
Iteration   1: 45689378.773 ns/op
Iteration   2: 51502385.400 ns/op
Iteration   3: 47454445.091 ns/op
Iteration   4: 50825093.750 ns/op
Iteration   5: 46213865.957 ns/op

# Run progress: 62.30% complete, ETA 03:39:40
# Fork: 2 of 3
# Warmup Iteration   1: 52242468.750 ns/op
# Warmup Iteration   2: 53792200.000 ns/op
# Warmup Iteration   3: 52458343.750 ns/op
Iteration   1: 46068371.227 ns/op
Iteration   2: 50525150.000 ns/op
Iteration   3: 48204642.045 ns/op
Iteration   4: 45738267.045 ns/op
Iteration   5: 46179861.727 ns/op

# Run progress: 62.33% complete, ETA 03:39:31
# Fork: 3 of 3
# Warmup Iteration   1: 43920233.696 ns/op
# Warmup Iteration   2: 47106403.409 ns/op
# Warmup Iteration   3: 46890950.773 ns/op
Iteration   1: 54266877.158 ns/op
Iteration   2: 49199043.667 ns/op
Iteration   3: 41128446.640 ns/op
Iteration   4: 42922151.042 ns/op
Iteration   5: 48753847.238 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline32int.Def_to_Ref_as_Ref_fill":
  47644788.451 ±(99.9%) 3614563.831 ns/op [Average]
  (min, avg, max) = (41128446.640, 47644788.451, 54266877.158), stdev = 3381065.250
  CI (99.9%): [44030224.620, 51259352.281] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline32int.Def_to_Val_as_Val_arrayfill
# Parameters: (size = 100)

# Run progress: 62.35% complete, ETA 03:39:22
# Fork: 1 of 3
# Warmup Iteration   1: 67.099 ns/op
# Warmup Iteration   2: 68.343 ns/op
# Warmup Iteration   3: 66.620 ns/op
Iteration   1: 66.607 ns/op
Iteration   2: 66.508 ns/op
Iteration   3: 66.985 ns/op
Iteration   4: 66.141 ns/op
Iteration   5: 66.259 ns/op

# Run progress: 62.38% complete, ETA 03:39:14
# Fork: 2 of 3
# Warmup Iteration   1: 67.183 ns/op
# Warmup Iteration   2: 68.139 ns/op
# Warmup Iteration   3: 65.976 ns/op
Iteration   1: 66.467 ns/op
Iteration   2: 66.496 ns/op
Iteration   3: 66.505 ns/op
Iteration   4: 66.468 ns/op
Iteration   5: 66.742 ns/op

# Run progress: 62.40% complete, ETA 03:39:05
# Fork: 3 of 3
# Warmup Iteration   1: 67.111 ns/op
# Warmup Iteration   2: 68.632 ns/op
# Warmup Iteration   3: 66.421 ns/op
Iteration   1: 66.396 ns/op
Iteration   2: 66.831 ns/op
Iteration   3: 66.115 ns/op
Iteration   4: 66.439 ns/op
Iteration   5: 66.730 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline32int.Def_to_Val_as_Val_arrayfill":
  66.513 ±(99.9%) 0.258 ns/op [Average]
  (min, avg, max) = (66.115, 66.513, 66.985), stdev = 0.242
  CI (99.9%): [66.254, 66.771] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline32int.Def_to_Val_as_Val_arrayfill
# Parameters: (size = 1000000)

# Run progress: 62.43% complete, ETA 03:38:56
# Fork: 1 of 3
# Warmup Iteration   1: 47113869.318 ns/op
# Warmup Iteration   2: 49909944.476 ns/op
# Warmup Iteration   3: 41946333.333 ns/op
Iteration   1: 46709981.045 ns/op
Iteration   2: 52976395.850 ns/op
Iteration   3: 53280150.000 ns/op
Iteration   4: 46368668.545 ns/op
Iteration   5: 46723875.000 ns/op

# Run progress: 62.45% complete, ETA 03:38:48
# Fork: 2 of 3
# Warmup Iteration   1: 49300988.095 ns/op
# Warmup Iteration   2: 53702528.526 ns/op
# Warmup Iteration   3: 53312258.789 ns/op
Iteration   1: 45856190.217 ns/op
Iteration   2: 40141801.640 ns/op
Iteration   3: 50569708.350 ns/op
Iteration   4: 50355508.300 ns/op
Iteration   5: 54801881.579 ns/op

# Run progress: 62.48% complete, ETA 03:38:39
# Fork: 3 of 3
# Warmup Iteration   1: 44105474.609 ns/op
# Warmup Iteration   2: 51391002.100 ns/op
# Warmup Iteration   3: 49531831.333 ns/op
Iteration   1: 54619344.316 ns/op
Iteration   2: 52282860.450 ns/op
Iteration   3: 45963005.435 ns/op
Iteration   4: 57222355.263 ns/op
Iteration   5: 42412093.750 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline32int.Def_to_Val_as_Val_arrayfill":
  49352254.649 ±(99.9%) 5256898.590 ns/op [Average]
  (min, avg, max) = (40141801.640, 49352254.649, 57222355.263), stdev = 4917306.203
  CI (99.9%): [44095356.060, 54609153.239] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline32int.Def_to_Val_as_Val_fill
# Parameters: (size = 100)

# Run progress: 62.50% complete, ETA 03:38:30
# Fork: 1 of 3
# Warmup Iteration   1: 66.922 ns/op
# Warmup Iteration   2: 68.118 ns/op
# Warmup Iteration   3: 66.666 ns/op
Iteration   1: 66.132 ns/op
Iteration   2: 66.314 ns/op
Iteration   3: 66.773 ns/op
Iteration   4: 66.349 ns/op
Iteration   5: 66.571 ns/op

# Run progress: 62.52% complete, ETA 03:38:22
# Fork: 2 of 3
# Warmup Iteration   1: 66.325 ns/op
# Warmup Iteration   2: 67.559 ns/op
# Warmup Iteration   3: 65.387 ns/op
Iteration   1: 65.261 ns/op
Iteration   2: 65.515 ns/op
Iteration   3: 65.339 ns/op
Iteration   4: 65.301 ns/op
Iteration   5: 66.543 ns/op

# Run progress: 62.55% complete, ETA 03:38:13
# Fork: 3 of 3
# Warmup Iteration   1: 66.762 ns/op
# Warmup Iteration   2: 69.252 ns/op
# Warmup Iteration   3: 66.729 ns/op
Iteration   1: 66.803 ns/op
Iteration   2: 66.608 ns/op
Iteration   3: 66.277 ns/op
Iteration   4: 67.091 ns/op
Iteration   5: 66.118 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline32int.Def_to_Val_as_Val_fill":
  66.200 ±(99.9%) 0.630 ns/op [Average]
  (min, avg, max) = (65.261, 66.200, 67.091), stdev = 0.589
  CI (99.9%): [65.570, 66.830] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline32int.Def_to_Val_as_Val_fill
# Parameters: (size = 1000000)

# Run progress: 62.57% complete, ETA 03:38:04
# Fork: 1 of 3
# Warmup Iteration   1: 51334670.850 ns/op
# Warmup Iteration   2: 50869420.850 ns/op
# Warmup Iteration   3: 27199019.737 ns/op
Iteration   1: 45978942.000 ns/op
Iteration   2: 51204068.750 ns/op
Iteration   3: 47250026.500 ns/op
Iteration   4: 38404305.556 ns/op
Iteration   5: 48883287.667 ns/op

# Run progress: 62.60% complete, ETA 03:37:55
# Fork: 2 of 3
# Warmup Iteration   1: 48591117.048 ns/op
# Warmup Iteration   2: 59999762.294 ns/op
# Warmup Iteration   3: 46867246.227 ns/op
Iteration   1: 56145348.684 ns/op
Iteration   2: 43991221.043 ns/op
Iteration   3: 54313564.550 ns/op
Iteration   4: 60918389.706 ns/op
Iteration   5: 46323892.045 ns/op

# Run progress: 62.62% complete, ETA 03:37:47
# Fork: 3 of 3
# Warmup Iteration   1: 48241910.714 ns/op
# Warmup Iteration   2: 47135503.818 ns/op
# Warmup Iteration   3: 54309774.158 ns/op
Iteration   1: 48439742.409 ns/op
Iteration   2: 32618571.226 ns/op
Iteration   3: 21347977.851 ns/op
Iteration   4: 16587361.344 ns/op
Iteration   5: 16374021.500 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline32int.Def_to_Val_as_Val_fill":
  41918714.722 ±(99.9%) 15062217.843 ns/op [Average]
  (min, avg, max) = (16374021.500, 41918714.722, 60918389.706), stdev = 14089207.917
  CI (99.9%): [26856496.879, 56980932.565] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline32int.New_to_Ref_as_Ref_arrayfill
# Parameters: (size = 100)

# Run progress: 62.65% complete, ETA 03:37:38
# Fork: 1 of 3
# Warmup Iteration   1: 86.120 ns/op
# Warmup Iteration   2: 85.728 ns/op
# Warmup Iteration   3: 84.436 ns/op
Iteration   1: 84.046 ns/op
Iteration   2: 83.721 ns/op
Iteration   3: 83.823 ns/op
Iteration   4: 84.177 ns/op
Iteration   5: 84.215 ns/op

# Run progress: 62.67% complete, ETA 03:37:29
# Fork: 2 of 3
# Warmup Iteration   1: 87.020 ns/op
# Warmup Iteration   2: 87.344 ns/op
# Warmup Iteration   3: 85.307 ns/op
Iteration   1: 84.956 ns/op
Iteration   2: 84.401 ns/op
Iteration   3: 84.751 ns/op
Iteration   4: 84.823 ns/op
Iteration   5: 84.730 ns/op

# Run progress: 62.70% complete, ETA 03:37:21
# Fork: 3 of 3
# Warmup Iteration   1: 87.761 ns/op
# Warmup Iteration   2: 86.943 ns/op
# Warmup Iteration   3: 84.931 ns/op
Iteration   1: 85.633 ns/op
Iteration   2: 85.942 ns/op
Iteration   3: 85.317 ns/op
Iteration   4: 85.074 ns/op
Iteration   5: 84.742 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline32int.New_to_Ref_as_Ref_arrayfill":
  84.690 ±(99.9%) 0.686 ns/op [Average]
  (min, avg, max) = (83.721, 84.690, 85.942), stdev = 0.642
  CI (99.9%): [84.004, 85.377] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline32int.New_to_Ref_as_Ref_arrayfill
# Parameters: (size = 1000000)

# Run progress: 62.72% complete, ETA 03:37:12
# Fork: 1 of 3
# Warmup Iteration   1: 51252268.750 ns/op
# Warmup Iteration   2: 53175562.500 ns/op
# Warmup Iteration   3: 41422828.320 ns/op
Iteration   1: 50290605.143 ns/op
Iteration   2: 49178303.571 ns/op
Iteration   3: 37927415.111 ns/op
Iteration   4: 45667206.522 ns/op
Iteration   5: 48151799.619 ns/op

# Run progress: 62.75% complete, ETA 03:37:03
# Fork: 2 of 3
# Warmup Iteration   1: 43899333.348 ns/op
# Warmup Iteration   2: 50278412.667 ns/op
# Warmup Iteration   3: 53335776.316 ns/op
Iteration   1: 51081052.050 ns/op
Iteration   2: 43474644.125 ns/op
Iteration   3: 58350034.722 ns/op
Iteration   4: 57633638.889 ns/op
Iteration   5: 39714370.192 ns/op

# Run progress: 62.77% complete, ETA 03:36:55
# Fork: 3 of 3
# Warmup Iteration   1: 54544896.947 ns/op
# Warmup Iteration   2: 51085018.750 ns/op
# Warmup Iteration   3: 48656498.000 ns/op
Iteration   1: 49877505.952 ns/op
Iteration   2: 50631618.750 ns/op
Iteration   3: 40072924.654 ns/op
Iteration   4: 53084552.100 ns/op
Iteration   5: 61054997.588 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline32int.New_to_Ref_as_Ref_arrayfill":
  49079377.933 ±(99.9%) 7363611.892 ns/op [Average]
  (min, avg, max) = (37927415.111, 49079377.933, 61054997.588), stdev = 6887927.133
  CI (99.9%): [41715766.041, 56442989.824] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline32int.New_to_Ref_as_Ref_fill
# Parameters: (size = 100)

# Run progress: 62.79% complete, ETA 03:36:46
# Fork: 1 of 3
# Warmup Iteration   1: 183.951 ns/op
# Warmup Iteration   2: 180.724 ns/op
# Warmup Iteration   3: 180.854 ns/op
Iteration   1: 183.675 ns/op
Iteration   2: 181.373 ns/op
Iteration   3: 181.771 ns/op
Iteration   4: 181.387 ns/op
Iteration   5: 181.631 ns/op

# Run progress: 62.82% complete, ETA 03:36:38
# Fork: 2 of 3
# Warmup Iteration   1: 178.933 ns/op
# Warmup Iteration   2: 175.084 ns/op
# Warmup Iteration   3: 175.970 ns/op
Iteration   1: 177.408 ns/op
Iteration   2: 177.410 ns/op
Iteration   3: 178.142 ns/op
Iteration   4: 176.236 ns/op
Iteration   5: 177.295 ns/op

# Run progress: 62.84% complete, ETA 03:36:29
# Fork: 3 of 3
# Warmup Iteration   1: 191.794 ns/op
# Warmup Iteration   2: 178.631 ns/op
# Warmup Iteration   3: 176.949 ns/op
Iteration   1: 176.635 ns/op
Iteration   2: 176.646 ns/op
Iteration   3: 175.219 ns/op
Iteration   4: 177.785 ns/op
Iteration   5: 179.412 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline32int.New_to_Ref_as_Ref_fill":
  178.802 ±(99.9%) 2.720 ns/op [Average]
  (min, avg, max) = (175.219, 178.802, 183.675), stdev = 2.544
  CI (99.9%): [176.082, 181.521] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline32int.New_to_Ref_as_Ref_fill
# Parameters: (size = 1000000)

# Run progress: 62.87% complete, ETA 03:36:20
# Fork: 1 of 3
# Warmup Iteration   1: 2631514.974 ns/op
# Warmup Iteration   2: 2102707.813 ns/op
# Warmup Iteration   3: 1763183.772 ns/op
Iteration   1: 1789103.505 ns/op
Iteration   2: 1955033.091 ns/op
Iteration   3: 1822270.946 ns/op
Iteration   4: 1749219.929 ns/op
Iteration   5: 1764338.752 ns/op

# Run progress: 62.89% complete, ETA 03:36:11
# Fork: 2 of 3
# Warmup Iteration   1: 2372272.202 ns/op
# Warmup Iteration   2: 1855524.249 ns/op
# Warmup Iteration   3: 1794551.140 ns/op
Iteration   1: 1779845.070 ns/op
Iteration   2: 1906453.791 ns/op
Iteration   3: 1821826.726 ns/op
Iteration   4: 1783992.063 ns/op
Iteration   5: 1780814.757 ns/op

# Run progress: 62.92% complete, ETA 03:36:03
# Fork: 3 of 3
# Warmup Iteration   1: 2344326.453 ns/op
# Warmup Iteration   2: 1959171.378 ns/op
# Warmup Iteration   3: 1786028.857 ns/op
Iteration   1: 1785595.553 ns/op
Iteration   2: 1777964.947 ns/op
Iteration   3: 1773218.018 ns/op
Iteration   4: 1791334.441 ns/op
Iteration   5: 1779436.254 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline32int.New_to_Ref_as_Ref_fill":
  1804029.856 ±(99.9%) 59250.850 ns/op [Average]
  (min, avg, max) = (1749219.929, 1804029.856, 1955033.091), stdev = 55423.282
  CI (99.9%): [1744779.006, 1863280.706] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline32int.New_to_Val_as_Val_arrayfill
# Parameters: (size = 100)

# Run progress: 62.94% complete, ETA 03:35:54
# Fork: 1 of 3
# Warmup Iteration   1: 84.010 ns/op
# Warmup Iteration   2: 83.102 ns/op
# Warmup Iteration   3: 77.789 ns/op
Iteration   1: 77.604 ns/op
Iteration   2: 77.905 ns/op
Iteration   3: 78.135 ns/op
Iteration   4: 78.209 ns/op
Iteration   5: 77.861 ns/op

# Run progress: 62.97% complete, ETA 03:35:45
# Fork: 2 of 3
# Warmup Iteration   1: 83.683 ns/op
# Warmup Iteration   2: 82.852 ns/op
# Warmup Iteration   3: 79.257 ns/op
Iteration   1: 78.624 ns/op
Iteration   2: 78.866 ns/op
Iteration   3: 78.680 ns/op
Iteration   4: 79.161 ns/op
Iteration   5: 78.419 ns/op

# Run progress: 62.99% complete, ETA 03:35:36
# Fork: 3 of 3
# Warmup Iteration   1: 83.217 ns/op
# Warmup Iteration   2: 82.417 ns/op
# Warmup Iteration   3: 79.067 ns/op
Iteration   1: 79.600 ns/op
Iteration   2: 79.254 ns/op
Iteration   3: 79.147 ns/op
Iteration   4: 77.952 ns/op
Iteration   5: 78.209 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline32int.New_to_Val_as_Val_arrayfill":
  78.508 ±(99.9%) 0.638 ns/op [Average]
  (min, avg, max) = (77.604, 78.508, 79.600), stdev = 0.597
  CI (99.9%): [77.870, 79.147] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline32int.New_to_Val_as_Val_arrayfill
# Parameters: (size = 1000000)

# Run progress: 63.01% complete, ETA 03:35:28
# Fork: 1 of 3
# Warmup Iteration   1: 46160643.909 ns/op
# Warmup Iteration   2: 46561479.182 ns/op
# Warmup Iteration   3: 44446729.167 ns/op
Iteration   1: 47872062.500 ns/op
Iteration   2: 53319631.579 ns/op
Iteration   3: 45873427.565 ns/op
Iteration   4: 50386029.150 ns/op
Iteration   5: 49961688.476 ns/op

# Run progress: 63.04% complete, ETA 03:35:19
# Fork: 2 of 3
# Warmup Iteration   1: 46153178.045 ns/op
# Warmup Iteration   2: 54814399.158 ns/op
# Warmup Iteration   3: 54116149.105 ns/op
Iteration   1: 46129355.043 ns/op
Iteration   2: 39465004.808 ns/op
Iteration   3: 49637446.429 ns/op
Iteration   4: 47131335.227 ns/op
Iteration   5: 49216672.619 ns/op

# Run progress: 63.06% complete, ETA 03:35:11
# Fork: 3 of 3
# Warmup Iteration   1: 46235520.818 ns/op
# Warmup Iteration   2: 52087004.150 ns/op
# Warmup Iteration   3: 42756812.500 ns/op
Iteration   1: 43342777.792 ns/op
Iteration   2: 47989352.273 ns/op
Iteration   3: 42706308.360 ns/op
Iteration   4: 43110062.500 ns/op
Iteration   5: 46129195.652 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline32int.New_to_Val_as_Val_arrayfill":
  46818023.332 ±(99.9%) 3831275.352 ns/op [Average]
  (min, avg, max) = (39465004.808, 46818023.332, 53319631.579), stdev = 3583777.342
  CI (99.9%): [42986747.979, 50649298.684] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline32int.New_to_Val_as_Val_fill
# Parameters: (size = 100)

# Run progress: 63.09% complete, ETA 03:35:02
# Fork: 1 of 3
# Warmup Iteration   1: 183.733 ns/op
# Warmup Iteration   2: 176.325 ns/op
# Warmup Iteration   3: 178.828 ns/op
Iteration   1: 176.359 ns/op
Iteration   2: 175.532 ns/op
Iteration   3: 176.379 ns/op
Iteration   4: 175.942 ns/op
Iteration   5: 175.512 ns/op

# Run progress: 63.11% complete, ETA 03:34:53
# Fork: 2 of 3
# Warmup Iteration   1: 185.005 ns/op
# Warmup Iteration   2: 178.285 ns/op
# Warmup Iteration   3: 173.636 ns/op
Iteration   1: 172.927 ns/op
Iteration   2: 173.497 ns/op
Iteration   3: 173.595 ns/op
Iteration   4: 173.653 ns/op
Iteration   5: 173.234 ns/op

# Run progress: 63.14% complete, ETA 03:34:45
# Fork: 3 of 3
# Warmup Iteration   1: 184.074 ns/op
# Warmup Iteration   2: 180.024 ns/op
# Warmup Iteration   3: 177.602 ns/op
Iteration   1: 177.230 ns/op
Iteration   2: 177.029 ns/op
Iteration   3: 177.411 ns/op
Iteration   4: 177.792 ns/op
Iteration   5: 179.440 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline32int.New_to_Val_as_Val_fill":
  175.702 ±(99.9%) 2.093 ns/op [Average]
  (min, avg, max) = (172.927, 175.702, 179.440), stdev = 1.958
  CI (99.9%): [173.609, 177.795] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline32int.New_to_Val_as_Val_fill
# Parameters: (size = 1000000)

# Run progress: 63.16% complete, ETA 03:34:36
# Fork: 1 of 3
# Warmup Iteration   1: 2346809.552 ns/op
# Warmup Iteration   2: 1997144.014 ns/op
# Warmup Iteration   3: 1752561.273 ns/op
Iteration   1: 1754110.387 ns/op
Iteration   2: 1753305.315 ns/op
Iteration   3: 1756350.984 ns/op
Iteration   4: 1749866.334 ns/op
Iteration   5: 1757948.427 ns/op

# Run progress: 63.19% complete, ETA 03:34:27
# Fork: 2 of 3
# Warmup Iteration   1: 2305480.318 ns/op
# Warmup Iteration   2: 1821643.243 ns/op
# Warmup Iteration   3: 1743363.788 ns/op
Iteration   1: 1758989.674 ns/op
Iteration   2: 1774765.205 ns/op
Iteration   3: 1825665.987 ns/op
Iteration   4: 1730773.901 ns/op
Iteration   5: 1732381.128 ns/op

# Run progress: 63.21% complete, ETA 03:34:18
# Fork: 3 of 3
# Warmup Iteration   1: 2311039.752 ns/op
# Warmup Iteration   2: 1932921.606 ns/op
# Warmup Iteration   3: 1762015.098 ns/op
Iteration   1: 1759485.217 ns/op
Iteration   2: 1758997.949 ns/op
Iteration   3: 1760294.298 ns/op
Iteration   4: 1761738.365 ns/op
Iteration   5: 1766100.567 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline32int.New_to_Val_as_Val_fill":
  1760051.583 ±(99.9%) 22838.358 ns/op [Average]
  (min, avg, max) = (1730773.901, 1760051.583, 1825665.987), stdev = 21363.014
  CI (99.9%): [1737213.225, 1782889.941] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline32int.Ref_to_Ref_as_Ref_arrayfillinst
# Parameters: (size = 100)

# Run progress: 63.24% complete, ETA 03:34:10
# Fork: 1 of 3
# Warmup Iteration   1: 67.969 ns/op
# Warmup Iteration   2: 67.252 ns/op
# Warmup Iteration   3: 65.745 ns/op
Iteration   1: 65.563 ns/op
Iteration   2: 65.444 ns/op
Iteration   3: 65.492 ns/op
Iteration   4: 65.710 ns/op
Iteration   5: 66.544 ns/op

# Run progress: 63.26% complete, ETA 03:34:01
# Fork: 2 of 3
# Warmup Iteration   1: 71.390 ns/op
# Warmup Iteration   2: 70.994 ns/op
# Warmup Iteration   3: 66.479 ns/op
Iteration   1: 65.912 ns/op
Iteration   2: 65.536 ns/op
Iteration   3: 65.579 ns/op
Iteration   4: 66.010 ns/op
Iteration   5: 65.732 ns/op

# Run progress: 63.28% complete, ETA 03:33:52
# Fork: 3 of 3
# Warmup Iteration   1: 67.189 ns/op
# Warmup Iteration   2: 68.976 ns/op
# Warmup Iteration   3: 65.882 ns/op
Iteration   1: 65.779 ns/op
Iteration   2: 65.524 ns/op
Iteration   3: 65.627 ns/op
Iteration   4: 65.414 ns/op
Iteration   5: 65.219 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline32int.Ref_to_Ref_as_Ref_arrayfillinst":
  65.672 ±(99.9%) 0.334 ns/op [Average]
  (min, avg, max) = (65.219, 65.672, 66.544), stdev = 0.313
  CI (99.9%): [65.338, 66.007] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline32int.Ref_to_Ref_as_Ref_arrayfillinst
# Parameters: (size = 1000000)

# Run progress: 63.31% complete, ETA 03:33:43
# Fork: 1 of 3
# Warmup Iteration   1: 28675640.028 ns/op
# Warmup Iteration   2: 32351322.581 ns/op
# Warmup Iteration   3: 29738226.706 ns/op
Iteration   1: 34182734.733 ns/op
Iteration   2: 31295463.563 ns/op
Iteration   3: 24292754.952 ns/op
Iteration   4: 41236603.320 ns/op
Iteration   5: 29224894.057 ns/op

# Run progress: 63.33% complete, ETA 03:33:35
# Fork: 2 of 3
# Warmup Iteration   1: 30781448.242 ns/op
# Warmup Iteration   2: 31409897.727 ns/op
# Warmup Iteration   3: 27330587.838 ns/op
Iteration   1: 30521281.545 ns/op
Iteration   2: 28955602.371 ns/op
Iteration   3: 30122183.343 ns/op
Iteration   4: 32021916.656 ns/op
Iteration   5: 30223709.514 ns/op

# Run progress: 63.36% complete, ETA 03:33:26
# Fork: 3 of 3
# Warmup Iteration   1: 32146916.656 ns/op
# Warmup Iteration   2: 23613027.116 ns/op
# Warmup Iteration   3: 30039104.176 ns/op
Iteration   1: 60487436.294 ns/op
Iteration   2: 41890263.875 ns/op
Iteration   3: 38793814.815 ns/op
Iteration   4: 33535469.467 ns/op
Iteration   5: 29517304.743 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline32int.Ref_to_Ref_as_Ref_arrayfillinst":
  34420095.550 ±(99.9%) 9267110.492 ns/op [Average]
  (min, avg, max) = (24292754.952, 34420095.550, 60487436.294), stdev = 8668460.905
  CI (99.9%): [25152985.058, 43687206.042] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline32int.Ref_to_Ref_as_Ref_arrayfillstat
# Parameters: (size = 100)

# Run progress: 63.38% complete, ETA 03:33:18
# Fork: 1 of 3
# Warmup Iteration   1: 67.417 ns/op
# Warmup Iteration   2: 64.143 ns/op
# Warmup Iteration   3: 65.601 ns/op
Iteration   1: 65.570 ns/op
Iteration   2: 65.799 ns/op
Iteration   3: 65.592 ns/op
Iteration   4: 65.561 ns/op
Iteration   5: 65.520 ns/op

# Run progress: 63.41% complete, ETA 03:33:09
# Fork: 2 of 3
# Warmup Iteration   1: 63.842 ns/op
# Warmup Iteration   2: 66.525 ns/op
# Warmup Iteration   3: 66.426 ns/op
Iteration   1: 65.610 ns/op
Iteration   2: 65.725 ns/op
Iteration   3: 65.765 ns/op
Iteration   4: 66.156 ns/op
Iteration   5: 65.658 ns/op

# Run progress: 63.43% complete, ETA 03:33:00
# Fork: 3 of 3
# Warmup Iteration   1: 71.909 ns/op
# Warmup Iteration   2: 67.000 ns/op
# Warmup Iteration   3: 67.871 ns/op
Iteration   1: 66.448 ns/op
Iteration   2: 65.961 ns/op
Iteration   3: 65.831 ns/op
Iteration   4: 90.225 ns/op
Iteration   5: 69.981 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline32int.Ref_to_Ref_as_Ref_arrayfillstat":
  67.693 ±(99.9%) 6.768 ns/op [Average]
  (min, avg, max) = (65.520, 67.693, 90.225), stdev = 6.331
  CI (99.9%): [60.925, 74.462] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline32int.Ref_to_Ref_as_Ref_arrayfillstat
# Parameters: (size = 1000000)

# Run progress: 63.46% complete, ETA 03:32:51
# Fork: 1 of 3
# Warmup Iteration   1: 48564401.500 ns/op
# Warmup Iteration   2: 56352381.579 ns/op
# Warmup Iteration   3: 48032683.727 ns/op
Iteration   1: 56247669.000 ns/op
Iteration   2: 46207679.955 ns/op
Iteration   3: 61168495.059 ns/op
Iteration   4: 44590621.348 ns/op
Iteration   5: 36750153.286 ns/op

# Run progress: 63.48% complete, ETA 03:32:43
# Fork: 2 of 3
# Warmup Iteration   1: 30602984.848 ns/op
# Warmup Iteration   2: 27643157.676 ns/op
# Warmup Iteration   3: 29687172.629 ns/op
Iteration   1: 40630216.640 ns/op
Iteration   2: 53833739.000 ns/op
Iteration   3: 53626877.158 ns/op
Iteration   4: 42287232.625 ns/op
Iteration   5: 48276539.773 ns/op

# Run progress: 63.50% complete, ETA 03:32:34
# Fork: 3 of 3
# Warmup Iteration   1: 34505721.774 ns/op
# Warmup Iteration   2: 45363286.217 ns/op
# Warmup Iteration   3: 48188602.273 ns/op
Iteration   1: 51210122.950 ns/op
Iteration   2: 44585849.652 ns/op
Iteration   3: 18834800.926 ns/op
Iteration   4: 39782580.154 ns/op
Iteration   5: 22772615.733 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline32int.Ref_to_Ref_as_Ref_arrayfillstat":
  44053679.551 ±(99.9%) 12383396.682 ns/op [Average]
  (min, avg, max) = (18834800.926, 44053679.551, 61168495.059), stdev = 11583436.940
  CI (99.9%): [31670282.869, 56437076.232] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline32int.Ref_to_Ref_as_Ref_fillinst
# Parameters: (size = 100)

# Run progress: 63.53% complete, ETA 03:32:26
# Fork: 1 of 3
# Warmup Iteration   1: 75.328 ns/op
# Warmup Iteration   2: 73.915 ns/op
# Warmup Iteration   3: 73.672 ns/op
Iteration   1: 72.672 ns/op
Iteration   2: 72.566 ns/op
Iteration   3: 73.701 ns/op
Iteration   4: 74.112 ns/op
Iteration   5: 73.560 ns/op

# Run progress: 63.55% complete, ETA 03:32:17
# Fork: 2 of 3
# Warmup Iteration   1: 74.461 ns/op
# Warmup Iteration   2: 73.614 ns/op
# Warmup Iteration   3: 73.702 ns/op
Iteration   1: 73.809 ns/op
Iteration   2: 73.647 ns/op
Iteration   3: 78.989 ns/op
Iteration   4: 76.227 ns/op
Iteration   5: 73.708 ns/op

# Run progress: 63.58% complete, ETA 03:32:08
# Fork: 3 of 3
# Warmup Iteration   1: 73.645 ns/op
# Warmup Iteration   2: 73.560 ns/op
# Warmup Iteration   3: 83.838 ns/op
Iteration   1: 74.526 ns/op
Iteration   2: 73.685 ns/op
Iteration   3: 73.362 ns/op
Iteration   4: 73.434 ns/op
Iteration   5: 73.995 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline32int.Ref_to_Ref_as_Ref_fillinst":
  74.133 ±(99.9%) 1.692 ns/op [Average]
  (min, avg, max) = (72.566, 74.133, 78.989), stdev = 1.582
  CI (99.9%): [72.441, 75.824] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline32int.Ref_to_Ref_as_Ref_fillinst
# Parameters: (size = 1000000)

# Run progress: 63.60% complete, ETA 03:32:00
# Fork: 1 of 3
# Warmup Iteration   1: 31165020.212 ns/op
# Warmup Iteration   2: 47638821.955 ns/op
# Warmup Iteration   3: 36517060.345 ns/op
Iteration   1: 41445208.320 ns/op
Iteration   2: 36635989.607 ns/op
Iteration   3: 24690769.317 ns/op
Iteration   4: 44388534.435 ns/op
Iteration   5: 45317175.739 ns/op

# Run progress: 63.63% complete, ETA 03:31:51
# Fork: 2 of 3
# Warmup Iteration   1: 44146318.870 ns/op
# Warmup Iteration   2: 42568090.292 ns/op
# Warmup Iteration   3: 43938453.125 ns/op
Iteration   1: 45310076.087 ns/op
Iteration   2: 45642565.217 ns/op
Iteration   3: 57293314.833 ns/op
Iteration   4: 36323116.071 ns/op
Iteration   5: 24674220.512 ns/op

# Run progress: 63.65% complete, ETA 03:31:43
# Fork: 3 of 3
# Warmup Iteration   1: 35192732.759 ns/op
# Warmup Iteration   2: 35496038.793 ns/op
# Warmup Iteration   3: 40413626.615 ns/op
Iteration   1: 42212067.708 ns/op
Iteration   2: 40458778.320 ns/op
Iteration   3: 35148501.400 ns/op
Iteration   4: 46373304.909 ns/op
Iteration   5: 40712881.423 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline32int.Ref_to_Ref_as_Ref_fillinst":
  40441766.927 ±(99.9%) 8897014.277 ns/op [Average]
  (min, avg, max) = (24674220.512, 40441766.927, 57293314.833), stdev = 8322272.676
  CI (99.9%): [31544752.649, 49338781.204] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline32int.Ref_to_Ref_as_Ref_fillstat
# Parameters: (size = 100)

# Run progress: 63.68% complete, ETA 03:31:34
# Fork: 1 of 3
# Warmup Iteration   1: 74.210 ns/op
# Warmup Iteration   2: 73.543 ns/op
# Warmup Iteration   3: 74.189 ns/op
Iteration   1: 73.316 ns/op
Iteration   2: 73.313 ns/op
Iteration   3: 73.663 ns/op
Iteration   4: 73.832 ns/op
Iteration   5: 73.310 ns/op

# Run progress: 63.70% complete, ETA 03:31:25
# Fork: 2 of 3
# Warmup Iteration   1: 83.168 ns/op
# Warmup Iteration   2: 73.983 ns/op
# Warmup Iteration   3: 73.250 ns/op
Iteration   1: 73.989 ns/op
Iteration   2: 73.568 ns/op
Iteration   3: 74.017 ns/op
Iteration   4: 86.162 ns/op
Iteration   5: 85.349 ns/op

# Run progress: 63.73% complete, ETA 03:31:17
# Fork: 3 of 3
# Warmup Iteration   1: 75.106 ns/op
# Warmup Iteration   2: 73.467 ns/op
# Warmup Iteration   3: 73.180 ns/op
Iteration   1: 73.569 ns/op
Iteration   2: 73.512 ns/op
Iteration   3: 73.819 ns/op
Iteration   4: 73.476 ns/op
Iteration   5: 74.475 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline32int.Ref_to_Ref_as_Ref_fillstat":
  75.291 ±(99.9%) 4.557 ns/op [Average]
  (min, avg, max) = (73.310, 75.291, 86.162), stdev = 4.263
  CI (99.9%): [70.734, 79.848] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline32int.Ref_to_Ref_as_Ref_fillstat
# Parameters: (size = 1000000)

# Run progress: 63.75% complete, ETA 03:31:08
# Fork: 1 of 3
# Warmup Iteration   1: 31963923.188 ns/op
# Warmup Iteration   2: 27393557.432 ns/op
# Warmup Iteration   3: 46860897.727 ns/op
Iteration   1: 53168331.158 ns/op
Iteration   2: 47545333.318 ns/op
Iteration   3: 38752322.115 ns/op
Iteration   4: 52408995.850 ns/op
Iteration   5: 53025831.250 ns/op

# Run progress: 63.77% complete, ETA 03:31:00
# Fork: 2 of 3
# Warmup Iteration   1: 53506552.632 ns/op
# Warmup Iteration   2: 48382325.429 ns/op
# Warmup Iteration   3: 50808739.600 ns/op
Iteration   1: 53622646.947 ns/op
Iteration   2: 36939796.143 ns/op
Iteration   3: 38364013.889 ns/op
Iteration   4: 40697693.320 ns/op
Iteration   5: 43915467.391 ns/op

# Run progress: 63.80% complete, ETA 03:30:51
# Fork: 3 of 3
# Warmup Iteration   1: 33217078.125 ns/op
# Warmup Iteration   2: 57696159.722 ns/op
# Warmup Iteration   3: 56435469.316 ns/op
Iteration   1: 56317611.111 ns/op
Iteration   2: 48368878.952 ns/op
Iteration   3: 48224431.818 ns/op
Iteration   4: 50540689.550 ns/op
Iteration   5: 47896829.381 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline32int.Ref_to_Ref_as_Ref_fillstat":
  47319258.146 ±(99.9%) 6656820.087 ns/op [Average]
  (min, avg, max) = (36939796.143, 47319258.146, 56317611.111), stdev = 6226793.640
  CI (99.9%): [40662438.060, 53976078.233] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline32int.Ref_to_Val_as_Val_arrayfillinst
# Parameters: (size = 100)

# Run progress: 63.82% complete, ETA 03:30:43
# Fork: 1 of 3
# Warmup Iteration   1: 71.648 ns/op
# Warmup Iteration   2: 71.696 ns/op
# Warmup Iteration   3: 69.624 ns/op
Iteration   1: 70.713 ns/op
Iteration   2: 71.028 ns/op
Iteration   3: 69.856 ns/op
Iteration   4: 74.311 ns/op
Iteration   5: 70.029 ns/op

# Run progress: 63.85% complete, ETA 03:30:34
# Fork: 2 of 3
# Warmup Iteration   1: 72.690 ns/op
# Warmup Iteration   2: 71.604 ns/op
# Warmup Iteration   3: 69.543 ns/op
Iteration   1: 78.940 ns/op
Iteration   2: 69.766 ns/op
Iteration   3: 69.844 ns/op
Iteration   4: 69.590 ns/op
Iteration   5: 70.086 ns/op

# Run progress: 63.87% complete, ETA 03:30:25
# Fork: 3 of 3
# Warmup Iteration   1: 72.838 ns/op
# Warmup Iteration   2: 71.401 ns/op
# Warmup Iteration   3: 70.044 ns/op
Iteration   1: 70.216 ns/op
Iteration   2: 70.007 ns/op
Iteration   3: 69.960 ns/op
Iteration   4: 73.690 ns/op
Iteration   5: 69.727 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline32int.Ref_to_Val_as_Val_arrayfillinst":
  71.184 ±(99.9%) 2.756 ns/op [Average]
  (min, avg, max) = (69.590, 71.184, 78.940), stdev = 2.578
  CI (99.9%): [68.428, 73.940] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline32int.Ref_to_Val_as_Val_arrayfillinst
# Parameters: (size = 1000000)

# Run progress: 63.90% complete, ETA 03:30:16
# Fork: 1 of 3
# Warmup Iteration   1: 51460577.050 ns/op
# Warmup Iteration   2: 47142276.545 ns/op
# Warmup Iteration   3: 50258813.524 ns/op
Iteration   1: 57473127.333 ns/op
Iteration   2: 51817075.000 ns/op
Iteration   3: 50664283.350 ns/op
Iteration   4: 48374563.524 ns/op
Iteration   5: 53460796.053 ns/op

# Run progress: 63.92% complete, ETA 03:30:08
# Fork: 2 of 3
# Warmup Iteration   1: 53074335.400 ns/op
# Warmup Iteration   2: 36773803.571 ns/op
# Warmup Iteration   3: 53173464.550 ns/op
Iteration   1: 48805140.182 ns/op
Iteration   2: 53025975.842 ns/op
Iteration   3: 36715325.893 ns/op
Iteration   4: 42840934.000 ns/op
Iteration   5: 54579929.842 ns/op

# Run progress: 63.95% complete, ETA 03:29:59
# Fork: 3 of 3
# Warmup Iteration   1: 46968439.409 ns/op
# Warmup Iteration   2: 40691512.846 ns/op
# Warmup Iteration   3: 49424307.524 ns/op
Iteration   1: 57433546.278 ns/op
Iteration   2: 49076892.857 ns/op
Iteration   3: 49217571.429 ns/op
Iteration   4: 46876888.227 ns/op
Iteration   5: 48441984.095 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline32int.Ref_to_Val_as_Val_arrayfillinst":
  49920268.927 ±(99.9%) 5730863.184 ns/op [Average]
  (min, avg, max) = (36715325.893, 49920268.927, 57473127.333), stdev = 5360652.978
  CI (99.9%): [44189405.743, 55651132.111] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline32int.Ref_to_Val_as_Val_arrayfillstat
# Parameters: (size = 100)

# Run progress: 63.97% complete, ETA 03:29:51
# Fork: 1 of 3
# Warmup Iteration   1: 72.351 ns/op
# Warmup Iteration   2: 68.176 ns/op
# Warmup Iteration   3: 71.409 ns/op
Iteration   1: 70.004 ns/op
Iteration   2: 69.809 ns/op
Iteration   3: 69.640 ns/op
Iteration   4: 71.036 ns/op
Iteration   5: 69.817 ns/op

# Run progress: 64.00% complete, ETA 03:29:42
# Fork: 2 of 3
# Warmup Iteration   1: 67.812 ns/op
# Warmup Iteration   2: 69.873 ns/op
# Warmup Iteration   3: 70.553 ns/op
Iteration   1: 69.807 ns/op
Iteration   2: 70.634 ns/op
Iteration   3: 69.851 ns/op
Iteration   4: 69.878 ns/op
Iteration   5: 70.184 ns/op

# Run progress: 64.02% complete, ETA 03:29:33
# Fork: 3 of 3
# Warmup Iteration   1: 71.568 ns/op
# Warmup Iteration   2: 69.228 ns/op
# Warmup Iteration   3: 69.687 ns/op
Iteration   1: 70.111 ns/op
Iteration   2: 73.080 ns/op
Iteration   3: 69.735 ns/op
Iteration   4: 69.742 ns/op
Iteration   5: 87.190 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline32int.Ref_to_Val_as_Val_arrayfillstat":
  71.368 ±(99.9%) 4.771 ns/op [Average]
  (min, avg, max) = (69.640, 71.368, 87.190), stdev = 4.463
  CI (99.9%): [66.597, 76.139] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline32int.Ref_to_Val_as_Val_arrayfillstat
# Parameters: (size = 1000000)

# Run progress: 64.04% complete, ETA 03:29:25
# Fork: 1 of 3
# Warmup Iteration   1: 27957585.568 ns/op
# Warmup Iteration   2: 23913706.395 ns/op
# Warmup Iteration   3: 24830916.659 ns/op
Iteration   1: 17683081.140 ns/op
Iteration   2: 15941295.563 ns/op
Iteration   3: 16389841.403 ns/op
Iteration   4: 20713467.673 ns/op
Iteration   5: 13077505.872 ns/op

# Run progress: 64.07% complete, ETA 03:29:17
# Fork: 2 of 3
# Warmup Iteration   1: 19178133.642 ns/op
# Warmup Iteration   2: 22887538.818 ns/op
# Warmup Iteration   3: 21869314.326 ns/op
Iteration   1: 17083897.610 ns/op
Iteration   2: 22160343.085 ns/op
Iteration   3: 29227980.943 ns/op
Iteration   4: 28980960.714 ns/op
Iteration   5: 28609001.139 ns/op

# Run progress: 64.09% complete, ETA 03:29:08
# Fork: 3 of 3
# Warmup Iteration   1: 24847799.780 ns/op
# Warmup Iteration   2: 30107158.088 ns/op
# Warmup Iteration   3: 29467896.429 ns/op
Iteration   1: 25331778.125 ns/op
Iteration   2: 26277172.026 ns/op
Iteration   3: 30940638.471 ns/op
Iteration   4: 32237835.938 ns/op
Iteration   5: 25302973.950 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline32int.Ref_to_Val_as_Val_arrayfillstat":
  23330518.243 ±(99.9%) 6611358.439 ns/op [Average]
  (min, avg, max) = (13077505.872, 23330518.243, 32237835.938), stdev = 6184268.786
  CI (99.9%): [16719159.805, 29941876.682] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline32int.Ref_to_Val_as_Val_fillinst
# Parameters: (size = 100)

# Run progress: 64.12% complete, ETA 03:28:59
# Fork: 1 of 3
# Warmup Iteration   1: 75.003 ns/op
# Warmup Iteration   2: 73.457 ns/op
# Warmup Iteration   3: 77.849 ns/op
Iteration   1: 74.363 ns/op
Iteration   2: 73.762 ns/op
Iteration   3: 74.219 ns/op
Iteration   4: 72.938 ns/op
Iteration   5: 73.555 ns/op

# Run progress: 64.14% complete, ETA 03:28:51
# Fork: 2 of 3
# Warmup Iteration   1: 73.944 ns/op
# Warmup Iteration   2: 73.335 ns/op
# Warmup Iteration   3: 73.139 ns/op
Iteration   1: 74.260 ns/op
Iteration   2: 77.159 ns/op
Iteration   3: 74.480 ns/op
Iteration   4: 74.389 ns/op
Iteration   5: 75.197 ns/op

# Run progress: 64.17% complete, ETA 03:28:42
# Fork: 3 of 3
# Warmup Iteration   1: 74.795 ns/op
# Warmup Iteration   2: 74.118 ns/op
# Warmup Iteration   3: 76.315 ns/op
Iteration   1: 74.483 ns/op
Iteration   2: 74.321 ns/op
Iteration   3: 74.221 ns/op
Iteration   4: 74.101 ns/op
Iteration   5: 74.294 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline32int.Ref_to_Val_as_Val_fillinst":
  74.383 ±(99.9%) 0.977 ns/op [Average]
  (min, avg, max) = (72.938, 74.383, 77.159), stdev = 0.914
  CI (99.9%): [73.405, 75.360] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline32int.Ref_to_Val_as_Val_fillinst
# Parameters: (size = 1000000)

# Run progress: 64.19% complete, ETA 03:28:33
# Fork: 1 of 3
# Warmup Iteration   1: 30016546.588 ns/op
# Warmup Iteration   2: 31253900.242 ns/op
# Warmup Iteration   3: 30942228.545 ns/op
Iteration   1: 36427278.286 ns/op
Iteration   2: 34656451.367 ns/op
Iteration   3: 25777142.103 ns/op
Iteration   4: 33871450.000 ns/op
Iteration   5: 29571792.857 ns/op

# Run progress: 64.22% complete, ETA 03:28:25
# Fork: 2 of 3
# Warmup Iteration   1: 27869776.316 ns/op
# Warmup Iteration   2: 32239234.375 ns/op
# Warmup Iteration   3: 26003311.450 ns/op
Iteration   1: 36082846.714 ns/op
Iteration   2: 34038962.500 ns/op
Iteration   3: 35722599.138 ns/op
Iteration   4: 41146308.320 ns/op
Iteration   5: 29323202.400 ns/op

# Run progress: 64.24% complete, ETA 03:28:16
# Fork: 3 of 3
# Warmup Iteration   1: 25311702.100 ns/op
# Warmup Iteration   2: 34876261.483 ns/op
# Warmup Iteration   3: 33777570.833 ns/op
Iteration   1: 28477243.056 ns/op
Iteration   2: 38358003.074 ns/op
Iteration   3: 24968114.854 ns/op
Iteration   4: 33915013.452 ns/op
Iteration   5: 27357269.135 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline32int.Ref_to_Val_as_Val_fillinst":
  32646245.150 ±(99.9%) 5123244.765 ns/op [Average]
  (min, avg, max) = (24968114.854, 32646245.150, 41146308.320), stdev = 4792286.332
  CI (99.9%): [27523000.385, 37769489.915] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline32int.Ref_to_Val_as_Val_fillstat
# Parameters: (size = 100)

# Run progress: 64.26% complete, ETA 03:28:07
# Fork: 1 of 3
# Warmup Iteration   1: 73.773 ns/op
# Warmup Iteration   2: 73.542 ns/op
# Warmup Iteration   3: 73.425 ns/op
Iteration   1: 73.467 ns/op
Iteration   2: 73.631 ns/op
Iteration   3: 73.752 ns/op
Iteration   4: 73.612 ns/op
Iteration   5: 73.215 ns/op

# Run progress: 64.29% complete, ETA 03:27:59
# Fork: 2 of 3
# Warmup Iteration   1: 73.666 ns/op
# Warmup Iteration   2: 73.514 ns/op
# Warmup Iteration   3: 73.597 ns/op
Iteration   1: 73.546 ns/op
Iteration   2: 73.212 ns/op
Iteration   3: 73.513 ns/op
Iteration   4: 77.691 ns/op
Iteration   5: 73.720 ns/op

# Run progress: 64.31% complete, ETA 03:27:50
# Fork: 3 of 3
# Warmup Iteration   1: 75.789 ns/op
# Warmup Iteration   2: 73.544 ns/op
# Warmup Iteration   3: 73.583 ns/op
Iteration   1: 73.611 ns/op
Iteration   2: 73.399 ns/op
Iteration   3: 73.269 ns/op
Iteration   4: 73.292 ns/op
Iteration   5: 73.447 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline32int.Ref_to_Val_as_Val_fillstat":
  73.759 ±(99.9%) 1.178 ns/op [Average]
  (min, avg, max) = (73.212, 73.759, 77.691), stdev = 1.102
  CI (99.9%): [72.581, 74.936] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline32int.Ref_to_Val_as_Val_fillstat
# Parameters: (size = 1000000)

# Run progress: 64.34% complete, ETA 03:27:41
# Fork: 1 of 3
# Warmup Iteration   1: 31754723.969 ns/op
# Warmup Iteration   2: 30199565.486 ns/op
# Warmup Iteration   3: 35030936.793 ns/op
Iteration   1: 34543775.000 ns/op
Iteration   2: 25278514.220 ns/op
Iteration   3: 34566825.000 ns/op
Iteration   4: 25797227.075 ns/op
Iteration   5: 34382338.900 ns/op

# Run progress: 64.36% complete, ETA 03:27:33
# Fork: 2 of 3
# Warmup Iteration   1: 30476732.853 ns/op
# Warmup Iteration   2: 29029837.944 ns/op
# Warmup Iteration   3: 31613125.000 ns/op
Iteration   1: 26984007.684 ns/op
Iteration   2: 30064308.824 ns/op
Iteration   3: 29951585.794 ns/op
Iteration   4: 36842252.964 ns/op
Iteration   5: 27664680.189 ns/op

# Run progress: 64.39% complete, ETA 03:27:24
# Fork: 3 of 3
# Warmup Iteration   1: 35233991.379 ns/op
# Warmup Iteration   2: 44418992.739 ns/op
# Warmup Iteration   3: 41771080.000 ns/op
Iteration   1: 29562329.771 ns/op
Iteration   2: 34556380.533 ns/op
Iteration   3: 36298495.536 ns/op
Iteration   4: 31632768.250 ns/op
Iteration   5: 33094040.323 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline32int.Ref_to_Val_as_Val_fillstat":
  31414635.338 ±(99.9%) 4089664.185 ns/op [Average]
  (min, avg, max) = (25278514.220, 31414635.338, 36842252.964), stdev = 3825474.417
  CI (99.9%): [27324971.152, 35504299.523] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline32int.Val_to_Ref_as_Ref_arrayfillinst
# Parameters: (size = 100)

# Run progress: 64.41% complete, ETA 03:27:16
# Fork: 1 of 3
# Warmup Iteration   1: 71.812 ns/op
# Warmup Iteration   2: 72.208 ns/op
# Warmup Iteration   3: 69.810 ns/op
Iteration   1: 69.807 ns/op
Iteration   2: 69.733 ns/op
Iteration   3: 69.792 ns/op
Iteration   4: 69.775 ns/op
Iteration   5: 69.686 ns/op

# Run progress: 64.44% complete, ETA 03:27:07
# Fork: 2 of 3
# Warmup Iteration   1: 71.304 ns/op
# Warmup Iteration   2: 71.529 ns/op
# Warmup Iteration   3: 71.383 ns/op
Iteration   1: 69.804 ns/op
Iteration   2: 70.782 ns/op
Iteration   3: 69.698 ns/op
Iteration   4: 70.765 ns/op
Iteration   5: 69.780 ns/op

# Run progress: 64.46% complete, ETA 03:26:58
# Fork: 3 of 3
# Warmup Iteration   1: 71.775 ns/op
# Warmup Iteration   2: 71.568 ns/op
# Warmup Iteration   3: 69.690 ns/op
Iteration   1: 69.770 ns/op
Iteration   2: 70.679 ns/op
Iteration   3: 70.135 ns/op
Iteration   4: 69.791 ns/op
Iteration   5: 69.469 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline32int.Val_to_Ref_as_Ref_arrayfillinst":
  69.964 ±(99.9%) 0.453 ns/op [Average]
  (min, avg, max) = (69.469, 69.964, 70.782), stdev = 0.424
  CI (99.9%): [69.511, 70.417] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline32int.Val_to_Ref_as_Ref_arrayfillinst
# Parameters: (size = 1000000)

# Run progress: 64.49% complete, ETA 03:26:49
# Fork: 1 of 3
# Warmup Iteration   1: 40083248.320 ns/op
# Warmup Iteration   2: 34889771.552 ns/op
# Warmup Iteration   3: 29994106.618 ns/op
Iteration   1: 34863204.167 ns/op
Iteration   2: 30567747.559 ns/op
Iteration   3: 32701884.419 ns/op
Iteration   4: 30729888.909 ns/op
Iteration   5: 31521186.848 ns/op

# Run progress: 64.51% complete, ETA 03:26:41
# Fork: 2 of 3
# Warmup Iteration   1: 30276626.206 ns/op
# Warmup Iteration   2: 32714423.188 ns/op
# Warmup Iteration   3: 30600788.000 ns/op
Iteration   1: 29641480.943 ns/op
Iteration   2: 37778600.333 ns/op
Iteration   3: 36727572.929 ns/op
Iteration   4: 29934567.412 ns/op
Iteration   5: 32999017.484 ns/op

# Run progress: 64.53% complete, ETA 03:26:32
# Fork: 3 of 3
# Warmup Iteration   1: 31821895.813 ns/op
# Warmup Iteration   2: 33144235.226 ns/op
# Warmup Iteration   3: 39046517.615 ns/op
Iteration   1: 33750998.677 ns/op
Iteration   2: 30897330.788 ns/op
Iteration   3: 36104528.286 ns/op
Iteration   4: 32374817.719 ns/op
Iteration   5: 30693444.853 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline32int.Val_to_Ref_as_Ref_arrayfillinst":
  32752418.088 ±(99.9%) 2764801.427 ns/op [Average]
  (min, avg, max) = (29641480.943, 32752418.088, 37778600.333), stdev = 2586196.970
  CI (99.9%): [29987616.662, 35517219.515] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline32int.Val_to_Ref_as_Ref_arrayfillstat
# Parameters: (size = 100)

# Run progress: 64.56% complete, ETA 03:26:24
# Fork: 1 of 3
# Warmup Iteration   1: 71.970 ns/op
# Warmup Iteration   2: 68.243 ns/op
# Warmup Iteration   3: 69.664 ns/op
Iteration   1: 68.721 ns/op
Iteration   2: 69.304 ns/op
Iteration   3: 69.687 ns/op
Iteration   4: 69.766 ns/op
Iteration   5: 69.442 ns/op

# Run progress: 64.58% complete, ETA 03:26:15
# Fork: 2 of 3
# Warmup Iteration   1: 71.732 ns/op
# Warmup Iteration   2: 69.102 ns/op
# Warmup Iteration   3: 71.981 ns/op
Iteration   1: 72.691 ns/op
Iteration   2: 69.736 ns/op
Iteration   3: 69.680 ns/op
Iteration   4: 69.656 ns/op
Iteration   5: 69.767 ns/op

# Run progress: 64.61% complete, ETA 03:26:06
# Fork: 3 of 3
# Warmup Iteration   1: 71.746 ns/op
# Warmup Iteration   2: 68.108 ns/op
# Warmup Iteration   3: 69.884 ns/op
Iteration   1: 69.381 ns/op
Iteration   2: 71.708 ns/op
Iteration   3: 82.741 ns/op
Iteration   4: 92.911 ns/op
Iteration   5: 81.681 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline32int.Val_to_Ref_as_Ref_arrayfillstat":
  73.125 ±(99.9%) 7.509 ns/op [Average]
  (min, avg, max) = (68.721, 73.125, 92.911), stdev = 7.024
  CI (99.9%): [65.616, 80.634] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline32int.Val_to_Ref_as_Ref_arrayfillstat
# Parameters: (size = 1000000)

# Run progress: 64.63% complete, ETA 03:25:58
# Fork: 1 of 3
# Warmup Iteration   1: 32707233.871 ns/op
# Warmup Iteration   2: 32159798.156 ns/op
# Warmup Iteration   3: 30528210.794 ns/op
Iteration   1: 31341207.061 ns/op
Iteration   2: 32596721.774 ns/op
Iteration   3: 32900349.452 ns/op
Iteration   4: 32907293.032 ns/op
Iteration   5: 38080983.037 ns/op

# Run progress: 64.66% complete, ETA 03:25:49
# Fork: 2 of 3
# Warmup Iteration   1: 30675402.788 ns/op
# Warmup Iteration   2: 36608916.655 ns/op
# Warmup Iteration   3: 40703195.000 ns/op
Iteration   1: 28996830.943 ns/op
Iteration   2: 37004694.929 ns/op
Iteration   3: 35421580.448 ns/op
Iteration   4: 31568662.750 ns/op
Iteration   5: 32562100.806 ns/op

# Run progress: 64.68% complete, ETA 03:25:40
# Fork: 3 of 3
# Warmup Iteration   1: 26942127.211 ns/op
# Warmup Iteration   2: 33946485.194 ns/op
# Warmup Iteration   3: 29622979.147 ns/op
Iteration   1: 37360126.556 ns/op
Iteration   2: 32377506.500 ns/op
Iteration   3: 30833345.588 ns/op
Iteration   4: 37371466.037 ns/op
Iteration   5: 32120171.875 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline32int.Val_to_Ref_as_Ref_arrayfillstat":
  33562869.386 ±(99.9%) 2971206.985 ns/op [Average]
  (min, avg, max) = (28996830.943, 33562869.386, 38080983.037), stdev = 2779268.858
  CI (99.9%): [30591662.400, 36534076.371] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline32int.Val_to_Ref_as_Ref_fillinst
# Parameters: (size = 100)

# Run progress: 64.71% complete, ETA 03:25:32
# Fork: 1 of 3
# Warmup Iteration   1: 73.968 ns/op
# Warmup Iteration   2: 76.095 ns/op
# Warmup Iteration   3: 83.967 ns/op
Iteration   1: 85.238 ns/op
Iteration   2: 73.958 ns/op
Iteration   3: 73.808 ns/op
Iteration   4: 81.022 ns/op
Iteration   5: 95.636 ns/op

# Run progress: 64.73% complete, ETA 03:25:23
# Fork: 2 of 3
# Warmup Iteration   1: 88.887 ns/op
# Warmup Iteration   2: 80.517 ns/op
# Warmup Iteration   3: 96.105 ns/op
Iteration   1: 99.402 ns/op
Iteration   2: 95.148 ns/op
Iteration   3: 74.980 ns/op
Iteration   4: 83.060 ns/op
Iteration   5: 76.850 ns/op

# Run progress: 64.75% complete, ETA 03:25:15
# Fork: 3 of 3
# Warmup Iteration   1: 74.075 ns/op
# Warmup Iteration   2: 79.706 ns/op
# Warmup Iteration   3: 86.023 ns/op
Iteration   1: 78.941 ns/op
Iteration   2: 73.901 ns/op
Iteration   3: 73.608 ns/op
Iteration   4: 73.741 ns/op
Iteration   5: 83.588 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline32int.Val_to_Ref_as_Ref_fillinst":
  81.525 ±(99.9%) 9.453 ns/op [Average]
  (min, avg, max) = (73.608, 81.525, 99.402), stdev = 8.842
  CI (99.9%): [72.073, 90.978] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline32int.Val_to_Ref_as_Ref_fillinst
# Parameters: (size = 1000000)

# Run progress: 64.78% complete, ETA 03:25:06
# Fork: 1 of 3
# Warmup Iteration   1: 29875591.686 ns/op
# Warmup Iteration   2: 37217023.786 ns/op
# Warmup Iteration   3: 41026255.000 ns/op
Iteration   1: 49425339.286 ns/op
Iteration   2: 35240258.621 ns/op
Iteration   3: 43159732.625 ns/op
Iteration   4: 48313793.619 ns/op
Iteration   5: 35713021.552 ns/op

# Run progress: 64.80% complete, ETA 03:24:57
# Fork: 2 of 3
# Warmup Iteration   1: 45298057.957 ns/op
# Warmup Iteration   2: 46286527.174 ns/op
# Warmup Iteration   3: 35987019.357 ns/op
Iteration   1: 42085320.000 ns/op
Iteration   2: 47698469.682 ns/op
Iteration   3: 44614974.652 ns/op
Iteration   4: 39623171.296 ns/op
Iteration   5: 51045595.850 ns/op

# Run progress: 64.83% complete, ETA 03:24:49
# Fork: 3 of 3
# Warmup Iteration   1: 34881923.600 ns/op
# Warmup Iteration   2: 48466216.238 ns/op
# Warmup Iteration   3: 38617683.667 ns/op
Iteration   1: 53458717.105 ns/op
Iteration   2: 44376836.957 ns/op
Iteration   3: 41184433.320 ns/op
Iteration   4: 43575067.000 ns/op
Iteration   5: 38912285.231 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline32int.Val_to_Ref_as_Ref_fillinst":
  43895134.453 ±(99.9%) 5743676.151 ns/op [Average]
  (min, avg, max) = (35240258.621, 43895134.453, 53458717.105), stdev = 5372638.235
  CI (99.9%): [38151458.302, 49638810.604] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline32int.Val_to_Ref_as_Ref_fillstat
# Parameters: (size = 100)

# Run progress: 64.85% complete, ETA 03:24:40
# Fork: 1 of 3
# Warmup Iteration   1: 154.344 ns/op
# Warmup Iteration   2: 153.190 ns/op
# Warmup Iteration   3: 153.412 ns/op
Iteration   1: 153.679 ns/op
Iteration   2: 99.408 ns/op
Iteration   3: 85.141 ns/op
Iteration   4: 81.891 ns/op
Iteration   5: 87.994 ns/op

# Run progress: 64.88% complete, ETA 03:24:32
# Fork: 2 of 3
# Warmup Iteration   1: 73.563 ns/op
# Warmup Iteration   2: 73.637 ns/op
# Warmup Iteration   3: 73.364 ns/op
Iteration   1: 73.462 ns/op
Iteration   2: 73.442 ns/op
Iteration   3: 73.834 ns/op
Iteration   4: 73.401 ns/op
Iteration   5: 74.525 ns/op

# Run progress: 64.90% complete, ETA 03:24:23
# Fork: 3 of 3
# Warmup Iteration   1: 98.903 ns/op
# Warmup Iteration   2: 73.454 ns/op
# Warmup Iteration   3: 75.599 ns/op
Iteration   1: 74.601 ns/op
Iteration   2: 74.230 ns/op
Iteration   3: 74.180 ns/op
Iteration   4: 73.584 ns/op
Iteration   5: 73.631 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline32int.Val_to_Ref_as_Ref_fillstat":
  83.134 ±(99.9%) 22.365 ns/op [Average]
  (min, avg, max) = (73.401, 83.134, 153.679), stdev = 20.920
  CI (99.9%): [60.769, 105.498] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline32int.Val_to_Ref_as_Ref_fillstat
# Parameters: (size = 1000000)

# Run progress: 64.93% complete, ETA 03:24:14
# Fork: 1 of 3
# Warmup Iteration   1: 29031328.571 ns/op
# Warmup Iteration   2: 30126183.314 ns/op
# Warmup Iteration   3: 33154356.194 ns/op
Iteration   1: 28195351.833 ns/op
Iteration   2: 28124075.459 ns/op
Iteration   3: 29207492.857 ns/op
Iteration   4: 28145282.417 ns/op
Iteration   5: 29870134.824 ns/op

# Run progress: 64.95% complete, ETA 03:24:06
# Fork: 2 of 3
# Warmup Iteration   1: 31678881.333 ns/op
# Warmup Iteration   2: 33289443.548 ns/op
# Warmup Iteration   3: 24694513.905 ns/op
Iteration   1: 21178322.042 ns/op
Iteration   2: 32669279.548 ns/op
Iteration   3: 38859763.889 ns/op
Iteration   4: 29940508.588 ns/op
Iteration   5: 32488907.258 ns/op

# Run progress: 64.98% complete, ETA 03:23:57
# Fork: 3 of 3
# Warmup Iteration   1: 28094201.595 ns/op
# Warmup Iteration   2: 28034704.861 ns/op
# Warmup Iteration   3: 31591432.281 ns/op
Iteration   1: 30714758.848 ns/op
Iteration   2: 30693276.971 ns/op
Iteration   3: 30757088.235 ns/op
Iteration   4: 29057141.657 ns/op
Iteration   5: 33944477.767 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline32int.Val_to_Ref_as_Ref_fillstat":
  30256390.813 ±(99.9%) 4015620.151 ns/op [Average]
  (min, avg, max) = (21178322.042, 30256390.813, 38859763.889), stdev = 3756213.581
  CI (99.9%): [26240770.662, 34272010.964] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline32int.Val_to_Val_as_Val_arrayfillinst
# Parameters: (size = 100)

# Run progress: 65.00% complete, ETA 03:23:49
# Fork: 1 of 3
# Warmup Iteration   1: 72.167 ns/op
# Warmup Iteration   2: 71.348 ns/op
# Warmup Iteration   3: 69.838 ns/op
Iteration   1: 69.808 ns/op
Iteration   2: 69.958 ns/op
Iteration   3: 70.026 ns/op
Iteration   4: 70.020 ns/op
Iteration   5: 69.813 ns/op

# Run progress: 65.02% complete, ETA 03:23:40
# Fork: 2 of 3
# Warmup Iteration   1: 71.663 ns/op
# Warmup Iteration   2: 71.460 ns/op
# Warmup Iteration   3: 69.818 ns/op
Iteration   1: 69.867 ns/op
Iteration   2: 69.442 ns/op
Iteration   3: 69.196 ns/op
Iteration   4: 69.647 ns/op
Iteration   5: 69.877 ns/op

# Run progress: 65.05% complete, ETA 03:23:31
# Fork: 3 of 3
# Warmup Iteration   1: 72.184 ns/op
# Warmup Iteration   2: 71.708 ns/op
# Warmup Iteration   3: 70.031 ns/op
Iteration   1: 70.025 ns/op
Iteration   2: 70.022 ns/op
Iteration   3: 69.897 ns/op
Iteration   4: 70.215 ns/op
Iteration   5: 69.938 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline32int.Val_to_Val_as_Val_arrayfillinst":
  69.850 ±(99.9%) 0.273 ns/op [Average]
  (min, avg, max) = (69.196, 69.850, 70.215), stdev = 0.256
  CI (99.9%): [69.577, 70.123] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline32int.Val_to_Val_as_Val_arrayfillinst
# Parameters: (size = 1000000)

# Run progress: 65.07% complete, ETA 03:23:23
# Fork: 1 of 3
# Warmup Iteration   1: 29776871.324 ns/op
# Warmup Iteration   2: 30741604.788 ns/op
# Warmup Iteration   3: 35607172.414 ns/op
Iteration   1: 32429742.188 ns/op
Iteration   2: 36246369.036 ns/op
Iteration   3: 29581008.314 ns/op
Iteration   4: 32024718.750 ns/op
Iteration   5: 27054628.205 ns/op

# Run progress: 65.10% complete, ETA 03:23:14
# Fork: 2 of 3
# Warmup Iteration   1: 25398720.825 ns/op
# Warmup Iteration   2: 35396679.621 ns/op
# Warmup Iteration   3: 28836586.806 ns/op
Iteration   1: 30583055.147 ns/op
Iteration   2: 30642037.879 ns/op
Iteration   3: 36651697.929 ns/op
Iteration   4: 30057339.286 ns/op
Iteration   5: 32199489.594 ns/op

# Run progress: 65.12% complete, ETA 03:23:05
# Fork: 3 of 3
# Warmup Iteration   1: 38728848.741 ns/op
# Warmup Iteration   2: 27393597.605 ns/op
# Warmup Iteration   3: 37189062.500 ns/op
Iteration   1: 30344096.824 ns/op
Iteration   2: 33886048.600 ns/op
Iteration   3: 30508255.030 ns/op
Iteration   4: 31556963.531 ns/op
Iteration   5: 34869668.103 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline32int.Val_to_Val_as_Val_arrayfillinst":
  31909007.894 ±(99.9%) 2779859.566 ns/op [Average]
  (min, avg, max) = (27054628.205, 31909007.894, 36651697.929), stdev = 2600282.363
  CI (99.9%): [29129148.329, 34688867.460] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline32int.Val_to_Val_as_Val_arrayfillstat
# Parameters: (size = 100)

# Run progress: 65.15% complete, ETA 03:22:57
# Fork: 1 of 3
# Warmup Iteration   1: 73.519 ns/op
# Warmup Iteration   2: 68.143 ns/op
# Warmup Iteration   3: 69.738 ns/op
Iteration   1: 69.764 ns/op
Iteration   2: 69.814 ns/op
Iteration   3: 69.893 ns/op
Iteration   4: 69.754 ns/op
Iteration   5: 69.827 ns/op

# Run progress: 65.17% complete, ETA 03:22:48
# Fork: 2 of 3
# Warmup Iteration   1: 67.673 ns/op
# Warmup Iteration   2: 69.694 ns/op
# Warmup Iteration   3: 69.648 ns/op
Iteration   1: 69.830 ns/op
Iteration   2: 69.694 ns/op
Iteration   3: 69.755 ns/op
Iteration   4: 69.807 ns/op
Iteration   5: 69.654 ns/op

# Run progress: 65.20% complete, ETA 03:22:40
# Fork: 3 of 3
# Warmup Iteration   1: 71.732 ns/op
# Warmup Iteration   2: 68.365 ns/op
# Warmup Iteration   3: 69.410 ns/op
Iteration   1: 69.037 ns/op
Iteration   2: 69.939 ns/op
Iteration   3: 69.673 ns/op
Iteration   4: 69.482 ns/op
Iteration   5: 69.402 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline32int.Val_to_Val_as_Val_arrayfillstat":
  69.688 ±(99.9%) 0.246 ns/op [Average]
  (min, avg, max) = (69.037, 69.688, 69.939), stdev = 0.230
  CI (99.9%): [69.443, 69.934] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline32int.Val_to_Val_as_Val_arrayfillstat
# Parameters: (size = 1000000)

# Run progress: 65.22% complete, ETA 03:22:31
# Fork: 1 of 3
# Warmup Iteration   1: 31170578.273 ns/op
# Warmup Iteration   2: 37855973.741 ns/op
# Warmup Iteration   3: 34524630.533 ns/op
Iteration   1: 32797297.032 ns/op
Iteration   2: 35924888.393 ns/op
Iteration   3: 30110370.088 ns/op
Iteration   4: 36069915.179 ns/op
Iteration   5: 31760290.375 ns/op

# Run progress: 65.25% complete, ETA 03:22:22
# Fork: 2 of 3
# Warmup Iteration   1: 29054809.514 ns/op
# Warmup Iteration   2: 33324565.125 ns/op
# Warmup Iteration   3: 36395160.714 ns/op
Iteration   1: 34291587.500 ns/op
Iteration   2: 32207270.844 ns/op
Iteration   3: 32525963.710 ns/op
Iteration   4: 32900272.871 ns/op
Iteration   5: 29608294.118 ns/op

# Run progress: 65.27% complete, ETA 03:22:14
# Fork: 3 of 3
# Warmup Iteration   1: 31697826.844 ns/op
# Warmup Iteration   2: 34233109.733 ns/op
# Warmup Iteration   3: 28184934.028 ns/op
Iteration   1: 34231368.033 ns/op
Iteration   2: 30692155.303 ns/op
Iteration   3: 29720558.824 ns/op
Iteration   4: 31493798.000 ns/op
Iteration   5: 37619648.148 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline32int.Val_to_Val_as_Val_arrayfillstat":
  32796911.894 ±(99.9%) 2595646.528 ns/op [Average]
  (min, avg, max) = (29608294.118, 32796911.894, 37619648.148), stdev = 2427969.373
  CI (99.9%): [30201265.366, 35392558.423] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline32int.Val_to_Val_as_Val_fillinst
# Parameters: (size = 100)

# Run progress: 65.29% complete, ETA 03:22:05
# Fork: 1 of 3
# Warmup Iteration   1: 74.702 ns/op
# Warmup Iteration   2: 74.012 ns/op
# Warmup Iteration   3: 73.605 ns/op
Iteration   1: 73.716 ns/op
Iteration   2: 73.378 ns/op
Iteration   3: 73.971 ns/op
Iteration   4: 74.032 ns/op
Iteration   5: 74.064 ns/op

# Run progress: 65.32% complete, ETA 03:21:56
# Fork: 2 of 3
# Warmup Iteration   1: 73.811 ns/op
# Warmup Iteration   2: 73.809 ns/op
# Warmup Iteration   3: 74.123 ns/op
Iteration   1: 73.666 ns/op
Iteration   2: 74.115 ns/op
Iteration   3: 73.493 ns/op
Iteration   4: 73.428 ns/op
Iteration   5: 73.906 ns/op

# Run progress: 65.34% complete, ETA 03:21:48
# Fork: 3 of 3
# Warmup Iteration   1: 74.502 ns/op
# Warmup Iteration   2: 73.773 ns/op
# Warmup Iteration   3: 73.493 ns/op
Iteration   1: 77.045 ns/op
Iteration   2: 86.469 ns/op
Iteration   3: 75.469 ns/op
Iteration   4: 73.434 ns/op
Iteration   5: 82.439 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline32int.Val_to_Val_as_Val_fillinst":
  75.508 ±(99.9%) 4.096 ns/op [Average]
  (min, avg, max) = (73.378, 75.508, 86.469), stdev = 3.831
  CI (99.9%): [71.413, 79.604] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline32int.Val_to_Val_as_Val_fillinst
# Parameters: (size = 1000000)

# Run progress: 65.37% complete, ETA 03:21:39
# Fork: 1 of 3
# Warmup Iteration   1: 30602329.647 ns/op
# Warmup Iteration   2: 29577811.294 ns/op
# Warmup Iteration   3: 28903453.571 ns/op
Iteration   1: 30242735.294 ns/op
Iteration   2: 34540800.000 ns/op
Iteration   3: 33044342.742 ns/op
Iteration   4: 35573379.310 ns/op
Iteration   5: 38161180.556 ns/op

# Run progress: 65.39% complete, ETA 03:21:30
# Fork: 2 of 3
# Warmup Iteration   1: 33706323.600 ns/op
# Warmup Iteration   2: 26804585.462 ns/op
# Warmup Iteration   3: 37202003.074 ns/op
Iteration   1: 35097640.793 ns/op
Iteration   2: 32663125.000 ns/op
Iteration   3: 34682119.433 ns/op
Iteration   4: 30556664.152 ns/op
Iteration   5: 36616642.857 ns/op

# Run progress: 65.42% complete, ETA 03:21:22
# Fork: 3 of 3
# Warmup Iteration   1: 34787836.207 ns/op
# Warmup Iteration   2: 32649150.548 ns/op
# Warmup Iteration   3: 21352638.875 ns/op
Iteration   1: 31877283.844 ns/op
Iteration   2: 34016172.233 ns/op
Iteration   3: 32612553.742 ns/op
Iteration   4: 34675704.167 ns/op
Iteration   5: 29209197.629 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline32int.Val_to_Val_as_Val_fillinst":
  33571302.783 ±(99.9%) 2624216.274 ns/op [Average]
  (min, avg, max) = (29209197.629, 33571302.783, 38161180.556), stdev = 2454693.531
  CI (99.9%): [30947086.509, 36195519.058] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline32int.Val_to_Val_as_Val_fillstat
# Parameters: (size = 100)

# Run progress: 65.44% complete, ETA 03:21:13
# Fork: 1 of 3
# Warmup Iteration   1: 73.752 ns/op
# Warmup Iteration   2: 74.345 ns/op
# Warmup Iteration   3: 93.757 ns/op
Iteration   1: 114.402 ns/op
Iteration   2: 112.644 ns/op
Iteration   3: 82.117 ns/op
Iteration   4: 74.601 ns/op
Iteration   5: 80.803 ns/op

# Run progress: 65.47% complete, ETA 03:21:04
# Fork: 2 of 3
# Warmup Iteration   1: 83.959 ns/op
# Warmup Iteration   2: 73.986 ns/op
# Warmup Iteration   3: 74.152 ns/op
Iteration   1: 83.859 ns/op
Iteration   2: 89.958 ns/op
Iteration   3: 88.372 ns/op
Iteration   4: 94.040 ns/op
Iteration   5: 93.975 ns/op

# Run progress: 65.49% complete, ETA 03:20:56
# Fork: 3 of 3
# Warmup Iteration   1: 88.230 ns/op
# Warmup Iteration   2: 74.841 ns/op
# Warmup Iteration   3: 83.630 ns/op
Iteration   1: 83.589 ns/op
Iteration   2: 83.923 ns/op
Iteration   3: 73.385 ns/op
Iteration   4: 73.213 ns/op
Iteration   5: 80.889 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline32int.Val_to_Val_as_Val_fillstat":
  87.318 ±(99.9%) 13.327 ns/op [Average]
  (min, avg, max) = (73.213, 87.318, 114.402), stdev = 12.466
  CI (99.9%): [73.991, 100.645] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline32int.Val_to_Val_as_Val_fillstat
# Parameters: (size = 1000000)

# Run progress: 65.51% complete, ETA 03:20:47
# Fork: 1 of 3
# Warmup Iteration   1: 30727350.000 ns/op
# Warmup Iteration   2: 46645848.455 ns/op
# Warmup Iteration   3: 45173442.043 ns/op
Iteration   1: 44119208.333 ns/op
Iteration   2: 38265471.714 ns/op
Iteration   3: 47448916.682 ns/op
Iteration   4: 43227479.167 ns/op
Iteration   5: 36151269.321 ns/op

# Run progress: 65.54% complete, ETA 03:20:39
# Fork: 2 of 3
# Warmup Iteration   1: 41297346.680 ns/op
# Warmup Iteration   2: 45026461.957 ns/op
# Warmup Iteration   3: 44206857.625 ns/op
Iteration   1: 38989845.667 ns/op
Iteration   2: 38652464.519 ns/op
Iteration   3: 44120423.913 ns/op
Iteration   4: 43234710.083 ns/op
Iteration   5: 41844891.680 ns/op

# Run progress: 65.56% complete, ETA 03:20:30
# Fork: 3 of 3
# Warmup Iteration   1: 42573779.500 ns/op
# Warmup Iteration   2: 20384040.039 ns/op
# Warmup Iteration   3: 34254381.967 ns/op
Iteration   1: 28582770.270 ns/op
Iteration   2: 44525454.696 ns/op
Iteration   3: 23340727.273 ns/op
Iteration   4: 49870030.273 ns/op
Iteration   5: 26594476.487 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline32int.Val_to_Val_as_Val_fillstat":
  39264542.672 ±(99.9%) 8240140.953 ns/op [Average]
  (min, avg, max) = (23340727.273, 39264542.672, 49870030.273), stdev = 7707832.960
  CI (99.9%): [31024401.719, 47504683.625] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline64byte.Def_to_Ref_as_Ref_arrayfill
# Parameters: (size = 100)

# Run progress: 65.59% complete, ETA 03:20:22
# Fork: 1 of 3
# Warmup Iteration   1: 128.594 ns/op
# Warmup Iteration   2: 136.893 ns/op
# Warmup Iteration   3: 134.836 ns/op
Iteration   1: 126.224 ns/op
Iteration   2: 125.438 ns/op
Iteration   3: 125.895 ns/op
Iteration   4: 124.976 ns/op
Iteration   5: 124.881 ns/op

# Run progress: 65.61% complete, ETA 03:20:13
# Fork: 2 of 3
# Warmup Iteration   1: 134.664 ns/op
# Warmup Iteration   2: 139.618 ns/op
# Warmup Iteration   3: 136.645 ns/op
Iteration   1: 136.828 ns/op
Iteration   2: 135.797 ns/op
Iteration   3: 136.574 ns/op
Iteration   4: 135.955 ns/op
Iteration   5: 135.793 ns/op

# Run progress: 65.64% complete, ETA 03:20:05
# Fork: 3 of 3
# Warmup Iteration   1: 135.880 ns/op
# Warmup Iteration   2: 139.170 ns/op
# Warmup Iteration   3: 143.625 ns/op
Iteration   1: 143.793 ns/op
Iteration   2: 138.888 ns/op
Iteration   3: 140.931 ns/op
Iteration   4: 135.922 ns/op
Iteration   5: 135.629 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline64byte.Def_to_Ref_as_Ref_arrayfill":
  133.568 ±(99.9%) 6.763 ns/op [Average]
  (min, avg, max) = (124.881, 133.568, 143.793), stdev = 6.326
  CI (99.9%): [126.805, 140.331] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline64byte.Def_to_Ref_as_Ref_arrayfill
# Parameters: (size = 1000000)

# Run progress: 65.66% complete, ETA 03:19:56
# Fork: 1 of 3
# Warmup Iteration   1: 44480403.957 ns/op
# Warmup Iteration   2: 54158021.947 ns/op
# Warmup Iteration   3: 56152811.421 ns/op
Iteration   1: 57432983.833 ns/op
Iteration   2: 49454591.238 ns/op
Iteration   3: 58712467.611 ns/op
Iteration   4: 49182178.571 ns/op
Iteration   5: 57915092.611 ns/op

# Run progress: 65.69% complete, ETA 03:19:47
# Fork: 2 of 3
# Warmup Iteration   1: 48710011.905 ns/op
# Warmup Iteration   2: 45036253.652 ns/op
# Warmup Iteration   3: 33894677.419 ns/op
Iteration   1: 25234149.810 ns/op
Iteration   2: 45983420.455 ns/op
Iteration   3: 42230798.583 ns/op
Iteration   4: 60193553.941 ns/op
Iteration   5: 46649134.455 ns/op

# Run progress: 65.71% complete, ETA 03:19:39
# Fork: 3 of 3
# Warmup Iteration   1: 53283355.263 ns/op
# Warmup Iteration   2: 51744037.500 ns/op
# Warmup Iteration   3: 49429271.810 ns/op
Iteration   1: 15056853.851 ns/op
Iteration   2: 10831832.894 ns/op
Iteration   3: 11893159.306 ns/op
Iteration   4: 7853326.500 ns/op
Iteration   5: 9934001.644 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline64byte.Def_to_Ref_as_Ref_arrayfill":
  36570503.020 ±(99.9%) 21915565.509 ns/op [Average]
  (min, avg, max) = (7853326.500, 36570503.020, 60193553.941), stdev = 20499833.576
  CI (99.9%): [14654937.511, 58486068.529] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline64byte.Def_to_Ref_as_Ref_fill
# Parameters: (size = 100)

# Run progress: 65.74% complete, ETA 03:19:30
# Fork: 1 of 3
# Warmup Iteration   1: 395.040 ns/op
# Warmup Iteration   2: 379.496 ns/op
# Warmup Iteration   3: 388.896 ns/op
Iteration   1: 564.748 ns/op
Iteration   2: 446.008 ns/op
Iteration   3: 388.011 ns/op
Iteration   4: 382.074 ns/op
Iteration   5: 506.531 ns/op

# Run progress: 65.76% complete, ETA 03:19:21
# Fork: 2 of 3
# Warmup Iteration   1: 348.312 ns/op
# Warmup Iteration   2: 422.182 ns/op
# Warmup Iteration   3: 436.571 ns/op
Iteration   1: 403.385 ns/op
Iteration   2: 390.226 ns/op
Iteration   3: 380.365 ns/op
Iteration   4: 381.514 ns/op
Iteration   5: 449.787 ns/op

# Run progress: 65.78% complete, ETA 03:19:13
# Fork: 3 of 3
# Warmup Iteration   1: 408.300 ns/op
# Warmup Iteration   2: 383.896 ns/op
# Warmup Iteration   3: 387.966 ns/op
Iteration   1: 392.500 ns/op
Iteration   2: 386.864 ns/op
Iteration   3: 389.325 ns/op
Iteration   4: 388.634 ns/op
Iteration   5: 389.015 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline64byte.Def_to_Ref_as_Ref_fill":
  415.932 ±(99.9%) 57.974 ns/op [Average]
  (min, avg, max) = (380.365, 415.932, 564.748), stdev = 54.229
  CI (99.9%): [357.959, 473.906] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline64byte.Def_to_Ref_as_Ref_fill
# Parameters: (size = 1000000)

# Run progress: 65.81% complete, ETA 03:19:04
# Fork: 1 of 3
# Warmup Iteration   1: 5313949.387 ns/op
# Warmup Iteration   2: 4294437.234 ns/op
# Warmup Iteration   3: 4267888.593 ns/op
Iteration   1: 4028882.832 ns/op
Iteration   2: 4792215.698 ns/op
Iteration   3: 4219852.858 ns/op
Iteration   4: 3952469.654 ns/op
Iteration   5: 3928353.027 ns/op

# Run progress: 65.83% complete, ETA 03:18:55
# Fork: 2 of 3
# Warmup Iteration   1: 4458467.778 ns/op
# Warmup Iteration   2: 3813720.962 ns/op
# Warmup Iteration   3: 3833493.662 ns/op
Iteration   1: 3875401.062 ns/op
Iteration   2: 3806420.283 ns/op
Iteration   3: 3788700.034 ns/op
Iteration   4: 3846354.805 ns/op
Iteration   5: 3811551.924 ns/op

# Run progress: 65.86% complete, ETA 03:18:47
# Fork: 3 of 3
# Warmup Iteration   1: 4466334.627 ns/op
# Warmup Iteration   2: 3850197.679 ns/op
# Warmup Iteration   3: 3887265.606 ns/op
Iteration   1: 3867887.181 ns/op
Iteration   2: 3880706.558 ns/op
Iteration   3: 3771282.457 ns/op
Iteration   4: 3805873.739 ns/op
Iteration   5: 3838289.439 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline64byte.Def_to_Ref_as_Ref_fill":
  3947616.103 ±(99.9%) 278132.445 ns/op [Average]
  (min, avg, max) = (3771282.457, 3947616.103, 4792215.698), stdev = 260165.262
  CI (99.9%): [3669483.658, 4225748.549] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline64byte.Def_to_Val_as_Val_arrayfill
# Parameters: (size = 100)

# Run progress: 65.88% complete, ETA 03:18:38
# Fork: 1 of 3
# Warmup Iteration   1: 135.103 ns/op
# Warmup Iteration   2: 139.067 ns/op
# Warmup Iteration   3: 137.902 ns/op
Iteration   1: 137.911 ns/op
Iteration   2: 136.274 ns/op
Iteration   3: 136.530 ns/op
Iteration   4: 136.503 ns/op
Iteration   5: 135.970 ns/op

# Run progress: 65.91% complete, ETA 03:18:31
# Fork: 2 of 3
# Warmup Iteration   1: 134.897 ns/op
# Warmup Iteration   2: 140.069 ns/op
# Warmup Iteration   3: 138.105 ns/op
Iteration   1: 138.817 ns/op
Iteration   2: 135.910 ns/op
Iteration   3: 136.512 ns/op
Iteration   4: 136.149 ns/op
Iteration   5: 137.545 ns/op

# Run progress: 65.93% complete, ETA 03:18:22
# Fork: 3 of 3
# Warmup Iteration   1: 136.924 ns/op
# Warmup Iteration   2: 140.802 ns/op
# Warmup Iteration   3: 137.960 ns/op
Iteration   1: 138.822 ns/op
Iteration   2: 136.772 ns/op
Iteration   3: 137.389 ns/op
Iteration   4: 140.753 ns/op
Iteration   5: 136.319 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline64byte.Def_to_Val_as_Val_arrayfill":
  137.212 ±(99.9%) 1.458 ns/op [Average]
  (min, avg, max) = (135.910, 137.212, 140.753), stdev = 1.364
  CI (99.9%): [135.754, 138.670] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline64byte.Def_to_Val_as_Val_arrayfill
# Parameters: (size = 1000000)

# Run progress: 65.96% complete, ETA 03:18:13
# Fork: 1 of 3
# Warmup Iteration   1: 29733505.943 ns/op
# Warmup Iteration   2: 35956732.143 ns/op
# Warmup Iteration   3: 37645438.259 ns/op
Iteration   1: 36406218.750 ns/op
Iteration   2: 35177416.690 ns/op
Iteration   3: 39819083.308 ns/op
Iteration   4: 39964000.000 ns/op
Iteration   5: 40058857.346 ns/op

# Run progress: 65.98% complete, ETA 03:18:05
# Fork: 2 of 3
# Warmup Iteration   1: 36128986.607 ns/op
# Warmup Iteration   2: 41967163.208 ns/op
# Warmup Iteration   3: 40939051.680 ns/op
Iteration   1: 32531112.903 ns/op
Iteration   2: 29689984.088 ns/op
Iteration   3: 22471338.889 ns/op
Iteration   4: 29119272.000 ns/op
Iteration   5: 33517787.645 ns/op

# Run progress: 66.00% complete, ETA 03:17:56
# Fork: 3 of 3
# Warmup Iteration   1: 44696472.826 ns/op
# Warmup Iteration   2: 46569411.000 ns/op
# Warmup Iteration   3: 45140043.478 ns/op
Iteration   1: 47982613.095 ns/op
Iteration   2: 33926855.533 ns/op
Iteration   3: 28873191.657 ns/op
Iteration   4: 34076238.900 ns/op
Iteration   5: 39435222.731 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline64byte.Def_to_Val_as_Val_arrayfill":
  34869946.236 ±(99.9%) 6584017.970 ns/op [Average]
  (min, avg, max) = (22471338.889, 34869946.236, 47982613.095), stdev = 6158694.494
  CI (99.9%): [28285928.266, 41453964.205] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline64byte.Def_to_Val_as_Val_fill
# Parameters: (size = 100)

# Run progress: 66.03% complete, ETA 03:17:47
# Fork: 1 of 3
# Warmup Iteration   1: 428.484 ns/op
# Warmup Iteration   2: 378.049 ns/op
# Warmup Iteration   3: 387.179 ns/op
Iteration   1: 391.363 ns/op
Iteration   2: 388.334 ns/op
Iteration   3: 411.886 ns/op
Iteration   4: 401.626 ns/op
Iteration   5: 422.645 ns/op

# Run progress: 66.05% complete, ETA 03:17:39
# Fork: 2 of 3
# Warmup Iteration   1: 419.229 ns/op
# Warmup Iteration   2: 396.806 ns/op
# Warmup Iteration   3: 389.293 ns/op
Iteration   1: 436.460 ns/op
Iteration   2: 498.803 ns/op
Iteration   3: 414.041 ns/op
Iteration   4: 388.108 ns/op
Iteration   5: 385.839 ns/op

# Run progress: 66.08% complete, ETA 03:17:30
# Fork: 3 of 3
# Warmup Iteration   1: 366.642 ns/op
# Warmup Iteration   2: 395.156 ns/op
# Warmup Iteration   3: 394.562 ns/op
Iteration   1: 389.253 ns/op
Iteration   2: 387.907 ns/op
Iteration   3: 382.953 ns/op
Iteration   4: 384.870 ns/op
Iteration   5: 394.711 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline64byte.Def_to_Val_as_Val_fill":
  405.253 ±(99.9%) 32.443 ns/op [Average]
  (min, avg, max) = (382.953, 405.253, 498.803), stdev = 30.347
  CI (99.9%): [372.811, 437.696] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline64byte.Def_to_Val_as_Val_fill
# Parameters: (size = 1000000)

# Run progress: 66.10% complete, ETA 03:17:21
# Fork: 1 of 3
# Warmup Iteration   1: 5374829.340 ns/op
# Warmup Iteration   2: 5013396.460 ns/op
# Warmup Iteration   3: 4212433.753 ns/op
Iteration   1: 4795502.181 ns/op
Iteration   2: 4235002.975 ns/op
Iteration   3: 4468850.369 ns/op
Iteration   4: 4031669.500 ns/op
Iteration   5: 4114235.882 ns/op

# Run progress: 66.13% complete, ETA 03:17:13
# Fork: 2 of 3
# Warmup Iteration   1: 4982154.084 ns/op
# Warmup Iteration   2: 4040118.448 ns/op
# Warmup Iteration   3: 3897196.547 ns/op
Iteration   1: 3957212.272 ns/op
Iteration   2: 4129217.213 ns/op
Iteration   3: 4033102.912 ns/op
Iteration   4: 3916598.895 ns/op
Iteration   5: 3946280.557 ns/op

# Run progress: 66.15% complete, ETA 03:17:04
# Fork: 3 of 3
# Warmup Iteration   1: 4734001.174 ns/op
# Warmup Iteration   2: 4159732.337 ns/op
# Warmup Iteration   3: 4256817.267 ns/op
Iteration   1: 3840047.073 ns/op
Iteration   2: 3967307.413 ns/op
Iteration   3: 4085470.500 ns/op
Iteration   4: 4612567.280 ns/op
Iteration   5: 4498897.233 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline64byte.Def_to_Val_as_Val_fill":
  4175464.150 ±(99.9%) 306088.358 ns/op [Average]
  (min, avg, max) = (3840047.073, 4175464.150, 4795502.181), stdev = 286315.240
  CI (99.9%): [3869375.792, 4481552.509] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline64byte.New_to_Ref_as_Ref_arrayfill
# Parameters: (size = 100)

# Run progress: 66.18% complete, ETA 03:16:56
# Fork: 1 of 3
# Warmup Iteration   1: 263.200 ns/op
# Warmup Iteration   2: 198.972 ns/op
# Warmup Iteration   3: 128.813 ns/op
Iteration   1: 125.895 ns/op
Iteration   2: 124.217 ns/op
Iteration   3: 125.310 ns/op
Iteration   4: 125.529 ns/op
Iteration   5: 124.997 ns/op

# Run progress: 66.20% complete, ETA 03:16:47
# Fork: 2 of 3
# Warmup Iteration   1: 220.388 ns/op
# Warmup Iteration   2: 205.188 ns/op
# Warmup Iteration   3: 126.356 ns/op
Iteration   1: 126.413 ns/op
Iteration   2: 124.945 ns/op
Iteration   3: 125.559 ns/op
Iteration   4: 126.535 ns/op
Iteration   5: 126.184 ns/op

# Run progress: 66.23% complete, ETA 03:16:38
# Fork: 3 of 3
# Warmup Iteration   1: 279.996 ns/op
# Warmup Iteration   2: 269.791 ns/op
# Warmup Iteration   3: 138.426 ns/op
Iteration   1: 137.305 ns/op
Iteration   2: 135.793 ns/op
Iteration   3: 138.831 ns/op
Iteration   4: 136.907 ns/op
Iteration   5: 135.392 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline64byte.New_to_Ref_as_Ref_arrayfill":
  129.321 ±(99.9%) 5.971 ns/op [Average]
  (min, avg, max) = (124.217, 129.321, 138.831), stdev = 5.586
  CI (99.9%): [123.349, 135.292] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline64byte.New_to_Ref_as_Ref_arrayfill
# Parameters: (size = 1000000)

# Run progress: 66.25% complete, ETA 03:16:30
# Fork: 1 of 3
# Warmup Iteration   1: 47105454.545 ns/op
# Warmup Iteration   2: 44944273.565 ns/op
# Warmup Iteration   3: 31678984.848 ns/op
Iteration   1: 42388315.000 ns/op
Iteration   2: 44459514.478 ns/op
Iteration   3: 41967450.000 ns/op
Iteration   4: 44113112.304 ns/op
Iteration   5: 44417065.217 ns/op

# Run progress: 66.27% complete, ETA 03:16:21
# Fork: 2 of 3
# Warmup Iteration   1: 37320379.464 ns/op
# Warmup Iteration   2: 41348035.000 ns/op
# Warmup Iteration   3: 45164239.130 ns/op
Iteration   1: 28776171.429 ns/op
Iteration   2: 41968963.320 ns/op
Iteration   3: 51629070.850 ns/op
Iteration   4: 51807916.700 ns/op
Iteration   5: 49950845.238 ns/op

# Run progress: 66.30% complete, ETA 03:16:12
# Fork: 3 of 3
# Warmup Iteration   1: 43725505.208 ns/op
# Warmup Iteration   2: 42780381.917 ns/op
# Warmup Iteration   3: 47227159.091 ns/op
Iteration   1: 46224603.261 ns/op
Iteration   2: 50129085.333 ns/op
Iteration   3: 43943000.000 ns/op
Iteration   4: 44288520.833 ns/op
Iteration   5: 48044725.364 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline64byte.New_to_Ref_as_Ref_arrayfill":
  44940557.289 ±(99.9%) 6015624.031 ns/op [Average]
  (min, avg, max) = (28776171.429, 44940557.289, 51807916.700), stdev = 5627018.451
  CI (99.9%): [38924933.258, 50956181.319] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline64byte.New_to_Ref_as_Ref_fill
# Parameters: (size = 100)

# Run progress: 66.32% complete, ETA 03:16:04
# Fork: 1 of 3
# Warmup Iteration   1: 352.153 ns/op
# Warmup Iteration   2: 308.394 ns/op
# Warmup Iteration   3: 285.328 ns/op
Iteration   1: 270.356 ns/op
Iteration   2: 311.834 ns/op
Iteration   3: 327.096 ns/op
Iteration   4: 285.444 ns/op
Iteration   5: 262.972 ns/op

# Run progress: 66.35% complete, ETA 03:15:55
# Fork: 2 of 3
# Warmup Iteration   1: 470.630 ns/op
# Warmup Iteration   2: 336.529 ns/op
# Warmup Iteration   3: 296.553 ns/op
Iteration   1: 267.511 ns/op
Iteration   2: 265.268 ns/op
Iteration   3: 277.427 ns/op
Iteration   4: 703.842 ns/op
Iteration   5: 408.659 ns/op

# Run progress: 66.37% complete, ETA 03:15:47
# Fork: 3 of 3
# Warmup Iteration   1: 449.667 ns/op
# Warmup Iteration   2: 332.134 ns/op
# Warmup Iteration   3: 303.452 ns/op
Iteration   1: 289.813 ns/op
Iteration   2: 269.842 ns/op
Iteration   3: 262.544 ns/op
Iteration   4: 262.305 ns/op
Iteration   5: 274.922 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline64byte.New_to_Ref_as_Ref_fill":
  315.989 ±(99.9%) 121.769 ns/op [Average]
  (min, avg, max) = (262.305, 315.989, 703.842), stdev = 113.903
  CI (99.9%): [194.220, 437.758] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline64byte.New_to_Ref_as_Ref_fill
# Parameters: (size = 1000000)

# Run progress: 66.40% complete, ETA 03:15:39
# Fork: 1 of 3
# Warmup Iteration   1: 5439741.710 ns/op
# Warmup Iteration   2: 5853598.439 ns/op
# Warmup Iteration   3: 3406126.840 ns/op
Iteration   1: 3162241.457 ns/op
Iteration   2: 2970697.147 ns/op
Iteration   3: 3120420.419 ns/op
Iteration   4: 3028985.443 ns/op
Iteration   5: 2852447.003 ns/op

# Run progress: 66.42% complete, ETA 03:15:30
# Fork: 2 of 3
# Warmup Iteration   1: 4538834.086 ns/op
# Warmup Iteration   2: 3449370.147 ns/op
# Warmup Iteration   3: 3685212.165 ns/op
Iteration   1: 2960808.944 ns/op
Iteration   2: 3375929.530 ns/op
Iteration   3: 2746844.604 ns/op
Iteration   4: 2833171.594 ns/op
Iteration   5: 2826854.344 ns/op

# Run progress: 66.45% complete, ETA 03:15:21
# Fork: 3 of 3
# Warmup Iteration   1: 4722307.117 ns/op
# Warmup Iteration   2: 3572697.252 ns/op
# Warmup Iteration   3: 4047430.892 ns/op
Iteration   1: 3045998.233 ns/op
Iteration   2: 2826942.416 ns/op
Iteration   3: 3358732.860 ns/op
Iteration   4: 2863575.618 ns/op
Iteration   5: 2903832.610 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline64byte.New_to_Ref_as_Ref_fill":
  2991832.148 ±(99.9%) 205372.747 ns/op [Average]
  (min, avg, max) = (2746844.604, 2991832.148, 3375929.530), stdev = 192105.795
  CI (99.9%): [2786459.401, 3197204.895] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline64byte.New_to_Val_as_Val_arrayfill
# Parameters: (size = 100)

# Run progress: 66.47% complete, ETA 03:15:13
# Fork: 1 of 3
# Warmup Iteration   1: 271.085 ns/op
# Warmup Iteration   2: 249.964 ns/op
# Warmup Iteration   3: 138.861 ns/op
Iteration   1: 139.173 ns/op
Iteration   2: 136.785 ns/op
Iteration   3: 137.843 ns/op
Iteration   4: 136.326 ns/op
Iteration   5: 138.304 ns/op

# Run progress: 66.50% complete, ETA 03:15:04
# Fork: 2 of 3
# Warmup Iteration   1: 281.607 ns/op
# Warmup Iteration   2: 258.682 ns/op
# Warmup Iteration   3: 137.764 ns/op
Iteration   1: 137.665 ns/op
Iteration   2: 137.322 ns/op
Iteration   3: 139.846 ns/op
Iteration   4: 138.047 ns/op
Iteration   5: 137.958 ns/op

# Run progress: 66.52% complete, ETA 03:14:56
# Fork: 3 of 3
# Warmup Iteration   1: 281.124 ns/op
# Warmup Iteration   2: 262.680 ns/op
# Warmup Iteration   3: 136.825 ns/op
Iteration   1: 139.173 ns/op
Iteration   2: 138.064 ns/op
Iteration   3: 136.249 ns/op
Iteration   4: 135.196 ns/op
Iteration   5: 135.434 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline64byte.New_to_Val_as_Val_arrayfill":
  137.559 ±(99.9%) 1.449 ns/op [Average]
  (min, avg, max) = (135.196, 137.559, 139.846), stdev = 1.356
  CI (99.9%): [136.110, 139.008] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline64byte.New_to_Val_as_Val_arrayfill
# Parameters: (size = 1000000)

# Run progress: 66.54% complete, ETA 03:14:47
# Fork: 1 of 3
# Warmup Iteration   1: 44706842.391 ns/op
# Warmup Iteration   2: 35954803.172 ns/op
# Warmup Iteration   3: 39618772.423 ns/op
Iteration   1: 34327843.033 ns/op
Iteration   2: 42121441.000 ns/op
Iteration   3: 36856052.107 ns/op
Iteration   4: 30489009.794 ns/op
Iteration   5: 32592590.065 ns/op

# Run progress: 66.57% complete, ETA 03:14:38
# Fork: 2 of 3
# Warmup Iteration   1: 28803560.714 ns/op
# Warmup Iteration   2: 41576761.640 ns/op
# Warmup Iteration   3: 40658896.680 ns/op
Iteration   1: 41097696.680 ns/op
Iteration   2: 38888719.577 ns/op
Iteration   3: 38675482.385 ns/op
Iteration   4: 47164801.136 ns/op
Iteration   5: 45055440.217 ns/op

# Run progress: 66.59% complete, ETA 03:14:30
# Fork: 3 of 3
# Warmup Iteration   1: 47955696.955 ns/op
# Warmup Iteration   2: 55287500.000 ns/op
# Warmup Iteration   3: 49258716.238 ns/op
Iteration   1: 52729887.500 ns/op
Iteration   2: 53328232.421 ns/op
Iteration   3: 52035516.650 ns/op
Iteration   4: 40431560.000 ns/op
Iteration   5: 51051995.800 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline64byte.New_to_Val_as_Val_arrayfill":
  42456417.891 ±(99.9%) 8027324.186 ns/op [Average]
  (min, avg, max) = (30489009.794, 42456417.891, 53328232.421), stdev = 7508764.024
  CI (99.9%): [34429093.705, 50483742.077] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline64byte.New_to_Val_as_Val_fill
# Parameters: (size = 100)

# Run progress: 66.62% complete, ETA 03:14:21
# Fork: 1 of 3
# Warmup Iteration   1: 349.215 ns/op
# Warmup Iteration   2: 295.109 ns/op
# Warmup Iteration   3: 270.928 ns/op
Iteration   1: 274.404 ns/op
Iteration   2: 282.934 ns/op
Iteration   3: 270.969 ns/op
Iteration   4: 271.973 ns/op
Iteration   5: 272.991 ns/op

# Run progress: 66.64% complete, ETA 03:14:13
# Fork: 2 of 3
# Warmup Iteration   1: 340.721 ns/op
# Warmup Iteration   2: 301.722 ns/op
# Warmup Iteration   3: 263.100 ns/op
Iteration   1: 266.119 ns/op
Iteration   2: 283.788 ns/op
Iteration   3: 287.682 ns/op
Iteration   4: 265.725 ns/op
Iteration   5: 264.808 ns/op

# Run progress: 66.67% complete, ETA 03:14:04
# Fork: 3 of 3
# Warmup Iteration   1: 344.625 ns/op
# Warmup Iteration   2: 300.067 ns/op
# Warmup Iteration   3: 265.897 ns/op
Iteration   1: 264.869 ns/op
Iteration   2: 292.753 ns/op
Iteration   3: 265.081 ns/op
Iteration   4: 265.036 ns/op
Iteration   5: 264.780 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline64byte.New_to_Val_as_Val_fill":
  272.927 ±(99.9%) 10.122 ns/op [Average]
  (min, avg, max) = (264.780, 272.927, 292.753), stdev = 9.468
  CI (99.9%): [262.805, 283.050] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline64byte.New_to_Val_as_Val_fill
# Parameters: (size = 1000000)

# Run progress: 66.69% complete, ETA 03:13:55
# Fork: 1 of 3
# Warmup Iteration   1: 4856312.500 ns/op
# Warmup Iteration   2: 4859630.435 ns/op
# Warmup Iteration   3: 3179470.066 ns/op
Iteration   1: 3245930.961 ns/op
Iteration   2: 2860390.389 ns/op
Iteration   3: 2908542.269 ns/op
Iteration   4: 2979699.430 ns/op
Iteration   5: 2749782.624 ns/op

# Run progress: 66.72% complete, ETA 03:13:47
# Fork: 2 of 3
# Warmup Iteration   1: 4677382.790 ns/op
# Warmup Iteration   2: 3246248.119 ns/op
# Warmup Iteration   3: 3895077.335 ns/op
Iteration   1: 2791974.653 ns/op
Iteration   2: 3018133.157 ns/op
Iteration   3: 2995465.527 ns/op
Iteration   4: 2955565.441 ns/op
Iteration   5: 2998184.771 ns/op

# Run progress: 66.74% complete, ETA 03:13:38
# Fork: 3 of 3
# Warmup Iteration   1: 4858589.947 ns/op
# Warmup Iteration   2: 3822226.008 ns/op
# Warmup Iteration   3: 3304914.609 ns/op
Iteration   1: 2844445.584 ns/op
Iteration   2: 3195985.187 ns/op
Iteration   3: 4576533.332 ns/op
Iteration   4: 3012371.642 ns/op
Iteration   5: 2810195.765 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline64byte.New_to_Val_as_Val_fill":
  3062880.049 ±(99.9%) 471383.088 ns/op [Average]
  (min, avg, max) = (2749782.624, 3062880.049, 4576533.332), stdev = 440932.033
  CI (99.9%): [2591496.961, 3534263.136] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline64byte.Ref_to_Ref_as_Ref_arrayfillinst
# Parameters: (size = 100)

# Run progress: 66.76% complete, ETA 03:13:30
# Fork: 1 of 3
# Warmup Iteration   1: 115.015 ns/op
# Warmup Iteration   2: 118.259 ns/op
# Warmup Iteration   3: 116.941 ns/op
Iteration   1: 116.919 ns/op
Iteration   2: 116.815 ns/op
Iteration   3: 117.861 ns/op
Iteration   4: 119.736 ns/op
Iteration   5: 117.505 ns/op

# Run progress: 66.79% complete, ETA 03:13:21
# Fork: 2 of 3
# Warmup Iteration   1: 130.129 ns/op
# Warmup Iteration   2: 118.646 ns/op
# Warmup Iteration   3: 120.543 ns/op
Iteration   1: 121.756 ns/op
Iteration   2: 120.083 ns/op
Iteration   3: 117.364 ns/op
Iteration   4: 118.830 ns/op
Iteration   5: 116.681 ns/op

# Run progress: 66.81% complete, ETA 03:13:12
# Fork: 3 of 3
# Warmup Iteration   1: 114.541 ns/op
# Warmup Iteration   2: 116.289 ns/op
# Warmup Iteration   3: 116.989 ns/op
Iteration   1: 115.722 ns/op
Iteration   2: 118.334 ns/op
Iteration   3: 117.611 ns/op
Iteration   4: 116.954 ns/op
Iteration   5: 115.712 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline64byte.Ref_to_Ref_as_Ref_arrayfillinst":
  117.859 ±(99.9%) 1.775 ns/op [Average]
  (min, avg, max) = (115.712, 117.859, 121.756), stdev = 1.661
  CI (99.9%): [116.084, 119.634] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline64byte.Ref_to_Ref_as_Ref_arrayfillinst
# Parameters: (size = 1000000)

# Run progress: 66.84% complete, ETA 03:13:04
# Fork: 1 of 3
# Warmup Iteration   1: 48699075.381 ns/op
# Warmup Iteration   2: 13427298.156 ns/op
# Warmup Iteration   3: 50309202.050 ns/op
Iteration   1: 47636030.318 ns/op
Iteration   2: 24529079.268 ns/op
Iteration   3: 37868484.593 ns/op
Iteration   4: 56040712.944 ns/op
Iteration   5: 52175775.000 ns/op

# Run progress: 66.86% complete, ETA 03:12:55
# Fork: 2 of 3
# Warmup Iteration   1: 49788849.238 ns/op
# Warmup Iteration   2: 53656980.263 ns/op
# Warmup Iteration   3: 41631556.680 ns/op
Iteration   1: 52084752.100 ns/op
Iteration   2: 47917664.773 ns/op
Iteration   3: 46072352.273 ns/op
Iteration   4: 55150864.053 ns/op
Iteration   5: 47206333.318 ns/op

# Run progress: 66.89% complete, ETA 03:12:46
# Fork: 3 of 3
# Warmup Iteration   1: 46377024.591 ns/op
# Warmup Iteration   2: 48997970.238 ns/op
# Warmup Iteration   3: 55538449.579 ns/op
Iteration   1: 53002201.789 ns/op
Iteration   2: 52287158.300 ns/op
Iteration   3: 49364232.143 ns/op
Iteration   4: 48408646.857 ns/op
Iteration   5: 49919513.905 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline64byte.Ref_to_Ref_as_Ref_arrayfillinst":
  47977586.776 ±(99.9%) 8364448.331 ns/op [Average]
  (min, avg, max) = (24529079.268, 47977586.776, 56040712.944), stdev = 7824110.159
  CI (99.9%): [39613138.445, 56342035.106] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline64byte.Ref_to_Ref_as_Ref_arrayfillstat
# Parameters: (size = 100)

# Run progress: 66.91% complete, ETA 03:12:38
# Fork: 1 of 3
# Warmup Iteration   1: 117.173 ns/op
# Warmup Iteration   2: 118.083 ns/op
# Warmup Iteration   3: 118.992 ns/op
Iteration   1: 116.980 ns/op
Iteration   2: 117.189 ns/op
Iteration   3: 118.211 ns/op
Iteration   4: 117.626 ns/op
Iteration   5: 116.880 ns/op

# Run progress: 66.94% complete, ETA 03:12:29
# Fork: 2 of 3
# Warmup Iteration   1: 116.861 ns/op
# Warmup Iteration   2: 117.227 ns/op
# Warmup Iteration   3: 118.323 ns/op
Iteration   1: 116.882 ns/op
Iteration   2: 117.472 ns/op
Iteration   3: 117.008 ns/op
Iteration   4: 117.074 ns/op
Iteration   5: 116.798 ns/op

# Run progress: 66.96% complete, ETA 03:12:20
# Fork: 3 of 3
# Warmup Iteration   1: 117.017 ns/op
# Warmup Iteration   2: 117.093 ns/op
# Warmup Iteration   3: 116.812 ns/op
Iteration   1: 118.347 ns/op
Iteration   2: 116.967 ns/op
Iteration   3: 121.623 ns/op
Iteration   4: 119.444 ns/op
Iteration   5: 119.758 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline64byte.Ref_to_Ref_as_Ref_arrayfillstat":
  117.884 ±(99.9%) 1.491 ns/op [Average]
  (min, avg, max) = (116.798, 117.884, 121.623), stdev = 1.395
  CI (99.9%): [116.393, 119.375] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline64byte.Ref_to_Ref_as_Ref_arrayfillstat
# Parameters: (size = 1000000)

# Run progress: 66.99% complete, ETA 03:12:12
# Fork: 1 of 3
# Warmup Iteration   1: 47579965.909 ns/op
# Warmup Iteration   2: 48971912.714 ns/op
# Warmup Iteration   3: 40349256.640 ns/op
Iteration   1: 46563104.182 ns/op
Iteration   2: 44945824.261 ns/op
Iteration   3: 39590911.846 ns/op
Iteration   4: 28642497.629 ns/op
Iteration   5: 37680091.037 ns/op

# Run progress: 67.01% complete, ETA 03:12:03
# Fork: 2 of 3
# Warmup Iteration   1: 45920895.818 ns/op
# Warmup Iteration   2: 46944464.000 ns/op
# Warmup Iteration   3: 28219340.278 ns/op
Iteration   1: 25309985.756 ns/op
Iteration   2: 51406768.750 ns/op
Iteration   3: 46249284.091 ns/op
Iteration   4: 47349748.136 ns/op
Iteration   5: 46301982.955 ns/op

# Run progress: 67.03% complete, ETA 03:11:55
# Fork: 3 of 3
# Warmup Iteration   1: 38386530.852 ns/op
# Warmup Iteration   2: 41492153.360 ns/op
# Warmup Iteration   3: 43814215.609 ns/op
Iteration   1: 45586648.565 ns/op
Iteration   2: 50575214.286 ns/op
Iteration   3: 45789645.864 ns/op
Iteration   4: 44089703.125 ns/op
Iteration   5: 49990470.238 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline64byte.Ref_to_Ref_as_Ref_arrayfillstat":
  43338125.381 ±(99.9%) 8115263.329 ns/op [Average]
  (min, avg, max) = (25309985.756, 43338125.381, 51406768.750), stdev = 7591022.353
  CI (99.9%): [35222862.053, 51453388.710] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline64byte.Ref_to_Ref_as_Ref_fillinst
# Parameters: (size = 100)

# Run progress: 67.06% complete, ETA 03:11:46
# Fork: 1 of 3
# Warmup Iteration   1: 138.727 ns/op
# Warmup Iteration   2: 137.112 ns/op
# Warmup Iteration   3: 140.512 ns/op
Iteration   1: 136.496 ns/op
Iteration   2: 131.119 ns/op
Iteration   3: 131.551 ns/op
Iteration   4: 153.668 ns/op
Iteration   5: 138.392 ns/op

# Run progress: 67.08% complete, ETA 03:11:37
# Fork: 2 of 3
# Warmup Iteration   1: 139.103 ns/op
# Warmup Iteration   2: 137.661 ns/op
# Warmup Iteration   3: 130.270 ns/op
Iteration   1: 129.030 ns/op
Iteration   2: 128.034 ns/op
Iteration   3: 129.731 ns/op
Iteration   4: 129.500 ns/op
Iteration   5: 128.885 ns/op

# Run progress: 67.11% complete, ETA 03:11:29
# Fork: 3 of 3
# Warmup Iteration   1: 139.622 ns/op
# Warmup Iteration   2: 136.240 ns/op
# Warmup Iteration   3: 131.872 ns/op
Iteration   1: 129.840 ns/op
Iteration   2: 130.333 ns/op
Iteration   3: 144.132 ns/op
Iteration   4: 134.458 ns/op
Iteration   5: 130.021 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline64byte.Ref_to_Ref_as_Ref_fillinst":
  133.679 ±(99.9%) 7.557 ns/op [Average]
  (min, avg, max) = (128.034, 133.679, 153.668), stdev = 7.068
  CI (99.9%): [126.123, 141.236] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline64byte.Ref_to_Ref_as_Ref_fillinst
# Parameters: (size = 1000000)

# Run progress: 67.13% complete, ETA 03:11:20
# Fork: 1 of 3
# Warmup Iteration   1: 46534393.955 ns/op
# Warmup Iteration   2: 46874909.091 ns/op
# Warmup Iteration   3: 48834668.667 ns/op
Iteration   1: 47930640.857 ns/op
Iteration   2: 37462549.370 ns/op
Iteration   3: 34144259.700 ns/op
Iteration   4: 44553483.696 ns/op
Iteration   5: 46097553.045 ns/op

# Run progress: 67.16% complete, ETA 03:11:11
# Fork: 2 of 3
# Warmup Iteration   1: 45705394.913 ns/op
# Warmup Iteration   2: 46757405.318 ns/op
# Warmup Iteration   3: 54388910.053 ns/op
Iteration   1: 43705152.174 ns/op
Iteration   2: 42549404.542 ns/op
Iteration   3: 43742920.304 ns/op
Iteration   4: 52787225.895 ns/op
Iteration   5: 49929222.190 ns/op

# Run progress: 67.18% complete, ETA 03:11:03
# Fork: 3 of 3
# Warmup Iteration   1: 44194579.875 ns/op
# Warmup Iteration   2: 53190699.526 ns/op
# Warmup Iteration   3: 50888618.750 ns/op
Iteration   1: 50109623.000 ns/op
Iteration   2: 44612588.739 ns/op
Iteration   3: 55941465.278 ns/op
Iteration   4: 39649806.077 ns/op
Iteration   5: 52693068.750 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline64byte.Ref_to_Ref_as_Ref_fillinst":
  45727264.241 ±(99.9%) 6418826.415 ns/op [Average]
  (min, avg, max) = (34144259.700, 45727264.241, 55941465.278), stdev = 6004174.211
  CI (99.9%): [39308437.826, 52146090.656] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline64byte.Ref_to_Ref_as_Ref_fillstat
# Parameters: (size = 100)

# Run progress: 67.21% complete, ETA 03:10:54
# Fork: 1 of 3
# Warmup Iteration   1: 144.888 ns/op
# Warmup Iteration   2: 148.039 ns/op
# Warmup Iteration   3: 135.755 ns/op
Iteration   1: 135.845 ns/op
Iteration   2: 134.392 ns/op
Iteration   3: 134.971 ns/op
Iteration   4: 134.378 ns/op
Iteration   5: 134.789 ns/op

# Run progress: 67.23% complete, ETA 03:10:46
# Fork: 2 of 3
# Warmup Iteration   1: 145.201 ns/op
# Warmup Iteration   2: 148.011 ns/op
# Warmup Iteration   3: 132.471 ns/op
Iteration   1: 132.824 ns/op
Iteration   2: 133.473 ns/op
Iteration   3: 134.438 ns/op
Iteration   4: 133.810 ns/op
Iteration   5: 132.290 ns/op

# Run progress: 67.25% complete, ETA 03:10:37
# Fork: 3 of 3
# Warmup Iteration   1: 144.330 ns/op
# Warmup Iteration   2: 147.984 ns/op
# Warmup Iteration   3: 132.715 ns/op
Iteration   1: 132.739 ns/op
Iteration   2: 134.295 ns/op
Iteration   3: 133.552 ns/op
Iteration   4: 133.082 ns/op
Iteration   5: 135.003 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline64byte.Ref_to_Ref_as_Ref_fillstat":
  133.992 ±(99.9%) 1.062 ns/op [Average]
  (min, avg, max) = (132.290, 133.992, 135.845), stdev = 0.993
  CI (99.9%): [132.931, 135.054] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline64byte.Ref_to_Ref_as_Ref_fillstat
# Parameters: (size = 1000000)

# Run progress: 67.28% complete, ETA 03:10:28
# Fork: 1 of 3
# Warmup Iteration   1: 34193058.333 ns/op
# Warmup Iteration   2: 49408728.190 ns/op
# Warmup Iteration   3: 46902268.909 ns/op
Iteration   1: 50393535.714 ns/op
Iteration   2: 36575284.214 ns/op
Iteration   3: 35903644.357 ns/op
Iteration   4: 37952129.630 ns/op
Iteration   5: 41083770.000 ns/op

# Run progress: 67.30% complete, ETA 03:10:20
# Fork: 2 of 3
# Warmup Iteration   1: 50403065.476 ns/op
# Warmup Iteration   2: 52262389.600 ns/op
# Warmup Iteration   3: 54130026.316 ns/op
Iteration   1: 50200890.857 ns/op
Iteration   2: 52629985.400 ns/op
Iteration   3: 48503589.286 ns/op
Iteration   4: 53013283.350 ns/op
Iteration   5: 53592070.158 ns/op

# Run progress: 67.33% complete, ETA 03:10:11
# Fork: 3 of 3
# Warmup Iteration   1: 39039347.222 ns/op
# Warmup Iteration   2: 51021560.450 ns/op
# Warmup Iteration   3: 53731916.684 ns/op
Iteration   1: 53831037.263 ns/op
Iteration   2: 50336257.952 ns/op
Iteration   3: 52051556.250 ns/op
Iteration   4: 55671493.421 ns/op
Iteration   5: 53044314.550 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline64byte.Ref_to_Ref_as_Ref_fillstat":
  48318856.160 ±(99.9%) 7300951.552 ns/op [Average]
  (min, avg, max) = (35903644.357, 48318856.160, 55671493.421), stdev = 6829314.612
  CI (99.9%): [41017904.608, 55619807.712] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline64byte.Ref_to_Val_as_Val_arrayfillinst
# Parameters: (size = 100)

# Run progress: 67.35% complete, ETA 03:10:03
# Fork: 1 of 3
# Warmup Iteration   1: 114.055 ns/op
# Warmup Iteration   2: 117.143 ns/op
# Warmup Iteration   3: 117.295 ns/op
Iteration   1: 117.268 ns/op
Iteration   2: 117.391 ns/op
Iteration   3: 116.702 ns/op
Iteration   4: 117.040 ns/op
Iteration   5: 116.722 ns/op

# Run progress: 67.38% complete, ETA 03:09:54
# Fork: 2 of 3
# Warmup Iteration   1: 114.137 ns/op
# Warmup Iteration   2: 115.939 ns/op
# Warmup Iteration   3: 115.673 ns/op
Iteration   1: 115.814 ns/op
Iteration   2: 116.007 ns/op
Iteration   3: 116.091 ns/op
Iteration   4: 116.370 ns/op
Iteration   5: 116.059 ns/op

# Run progress: 67.40% complete, ETA 03:09:45
# Fork: 3 of 3
# Warmup Iteration   1: 122.401 ns/op
# Warmup Iteration   2: 122.080 ns/op
# Warmup Iteration   3: 115.711 ns/op
Iteration   1: 115.855 ns/op
Iteration   2: 115.450 ns/op
Iteration   3: 117.261 ns/op
Iteration   4: 118.118 ns/op
Iteration   5: 117.793 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline64byte.Ref_to_Val_as_Val_arrayfillinst":
  116.663 ±(99.9%) 0.850 ns/op [Average]
  (min, avg, max) = (115.450, 116.663, 118.118), stdev = 0.795
  CI (99.9%): [115.813, 117.512] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline64byte.Ref_to_Val_as_Val_arrayfillinst
# Parameters: (size = 1000000)

# Run progress: 67.43% complete, ETA 03:09:37
# Fork: 1 of 3
# Warmup Iteration   1: 50893779.150 ns/op
# Warmup Iteration   2: 45931809.783 ns/op
# Warmup Iteration   3: 56615800.944 ns/op
Iteration   1: 55729510.947 ns/op
Iteration   2: 43822141.304 ns/op
Iteration   3: 44359295.304 ns/op
Iteration   4: 50042763.857 ns/op
Iteration   5: 47758401.545 ns/op

# Run progress: 67.45% complete, ETA 03:09:28
# Fork: 2 of 3
# Warmup Iteration   1: 44923809.783 ns/op
# Warmup Iteration   2: 40166736.640 ns/op
# Warmup Iteration   3: 47868502.000 ns/op
Iteration   1: 26367849.359 ns/op
Iteration   2: 45736467.818 ns/op
Iteration   3: 32512407.258 ns/op
Iteration   4: 51958133.350 ns/op
Iteration   5: 54584982.421 ns/op

# Run progress: 67.48% complete, ETA 03:09:20
# Fork: 3 of 3
# Warmup Iteration   1: 45578226.478 ns/op
# Warmup Iteration   2: 39039911.846 ns/op
# Warmup Iteration   3: 34313345.833 ns/op
Iteration   1: 38816983.962 ns/op
Iteration   2: 40004376.615 ns/op
Iteration   3: 53667559.211 ns/op
Iteration   4: 51978235.400 ns/op
Iteration   5: 51390654.200 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline64byte.Ref_to_Val_as_Val_arrayfillinst":
  45915317.503 ±(99.9%) 9076530.339 ns/op [Average]
  (min, avg, max) = (26367849.359, 45915317.503, 55729510.947), stdev = 8490192.111
  CI (99.9%): [36838787.165, 54991847.842] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline64byte.Ref_to_Val_as_Val_arrayfillstat
# Parameters: (size = 100)

# Run progress: 67.50% complete, ETA 03:09:11
# Fork: 1 of 3
# Warmup Iteration   1: 117.865 ns/op
# Warmup Iteration   2: 116.511 ns/op
# Warmup Iteration   3: 117.549 ns/op
Iteration   1: 121.164 ns/op
Iteration   2: 117.111 ns/op
Iteration   3: 117.360 ns/op
Iteration   4: 117.121 ns/op
Iteration   5: 119.505 ns/op

# Run progress: 67.52% complete, ETA 03:09:02
# Fork: 2 of 3
# Warmup Iteration   1: 118.729 ns/op
# Warmup Iteration   2: 116.633 ns/op
# Warmup Iteration   3: 117.590 ns/op
Iteration   1: 116.786 ns/op
Iteration   2: 118.197 ns/op
Iteration   3: 118.917 ns/op
Iteration   4: 116.930 ns/op
Iteration   5: 118.084 ns/op

# Run progress: 67.55% complete, ETA 03:08:54
# Fork: 3 of 3
# Warmup Iteration   1: 117.539 ns/op
# Warmup Iteration   2: 116.851 ns/op
# Warmup Iteration   3: 118.186 ns/op
Iteration   1: 117.946 ns/op
Iteration   2: 117.831 ns/op
Iteration   3: 117.258 ns/op
Iteration   4: 116.986 ns/op
Iteration   5: 116.956 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline64byte.Ref_to_Val_as_Val_arrayfillstat":
  117.877 ±(99.9%) 1.285 ns/op [Average]
  (min, avg, max) = (116.786, 117.877, 121.164), stdev = 1.202
  CI (99.9%): [116.592, 119.162] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline64byte.Ref_to_Val_as_Val_arrayfillstat
# Parameters: (size = 1000000)

# Run progress: 67.57% complete, ETA 03:08:45
# Fork: 1 of 3
# Warmup Iteration   1: 41968575.000 ns/op
# Warmup Iteration   2: 46460768.909 ns/op
# Warmup Iteration   3: 55757587.737 ns/op
Iteration   1: 50249539.714 ns/op
Iteration   2: 42735531.250 ns/op
Iteration   3: 54026030.684 ns/op
Iteration   4: 55757206.105 ns/op
Iteration   5: 44721250.000 ns/op

# Run progress: 67.60% complete, ETA 03:08:36
# Fork: 2 of 3
# Warmup Iteration   1: 51428375.000 ns/op
# Warmup Iteration   2: 39239520.808 ns/op
# Warmup Iteration   3: 52998210.526 ns/op
Iteration   1: 56882465.278 ns/op
Iteration   2: 51984312.500 ns/op
Iteration   3: 45226608.696 ns/op
Iteration   4: 48662984.143 ns/op
Iteration   5: 42123319.458 ns/op

# Run progress: 67.62% complete, ETA 03:08:28
# Fork: 3 of 3
# Warmup Iteration   1: 44528365.957 ns/op
# Warmup Iteration   2: 46926765.136 ns/op
# Warmup Iteration   3: 51707704.150 ns/op
Iteration   1: 51657689.600 ns/op
Iteration   2: 48901023.810 ns/op
Iteration   3: 46395024.636 ns/op
Iteration   4: 50380760.400 ns/op
Iteration   5: 54449664.474 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline64byte.Ref_to_Val_as_Val_arrayfillstat":
  49610227.383 ±(99.9%) 4970124.486 ns/op [Average]
  (min, avg, max) = (42123319.458, 49610227.383, 56882465.278), stdev = 4649057.528
  CI (99.9%): [44640102.897, 54580351.869] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline64byte.Ref_to_Val_as_Val_fillinst
# Parameters: (size = 100)

# Run progress: 67.65% complete, ETA 03:08:19
# Fork: 1 of 3
# Warmup Iteration   1: 137.508 ns/op
# Warmup Iteration   2: 138.790 ns/op
# Warmup Iteration   3: 131.750 ns/op
Iteration   1: 130.805 ns/op
Iteration   2: 133.273 ns/op
Iteration   3: 132.004 ns/op
Iteration   4: 130.410 ns/op
Iteration   5: 132.559 ns/op

# Run progress: 67.67% complete, ETA 03:08:11
# Fork: 2 of 3
# Warmup Iteration   1: 142.894 ns/op
# Warmup Iteration   2: 141.404 ns/op
# Warmup Iteration   3: 128.224 ns/op
Iteration   1: 130.649 ns/op
Iteration   2: 131.923 ns/op
Iteration   3: 128.857 ns/op
Iteration   4: 129.333 ns/op
Iteration   5: 131.249 ns/op

# Run progress: 67.70% complete, ETA 03:08:02
# Fork: 3 of 3
# Warmup Iteration   1: 136.972 ns/op
# Warmup Iteration   2: 137.823 ns/op
# Warmup Iteration   3: 128.903 ns/op
Iteration   1: 128.710 ns/op
Iteration   2: 128.394 ns/op
Iteration   3: 129.244 ns/op
Iteration   4: 129.520 ns/op
Iteration   5: 128.326 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline64byte.Ref_to_Val_as_Val_fillinst":
  130.350 ±(99.9%) 1.703 ns/op [Average]
  (min, avg, max) = (128.326, 130.350, 133.273), stdev = 1.593
  CI (99.9%): [128.647, 132.053] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline64byte.Ref_to_Val_as_Val_fillinst
# Parameters: (size = 1000000)

# Run progress: 67.72% complete, ETA 03:07:53
# Fork: 1 of 3
# Warmup Iteration   1: 55946467.611 ns/op
# Warmup Iteration   2: 54256655.684 ns/op
# Warmup Iteration   3: 54929504.368 ns/op
Iteration   1: 50354183.350 ns/op
Iteration   2: 53939138.158 ns/op
Iteration   3: 56412673.611 ns/op
Iteration   4: 57382300.944 ns/op
Iteration   5: 49940775.810 ns/op

# Run progress: 67.75% complete, ETA 03:07:45
# Fork: 2 of 3
# Warmup Iteration   1: 45983573.864 ns/op
# Warmup Iteration   2: 57162863.444 ns/op
# Warmup Iteration   3: 54623767.526 ns/op
Iteration   1: 46466746.182 ns/op
Iteration   2: 44337393.087 ns/op
Iteration   3: 48923297.619 ns/op
Iteration   4: 57497175.944 ns/op
Iteration   5: 53035616.650 ns/op

# Run progress: 67.77% complete, ETA 03:07:36
# Fork: 3 of 3
# Warmup Iteration   1: 47074536.000 ns/op
# Warmup Iteration   2: 49818626.952 ns/op
# Warmup Iteration   3: 53732870.632 ns/op
Iteration   1: 50438000.000 ns/op
Iteration   2: 60190031.882 ns/op
Iteration   3: 55456460.526 ns/op
Iteration   4: 53834041.684 ns/op
Iteration   5: 40324433.360 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline64byte.Ref_to_Val_as_Val_fillinst":
  51902151.254 ±(99.9%) 5787070.641 ns/op [Average]
  (min, avg, max) = (40324433.360, 51902151.254, 60190031.882), stdev = 5413229.468
  CI (99.9%): [46115080.613, 57689221.894] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline64byte.Ref_to_Val_as_Val_fillstat
# Parameters: (size = 100)

# Run progress: 67.79% complete, ETA 03:07:27
# Fork: 1 of 3
# Warmup Iteration   1: 144.195 ns/op
# Warmup Iteration   2: 148.519 ns/op
# Warmup Iteration   3: 132.299 ns/op
Iteration   1: 132.352 ns/op
Iteration   2: 133.073 ns/op
Iteration   3: 133.767 ns/op
Iteration   4: 132.369 ns/op
Iteration   5: 133.928 ns/op

# Run progress: 67.82% complete, ETA 03:07:19
# Fork: 2 of 3
# Warmup Iteration   1: 144.642 ns/op
# Warmup Iteration   2: 148.006 ns/op
# Warmup Iteration   3: 132.479 ns/op
Iteration   1: 134.293 ns/op
Iteration   2: 134.319 ns/op
Iteration   3: 132.486 ns/op
Iteration   4: 139.733 ns/op
Iteration   5: 133.935 ns/op

# Run progress: 67.84% complete, ETA 03:07:10
# Fork: 3 of 3
# Warmup Iteration   1: 144.277 ns/op
# Warmup Iteration   2: 148.852 ns/op
# Warmup Iteration   3: 132.576 ns/op
Iteration   1: 134.920 ns/op
Iteration   2: 132.393 ns/op
Iteration   3: 132.537 ns/op
Iteration   4: 134.206 ns/op
Iteration   5: 132.701 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline64byte.Ref_to_Val_as_Val_fillstat":
  133.801 ±(99.9%) 1.987 ns/op [Average]
  (min, avg, max) = (132.352, 133.801, 139.733), stdev = 1.858
  CI (99.9%): [131.814, 135.788] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline64byte.Ref_to_Val_as_Val_fillstat
# Parameters: (size = 1000000)

# Run progress: 67.87% complete, ETA 03:07:02
# Fork: 1 of 3
# Warmup Iteration   1: 43891690.217 ns/op
# Warmup Iteration   2: 50239003.952 ns/op
# Warmup Iteration   3: 50901302.050 ns/op
Iteration   1: 41455836.640 ns/op
Iteration   2: 40444323.692 ns/op
Iteration   3: 52355593.750 ns/op
Iteration   4: 52990307.053 ns/op
Iteration   5: 35879757.172 ns/op

# Run progress: 67.89% complete, ETA 03:06:53
# Fork: 2 of 3
# Warmup Iteration   1: 38485916.667 ns/op
# Warmup Iteration   2: 53433592.105 ns/op
# Warmup Iteration   3: 43246060.750 ns/op
Iteration   1: 46048452.682 ns/op
Iteration   2: 52177222.950 ns/op
Iteration   3: 41864659.708 ns/op
Iteration   4: 55491467.105 ns/op
Iteration   5: 55965833.333 ns/op

# Run progress: 67.92% complete, ETA 03:06:44
# Fork: 3 of 3
# Warmup Iteration   1: 52940697.368 ns/op
# Warmup Iteration   2: 46642496.227 ns/op
# Warmup Iteration   3: 51828935.400 ns/op
Iteration   1: 54291111.842 ns/op
Iteration   2: 47804700.773 ns/op
Iteration   3: 41498825.000 ns/op
Iteration   4: 50566352.050 ns/op
Iteration   5: 53446655.684 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline64byte.Ref_to_Val_as_Val_fillstat":
  48152073.296 ±(99.9%) 6922130.935 ns/op [Average]
  (min, avg, max) = (35879757.172, 48152073.296, 55965833.333), stdev = 6474965.572
  CI (99.9%): [41229942.360, 55074204.231] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline64byte.Val_to_Ref_as_Ref_arrayfillinst
# Parameters: (size = 100)

# Run progress: 67.94% complete, ETA 03:06:36
# Fork: 1 of 3
# Warmup Iteration   1: 113.993 ns/op
# Warmup Iteration   2: 116.892 ns/op
# Warmup Iteration   3: 116.231 ns/op
Iteration   1: 118.788 ns/op
Iteration   2: 115.590 ns/op
Iteration   3: 115.861 ns/op
Iteration   4: 117.167 ns/op
Iteration   5: 116.143 ns/op

# Run progress: 67.97% complete, ETA 03:06:27
# Fork: 2 of 3
# Warmup Iteration   1: 113.360 ns/op
# Warmup Iteration   2: 116.225 ns/op
# Warmup Iteration   3: 115.589 ns/op
Iteration   1: 116.478 ns/op
Iteration   2: 115.642 ns/op
Iteration   3: 115.516 ns/op
Iteration   4: 118.473 ns/op
Iteration   5: 117.038 ns/op

# Run progress: 67.99% complete, ETA 03:06:18
# Fork: 3 of 3
# Warmup Iteration   1: 114.636 ns/op
# Warmup Iteration   2: 116.303 ns/op
# Warmup Iteration   3: 116.804 ns/op
Iteration   1: 116.667 ns/op
Iteration   2: 118.061 ns/op
Iteration   3: 116.582 ns/op
Iteration   4: 117.325 ns/op
Iteration   5: 117.847 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline64byte.Val_to_Ref_as_Ref_arrayfillinst":
  116.879 ±(99.9%) 1.134 ns/op [Average]
  (min, avg, max) = (115.516, 116.879, 118.788), stdev = 1.060
  CI (99.9%): [115.745, 118.012] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline64byte.Val_to_Ref_as_Ref_arrayfillinst
# Parameters: (size = 1000000)

# Run progress: 68.01% complete, ETA 03:06:10
# Fork: 1 of 3
# Warmup Iteration   1: 53899820.158 ns/op
# Warmup Iteration   2: 55957078.947 ns/op
# Warmup Iteration   3: 54794410.053 ns/op
Iteration   1: 54124640.368 ns/op
Iteration   2: 49159240.095 ns/op
Iteration   3: 55397537.316 ns/op
Iteration   4: 55716506.579 ns/op
Iteration   5: 50407591.700 ns/op

# Run progress: 68.04% complete, ETA 03:06:01
# Fork: 2 of 3
# Warmup Iteration   1: 41272650.000 ns/op
# Warmup Iteration   2: 42510513.320 ns/op
# Warmup Iteration   3: 50047333.333 ns/op
Iteration   1: 59250813.765 ns/op
Iteration   2: 47660015.136 ns/op
Iteration   3: 49626394.810 ns/op
Iteration   4: 35869669.552 ns/op
Iteration   5: 38401868.815 ns/op

# Run progress: 68.06% complete, ETA 03:05:53
# Fork: 3 of 3
# Warmup Iteration   1: 46224211.957 ns/op
# Warmup Iteration   2: 52901206.158 ns/op
# Warmup Iteration   3: 46538073.864 ns/op
Iteration   1: 49263972.238 ns/op
Iteration   2: 59190713.235 ns/op
Iteration   3: 52886015.368 ns/op
Iteration   4: 46158121.182 ns/op
Iteration   5: 52170531.250 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline64byte.Val_to_Ref_as_Ref_arrayfillinst":
  50352242.094 ±(99.9%) 7091479.831 ns/op [Average]
  (min, avg, max) = (35869669.552, 50352242.094, 59250813.765), stdev = 6633374.634
  CI (99.9%): [43260762.263, 57443721.925] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline64byte.Val_to_Ref_as_Ref_arrayfillstat
# Parameters: (size = 100)

# Run progress: 68.09% complete, ETA 03:05:44
# Fork: 1 of 3
# Warmup Iteration   1: 118.035 ns/op
# Warmup Iteration   2: 116.981 ns/op
# Warmup Iteration   3: 117.310 ns/op
Iteration   1: 117.060 ns/op
Iteration   2: 117.232 ns/op
Iteration   3: 118.790 ns/op
Iteration   4: 118.114 ns/op
Iteration   5: 116.897 ns/op

# Run progress: 68.11% complete, ETA 03:05:35
# Fork: 2 of 3
# Warmup Iteration   1: 116.598 ns/op
# Warmup Iteration   2: 117.455 ns/op
# Warmup Iteration   3: 117.313 ns/op
Iteration   1: 116.751 ns/op
Iteration   2: 117.309 ns/op
Iteration   3: 116.953 ns/op
Iteration   4: 116.784 ns/op
Iteration   5: 117.752 ns/op

# Run progress: 68.14% complete, ETA 03:05:27
# Fork: 3 of 3
# Warmup Iteration   1: 118.120 ns/op
# Warmup Iteration   2: 116.557 ns/op
# Warmup Iteration   3: 117.888 ns/op
Iteration   1: 118.686 ns/op
Iteration   2: 116.734 ns/op
Iteration   3: 118.234 ns/op
Iteration   4: 116.749 ns/op
Iteration   5: 117.047 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline64byte.Val_to_Ref_as_Ref_arrayfillstat":
  117.406 ±(99.9%) 0.773 ns/op [Average]
  (min, avg, max) = (116.734, 117.406, 118.790), stdev = 0.723
  CI (99.9%): [116.634, 118.179] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline64byte.Val_to_Ref_as_Ref_arrayfillstat
# Parameters: (size = 1000000)

# Run progress: 68.16% complete, ETA 03:05:18
# Fork: 1 of 3
# Warmup Iteration   1: 40084873.423 ns/op
# Warmup Iteration   2: 48948476.190 ns/op
# Warmup Iteration   3: 46370115.500 ns/op
Iteration   1: 54061853.105 ns/op
Iteration   2: 53998780.684 ns/op
Iteration   3: 55400728.105 ns/op
Iteration   4: 53615339.600 ns/op
Iteration   5: 50715731.250 ns/op

# Run progress: 68.19% complete, ETA 03:05:10
# Fork: 2 of 3
# Warmup Iteration   1: 47703478.190 ns/op
# Warmup Iteration   2: 45829865.957 ns/op
# Warmup Iteration   3: 56374618.421 ns/op
Iteration   1: 51896729.150 ns/op
Iteration   2: 54674030.684 ns/op
Iteration   3: 55694346.526 ns/op
Iteration   4: 53058687.500 ns/op
Iteration   5: 35924744.036 ns/op

# Run progress: 68.21% complete, ETA 03:05:01
# Fork: 3 of 3
# Warmup Iteration   1: 26273395.825 ns/op
# Warmup Iteration   2: 45192195.652 ns/op
# Warmup Iteration   3: 45148960.130 ns/op
Iteration   1: 40438318.320 ns/op
Iteration   2: 55153307.000 ns/op
Iteration   3: 45547954.696 ns/op
Iteration   4: 49619626.952 ns/op
Iteration   5: 54394714.895 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline64byte.Val_to_Ref_as_Ref_arrayfillstat":
  50946326.167 ±(99.9%) 6288442.899 ns/op [Average]
  (min, avg, max) = (35924744.036, 50946326.167, 55694346.526), stdev = 5882213.390
  CI (99.9%): [44657883.268, 57234769.066] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline64byte.Val_to_Ref_as_Ref_fillinst
# Parameters: (size = 100)

# Run progress: 68.24% complete, ETA 03:04:53
# Fork: 1 of 3
# Warmup Iteration   1: 137.743 ns/op
# Warmup Iteration   2: 137.583 ns/op
# Warmup Iteration   3: 129.956 ns/op
Iteration   1: 128.879 ns/op
Iteration   2: 128.672 ns/op
Iteration   3: 129.627 ns/op
Iteration   4: 128.452 ns/op
Iteration   5: 129.586 ns/op

# Run progress: 68.26% complete, ETA 03:04:44
# Fork: 2 of 3
# Warmup Iteration   1: 137.358 ns/op
# Warmup Iteration   2: 137.207 ns/op
# Warmup Iteration   3: 128.554 ns/op
Iteration   1: 129.198 ns/op
Iteration   2: 128.681 ns/op
Iteration   3: 129.685 ns/op
Iteration   4: 138.702 ns/op
Iteration   5: 133.340 ns/op

# Run progress: 68.28% complete, ETA 03:04:35
# Fork: 3 of 3
# Warmup Iteration   1: 137.558 ns/op
# Warmup Iteration   2: 136.510 ns/op
# Warmup Iteration   3: 130.381 ns/op
Iteration   1: 130.887 ns/op
Iteration   2: 132.718 ns/op
Iteration   3: 131.320 ns/op
Iteration   4: 131.087 ns/op
Iteration   5: 131.957 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline64byte.Val_to_Ref_as_Ref_fillinst":
  130.853 ±(99.9%) 2.844 ns/op [Average]
  (min, avg, max) = (128.452, 130.853, 138.702), stdev = 2.661
  CI (99.9%): [128.009, 133.697] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline64byte.Val_to_Ref_as_Ref_fillinst
# Parameters: (size = 1000000)

# Run progress: 68.31% complete, ETA 03:04:27
# Fork: 1 of 3
# Warmup Iteration   1: 50529552.100 ns/op
# Warmup Iteration   2: 48026420.619 ns/op
# Warmup Iteration   3: 56629854.167 ns/op
Iteration   1: 32492227.875 ns/op
Iteration   2: 57011203.722 ns/op
Iteration   3: 53883712.737 ns/op
Iteration   4: 54399004.368 ns/op
Iteration   5: 46281643.087 ns/op

# Run progress: 68.33% complete, ETA 03:04:18
# Fork: 2 of 3
# Warmup Iteration   1: 53674118.421 ns/op
# Warmup Iteration   2: 40685053.320 ns/op
# Warmup Iteration   3: 49479134.905 ns/op
Iteration   1: 57345342.611 ns/op
Iteration   2: 54413800.474 ns/op
Iteration   3: 53254479.200 ns/op
Iteration   4: 52110231.250 ns/op
Iteration   5: 50399106.250 ns/op

# Run progress: 68.36% complete, ETA 03:04:09
# Fork: 3 of 3
# Warmup Iteration   1: 43822857.667 ns/op
# Warmup Iteration   2: 51356975.000 ns/op
# Warmup Iteration   3: 48253153.409 ns/op
Iteration   1: 54178366.263 ns/op
Iteration   2: 53212812.500 ns/op
Iteration   3: 48961609.143 ns/op
Iteration   4: 57929078.722 ns/op
Iteration   5: 53545181.250 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline64byte.Val_to_Ref_as_Ref_fillinst":
  51961186.630 ±(99.9%) 6634475.123 ns/op [Average]
  (min, avg, max) = (32492227.875, 51961186.630, 57929078.722), stdev = 6205892.147
  CI (99.9%): [45326711.507, 58595661.753] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline64byte.Val_to_Ref_as_Ref_fillstat
# Parameters: (size = 100)

# Run progress: 68.38% complete, ETA 03:04:01
# Fork: 1 of 3
# Warmup Iteration   1: 144.748 ns/op
# Warmup Iteration   2: 148.491 ns/op
# Warmup Iteration   3: 132.915 ns/op
Iteration   1: 134.443 ns/op
Iteration   2: 132.847 ns/op
Iteration   3: 133.376 ns/op
Iteration   4: 132.628 ns/op
Iteration   5: 132.849 ns/op

# Run progress: 68.41% complete, ETA 03:03:52
# Fork: 2 of 3
# Warmup Iteration   1: 145.904 ns/op
# Warmup Iteration   2: 147.728 ns/op
# Warmup Iteration   3: 132.193 ns/op
Iteration   1: 132.164 ns/op
Iteration   2: 131.647 ns/op
Iteration   3: 131.639 ns/op
Iteration   4: 132.535 ns/op
Iteration   5: 133.363 ns/op

# Run progress: 68.43% complete, ETA 03:03:44
# Fork: 3 of 3
# Warmup Iteration   1: 145.780 ns/op
# Warmup Iteration   2: 150.591 ns/op
# Warmup Iteration   3: 134.098 ns/op
Iteration   1: 132.422 ns/op
Iteration   2: 133.924 ns/op
Iteration   3: 133.033 ns/op
Iteration   4: 133.260 ns/op
Iteration   5: 133.063 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline64byte.Val_to_Ref_as_Ref_fillstat":
  132.880 ±(99.9%) 0.817 ns/op [Average]
  (min, avg, max) = (131.639, 132.880, 134.443), stdev = 0.764
  CI (99.9%): [132.063, 133.697] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline64byte.Val_to_Ref_as_Ref_fillstat
# Parameters: (size = 1000000)

# Run progress: 68.46% complete, ETA 03:03:35
# Fork: 1 of 3
# Warmup Iteration   1: 53583025.000 ns/op
# Warmup Iteration   2: 53567728.053 ns/op
# Warmup Iteration   3: 48617259.952 ns/op
Iteration   1: 50829285.400 ns/op
Iteration   2: 52927547.900 ns/op
Iteration   3: 55225304.842 ns/op
Iteration   4: 49326134.952 ns/op
Iteration   5: 40127908.654 ns/op

# Run progress: 68.48% complete, ETA 03:03:26
# Fork: 2 of 3
# Warmup Iteration   1: 43477670.125 ns/op
# Warmup Iteration   2: 42219418.360 ns/op
# Warmup Iteration   3: 48852420.667 ns/op
Iteration   1: 51594895.850 ns/op
Iteration   2: 55235892.526 ns/op
Iteration   3: 52993000.000 ns/op
Iteration   4: 40095791.654 ns/op
Iteration   5: 49309184.524 ns/op

# Run progress: 68.50% complete, ETA 03:03:18
# Fork: 3 of 3
# Warmup Iteration   1: 47337412.864 ns/op
# Warmup Iteration   2: 50538466.650 ns/op
# Warmup Iteration   3: 50565743.750 ns/op
Iteration   1: 55609881.579 ns/op
Iteration   2: 53294804.842 ns/op
Iteration   3: 51086629.150 ns/op
Iteration   4: 55991592.105 ns/op
Iteration   5: 56795854.167 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline64byte.Val_to_Ref_as_Ref_fillstat":
  51362913.876 ±(99.9%) 5493589.168 ns/op [Average]
  (min, avg, max) = (40095791.654, 51362913.876, 56795854.167), stdev = 5138706.717
  CI (99.9%): [45869324.708, 56856503.045] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline64byte.Val_to_Val_as_Val_arrayfillinst
# Parameters: (size = 100)

# Run progress: 68.53% complete, ETA 03:03:09
# Fork: 1 of 3
# Warmup Iteration   1: 114.048 ns/op
# Warmup Iteration   2: 116.342 ns/op
# Warmup Iteration   3: 118.479 ns/op
Iteration   1: 119.543 ns/op
Iteration   2: 117.825 ns/op
Iteration   3: 117.212 ns/op
Iteration   4: 116.872 ns/op
Iteration   5: 116.735 ns/op

# Run progress: 68.55% complete, ETA 03:03:01
# Fork: 2 of 3
# Warmup Iteration   1: 115.171 ns/op
# Warmup Iteration   2: 115.820 ns/op
# Warmup Iteration   3: 118.879 ns/op
Iteration   1: 116.463 ns/op
Iteration   2: 116.652 ns/op
Iteration   3: 116.550 ns/op
Iteration   4: 118.111 ns/op
Iteration   5: 117.320 ns/op

# Run progress: 68.58% complete, ETA 03:02:52
# Fork: 3 of 3
# Warmup Iteration   1: 113.835 ns/op
# Warmup Iteration   2: 116.609 ns/op
# Warmup Iteration   3: 117.353 ns/op
Iteration   1: 116.937 ns/op
Iteration   2: 116.893 ns/op
Iteration   3: 117.931 ns/op
Iteration   4: 119.421 ns/op
Iteration   5: 118.355 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline64byte.Val_to_Val_as_Val_arrayfillinst":
  117.521 ±(99.9%) 1.059 ns/op [Average]
  (min, avg, max) = (116.463, 117.521, 119.543), stdev = 0.990
  CI (99.9%): [116.463, 118.580] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline64byte.Val_to_Val_as_Val_arrayfillinst
# Parameters: (size = 1000000)

# Run progress: 68.60% complete, ETA 03:02:43
# Fork: 1 of 3
# Warmup Iteration   1: 46830481.091 ns/op
# Warmup Iteration   2: 48905123.000 ns/op
# Warmup Iteration   3: 54919098.684 ns/op
Iteration   1: 36116678.571 ns/op
Iteration   2: 52648075.000 ns/op
Iteration   3: 50598444.429 ns/op
Iteration   4: 52626814.600 ns/op
Iteration   5: 48122628.952 ns/op

# Run progress: 68.63% complete, ETA 03:02:35
# Fork: 2 of 3
# Warmup Iteration   1: 49016448.429 ns/op
# Warmup Iteration   2: 47390589.000 ns/op
# Warmup Iteration   3: 53125841.700 ns/op
Iteration   1: 48825750.000 ns/op
Iteration   2: 54494182.000 ns/op
Iteration   3: 49189138.857 ns/op
Iteration   4: 53223206.105 ns/op
Iteration   5: 40456721.680 ns/op

# Run progress: 68.65% complete, ETA 03:02:26
# Fork: 3 of 3
# Warmup Iteration   1: 33394159.935 ns/op
# Warmup Iteration   2: 23425332.386 ns/op
# Warmup Iteration   3: 31624537.781 ns/op
Iteration   1: 28867299.778 ns/op
Iteration   2: 33711006.967 ns/op
Iteration   3: 32425111.969 ns/op
Iteration   4: 33837616.935 ns/op
Iteration   5: 32634967.742 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline64byte.Val_to_Val_as_Val_arrayfillinst":
  43185176.239 ±(99.9%) 9984532.720 ns/op [Average]
  (min, avg, max) = (28867299.778, 43185176.239, 54494182.000), stdev = 9339538.102
  CI (99.9%): [33200643.519, 53169708.959] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline64byte.Val_to_Val_as_Val_arrayfillstat
# Parameters: (size = 100)

# Run progress: 68.68% complete, ETA 03:02:18
# Fork: 1 of 3
# Warmup Iteration   1: 116.448 ns/op
# Warmup Iteration   2: 116.457 ns/op
# Warmup Iteration   3: 117.104 ns/op
Iteration   1: 117.139 ns/op
Iteration   2: 117.202 ns/op
Iteration   3: 117.036 ns/op
Iteration   4: 116.890 ns/op
Iteration   5: 116.772 ns/op

# Run progress: 68.70% complete, ETA 03:02:09
# Fork: 2 of 3
# Warmup Iteration   1: 117.954 ns/op
# Warmup Iteration   2: 123.633 ns/op
# Warmup Iteration   3: 116.991 ns/op
Iteration   1: 116.994 ns/op
Iteration   2: 116.969 ns/op
Iteration   3: 116.980 ns/op
Iteration   4: 116.962 ns/op
Iteration   5: 118.475 ns/op

# Run progress: 68.73% complete, ETA 03:02:00
# Fork: 3 of 3
# Warmup Iteration   1: 116.619 ns/op
# Warmup Iteration   2: 117.092 ns/op
# Warmup Iteration   3: 117.054 ns/op
Iteration   1: 116.874 ns/op
Iteration   2: 116.859 ns/op
Iteration   3: 117.240 ns/op
Iteration   4: 117.103 ns/op
Iteration   5: 116.889 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline64byte.Val_to_Val_as_Val_arrayfillstat":
  117.092 ±(99.9%) 0.433 ns/op [Average]
  (min, avg, max) = (116.772, 117.092, 118.475), stdev = 0.405
  CI (99.9%): [116.660, 117.525] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline64byte.Val_to_Val_as_Val_arrayfillstat
# Parameters: (size = 1000000)

# Run progress: 68.75% complete, ETA 03:01:52
# Fork: 1 of 3
# Warmup Iteration   1: 31454272.156 ns/op
# Warmup Iteration   2: 32423314.516 ns/op
# Warmup Iteration   3: 33628852.767 ns/op
Iteration   1: 33512797.233 ns/op
Iteration   2: 33791077.767 ns/op
Iteration   3: 35955771.552 ns/op
Iteration   4: 34011291.667 ns/op
Iteration   5: 31667049.469 ns/op

# Run progress: 68.77% complete, ETA 03:01:43
# Fork: 2 of 3
# Warmup Iteration   1: 33119721.774 ns/op
# Warmup Iteration   2: 28577442.568 ns/op
# Warmup Iteration   3: 34647452.767 ns/op
Iteration   1: 39936935.923 ns/op
Iteration   2: 37186785.714 ns/op
Iteration   3: 50667225.000 ns/op
Iteration   4: 30833549.242 ns/op
Iteration   5: 31956595.970 ns/op

# Run progress: 68.80% complete, ETA 03:01:35
# Fork: 3 of 3
# Warmup Iteration   1: 29098461.886 ns/op
# Warmup Iteration   2: 33930000.000 ns/op
# Warmup Iteration   3: 30509573.529 ns/op
Iteration   1: 29394872.629 ns/op
Iteration   2: 25921389.600 ns/op
Iteration   3: 34093195.833 ns/op
Iteration   4: 39486350.962 ns/op
Iteration   5: 34196809.733 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline64byte.Val_to_Val_as_Val_arrayfillstat":
  34840779.886 ±(99.9%) 6080938.409 ns/op [Average]
  (min, avg, max) = (25921389.600, 34840779.886, 50667225.000), stdev = 5688113.561
  CI (99.9%): [28759841.478, 40921718.295] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline64byte.Val_to_Val_as_Val_fillinst
# Parameters: (size = 100)

# Run progress: 68.82% complete, ETA 03:01:26
# Fork: 1 of 3
# Warmup Iteration   1: 137.979 ns/op
# Warmup Iteration   2: 138.538 ns/op
# Warmup Iteration   3: 130.876 ns/op
Iteration   1: 131.274 ns/op
Iteration   2: 131.133 ns/op
Iteration   3: 131.626 ns/op
Iteration   4: 130.804 ns/op
Iteration   5: 130.773 ns/op

# Run progress: 68.85% complete, ETA 03:01:17
# Fork: 2 of 3
# Warmup Iteration   1: 137.234 ns/op
# Warmup Iteration   2: 136.374 ns/op
# Warmup Iteration   3: 130.685 ns/op
Iteration   1: 130.079 ns/op
Iteration   2: 129.900 ns/op
Iteration   3: 131.097 ns/op
Iteration   4: 130.320 ns/op
Iteration   5: 129.974 ns/op

# Run progress: 68.87% complete, ETA 03:01:09
# Fork: 3 of 3
# Warmup Iteration   1: 137.253 ns/op
# Warmup Iteration   2: 138.569 ns/op
# Warmup Iteration   3: 127.855 ns/op
Iteration   1: 127.869 ns/op
Iteration   2: 128.520 ns/op
Iteration   3: 128.891 ns/op
Iteration   4: 128.236 ns/op
Iteration   5: 129.629 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline64byte.Val_to_Val_as_Val_fillinst":
  130.008 ±(99.9%) 1.256 ns/op [Average]
  (min, avg, max) = (127.869, 130.008, 131.626), stdev = 1.175
  CI (99.9%): [128.752, 131.264] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline64byte.Val_to_Val_as_Val_fillinst
# Parameters: (size = 1000000)

# Run progress: 68.90% complete, ETA 03:01:00
# Fork: 1 of 3
# Warmup Iteration   1: 31520880.061 ns/op
# Warmup Iteration   2: 34958176.724 ns/op
# Warmup Iteration   3: 36401405.172 ns/op
Iteration   1: 35254603.448 ns/op
Iteration   2: 31369765.625 ns/op
Iteration   3: 37341873.500 ns/op
Iteration   4: 34127870.833 ns/op
Iteration   5: 36679697.929 ns/op

# Run progress: 68.92% complete, ETA 03:00:51
# Fork: 2 of 3
# Warmup Iteration   1: 35551831.897 ns/op
# Warmup Iteration   2: 37937427.444 ns/op
# Warmup Iteration   3: 33823545.833 ns/op
Iteration   1: 35529242.793 ns/op
Iteration   2: 34161052.767 ns/op
Iteration   3: 36609842.250 ns/op
Iteration   4: 35272264.345 ns/op
Iteration   5: 32681889.774 ns/op

# Run progress: 68.95% complete, ETA 03:00:43
# Fork: 3 of 3
# Warmup Iteration   1: 36012857.143 ns/op
# Warmup Iteration   2: 38611359.593 ns/op
# Warmup Iteration   3: 35112715.517 ns/op
Iteration   1: 37411873.481 ns/op
Iteration   2: 30044170.257 ns/op
Iteration   3: 34806515.793 ns/op
Iteration   4: 48260932.571 ns/op
Iteration   5: 35410317.517 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline64byte.Val_to_Val_as_Val_fillinst":
  35664127.526 ±(99.9%) 4343979.090 ns/op [Average]
  (min, avg, max) = (30044170.257, 35664127.526, 48260932.571), stdev = 4063360.736
  CI (99.9%): [31320148.436, 40008106.616] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline64byte.Val_to_Val_as_Val_fillstat
# Parameters: (size = 100)

# Run progress: 68.97% complete, ETA 03:00:34
# Fork: 1 of 3
# Warmup Iteration   1: 143.866 ns/op
# Warmup Iteration   2: 147.995 ns/op
# Warmup Iteration   3: 132.414 ns/op
Iteration   1: 132.366 ns/op
Iteration   2: 132.565 ns/op
Iteration   3: 133.097 ns/op
Iteration   4: 132.393 ns/op
Iteration   5: 132.575 ns/op

# Run progress: 69.00% complete, ETA 03:00:26
# Fork: 2 of 3
# Warmup Iteration   1: 144.863 ns/op
# Warmup Iteration   2: 148.068 ns/op
# Warmup Iteration   3: 132.417 ns/op
Iteration   1: 132.565 ns/op
Iteration   2: 136.509 ns/op
Iteration   3: 133.111 ns/op
Iteration   4: 133.533 ns/op
Iteration   5: 132.525 ns/op

# Run progress: 69.02% complete, ETA 03:00:17
# Fork: 3 of 3
# Warmup Iteration   1: 146.168 ns/op
# Warmup Iteration   2: 149.025 ns/op
# Warmup Iteration   3: 132.830 ns/op
Iteration   1: 132.596 ns/op
Iteration   2: 131.877 ns/op
Iteration   3: 132.640 ns/op
Iteration   4: 132.537 ns/op
Iteration   5: 132.684 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline64byte.Val_to_Val_as_Val_fillstat":
  132.905 ±(99.9%) 1.140 ns/op [Average]
  (min, avg, max) = (131.877, 132.905, 136.509), stdev = 1.066
  CI (99.9%): [131.765, 134.044] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline64byte.Val_to_Val_as_Val_fillstat
# Parameters: (size = 1000000)

# Run progress: 69.04% complete, ETA 03:00:08
# Fork: 1 of 3
# Warmup Iteration   1: 32003600.250 ns/op
# Warmup Iteration   2: 35040120.690 ns/op
# Warmup Iteration   3: 11184475.000 ns/op
Iteration   1: 8715830.128 ns/op
Iteration   2: 19519693.923 ns/op
Iteration   3: 24282767.857 ns/op
Iteration   4: 40279548.320 ns/op
Iteration   5: 28321369.222 ns/op

# Run progress: 69.07% complete, ETA 03:00:00
# Fork: 2 of 3
# Warmup Iteration   1: 26609072.641 ns/op
# Warmup Iteration   2: 31628333.313 ns/op
# Warmup Iteration   3: 29212475.000 ns/op
Iteration   1: 31076815.667 ns/op
Iteration   2: 29720686.886 ns/op
Iteration   3: 30799560.606 ns/op
Iteration   4: 31999479.156 ns/op
Iteration   5: 31902528.656 ns/op

# Run progress: 69.09% complete, ETA 02:59:52
# Fork: 3 of 3
# Warmup Iteration   1: 30728569.424 ns/op
# Warmup Iteration   2: 25422106.250 ns/op
# Warmup Iteration   3: 34960175.276 ns/op
Iteration   1: 29787712.000 ns/op
Iteration   2: 25085675.000 ns/op
Iteration   3: 28785978.571 ns/op
Iteration   4: 27024162.385 ns/op
Iteration   5: 34098441.667 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline64byte.Val_to_Val_as_Val_fillstat":
  28093350.003 ±(99.9%) 7614884.509 ns/op [Average]
  (min, avg, max) = (8715830.128, 28093350.003, 40279548.320), stdev = 7122967.695
  CI (99.9%): [20478465.494, 35708234.512] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline64int.Def_to_Ref_as_Ref_arrayfill
# Parameters: (size = 100)

# Run progress: 69.12% complete, ETA 02:59:44
# Fork: 1 of 3
# Warmup Iteration   1: 137.852 ns/op
# Warmup Iteration   2: 136.208 ns/op
# Warmup Iteration   3: 126.715 ns/op
Iteration   1: 126.813 ns/op
Iteration   2: 125.286 ns/op
Iteration   3: 124.420 ns/op
Iteration   4: 123.985 ns/op
Iteration   5: 124.954 ns/op

# Run progress: 69.14% complete, ETA 02:59:35
# Fork: 2 of 3
# Warmup Iteration   1: 136.293 ns/op
# Warmup Iteration   2: 139.035 ns/op
# Warmup Iteration   3: 138.343 ns/op
Iteration   1: 137.327 ns/op
Iteration   2: 136.443 ns/op
Iteration   3: 136.346 ns/op
Iteration   4: 138.124 ns/op
Iteration   5: 138.005 ns/op

# Run progress: 69.17% complete, ETA 02:59:26
# Fork: 3 of 3
# Warmup Iteration   1: 135.275 ns/op
# Warmup Iteration   2: 142.142 ns/op
# Warmup Iteration   3: 142.081 ns/op
Iteration   1: 137.970 ns/op
Iteration   2: 137.096 ns/op
Iteration   3: 136.856 ns/op
Iteration   4: 135.852 ns/op
Iteration   5: 136.175 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline64int.Def_to_Ref_as_Ref_arrayfill":
  133.043 ±(99.9%) 6.292 ns/op [Average]
  (min, avg, max) = (123.985, 133.043, 138.124), stdev = 5.886
  CI (99.9%): [126.751, 139.336] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline64int.Def_to_Ref_as_Ref_arrayfill
# Parameters: (size = 1000000)

# Run progress: 69.19% complete, ETA 02:59:18
# Fork: 1 of 3
# Warmup Iteration   1: 47309111.727 ns/op
# Warmup Iteration   2: 48167299.273 ns/op
# Warmup Iteration   3: 46583479.182 ns/op
Iteration   1: 19737992.788 ns/op
Iteration   2: 24878725.610 ns/op
Iteration   3: 21119581.604 ns/op
Iteration   4: 26389103.615 ns/op
Iteration   5: 30900425.485 ns/op

# Run progress: 69.22% complete, ETA 02:59:09
# Fork: 2 of 3
# Warmup Iteration   1: 26644490.132 ns/op
# Warmup Iteration   2: 27737797.297 ns/op
# Warmup Iteration   3: 28622294.000 ns/op
Iteration   1: 27088029.605 ns/op
Iteration   2: 23132844.682 ns/op
Iteration   3: 22112605.065 ns/op
Iteration   4: 28705660.889 ns/op
Iteration   5: 28936898.800 ns/op

# Run progress: 69.24% complete, ETA 02:59:01
# Fork: 3 of 3
# Warmup Iteration   1: 23167091.864 ns/op
# Warmup Iteration   2: 31291292.939 ns/op
# Warmup Iteration   3: 25925421.875 ns/op
Iteration   1: 28586209.500 ns/op
Iteration   2: 31065535.364 ns/op
Iteration   3: 32823619.613 ns/op
Iteration   4: 29009339.111 ns/op
Iteration   5: 29047229.743 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline64int.Def_to_Ref_as_Ref_arrayfill":
  26902253.432 ±(99.9%) 4179280.798 ns/op [Average]
  (min, avg, max) = (19737992.788, 26902253.432, 32823619.613), stdev = 3909301.852
  CI (99.9%): [22722972.634, 31081534.230] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline64int.Def_to_Ref_as_Ref_fill
# Parameters: (size = 100)

# Run progress: 69.26% complete, ETA 02:58:52
# Fork: 1 of 3
# Warmup Iteration   1: 421.928 ns/op
# Warmup Iteration   2: 376.185 ns/op
# Warmup Iteration   3: 379.397 ns/op
Iteration   1: 375.602 ns/op
Iteration   2: 386.728 ns/op
Iteration   3: 397.301 ns/op
Iteration   4: 406.414 ns/op
Iteration   5: 386.818 ns/op

# Run progress: 69.29% complete, ETA 02:58:44
# Fork: 2 of 3
# Warmup Iteration   1: 320.145 ns/op
# Warmup Iteration   2: 389.329 ns/op
# Warmup Iteration   3: 383.603 ns/op
Iteration   1: 383.886 ns/op
Iteration   2: 385.071 ns/op
Iteration   3: 389.212 ns/op
Iteration   4: 385.510 ns/op
Iteration   5: 382.340 ns/op

# Run progress: 69.31% complete, ETA 02:58:35
# Fork: 3 of 3
# Warmup Iteration   1: 374.699 ns/op
# Warmup Iteration   2: 384.505 ns/op
# Warmup Iteration   3: 393.232 ns/op
Iteration   1: 388.497 ns/op
Iteration   2: 385.375 ns/op
Iteration   3: 389.481 ns/op
Iteration   4: 386.782 ns/op
Iteration   5: 390.759 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline64int.Def_to_Ref_as_Ref_fill":
  387.985 ±(99.9%) 7.373 ns/op [Average]
  (min, avg, max) = (375.602, 387.985, 406.414), stdev = 6.897
  CI (99.9%): [380.612, 395.358] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline64int.Def_to_Ref_as_Ref_fill
# Parameters: (size = 1000000)

# Run progress: 69.34% complete, ETA 02:58:26
# Fork: 1 of 3
# Warmup Iteration   1: 4736338.615 ns/op
# Warmup Iteration   2: 4302168.628 ns/op
# Warmup Iteration   3: 4127241.123 ns/op
Iteration   1: 4117580.602 ns/op
Iteration   2: 4066666.500 ns/op
Iteration   3: 4016410.552 ns/op
Iteration   4: 3866012.291 ns/op
Iteration   5: 3812458.019 ns/op

# Run progress: 69.36% complete, ETA 02:58:18
# Fork: 2 of 3
# Warmup Iteration   1: 4468152.591 ns/op
# Warmup Iteration   2: 3954094.819 ns/op
# Warmup Iteration   3: 3984925.197 ns/op
Iteration   1: 3932938.553 ns/op
Iteration   2: 3890222.008 ns/op
Iteration   3: 3896522.201 ns/op
Iteration   4: 3867215.223 ns/op
Iteration   5: 3904214.821 ns/op

# Run progress: 69.39% complete, ETA 02:58:09
# Fork: 3 of 3
# Warmup Iteration   1: 4535033.032 ns/op
# Warmup Iteration   2: 4009234.664 ns/op
# Warmup Iteration   3: 3922604.980 ns/op
Iteration   1: 4016507.107 ns/op
Iteration   2: 4051697.832 ns/op
Iteration   3: 4143909.324 ns/op
Iteration   4: 3973450.651 ns/op
Iteration   5: 3958993.272 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline64int.Def_to_Ref_as_Ref_fill":
  3967653.264 ±(99.9%) 105396.089 ns/op [Average]
  (min, avg, max) = (3812458.019, 3967653.264, 4143909.324), stdev = 98587.567
  CI (99.9%): [3862257.174, 4073049.353] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline64int.Def_to_Val_as_Val_arrayfill
# Parameters: (size = 100)

# Run progress: 69.41% complete, ETA 02:58:00
# Fork: 1 of 3
# Warmup Iteration   1: 133.374 ns/op
# Warmup Iteration   2: 137.888 ns/op
# Warmup Iteration   3: 139.676 ns/op
Iteration   1: 137.743 ns/op
Iteration   2: 135.726 ns/op
Iteration   3: 135.189 ns/op
Iteration   4: 135.537 ns/op
Iteration   5: 136.110 ns/op

# Run progress: 69.44% complete, ETA 02:57:52
# Fork: 2 of 3
# Warmup Iteration   1: 133.866 ns/op
# Warmup Iteration   2: 138.211 ns/op
# Warmup Iteration   3: 138.198 ns/op
Iteration   1: 138.777 ns/op
Iteration   2: 136.493 ns/op
Iteration   3: 135.732 ns/op
Iteration   4: 135.587 ns/op
Iteration   5: 135.664 ns/op

# Run progress: 69.46% complete, ETA 02:57:43
# Fork: 3 of 3
# Warmup Iteration   1: 135.615 ns/op
# Warmup Iteration   2: 138.075 ns/op
# Warmup Iteration   3: 137.155 ns/op
Iteration   1: 136.580 ns/op
Iteration   2: 135.407 ns/op
Iteration   3: 135.619 ns/op
Iteration   4: 135.906 ns/op
Iteration   5: 135.819 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline64int.Def_to_Val_as_Val_arrayfill":
  136.126 ±(99.9%) 1.028 ns/op [Average]
  (min, avg, max) = (135.189, 136.126, 138.777), stdev = 0.962
  CI (99.9%): [135.098, 137.154] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline64int.Def_to_Val_as_Val_arrayfill
# Parameters: (size = 1000000)

# Run progress: 69.49% complete, ETA 02:57:35
# Fork: 1 of 3
# Warmup Iteration   1: 33240020.161 ns/op
# Warmup Iteration   2: 31897875.000 ns/op
# Warmup Iteration   3: 26885325.658 ns/op
Iteration   1: 29853389.706 ns/op
Iteration   2: 32023854.188 ns/op
Iteration   3: 28993316.686 ns/op
Iteration   4: 31261489.909 ns/op
Iteration   5: 36385691.964 ns/op

# Run progress: 69.51% complete, ETA 02:57:26
# Fork: 2 of 3
# Warmup Iteration   1: 31816427.094 ns/op
# Warmup Iteration   2: 27265452.703 ns/op
# Warmup Iteration   3: 35154290.241 ns/op
Iteration   1: 37909757.704 ns/op
Iteration   2: 35599169.552 ns/op
Iteration   3: 35118208.310 ns/op
Iteration   4: 34499166.667 ns/op
Iteration   5: 44722139.478 ns/op

# Run progress: 69.53% complete, ETA 02:57:17
# Fork: 3 of 3
# Warmup Iteration   1: 34160383.333 ns/op
# Warmup Iteration   2: 30884729.788 ns/op
# Warmup Iteration   3: 37095761.893 ns/op
Iteration   1: 31808532.563 ns/op
Iteration   2: 36577319.929 ns/op
Iteration   3: 33066667.969 ns/op
Iteration   4: 33638387.097 ns/op
Iteration   5: 30702632.353 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline64int.Def_to_Val_as_Val_arrayfill":
  34143981.605 ±(99.9%) 4205727.518 ns/op [Average]
  (min, avg, max) = (28993316.686, 34143981.605, 44722139.478), stdev = 3934040.130
  CI (99.9%): [29938254.087, 38349709.122] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline64int.Def_to_Val_as_Val_fill
# Parameters: (size = 100)

# Run progress: 69.56% complete, ETA 02:57:09
# Fork: 1 of 3
# Warmup Iteration   1: 371.230 ns/op
# Warmup Iteration   2: 398.640 ns/op
# Warmup Iteration   3: 392.044 ns/op
Iteration   1: 414.002 ns/op
Iteration   2: 389.889 ns/op
Iteration   3: 386.735 ns/op
Iteration   4: 388.218 ns/op
Iteration   5: 389.630 ns/op

# Run progress: 69.58% complete, ETA 02:57:00
# Fork: 2 of 3
# Warmup Iteration   1: 315.351 ns/op
# Warmup Iteration   2: 388.535 ns/op
# Warmup Iteration   3: 387.058 ns/op
Iteration   1: 387.755 ns/op
Iteration   2: 387.142 ns/op
Iteration   3: 388.708 ns/op
Iteration   4: 397.414 ns/op
Iteration   5: 391.219 ns/op

# Run progress: 69.61% complete, ETA 02:56:52
# Fork: 3 of 3
# Warmup Iteration   1: 371.667 ns/op
# Warmup Iteration   2: 390.586 ns/op
# Warmup Iteration   3: 386.796 ns/op
Iteration   1: 385.567 ns/op
Iteration   2: 390.125 ns/op
Iteration   3: 406.257 ns/op
Iteration   4: 395.924 ns/op
Iteration   5: 387.521 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline64int.Def_to_Val_as_Val_fill":
  392.407 ±(99.9%) 8.570 ns/op [Average]
  (min, avg, max) = (385.567, 392.407, 414.002), stdev = 8.016
  CI (99.9%): [383.837, 400.977] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline64int.Def_to_Val_as_Val_fill
# Parameters: (size = 1000000)

# Run progress: 69.63% complete, ETA 02:56:43
# Fork: 1 of 3
# Warmup Iteration   1: 4615051.327 ns/op
# Warmup Iteration   2: 4161935.185 ns/op
# Warmup Iteration   3: 4454312.591 ns/op
Iteration   1: 3982152.232 ns/op
Iteration   2: 3980226.617 ns/op
Iteration   3: 4032360.558 ns/op
Iteration   4: 3982387.514 ns/op
Iteration   5: 4097526.192 ns/op

# Run progress: 69.66% complete, ETA 02:56:34
# Fork: 2 of 3
# Warmup Iteration   1: 4503039.798 ns/op
# Warmup Iteration   2: 3953049.645 ns/op
# Warmup Iteration   3: 4094178.183 ns/op
Iteration   1: 3933152.397 ns/op
Iteration   2: 3905385.618 ns/op
Iteration   3: 3838161.576 ns/op
Iteration   4: 3826026.574 ns/op
Iteration   5: 3963903.874 ns/op

# Run progress: 69.68% complete, ETA 02:56:26
# Fork: 3 of 3
# Warmup Iteration   1: 4845338.120 ns/op
# Warmup Iteration   2: 4446777.040 ns/op
# Warmup Iteration   3: 4358298.879 ns/op
Iteration   1: 4114581.971 ns/op
Iteration   2: 4512893.686 ns/op
Iteration   3: 4711147.093 ns/op
Iteration   4: 4560937.126 ns/op
Iteration   5: 4170634.471 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline64int.Def_to_Val_as_Val_fill":
  4107431.833 ±(99.9%) 290720.747 ns/op [Average]
  (min, avg, max) = (3826026.574, 4107431.833, 4711147.093), stdev = 271940.367
  CI (99.9%): [3816711.086, 4398152.580] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline64int.New_to_Ref_as_Ref_arrayfill
# Parameters: (size = 100)

# Run progress: 69.71% complete, ETA 02:56:17
# Fork: 1 of 3
# Warmup Iteration   1: 279.737 ns/op
# Warmup Iteration   2: 263.943 ns/op
# Warmup Iteration   3: 137.326 ns/op
Iteration   1: 136.248 ns/op
Iteration   2: 136.025 ns/op
Iteration   3: 135.748 ns/op
Iteration   4: 135.538 ns/op
Iteration   5: 135.647 ns/op

# Run progress: 69.73% complete, ETA 02:56:08
# Fork: 2 of 3
# Warmup Iteration   1: 224.048 ns/op
# Warmup Iteration   2: 261.071 ns/op
# Warmup Iteration   3: 137.304 ns/op
Iteration   1: 161.958 ns/op
Iteration   2: 209.901 ns/op
Iteration   3: 229.755 ns/op
Iteration   4: 207.912 ns/op
Iteration   5: 160.494 ns/op

# Run progress: 69.75% complete, ETA 02:56:00
# Fork: 3 of 3
# Warmup Iteration   1: 297.196 ns/op
# Warmup Iteration   2: 224.162 ns/op
# Warmup Iteration   3: 128.208 ns/op
Iteration   1: 126.581 ns/op
Iteration   2: 125.173 ns/op
Iteration   3: 127.673 ns/op
Iteration   4: 143.228 ns/op
Iteration   5: 128.072 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline64int.New_to_Ref_as_Ref_arrayfill":
  153.330 ±(99.9%) 36.793 ns/op [Average]
  (min, avg, max) = (125.173, 153.330, 229.755), stdev = 34.416
  CI (99.9%): [116.538, 190.123] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline64int.New_to_Ref_as_Ref_arrayfill
# Parameters: (size = 1000000)

# Run progress: 69.78% complete, ETA 02:55:51
# Fork: 1 of 3
# Warmup Iteration   1: 25712442.073 ns/op
# Warmup Iteration   2: 42889971.640 ns/op
# Warmup Iteration   3: 48778940.476 ns/op
Iteration   1: 48559785.714 ns/op
Iteration   2: 45799567.043 ns/op
Iteration   3: 45042059.783 ns/op
Iteration   4: 41346996.680 ns/op
Iteration   5: 21777176.208 ns/op

# Run progress: 69.80% complete, ETA 02:55:43
# Fork: 2 of 3
# Warmup Iteration   1: 32156321.970 ns/op
# Warmup Iteration   2: 41586643.320 ns/op
# Warmup Iteration   3: 33974376.355 ns/op
Iteration   1: 47111195.045 ns/op
Iteration   2: 48805433.727 ns/op
Iteration   3: 45300981.913 ns/op
Iteration   4: 42008317.708 ns/op
Iteration   5: 44027933.000 ns/op

# Run progress: 69.83% complete, ETA 02:55:34
# Fork: 3 of 3
# Warmup Iteration   1: 41581393.320 ns/op
# Warmup Iteration   2: 42169048.625 ns/op
# Warmup Iteration   3: 46150047.364 ns/op
Iteration   1: 40961849.346 ns/op
Iteration   2: 39548410.269 ns/op
Iteration   3: 31638903.656 ns/op
Iteration   4: 16259945.095 ns/op
Iteration   5: 27371458.324 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline64int.New_to_Ref_as_Ref_arrayfill":
  39037334.234 ±(99.9%) 10777618.172 ns/op [Average]
  (min, avg, max) = (16259945.095, 39037334.234, 48805433.727), stdev = 10081390.725
  CI (99.9%): [28259716.063, 49814952.406] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline64int.New_to_Ref_as_Ref_fill
# Parameters: (size = 100)

# Run progress: 69.85% complete, ETA 02:55:26
# Fork: 1 of 3
# Warmup Iteration   1: 342.064 ns/op
# Warmup Iteration   2: 298.530 ns/op
# Warmup Iteration   3: 264.335 ns/op
Iteration   1: 264.737 ns/op
Iteration   2: 263.126 ns/op
Iteration   3: 265.250 ns/op
Iteration   4: 266.749 ns/op
Iteration   5: 264.190 ns/op

# Run progress: 69.88% complete, ETA 02:55:17
# Fork: 2 of 3
# Warmup Iteration   1: 333.370 ns/op
# Warmup Iteration   2: 317.190 ns/op
# Warmup Iteration   3: 271.718 ns/op
Iteration   1: 267.175 ns/op
Iteration   2: 263.836 ns/op
Iteration   3: 264.129 ns/op
Iteration   4: 265.470 ns/op
Iteration   5: 263.460 ns/op

# Run progress: 69.90% complete, ETA 02:55:08
# Fork: 3 of 3
# Warmup Iteration   1: 320.460 ns/op
# Warmup Iteration   2: 303.035 ns/op
# Warmup Iteration   3: 281.953 ns/op
Iteration   1: 283.210 ns/op
Iteration   2: 281.281 ns/op
Iteration   3: 286.848 ns/op
Iteration   4: 286.362 ns/op
Iteration   5: 286.056 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline64int.New_to_Ref_as_Ref_fill":
  271.459 ±(99.9%) 10.555 ns/op [Average]
  (min, avg, max) = (263.126, 271.459, 286.848), stdev = 9.873
  CI (99.9%): [260.903, 282.014] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline64int.New_to_Ref_as_Ref_fill
# Parameters: (size = 1000000)

# Run progress: 69.93% complete, ETA 02:55:00
# Fork: 1 of 3
# Warmup Iteration   1: 4717109.545 ns/op
# Warmup Iteration   2: 5746038.824 ns/op
# Warmup Iteration   3: 2947003.299 ns/op
Iteration   1: 3393979.725 ns/op
Iteration   2: 2830056.379 ns/op
Iteration   3: 3002718.223 ns/op
Iteration   4: 2886689.773 ns/op
Iteration   5: 2928174.516 ns/op

# Run progress: 69.95% complete, ETA 02:54:51
# Fork: 2 of 3
# Warmup Iteration   1: 4566163.477 ns/op
# Warmup Iteration   2: 3324817.711 ns/op
# Warmup Iteration   3: 4303699.252 ns/op
Iteration   1: 2945620.143 ns/op
Iteration   2: 2917482.951 ns/op
Iteration   3: 3019627.252 ns/op
Iteration   4: 3220018.178 ns/op
Iteration   5: 2799249.194 ns/op

# Run progress: 69.98% complete, ETA 02:54:43
# Fork: 3 of 3
# Warmup Iteration   1: 4511136.395 ns/op
# Warmup Iteration   2: 3348948.950 ns/op
# Warmup Iteration   3: 3628314.679 ns/op
Iteration   1: 2928197.220 ns/op
Iteration   2: 3374200.697 ns/op
Iteration   3: 2789542.931 ns/op
Iteration   4: 2933706.893 ns/op
Iteration   5: 2770829.235 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline64int.New_to_Ref_as_Ref_fill":
  2982672.887 ±(99.9%) 210512.920 ns/op [Average]
  (min, avg, max) = (2770829.235, 2982672.887, 3393979.725), stdev = 196913.916
  CI (99.9%): [2772159.968, 3193185.807] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline64int.New_to_Val_as_Val_arrayfill
# Parameters: (size = 100)

# Run progress: 70.00% complete, ETA 02:54:34
# Fork: 1 of 3
# Warmup Iteration   1: 258.364 ns/op
# Warmup Iteration   2: 252.893 ns/op
# Warmup Iteration   3: 139.930 ns/op
Iteration   1: 135.929 ns/op
Iteration   2: 135.890 ns/op
Iteration   3: 136.914 ns/op
Iteration   4: 135.255 ns/op
Iteration   5: 135.515 ns/op

# Run progress: 70.02% complete, ETA 02:54:25
# Fork: 2 of 3
# Warmup Iteration   1: 271.893 ns/op
# Warmup Iteration   2: 265.124 ns/op
# Warmup Iteration   3: 136.462 ns/op
Iteration   1: 135.957 ns/op
Iteration   2: 135.861 ns/op
Iteration   3: 137.645 ns/op
Iteration   4: 135.363 ns/op
Iteration   5: 135.462 ns/op

# Run progress: 70.05% complete, ETA 02:54:17
# Fork: 3 of 3
# Warmup Iteration   1: 257.425 ns/op
# Warmup Iteration   2: 199.371 ns/op
# Warmup Iteration   3: 125.594 ns/op
Iteration   1: 125.493 ns/op
Iteration   2: 128.209 ns/op
Iteration   3: 127.691 ns/op
Iteration   4: 127.861 ns/op
Iteration   5: 126.078 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline64int.New_to_Val_as_Val_arrayfill":
  133.008 ±(99.9%) 4.744 ns/op [Average]
  (min, avg, max) = (125.493, 133.008, 137.645), stdev = 4.437
  CI (99.9%): [128.265, 137.752] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline64int.New_to_Val_as_Val_arrayfill
# Parameters: (size = 1000000)

# Run progress: 70.07% complete, ETA 02:54:08
# Fork: 1 of 3
# Warmup Iteration   1: 26617355.769 ns/op
# Warmup Iteration   2: 37455037.037 ns/op
# Warmup Iteration   3: 29155444.057 ns/op
Iteration   1: 32684151.903 ns/op
Iteration   2: 34295390.267 ns/op
Iteration   3: 34274123.633 ns/op
Iteration   4: 33249145.161 ns/op
Iteration   5: 35008805.567 ns/op

# Run progress: 70.10% complete, ETA 02:53:59
# Fork: 2 of 3
# Warmup Iteration   1: 28305508.111 ns/op
# Warmup Iteration   2: 36461806.536 ns/op
# Warmup Iteration   3: 36391602.679 ns/op
Iteration   1: 29056721.429 ns/op
Iteration   2: 29795600.500 ns/op
Iteration   3: 29143790.486 ns/op
Iteration   4: 35246952.767 ns/op
Iteration   5: 35927898.000 ns/op

# Run progress: 70.12% complete, ETA 02:53:51
# Fork: 3 of 3
# Warmup Iteration   1: 31877108.063 ns/op
# Warmup Iteration   2: 34157580.567 ns/op
# Warmup Iteration   3: 34909806.034 ns/op
Iteration   1: 32527884.125 ns/op
Iteration   2: 33720283.333 ns/op
Iteration   3: 29827595.588 ns/op
Iteration   4: 31941177.094 ns/op
Iteration   5: 29539861.886 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline64int.New_to_Val_as_Val_arrayfill":
  32415958.783 ±(99.9%) 2564963.833 ns/op [Average]
  (min, avg, max) = (29056721.429, 32415958.783, 35927898.000), stdev = 2399268.761
  CI (99.9%): [29850994.950, 34980922.615] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline64int.New_to_Val_as_Val_fill
# Parameters: (size = 100)

# Run progress: 70.15% complete, ETA 02:53:42
# Fork: 1 of 3
# Warmup Iteration   1: 338.116 ns/op
# Warmup Iteration   2: 306.757 ns/op
# Warmup Iteration   3: 269.159 ns/op
Iteration   1: 278.615 ns/op
Iteration   2: 264.216 ns/op
Iteration   3: 264.912 ns/op
Iteration   4: 264.066 ns/op
Iteration   5: 265.069 ns/op

# Run progress: 70.17% complete, ETA 02:53:34
# Fork: 2 of 3
# Warmup Iteration   1: 322.744 ns/op
# Warmup Iteration   2: 317.502 ns/op
# Warmup Iteration   3: 340.337 ns/op
Iteration   1: 285.137 ns/op
Iteration   2: 284.601 ns/op
Iteration   3: 285.122 ns/op
Iteration   4: 284.102 ns/op
Iteration   5: 283.471 ns/op

# Run progress: 70.20% complete, ETA 02:53:25
# Fork: 3 of 3
# Warmup Iteration   1: 329.357 ns/op
# Warmup Iteration   2: 295.933 ns/op
# Warmup Iteration   3: 270.908 ns/op
Iteration   1: 270.301 ns/op
Iteration   2: 270.244 ns/op
Iteration   3: 273.429 ns/op
Iteration   4: 276.391 ns/op
Iteration   5: 270.554 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline64int.New_to_Val_as_Val_fill":
  274.682 ±(99.9%) 8.892 ns/op [Average]
  (min, avg, max) = (264.066, 274.682, 285.137), stdev = 8.318
  CI (99.9%): [265.790, 283.575] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline64int.New_to_Val_as_Val_fill
# Parameters: (size = 1000000)

# Run progress: 70.22% complete, ETA 02:53:16
# Fork: 1 of 3
# Warmup Iteration   1: 4760106.221 ns/op
# Warmup Iteration   2: 4990695.274 ns/op
# Warmup Iteration   3: 3177928.757 ns/op
Iteration   1: 3545904.825 ns/op
Iteration   2: 2803737.003 ns/op
Iteration   3: 2903179.395 ns/op
Iteration   4: 3061971.339 ns/op
Iteration   5: 2787701.218 ns/op

# Run progress: 70.25% complete, ETA 02:53:08
# Fork: 2 of 3
# Warmup Iteration   1: 4577575.982 ns/op
# Warmup Iteration   2: 3377450.557 ns/op
# Warmup Iteration   3: 4354208.151 ns/op
Iteration   1: 2981066.372 ns/op
Iteration   2: 3153496.605 ns/op
Iteration   3: 2760739.639 ns/op
Iteration   4: 3127500.774 ns/op
Iteration   5: 2836233.543 ns/op

# Run progress: 70.27% complete, ETA 02:52:59
# Fork: 3 of 3
# Warmup Iteration   1: 4483594.491 ns/op
# Warmup Iteration   2: 3223300.159 ns/op
# Warmup Iteration   3: 3426327.806 ns/op
Iteration   1: 2868615.412 ns/op
Iteration   2: 2937105.137 ns/op
Iteration   3: 3016796.904 ns/op
Iteration   4: 3475420.821 ns/op
Iteration   5: 2790494.130 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline64int.New_to_Val_as_Val_fill":
  3003330.874 ±(99.9%) 257195.651 ns/op [Average]
  (min, avg, max) = (2760739.639, 3003330.874, 3545904.825), stdev = 240580.972
  CI (99.9%): [2746135.223, 3260526.526] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline64int.Ref_to_Ref_as_Ref_arrayfillinst
# Parameters: (size = 100)

# Run progress: 70.29% complete, ETA 02:52:50
# Fork: 1 of 3
# Warmup Iteration   1: 116.549 ns/op
# Warmup Iteration   2: 116.369 ns/op
# Warmup Iteration   3: 120.400 ns/op
Iteration   1: 119.315 ns/op
Iteration   2: 145.929 ns/op
Iteration   3: 182.465 ns/op
Iteration   4: 168.205 ns/op
Iteration   5: 142.486 ns/op

# Run progress: 70.32% complete, ETA 02:52:42
# Fork: 2 of 3
# Warmup Iteration   1: 117.212 ns/op
# Warmup Iteration   2: 116.184 ns/op
# Warmup Iteration   3: 116.947 ns/op
Iteration   1: 117.526 ns/op
Iteration   2: 116.824 ns/op
Iteration   3: 116.580 ns/op
Iteration   4: 123.364 ns/op
Iteration   5: 139.860 ns/op

# Run progress: 70.34% complete, ETA 02:52:33
# Fork: 3 of 3
# Warmup Iteration   1: 131.388 ns/op
# Warmup Iteration   2: 116.211 ns/op
# Warmup Iteration   3: 119.911 ns/op
Iteration   1: 137.083 ns/op
Iteration   2: 139.073 ns/op
Iteration   3: 124.341 ns/op
Iteration   4: 122.762 ns/op
Iteration   5: 145.289 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline64int.Ref_to_Ref_as_Ref_arrayfillinst":
  136.074 ±(99.9%) 20.769 ns/op [Average]
  (min, avg, max) = (116.580, 136.074, 182.465), stdev = 19.427
  CI (99.9%): [115.305, 156.843] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline64int.Ref_to_Ref_as_Ref_arrayfillinst
# Parameters: (size = 1000000)

# Run progress: 70.37% complete, ETA 02:52:25
# Fork: 1 of 3
# Warmup Iteration   1: 37099156.250 ns/op
# Warmup Iteration   2: 32264708.344 ns/op
# Warmup Iteration   3: 28336432.861 ns/op
Iteration   1: 29501833.314 ns/op
Iteration   2: 34073929.167 ns/op
Iteration   3: 31497395.844 ns/op
Iteration   4: 29374401.200 ns/op
Iteration   5: 31104207.061 ns/op

# Run progress: 70.39% complete, ETA 02:52:16
# Fork: 2 of 3
# Warmup Iteration   1: 29627371.324 ns/op
# Warmup Iteration   2: 33865176.400 ns/op
# Warmup Iteration   3: 30509705.882 ns/op
Iteration   1: 34397620.833 ns/op
Iteration   2: 30002520.824 ns/op
Iteration   3: 32250595.063 ns/op
Iteration   4: 29939441.657 ns/op
Iteration   5: 36234127.964 ns/op

# Run progress: 70.42% complete, ETA 02:52:07
# Fork: 3 of 3
# Warmup Iteration   1: 41389495.000 ns/op
# Warmup Iteration   2: 35014722.690 ns/op
# Warmup Iteration   3: 48284948.864 ns/op
Iteration   1: 40992165.000 ns/op
Iteration   2: 44085871.348 ns/op
Iteration   3: 43979730.087 ns/op
Iteration   4: 42472641.680 ns/op
Iteration   5: 49378160.714 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline64int.Ref_to_Ref_as_Ref_arrayfillinst":
  35952309.450 ±(99.9%) 6988562.922 ns/op [Average]
  (min, avg, max) = (29374401.200, 35952309.450, 49378160.714), stdev = 6537106.094
  CI (99.9%): [28963746.528, 42940872.372] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline64int.Ref_to_Ref_as_Ref_arrayfillstat
# Parameters: (size = 100)

# Run progress: 70.44% complete, ETA 02:51:59
# Fork: 1 of 3
# Warmup Iteration   1: 242.763 ns/op
# Warmup Iteration   2: 241.104 ns/op
# Warmup Iteration   3: 243.895 ns/op
Iteration   1: 243.664 ns/op
Iteration   2: 243.529 ns/op
Iteration   3: 243.469 ns/op
Iteration   4: 243.891 ns/op
Iteration   5: 243.724 ns/op

# Run progress: 70.47% complete, ETA 02:51:50
# Fork: 2 of 3
# Warmup Iteration   1: 242.196 ns/op
# Warmup Iteration   2: 242.100 ns/op
# Warmup Iteration   3: 244.517 ns/op
Iteration   1: 139.404 ns/op
Iteration   2: 116.848 ns/op
Iteration   3: 116.921 ns/op
Iteration   4: 117.029 ns/op
Iteration   5: 117.118 ns/op

# Run progress: 70.49% complete, ETA 02:51:42
# Fork: 3 of 3
# Warmup Iteration   1: 117.027 ns/op
# Warmup Iteration   2: 116.359 ns/op
# Warmup Iteration   3: 118.544 ns/op
Iteration   1: 117.115 ns/op
Iteration   2: 118.107 ns/op
Iteration   3: 117.855 ns/op
Iteration   4: 117.148 ns/op
Iteration   5: 117.265 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline64int.Ref_to_Ref_as_Ref_arrayfillstat":
  160.873 ±(99.9%) 65.054 ns/op [Average]
  (min, avg, max) = (116.848, 160.873, 243.891), stdev = 60.851
  CI (99.9%): [95.819, 225.926] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline64int.Ref_to_Ref_as_Ref_arrayfillstat
# Parameters: (size = 1000000)

# Run progress: 70.51% complete, ETA 02:51:33
# Fork: 1 of 3
# Warmup Iteration   1: 28314780.083 ns/op
# Warmup Iteration   2: 29380339.286 ns/op
# Warmup Iteration   3: 34633816.103 ns/op
Iteration   1: 30015752.441 ns/op
Iteration   2: 33030836.000 ns/op
Iteration   3: 30068876.235 ns/op
Iteration   4: 34003968.067 ns/op
Iteration   5: 35073605.533 ns/op

# Run progress: 70.54% complete, ETA 02:51:25
# Fork: 2 of 3
# Warmup Iteration   1: 34673804.586 ns/op
# Warmup Iteration   2: 36661412.214 ns/op
# Warmup Iteration   3: 30159191.176 ns/op
Iteration   1: 32486746.094 ns/op
Iteration   2: 28465958.333 ns/op
Iteration   3: 32239662.750 ns/op
Iteration   4: 33048294.355 ns/op
Iteration   5: 32288613.281 ns/op

# Run progress: 70.56% complete, ETA 02:51:16
# Fork: 3 of 3
# Warmup Iteration   1: 29740900.735 ns/op
# Warmup Iteration   2: 33248302.419 ns/op
# Warmup Iteration   3: 28617964.111 ns/op
Iteration   1: 30324139.706 ns/op
Iteration   2: 32741135.742 ns/op
Iteration   3: 31307375.000 ns/op
Iteration   4: 32941020.844 ns/op
Iteration   5: 26094821.875 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline64int.Ref_to_Ref_as_Ref_arrayfillstat":
  31608720.417 ±(99.9%) 2448788.067 ns/op [Average]
  (min, avg, max) = (26094821.875, 31608720.417, 35073605.533), stdev = 2290597.878
  CI (99.9%): [29159932.350, 34057508.485] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline64int.Ref_to_Ref_as_Ref_fillinst
# Parameters: (size = 100)

# Run progress: 70.59% complete, ETA 02:51:07
# Fork: 1 of 3
# Warmup Iteration   1: 136.969 ns/op
# Warmup Iteration   2: 136.665 ns/op
# Warmup Iteration   3: 128.095 ns/op
Iteration   1: 128.386 ns/op
Iteration   2: 128.387 ns/op
Iteration   3: 129.853 ns/op
Iteration   4: 130.456 ns/op
Iteration   5: 130.372 ns/op

# Run progress: 70.61% complete, ETA 02:50:59
# Fork: 2 of 3
# Warmup Iteration   1: 139.088 ns/op
# Warmup Iteration   2: 136.246 ns/op
# Warmup Iteration   3: 128.340 ns/op
Iteration   1: 128.591 ns/op
Iteration   2: 128.751 ns/op
Iteration   3: 128.554 ns/op
Iteration   4: 128.404 ns/op
Iteration   5: 128.349 ns/op

# Run progress: 70.64% complete, ETA 02:50:50
# Fork: 3 of 3
# Warmup Iteration   1: 137.073 ns/op
# Warmup Iteration   2: 136.264 ns/op
# Warmup Iteration   3: 129.787 ns/op
Iteration   1: 130.023 ns/op
Iteration   2: 129.983 ns/op
Iteration   3: 129.895 ns/op
Iteration   4: 129.972 ns/op
Iteration   5: 129.959 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline64int.Ref_to_Ref_as_Ref_fillinst":
  129.329 ±(99.9%) 0.892 ns/op [Average]
  (min, avg, max) = (128.349, 129.329, 130.456), stdev = 0.834
  CI (99.9%): [128.437, 130.221] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline64int.Ref_to_Ref_as_Ref_fillinst
# Parameters: (size = 1000000)

# Run progress: 70.66% complete, ETA 02:50:42
# Fork: 1 of 3
# Warmup Iteration   1: 31882548.188 ns/op
# Warmup Iteration   2: 28869957.143 ns/op
# Warmup Iteration   3: 33615059.161 ns/op
Iteration   1: 29653710.714 ns/op
Iteration   2: 31420852.273 ns/op
Iteration   3: 28407706.028 ns/op
Iteration   4: 32740700.290 ns/op
Iteration   5: 31335284.091 ns/op

# Run progress: 70.69% complete, ETA 02:50:33
# Fork: 2 of 3
# Warmup Iteration   1: 33001729.839 ns/op
# Warmup Iteration   2: 38821475.962 ns/op
# Warmup Iteration   3: 40519791.680 ns/op
Iteration   1: 36871601.214 ns/op
Iteration   2: 31961721.344 ns/op
Iteration   3: 32011830.750 ns/op
Iteration   4: 38039291.643 ns/op
Iteration   5: 35952032.750 ns/op

# Run progress: 70.71% complete, ETA 02:50:24
# Fork: 3 of 3
# Warmup Iteration   1: 33382327.935 ns/op
# Warmup Iteration   2: 34345122.233 ns/op
# Warmup Iteration   3: 33617508.333 ns/op
Iteration   1: 31823091.156 ns/op
Iteration   2: 36249301.724 ns/op
Iteration   3: 27285654.605 ns/op
Iteration   4: 32175736.969 ns/op
Iteration   5: 30266746.324 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline64int.Ref_to_Ref_as_Ref_fillinst":
  32413017.458 ±(99.9%) 3336311.934 ns/op [Average]
  (min, avg, max) = (27285654.605, 32413017.458, 38039291.643), stdev = 3120788.253
  CI (99.9%): [29076705.524, 35749329.392] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline64int.Ref_to_Ref_as_Ref_fillstat
# Parameters: (size = 100)

# Run progress: 70.74% complete, ETA 02:50:16
# Fork: 1 of 3
# Warmup Iteration   1: 144.255 ns/op
# Warmup Iteration   2: 148.110 ns/op
# Warmup Iteration   3: 132.767 ns/op
Iteration   1: 132.379 ns/op
Iteration   2: 132.977 ns/op
Iteration   3: 134.246 ns/op
Iteration   4: 133.201 ns/op
Iteration   5: 132.655 ns/op

# Run progress: 70.76% complete, ETA 02:50:07
# Fork: 2 of 3
# Warmup Iteration   1: 144.992 ns/op
# Warmup Iteration   2: 147.526 ns/op
# Warmup Iteration   3: 132.959 ns/op
Iteration   1: 133.533 ns/op
Iteration   2: 134.866 ns/op
Iteration   3: 132.690 ns/op
Iteration   4: 132.924 ns/op
Iteration   5: 133.344 ns/op

# Run progress: 70.78% complete, ETA 02:49:59
# Fork: 3 of 3
# Warmup Iteration   1: 144.340 ns/op
# Warmup Iteration   2: 148.242 ns/op
# Warmup Iteration   3: 132.570 ns/op
Iteration   1: 132.422 ns/op
Iteration   2: 134.608 ns/op
Iteration   3: 132.415 ns/op
Iteration   4: 132.934 ns/op
Iteration   5: 132.397 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline64int.Ref_to_Ref_as_Ref_fillstat":
  133.173 ±(99.9%) 0.870 ns/op [Average]
  (min, avg, max) = (132.379, 133.173, 134.866), stdev = 0.814
  CI (99.9%): [132.303, 134.043] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline64int.Ref_to_Ref_as_Ref_fillstat
# Parameters: (size = 1000000)

# Run progress: 70.81% complete, ETA 02:49:50
# Fork: 1 of 3
# Warmup Iteration   1: 31938339.667 ns/op
# Warmup Iteration   2: 37893910.519 ns/op
# Warmup Iteration   3: 38895902.231 ns/op
Iteration   1: 36644665.179 ns/op
Iteration   2: 32598985.226 ns/op
Iteration   3: 32604792.969 ns/op
Iteration   4: 34133622.233 ns/op
Iteration   5: 34095373.645 ns/op

# Run progress: 70.83% complete, ETA 02:49:41
# Fork: 2 of 3
# Warmup Iteration   1: 36596501.464 ns/op
# Warmup Iteration   2: 32871081.968 ns/op
# Warmup Iteration   3: 13320196.961 ns/op
Iteration   1: 33061895.161 ns/op
Iteration   2: 28826413.194 ns/op
Iteration   3: 34837811.793 ns/op
Iteration   4: 32595298.387 ns/op
Iteration   5: 33730936.806 ns/op

# Run progress: 70.86% complete, ETA 02:49:33
# Fork: 3 of 3
# Warmup Iteration   1: 32207182.313 ns/op
# Warmup Iteration   2: 36387757.207 ns/op
# Warmup Iteration   3: 32786629.032 ns/op
Iteration   1: 31883203.125 ns/op
Iteration   2: 33872098.600 ns/op
Iteration   3: 37395392.857 ns/op
Iteration   4: 32992201.613 ns/op
Iteration   5: 31119890.152 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline64int.Ref_to_Ref_as_Ref_fillstat":
  33359505.396 ±(99.9%) 2222501.768 ns/op [Average]
  (min, avg, max) = (28826413.194, 33359505.396, 37395392.857), stdev = 2078929.533
  CI (99.9%): [31137003.628, 35582007.164] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline64int.Ref_to_Val_as_Val_arrayfillinst
# Parameters: (size = 100)

# Run progress: 70.88% complete, ETA 02:49:24
# Fork: 1 of 3
# Warmup Iteration   1: 113.486 ns/op
# Warmup Iteration   2: 128.654 ns/op
# Warmup Iteration   3: 116.872 ns/op
Iteration   1: 117.464 ns/op
Iteration   2: 115.781 ns/op
Iteration   3: 116.211 ns/op
Iteration   4: 116.090 ns/op
Iteration   5: 116.388 ns/op

# Run progress: 70.91% complete, ETA 02:49:16
# Fork: 2 of 3
# Warmup Iteration   1: 113.119 ns/op
# Warmup Iteration   2: 115.898 ns/op
# Warmup Iteration   3: 116.636 ns/op
Iteration   1: 116.659 ns/op
Iteration   2: 117.430 ns/op
Iteration   3: 116.875 ns/op
Iteration   4: 116.878 ns/op
Iteration   5: 116.863 ns/op

# Run progress: 70.93% complete, ETA 02:49:07
# Fork: 3 of 3
# Warmup Iteration   1: 113.470 ns/op
# Warmup Iteration   2: 115.997 ns/op
# Warmup Iteration   3: 116.202 ns/op
Iteration   1: 116.373 ns/op
Iteration   2: 115.649 ns/op
Iteration   3: 116.543 ns/op
Iteration   4: 130.111 ns/op
Iteration   5: 129.645 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline64int.Ref_to_Val_as_Val_arrayfillinst":
  118.331 ±(99.9%) 5.043 ns/op [Average]
  (min, avg, max) = (115.649, 118.331, 130.111), stdev = 4.717
  CI (99.9%): [113.287, 123.374] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline64int.Ref_to_Val_as_Val_arrayfillinst
# Parameters: (size = 1000000)

# Run progress: 70.96% complete, ETA 02:48:58
# Fork: 1 of 3
# Warmup Iteration   1: 32942907.563 ns/op
# Warmup Iteration   2: 38735348.778 ns/op
# Warmup Iteration   3: 38745060.185 ns/op
Iteration   1: 39403195.500 ns/op
Iteration   2: 29213214.139 ns/op
Iteration   3: 36308461.207 ns/op
Iteration   4: 31596117.188 ns/op
Iteration   5: 37137577.393 ns/op

# Run progress: 70.98% complete, ETA 02:48:50
# Fork: 2 of 3
# Warmup Iteration   1: 34808520.103 ns/op
# Warmup Iteration   2: 31884708.333 ns/op
# Warmup Iteration   3: 35893487.069 ns/op
Iteration   1: 37663020.821 ns/op
Iteration   2: 36699148.786 ns/op
Iteration   3: 35555912.345 ns/op
Iteration   4: 29179027.400 ns/op
Iteration   5: 33992315.300 ns/op

# Run progress: 71.00% complete, ETA 02:48:41
# Fork: 3 of 3
# Warmup Iteration   1: 29693120.088 ns/op
# Warmup Iteration   2: 27471210.595 ns/op
# Warmup Iteration   3: 26297893.750 ns/op
Iteration   1: 26616105.263 ns/op
Iteration   2: 26458792.718 ns/op
Iteration   3: 36764050.607 ns/op
Iteration   4: 35747079.000 ns/op
Iteration   5: 34706423.600 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline64int.Ref_to_Val_as_Val_arrayfillinst":
  33802696.084 ±(99.9%) 4439450.781 ns/op [Average]
  (min, avg, max) = (26458792.718, 33802696.084, 39403195.500), stdev = 4152665.015
  CI (99.9%): [29363245.303, 38242146.866] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline64int.Ref_to_Val_as_Val_arrayfillstat
# Parameters: (size = 100)

# Run progress: 71.03% complete, ETA 02:48:33
# Fork: 1 of 3
# Warmup Iteration   1: 116.131 ns/op
# Warmup Iteration   2: 116.002 ns/op
# Warmup Iteration   3: 126.843 ns/op
Iteration   1: 144.752 ns/op
Iteration   2: 163.550 ns/op
Iteration   3: 142.534 ns/op
Iteration   4: 131.963 ns/op
Iteration   5: 141.878 ns/op

# Run progress: 71.05% complete, ETA 02:48:24
# Fork: 2 of 3
# Warmup Iteration   1: 145.555 ns/op
# Warmup Iteration   2: 137.075 ns/op
# Warmup Iteration   3: 117.414 ns/op
Iteration   1: 186.878 ns/op
Iteration   2: 248.453 ns/op
Iteration   3: 260.128 ns/op
Iteration   4: 248.435 ns/op
Iteration   5: 245.179 ns/op

# Run progress: 71.08% complete, ETA 02:48:15
# Fork: 3 of 3
# Warmup Iteration   1: 244.100 ns/op
# Warmup Iteration   2: 258.979 ns/op
# Warmup Iteration   3: 264.338 ns/op
Iteration   1: 248.134 ns/op
Iteration   2: 247.066 ns/op
Iteration   3: 246.211 ns/op
Iteration   4: 243.969 ns/op
Iteration   5: 243.979 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline64int.Ref_to_Val_as_Val_arrayfillstat":
  209.541 ±(99.9%) 53.744 ns/op [Average]
  (min, avg, max) = (131.963, 209.541, 260.128), stdev = 50.272
  CI (99.9%): [155.796, 263.285] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline64int.Ref_to_Val_as_Val_arrayfillstat
# Parameters: (size = 1000000)

# Run progress: 71.10% complete, ETA 02:48:07
# Fork: 1 of 3
# Warmup Iteration   1: 48646839.000 ns/op
# Warmup Iteration   2: 48121244.318 ns/op
# Warmup Iteration   3: 41848608.320 ns/op
Iteration   1: 48131325.429 ns/op
Iteration   2: 44436815.958 ns/op
Iteration   3: 45055208.348 ns/op
Iteration   4: 40500555.000 ns/op
Iteration   5: 24358109.143 ns/op

# Run progress: 71.13% complete, ETA 02:47:58
# Fork: 2 of 3
# Warmup Iteration   1: 26604181.641 ns/op
# Warmup Iteration   2: 29155084.500 ns/op
# Warmup Iteration   3: 28331502.306 ns/op
Iteration   1: 22349567.022 ns/op
Iteration   2: 26349197.641 ns/op
Iteration   3: 31042890.152 ns/op
Iteration   4: 31320960.879 ns/op
Iteration   5: 30963791.667 ns/op

# Run progress: 71.15% complete, ETA 02:47:50
# Fork: 3 of 3
# Warmup Iteration   1: 28973934.028 ns/op
# Warmup Iteration   2: 29093761.914 ns/op
# Warmup Iteration   3: 32273671.875 ns/op
Iteration   1: 30239023.294 ns/op
Iteration   2: 29372517.857 ns/op
Iteration   3: 32546417.969 ns/op
Iteration   4: 30772726.735 ns/op
Iteration   5: 27794070.946 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline64int.Ref_to_Val_as_Val_arrayfillstat":
  33015545.203 ±(99.9%) 8366884.441 ns/op [Average]
  (min, avg, max) = (22349567.022, 33015545.203, 48131325.429), stdev = 7826388.898
  CI (99.9%): [24648660.762, 41382429.643] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline64int.Ref_to_Val_as_Val_fillinst
# Parameters: (size = 100)

# Run progress: 71.18% complete, ETA 02:47:41
# Fork: 1 of 3
# Warmup Iteration   1: 137.130 ns/op
# Warmup Iteration   2: 136.604 ns/op
# Warmup Iteration   3: 130.221 ns/op
Iteration   1: 132.704 ns/op
Iteration   2: 129.998 ns/op
Iteration   3: 129.932 ns/op
Iteration   4: 130.209 ns/op
Iteration   5: 132.509 ns/op

# Run progress: 71.20% complete, ETA 02:47:33
# Fork: 2 of 3
# Warmup Iteration   1: 138.080 ns/op
# Warmup Iteration   2: 137.042 ns/op
# Warmup Iteration   3: 130.691 ns/op
Iteration   1: 130.279 ns/op
Iteration   2: 130.452 ns/op
Iteration   3: 130.378 ns/op
Iteration   4: 130.479 ns/op
Iteration   5: 130.792 ns/op

# Run progress: 71.23% complete, ETA 02:47:24
# Fork: 3 of 3
# Warmup Iteration   1: 137.010 ns/op
# Warmup Iteration   2: 136.329 ns/op
# Warmup Iteration   3: 129.835 ns/op
Iteration   1: 128.367 ns/op
Iteration   2: 129.606 ns/op
Iteration   3: 128.845 ns/op
Iteration   4: 130.146 ns/op
Iteration   5: 128.691 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline64int.Ref_to_Val_as_Val_fillinst":
  130.226 ±(99.9%) 1.280 ns/op [Average]
  (min, avg, max) = (128.367, 130.226, 132.704), stdev = 1.197
  CI (99.9%): [128.946, 131.505] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline64int.Ref_to_Val_as_Val_fillinst
# Parameters: (size = 1000000)

# Run progress: 71.25% complete, ETA 02:47:15
# Fork: 1 of 3
# Warmup Iteration   1: 50970305.524 ns/op
# Warmup Iteration   2: 52059293.750 ns/op
# Warmup Iteration   3: 58916020.833 ns/op
Iteration   1: 54024418.842 ns/op
Iteration   2: 47713013.273 ns/op
Iteration   3: 58299219.889 ns/op
Iteration   4: 55626690.789 ns/op
Iteration   5: 58312430.556 ns/op

# Run progress: 71.27% complete, ETA 02:47:07
# Fork: 2 of 3
# Warmup Iteration   1: 51499164.600 ns/op
# Warmup Iteration   2: 58769567.111 ns/op
# Warmup Iteration   3: 53135529.200 ns/op
Iteration   1: 54452592.105 ns/op
Iteration   2: 58862636.556 ns/op
Iteration   3: 59129043.944 ns/op
Iteration   4: 48971057.524 ns/op
Iteration   5: 54439054.789 ns/op

# Run progress: 71.30% complete, ETA 02:46:58
# Fork: 3 of 3
# Warmup Iteration   1: 44162677.565 ns/op
# Warmup Iteration   2: 51603687.500 ns/op
# Warmup Iteration   3: 40136929.500 ns/op
Iteration   1: 34334222.233 ns/op
Iteration   2: 26359582.282 ns/op
Iteration   3: 18128421.143 ns/op
Iteration   4: 19041834.111 ns/op
Iteration   5: 22115050.532 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline64int.Ref_to_Val_as_Val_fillinst":
  44653951.238 ±(99.9%) 16953709.918 ns/op [Average]
  (min, avg, max) = (18128421.143, 44653951.238, 59129043.944), stdev = 15858510.777
  CI (99.9%): [27700241.320, 61607661.155] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline64int.Ref_to_Val_as_Val_fillstat
# Parameters: (size = 100)

# Run progress: 71.32% complete, ETA 02:46:50
# Fork: 1 of 3
# Warmup Iteration   1: 144.126 ns/op
# Warmup Iteration   2: 148.458 ns/op
# Warmup Iteration   3: 132.427 ns/op
Iteration   1: 132.501 ns/op
Iteration   2: 132.555 ns/op
Iteration   3: 132.681 ns/op
Iteration   4: 132.812 ns/op
Iteration   5: 132.551 ns/op

# Run progress: 71.35% complete, ETA 02:46:41
# Fork: 2 of 3
# Warmup Iteration   1: 148.202 ns/op
# Warmup Iteration   2: 147.991 ns/op
# Warmup Iteration   3: 132.797 ns/op
Iteration   1: 132.726 ns/op
Iteration   2: 132.336 ns/op
Iteration   3: 132.425 ns/op
Iteration   4: 132.309 ns/op
Iteration   5: 142.982 ns/op

# Run progress: 71.37% complete, ETA 02:46:32
# Fork: 3 of 3
# Warmup Iteration   1: 144.476 ns/op
# Warmup Iteration   2: 147.872 ns/op
# Warmup Iteration   3: 133.421 ns/op
Iteration   1: 133.994 ns/op
Iteration   2: 133.136 ns/op
Iteration   3: 132.877 ns/op
Iteration   4: 132.351 ns/op
Iteration   5: 132.563 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline64int.Ref_to_Val_as_Val_fillstat":
  133.387 ±(99.9%) 2.873 ns/op [Average]
  (min, avg, max) = (132.309, 133.387, 142.982), stdev = 2.688
  CI (99.9%): [130.513, 136.260] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline64int.Ref_to_Val_as_Val_fillstat
# Parameters: (size = 1000000)

# Run progress: 71.40% complete, ETA 02:46:24
# Fork: 1 of 3
# Warmup Iteration   1: 52877129.150 ns/op
# Warmup Iteration   2: 58460685.222 ns/op
# Warmup Iteration   3: 56579715.278 ns/op
Iteration   1: 59495725.471 ns/op
Iteration   2: 51712195.850 ns/op
Iteration   3: 58758879.667 ns/op
Iteration   4: 53305625.000 ns/op
Iteration   5: 48638263.227 ns/op

# Run progress: 71.42% complete, ETA 02:46:15
# Fork: 2 of 3
# Warmup Iteration   1: 50079047.619 ns/op
# Warmup Iteration   2: 51215141.700 ns/op
# Warmup Iteration   3: 49102192.476 ns/op
Iteration   1: 56437386.556 ns/op
Iteration   2: 60057578.412 ns/op
Iteration   3: 56816041.667 ns/op
Iteration   4: 51216018.750 ns/op
Iteration   5: 36460108.607 ns/op

# Run progress: 71.45% complete, ETA 02:46:07
# Fork: 3 of 3
# Warmup Iteration   1: 41400270.000 ns/op
# Warmup Iteration   2: 53470462.684 ns/op
# Warmup Iteration   3: 56262599.500 ns/op
Iteration   1: 49435140.905 ns/op
Iteration   2: 54884958.368 ns/op
Iteration   3: 53726359.684 ns/op
Iteration   4: 59547606.444 ns/op
Iteration   5: 51227279.150 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline64int.Ref_to_Val_as_Val_fillstat":
  53447944.517 ±(99.9%) 6445256.090 ns/op [Average]
  (min, avg, max) = (36460108.607, 53447944.517, 60057578.412), stdev = 6028896.546
  CI (99.9%): [47002688.427, 59893200.607] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline64int.Val_to_Ref_as_Ref_arrayfillinst
# Parameters: (size = 100)

# Run progress: 71.47% complete, ETA 02:45:58
# Fork: 1 of 3
# Warmup Iteration   1: 117.129 ns/op
# Warmup Iteration   2: 116.108 ns/op
# Warmup Iteration   3: 117.535 ns/op
Iteration   1: 117.704 ns/op
Iteration   2: 116.342 ns/op
Iteration   3: 115.790 ns/op
Iteration   4: 116.292 ns/op
Iteration   5: 116.143 ns/op

# Run progress: 71.50% complete, ETA 02:45:50
# Fork: 2 of 3
# Warmup Iteration   1: 115.080 ns/op
# Warmup Iteration   2: 115.826 ns/op
# Warmup Iteration   3: 115.827 ns/op
Iteration   1: 115.998 ns/op
Iteration   2: 117.517 ns/op
Iteration   3: 116.052 ns/op
Iteration   4: 116.025 ns/op
Iteration   5: 116.041 ns/op

# Run progress: 71.52% complete, ETA 02:45:41
# Fork: 3 of 3
# Warmup Iteration   1: 113.040 ns/op
# Warmup Iteration   2: 115.956 ns/op
# Warmup Iteration   3: 116.071 ns/op
Iteration   1: 115.646 ns/op
Iteration   2: 118.418 ns/op
Iteration   3: 117.003 ns/op
Iteration   4: 116.028 ns/op
Iteration   5: 115.716 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline64int.Val_to_Ref_as_Ref_arrayfillinst":
  116.448 ±(99.9%) 0.882 ns/op [Average]
  (min, avg, max) = (115.646, 116.448, 118.418), stdev = 0.825
  CI (99.9%): [115.565, 117.330] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline64int.Val_to_Ref_as_Ref_arrayfillinst
# Parameters: (size = 1000000)

# Run progress: 71.54% complete, ETA 02:45:32
# Fork: 1 of 3
# Warmup Iteration   1: 53602043.895 ns/op
# Warmup Iteration   2: 47693975.364 ns/op
# Warmup Iteration   3: 43959263.917 ns/op
Iteration   1: 57239238.444 ns/op
Iteration   2: 34406244.433 ns/op
Iteration   3: 52501533.300 ns/op
Iteration   4: 58730620.333 ns/op
Iteration   5: 57870743.056 ns/op

# Run progress: 71.57% complete, ETA 02:45:24
# Fork: 2 of 3
# Warmup Iteration   1: 49538795.667 ns/op
# Warmup Iteration   2: 52200827.100 ns/op
# Warmup Iteration   3: 52567747.950 ns/op
Iteration   1: 20707663.265 ns/op
Iteration   2: 16752010.934 ns/op
Iteration   3: 21311868.917 ns/op
Iteration   4: 18797650.463 ns/op
Iteration   5: 21773185.277 ns/op

# Run progress: 71.59% complete, ETA 02:45:15
# Fork: 3 of 3
# Warmup Iteration   1: 21320880.208 ns/op
# Warmup Iteration   2: 30669095.970 ns/op
# Warmup Iteration   3: 22541139.822 ns/op
Iteration   1: 21301079.082 ns/op
Iteration   2: 19302031.648 ns/op
Iteration   3: 23971423.442 ns/op
Iteration   4: 19224831.019 ns/op
Iteration   5: 18646505.291 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline64int.Val_to_Ref_as_Ref_arrayfillinst":
  30835775.260 ±(99.9%) 17754685.631 ns/op [Average]
  (min, avg, max) = (16752010.934, 30835775.260, 58730620.333), stdev = 16607743.956
  CI (99.9%): [13081089.629, 48590460.891] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline64int.Val_to_Ref_as_Ref_arrayfillstat
# Parameters: (size = 100)

# Run progress: 71.62% complete, ETA 02:45:07
# Fork: 1 of 3
# Warmup Iteration   1: 116.700 ns/op
# Warmup Iteration   2: 116.469 ns/op
# Warmup Iteration   3: 116.798 ns/op
Iteration   1: 117.026 ns/op
Iteration   2: 117.403 ns/op
Iteration   3: 118.573 ns/op
Iteration   4: 117.182 ns/op
Iteration   5: 117.111 ns/op

# Run progress: 71.64% complete, ETA 02:44:58
# Fork: 2 of 3
# Warmup Iteration   1: 116.963 ns/op
# Warmup Iteration   2: 116.511 ns/op
# Warmup Iteration   3: 117.212 ns/op
Iteration   1: 117.225 ns/op
Iteration   2: 119.872 ns/op
Iteration   3: 119.184 ns/op
Iteration   4: 118.551 ns/op
Iteration   5: 117.254 ns/op

# Run progress: 71.67% complete, ETA 02:44:49
# Fork: 3 of 3
# Warmup Iteration   1: 116.502 ns/op
# Warmup Iteration   2: 117.305 ns/op
# Warmup Iteration   3: 117.297 ns/op
Iteration   1: 117.059 ns/op
Iteration   2: 117.027 ns/op
Iteration   3: 116.995 ns/op
Iteration   4: 116.915 ns/op
Iteration   5: 117.064 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline64int.Val_to_Ref_as_Ref_arrayfillstat":
  117.629 ±(99.9%) 1.002 ns/op [Average]
  (min, avg, max) = (116.915, 117.629, 119.872), stdev = 0.937
  CI (99.9%): [116.627, 118.631] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline64int.Val_to_Ref_as_Ref_arrayfillstat
# Parameters: (size = 1000000)

# Run progress: 71.69% complete, ETA 02:44:41
# Fork: 1 of 3
# Warmup Iteration   1: 21262037.333 ns/op
# Warmup Iteration   2: 20972708.347 ns/op
# Warmup Iteration   3: 20225116.660 ns/op
Iteration   1: 22913307.750 ns/op
Iteration   2: 20064201.804 ns/op
Iteration   3: 21442628.458 ns/op
Iteration   4: 23222058.705 ns/op
Iteration   5: 23988099.190 ns/op

# Run progress: 71.72% complete, ETA 02:44:32
# Fork: 2 of 3
# Warmup Iteration   1: 22583706.522 ns/op
# Warmup Iteration   2: 20630448.980 ns/op
# Warmup Iteration   3: 23288910.045 ns/op
Iteration   1: 35591816.667 ns/op
Iteration   2: 21171839.417 ns/op
Iteration   3: 20157390.529 ns/op
Iteration   4: 21017903.918 ns/op
Iteration   5: 21712609.043 ns/op

# Run progress: 71.74% complete, ETA 02:44:24
# Fork: 3 of 3
# Warmup Iteration   1: 22173952.891 ns/op
# Warmup Iteration   2: 21086629.333 ns/op
# Warmup Iteration   3: 22293685.674 ns/op
Iteration   1: 22396732.400 ns/op
Iteration   2: 22107229.174 ns/op
Iteration   3: 20833170.082 ns/op
Iteration   4: 20840886.898 ns/op
Iteration   5: 20546454.082 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline64int.Val_to_Ref_as_Ref_arrayfillstat":
  22533755.208 ±(99.9%) 4049922.385 ns/op [Average]
  (min, avg, max) = (20064201.804, 22533755.208, 35591816.667), stdev = 3788299.912
  CI (99.9%): [18483832.823, 26583677.593] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline64int.Val_to_Ref_as_Ref_fillinst
# Parameters: (size = 100)

# Run progress: 71.76% complete, ETA 02:44:15
# Fork: 1 of 3
# Warmup Iteration   1: 137.930 ns/op
# Warmup Iteration   2: 136.424 ns/op
# Warmup Iteration   3: 128.524 ns/op
Iteration   1: 128.463 ns/op
Iteration   2: 128.478 ns/op
Iteration   3: 128.609 ns/op
Iteration   4: 128.561 ns/op
Iteration   5: 128.492 ns/op

# Run progress: 71.79% complete, ETA 02:44:06
# Fork: 2 of 3
# Warmup Iteration   1: 137.437 ns/op
# Warmup Iteration   2: 138.614 ns/op
# Warmup Iteration   3: 128.994 ns/op
Iteration   1: 128.540 ns/op
Iteration   2: 128.560 ns/op
Iteration   3: 128.613 ns/op
Iteration   4: 129.045 ns/op
Iteration   5: 128.568 ns/op

# Run progress: 71.81% complete, ETA 02:43:58
# Fork: 3 of 3
# Warmup Iteration   1: 137.852 ns/op
# Warmup Iteration   2: 136.216 ns/op
# Warmup Iteration   3: 128.989 ns/op
Iteration   1: 128.501 ns/op
Iteration   2: 128.413 ns/op
Iteration   3: 130.623 ns/op
Iteration   4: 131.544 ns/op
Iteration   5: 128.985 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline64int.Val_to_Ref_as_Ref_fillinst":
  128.933 ±(99.9%) 0.971 ns/op [Average]
  (min, avg, max) = (128.413, 128.933, 131.544), stdev = 0.908
  CI (99.9%): [127.962, 129.904] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline64int.Val_to_Ref_as_Ref_fillinst
# Parameters: (size = 1000000)

# Run progress: 71.84% complete, ETA 02:43:49
# Fork: 1 of 3
# Warmup Iteration   1: 32612819.000 ns/op
# Warmup Iteration   2: 32443369.813 ns/op
# Warmup Iteration   3: 38563174.407 ns/op
Iteration   1: 38480887.333 ns/op
Iteration   2: 39141668.269 ns/op
Iteration   3: 31987822.938 ns/op
Iteration   4: 37410205.357 ns/op
Iteration   5: 36854784.214 ns/op

# Run progress: 71.86% complete, ETA 02:43:41
# Fork: 2 of 3
# Warmup Iteration   1: 36964093.750 ns/op
# Warmup Iteration   2: 35767670.966 ns/op
# Warmup Iteration   3: 37158346.750 ns/op
Iteration   1: 33363405.903 ns/op
Iteration   2: 38322439.815 ns/op
Iteration   3: 26017126.077 ns/op
Iteration   4: 29116177.400 ns/op
Iteration   5: 33426297.032 ns/op

# Run progress: 71.89% complete, ETA 02:43:32
# Fork: 3 of 3
# Warmup Iteration   1: 32634577.935 ns/op
# Warmup Iteration   2: 35957151.786 ns/op
# Warmup Iteration   3: 34779576.400 ns/op
Iteration   1: 37079132.429 ns/op
Iteration   2: 32752419.281 ns/op
Iteration   3: 36286072.929 ns/op
Iteration   4: 34198731.967 ns/op
Iteration   5: 34379315.300 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline64int.Val_to_Ref_as_Ref_fillinst":
  34587765.750 ±(99.9%) 3923863.682 ns/op [Average]
  (min, avg, max) = (26017126.077, 34587765.750, 39141668.269), stdev = 3670384.523
  CI (99.9%): [30663902.067, 38511629.432] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline64int.Val_to_Ref_as_Ref_fillstat
# Parameters: (size = 100)

# Run progress: 71.91% complete, ETA 02:43:23
# Fork: 1 of 3
# Warmup Iteration   1: 144.670 ns/op
# Warmup Iteration   2: 148.025 ns/op
# Warmup Iteration   3: 132.613 ns/op
Iteration   1: 132.550 ns/op
Iteration   2: 132.536 ns/op
Iteration   3: 132.897 ns/op
Iteration   4: 132.527 ns/op
Iteration   5: 132.785 ns/op

# Run progress: 71.94% complete, ETA 02:43:15
# Fork: 2 of 3
# Warmup Iteration   1: 144.323 ns/op
# Warmup Iteration   2: 147.971 ns/op
# Warmup Iteration   3: 133.135 ns/op
Iteration   1: 136.901 ns/op
Iteration   2: 132.350 ns/op
Iteration   3: 132.326 ns/op
Iteration   4: 132.241 ns/op
Iteration   5: 133.338 ns/op

# Run progress: 71.96% complete, ETA 02:43:06
# Fork: 3 of 3
# Warmup Iteration   1: 146.254 ns/op
# Warmup Iteration   2: 148.173 ns/op
# Warmup Iteration   3: 133.689 ns/op
Iteration   1: 133.325 ns/op
Iteration   2: 137.429 ns/op
Iteration   3: 132.979 ns/op
Iteration   4: 132.942 ns/op
Iteration   5: 133.631 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline64int.Val_to_Ref_as_Ref_fillstat":
  133.384 ±(99.9%) 1.700 ns/op [Average]
  (min, avg, max) = (132.241, 133.384, 137.429), stdev = 1.590
  CI (99.9%): [131.684, 135.084] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline64int.Val_to_Ref_as_Ref_fillstat
# Parameters: (size = 1000000)

# Run progress: 71.99% complete, ETA 02:42:58
# Fork: 1 of 3
# Warmup Iteration   1: 30985757.576 ns/op
# Warmup Iteration   2: 35720872.138 ns/op
# Warmup Iteration   3: 35025394.467 ns/op
Iteration   1: 33249333.355 ns/op
Iteration   2: 37672304.037 ns/op
Iteration   3: 34919837.500 ns/op
Iteration   4: 29670108.314 ns/op
Iteration   5: 23160361.727 ns/op

# Run progress: 72.01% complete, ETA 02:42:49
# Fork: 2 of 3
# Warmup Iteration   1: 28844529.771 ns/op
# Warmup Iteration   2: 23739176.372 ns/op
# Warmup Iteration   3: 23876523.810 ns/op
Iteration   1: 27461567.568 ns/op
Iteration   2: 33645653.226 ns/op
Iteration   3: 36565379.464 ns/op
Iteration   4: 34139776.871 ns/op
Iteration   5: 32295447.906 ns/op

# Run progress: 72.03% complete, ETA 02:42:40
# Fork: 3 of 3
# Warmup Iteration   1: 34340741.667 ns/op
# Warmup Iteration   2: 34903297.200 ns/op
# Warmup Iteration   3: 36197622.036 ns/op
Iteration   1: 31902216.156 ns/op
Iteration   2: 32789541.688 ns/op
Iteration   3: 37271122.036 ns/op
Iteration   4: 31540614.879 ns/op
Iteration   5: 35132721.241 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline64int.Val_to_Ref_as_Ref_fillstat":
  32761065.731 ±(99.9%) 4084849.170 ns/op [Average]
  (min, avg, max) = (23160361.727, 32761065.731, 37672304.037), stdev = 3820970.448
  CI (99.9%): [28676216.562, 36845914.901] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline64int.Val_to_Val_as_Val_arrayfillinst
# Parameters: (size = 100)

# Run progress: 72.06% complete, ETA 02:42:32
# Fork: 1 of 3
# Warmup Iteration   1: 113.690 ns/op
# Warmup Iteration   2: 118.994 ns/op
# Warmup Iteration   3: 117.263 ns/op
Iteration   1: 115.946 ns/op
Iteration   2: 116.092 ns/op
Iteration   3: 116.085 ns/op
Iteration   4: 116.207 ns/op
Iteration   5: 116.311 ns/op

# Run progress: 72.08% complete, ETA 02:42:23
# Fork: 2 of 3
# Warmup Iteration   1: 113.561 ns/op
# Warmup Iteration   2: 115.902 ns/op
# Warmup Iteration   3: 116.684 ns/op
Iteration   1: 116.879 ns/op
Iteration   2: 116.847 ns/op
Iteration   3: 118.515 ns/op
Iteration   4: 130.255 ns/op
Iteration   5: 121.180 ns/op

# Run progress: 72.11% complete, ETA 02:42:15
# Fork: 3 of 3
# Warmup Iteration   1: 114.685 ns/op
# Warmup Iteration   2: 130.252 ns/op
# Warmup Iteration   3: 139.400 ns/op
Iteration   1: 138.938 ns/op
Iteration   2: 118.492 ns/op
Iteration   3: 126.378 ns/op
Iteration   4: 142.034 ns/op
Iteration   5: 142.355 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline64int.Val_to_Val_as_Val_arrayfillinst":
  123.501 ±(99.9%) 10.715 ns/op [Average]
  (min, avg, max) = (115.946, 123.501, 142.355), stdev = 10.023
  CI (99.9%): [112.786, 134.216] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline64int.Val_to_Val_as_Val_arrayfillinst
# Parameters: (size = 1000000)

# Run progress: 72.13% complete, ETA 02:42:06
# Fork: 1 of 3
# Warmup Iteration   1: 39839208.346 ns/op
# Warmup Iteration   2: 30313151.971 ns/op
# Warmup Iteration   3: 33919573.600 ns/op
Iteration   1: 36455998.586 ns/op
Iteration   2: 32527998.719 ns/op
Iteration   3: 32705733.094 ns/op
Iteration   4: 21190674.479 ns/op
Iteration   5: 21624089.532 ns/op

# Run progress: 72.16% complete, ETA 02:41:57
# Fork: 2 of 3
# Warmup Iteration   1: 32995729.839 ns/op
# Warmup Iteration   2: 37166737.667 ns/op
# Warmup Iteration   3: 35111443.067 ns/op
Iteration   1: 35069864.966 ns/op
Iteration   2: 36161572.929 ns/op
Iteration   3: 35505870.690 ns/op
Iteration   4: 34468980.567 ns/op
Iteration   5: 30631703.273 ns/op

# Run progress: 72.18% complete, ETA 02:41:49
# Fork: 3 of 3
# Warmup Iteration   1: 37485605.643 ns/op
# Warmup Iteration   2: 38167361.111 ns/op
# Warmup Iteration   3: 35168119.276 ns/op
Iteration   1: 32546475.806 ns/op
Iteration   2: 34030427.800 ns/op
Iteration   3: 31012536.606 ns/op
Iteration   4: 30482740.176 ns/op
Iteration   5: 34349988.900 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline64int.Val_to_Val_as_Val_arrayfillinst":
  31917643.741 ±(99.9%) 4991943.668 ns/op [Average]
  (min, avg, max) = (21190674.479, 31917643.741, 36455998.586), stdev = 4669467.204
  CI (99.9%): [26925700.074, 36909587.409] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline64int.Val_to_Val_as_Val_arrayfillstat
# Parameters: (size = 100)

# Run progress: 72.21% complete, ETA 02:41:40
# Fork: 1 of 3
# Warmup Iteration   1: 117.171 ns/op
# Warmup Iteration   2: 116.425 ns/op
# Warmup Iteration   3: 116.990 ns/op
Iteration   1: 116.907 ns/op
Iteration   2: 117.170 ns/op
Iteration   3: 120.400 ns/op
Iteration   4: 117.039 ns/op
Iteration   5: 117.891 ns/op

# Run progress: 72.23% complete, ETA 02:41:32
# Fork: 2 of 3
# Warmup Iteration   1: 116.179 ns/op
# Warmup Iteration   2: 116.493 ns/op
# Warmup Iteration   3: 151.955 ns/op
Iteration   1: 218.595 ns/op
Iteration   2: 231.890 ns/op
Iteration   3: 212.465 ns/op
Iteration   4: 166.900 ns/op
Iteration   5: 158.864 ns/op

# Run progress: 72.25% complete, ETA 02:41:23
# Fork: 3 of 3
# Warmup Iteration   1: 150.602 ns/op
# Warmup Iteration   2: 158.638 ns/op
# Warmup Iteration   3: 247.908 ns/op
Iteration   1: 244.496 ns/op
Iteration   2: 243.838 ns/op
Iteration   3: 243.542 ns/op
Iteration   4: 243.757 ns/op
Iteration   5: 244.163 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline64int.Val_to_Val_as_Val_arrayfillstat":
  186.528 ±(99.9%) 60.591 ns/op [Average]
  (min, avg, max) = (116.907, 186.528, 244.496), stdev = 56.677
  CI (99.9%): [125.937, 247.119] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline64int.Val_to_Val_as_Val_arrayfillstat
# Parameters: (size = 1000000)

# Run progress: 72.28% complete, ETA 02:41:14
# Fork: 1 of 3
# Warmup Iteration   1: 41777466.680 ns/op
# Warmup Iteration   2: 30745178.030 ns/op
# Warmup Iteration   3: 29513870.229 ns/op
Iteration   1: 35810055.036 ns/op
Iteration   2: 36367873.586 ns/op
Iteration   3: 37067267.857 ns/op
Iteration   4: 33275313.161 ns/op
Iteration   5: 38360334.889 ns/op

# Run progress: 72.30% complete, ETA 02:41:06
# Fork: 2 of 3
# Warmup Iteration   1: 36419080.357 ns/op
# Warmup Iteration   2: 38341595.667 ns/op
# Warmup Iteration   3: 35537110.621 ns/op
Iteration   1: 34547072.200 ns/op
Iteration   2: 35861538.793 ns/op
Iteration   3: 42716076.417 ns/op
Iteration   4: 41413886.640 ns/op
Iteration   5: 39798117.000 ns/op

# Run progress: 72.33% complete, ETA 02:40:57
# Fork: 3 of 3
# Warmup Iteration   1: 15863606.766 ns/op
# Warmup Iteration   2: 23975969.262 ns/op
# Warmup Iteration   3: 12905033.759 ns/op
Iteration   1: 17166082.627 ns/op
Iteration   2: 14456085.114 ns/op
Iteration   3: 16949770.833 ns/op
Iteration   4: 21538437.064 ns/op
Iteration   5: 29696910.529 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline64int.Val_to_Val_as_Val_arrayfillstat":
  31668321.450 ±(99.9%) 10119676.520 ns/op [Average]
  (min, avg, max) = (14456085.114, 31668321.450, 42716076.417), stdev = 9465951.697
  CI (99.9%): [21548644.929, 41787997.970] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline64int.Val_to_Val_as_Val_fillinst
# Parameters: (size = 100)

# Run progress: 72.35% complete, ETA 02:40:50
# Fork: 1 of 3
# Warmup Iteration   1: 138.147 ns/op
# Warmup Iteration   2: 136.645 ns/op
# Warmup Iteration   3: 130.147 ns/op
Iteration   1: 130.238 ns/op
Iteration   2: 130.285 ns/op
Iteration   3: 130.336 ns/op
Iteration   4: 136.033 ns/op
Iteration   5: 131.099 ns/op

# Run progress: 72.38% complete, ETA 02:40:42
# Fork: 2 of 3
# Warmup Iteration   1: 141.161 ns/op
# Warmup Iteration   2: 136.757 ns/op
# Warmup Iteration   3: 129.021 ns/op
Iteration   1: 129.228 ns/op
Iteration   2: 129.180 ns/op
Iteration   3: 131.363 ns/op
Iteration   4: 128.807 ns/op
Iteration   5: 131.679 ns/op

# Run progress: 72.40% complete, ETA 02:40:33
# Fork: 3 of 3
# Warmup Iteration   1: 137.850 ns/op
# Warmup Iteration   2: 136.941 ns/op
# Warmup Iteration   3: 131.924 ns/op
Iteration   1: 130.242 ns/op
Iteration   2: 130.456 ns/op
Iteration   3: 131.261 ns/op
Iteration   4: 131.007 ns/op
Iteration   5: 130.754 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline64int.Val_to_Val_as_Val_fillinst":
  130.798 ±(99.9%) 1.787 ns/op [Average]
  (min, avg, max) = (128.807, 130.798, 136.033), stdev = 1.671
  CI (99.9%): [129.011, 132.585] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline64int.Val_to_Val_as_Val_fillinst
# Parameters: (size = 1000000)

# Run progress: 72.43% complete, ETA 02:40:24
# Fork: 1 of 3
# Warmup Iteration   1: 25533186.450 ns/op
# Warmup Iteration   2: 22911720.378 ns/op
# Warmup Iteration   3: 23077568.182 ns/op
Iteration   1: 25303330.200 ns/op
Iteration   2: 25117230.683 ns/op
Iteration   3: 24650477.190 ns/op
Iteration   4: 26210702.974 ns/op
Iteration   5: 23779620.140 ns/op

# Run progress: 72.45% complete, ETA 02:40:16
# Fork: 2 of 3
# Warmup Iteration   1: 23247916.682 ns/op
# Warmup Iteration   2: 24988693.452 ns/op
# Warmup Iteration   3: 29336601.171 ns/op
Iteration   1: 27393613.730 ns/op
Iteration   2: 29506705.943 ns/op
Iteration   3: 21602927.083 ns/op
Iteration   4: 24043035.860 ns/op
Iteration   5: 19516120.192 ns/op

# Run progress: 72.48% complete, ETA 02:40:07
# Fork: 3 of 3
# Warmup Iteration   1: 22298984.609 ns/op
# Warmup Iteration   2: 25293081.250 ns/op
# Warmup Iteration   3: 27392391.447 ns/op
Iteration   1: 23688410.837 ns/op
Iteration   2: 21518694.149 ns/op
Iteration   3: 23737597.860 ns/op
Iteration   4: 24113256.767 ns/op
Iteration   5: 30120776.941 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline64int.Val_to_Val_as_Val_fillinst":
  24686833.370 ±(99.9%) 3033499.343 ns/op [Average]
  (min, avg, max) = (19516120.192, 24686833.370, 30120776.941), stdev = 2837537.168
  CI (99.9%): [21653334.027, 27720332.713] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline64int.Val_to_Val_as_Val_fillstat
# Parameters: (size = 100)

# Run progress: 72.50% complete, ETA 02:39:59
# Fork: 1 of 3
# Warmup Iteration   1: 144.997 ns/op
# Warmup Iteration   2: 148.342 ns/op
# Warmup Iteration   3: 132.915 ns/op
Iteration   1: 132.862 ns/op
Iteration   2: 132.664 ns/op
Iteration   3: 135.165 ns/op
Iteration   4: 134.683 ns/op
Iteration   5: 133.282 ns/op

# Run progress: 72.52% complete, ETA 02:39:50
# Fork: 2 of 3
# Warmup Iteration   1: 145.075 ns/op
# Warmup Iteration   2: 149.209 ns/op
# Warmup Iteration   3: 133.302 ns/op
Iteration   1: 133.193 ns/op
Iteration   2: 133.196 ns/op
Iteration   3: 133.213 ns/op
Iteration   4: 133.790 ns/op
Iteration   5: 133.455 ns/op

# Run progress: 72.55% complete, ETA 02:39:41
# Fork: 3 of 3
# Warmup Iteration   1: 144.315 ns/op
# Warmup Iteration   2: 151.377 ns/op
# Warmup Iteration   3: 136.405 ns/op
Iteration   1: 132.401 ns/op
Iteration   2: 132.755 ns/op
Iteration   3: 131.821 ns/op
Iteration   4: 134.118 ns/op
Iteration   5: 132.943 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline64int.Val_to_Val_as_Val_fillstat":
  133.303 ±(99.9%) 0.920 ns/op [Average]
  (min, avg, max) = (131.821, 133.303, 135.165), stdev = 0.861
  CI (99.9%): [132.383, 134.223] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Inline64int.Val_to_Val_as_Val_fillstat
# Parameters: (size = 1000000)

# Run progress: 72.57% complete, ETA 02:39:33
# Fork: 1 of 3
# Warmup Iteration   1: 38900854.926 ns/op
# Warmup Iteration   2: 33221418.032 ns/op
# Warmup Iteration   3: 36762261.893 ns/op
Iteration   1: 38112679.037 ns/op
Iteration   2: 30489896.455 ns/op
Iteration   3: 34166468.033 ns/op
Iteration   4: 36934697.929 ns/op
Iteration   5: 32748641.129 ns/op

# Run progress: 72.60% complete, ETA 02:39:25
# Fork: 2 of 3
# Warmup Iteration   1: 34784576.400 ns/op
# Warmup Iteration   2: 30286106.618 ns/op
# Warmup Iteration   3: 32896302.419 ns/op
Iteration   1: 26175494.667 ns/op
Iteration   2: 28652608.806 ns/op
Iteration   3: 32553992.188 ns/op
Iteration   4: 36690230.643 ns/op
Iteration   5: 28474289.405 ns/op

# Run progress: 72.62% complete, ETA 02:39:16
# Fork: 3 of 3
# Warmup Iteration   1: 36371622.036 ns/op
# Warmup Iteration   2: 34794823.276 ns/op
# Warmup Iteration   3: 31956934.906 ns/op
Iteration   1: 32427919.250 ns/op
Iteration   2: 34994245.690 ns/op
Iteration   3: 28983755.943 ns/op
Iteration   4: 32954119.613 ns/op
Iteration   5: 41185456.640 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Inline64int.Val_to_Val_as_Val_fillstat":
  33036299.695 ±(99.9%) 4394279.577 ns/op [Average]
  (min, avg, max) = (26175494.667, 33036299.695, 41185456.640), stdev = 4110411.843
  CI (99.9%): [28642020.118, 37430579.272] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.InlineOpt.Def_to_Ref_as_Ref_arrayfill
# Parameters: (size = 100)

# Run progress: 72.65% complete, ETA 02:39:08
# Fork: 1 of 3
# Warmup Iteration   1: 70.239 ns/op
# Warmup Iteration   2: 71.495 ns/op
# Warmup Iteration   3: 69.690 ns/op
Iteration   1: 69.521 ns/op
Iteration   2: 69.503 ns/op
Iteration   3: 69.600 ns/op
Iteration   4: 69.546 ns/op
Iteration   5: 69.574 ns/op

# Run progress: 72.67% complete, ETA 02:38:59
# Fork: 2 of 3
# Warmup Iteration   1: 70.583 ns/op
# Warmup Iteration   2: 73.250 ns/op
# Warmup Iteration   3: 69.770 ns/op
Iteration   1: 69.368 ns/op
Iteration   2: 69.423 ns/op
Iteration   3: 69.932 ns/op
Iteration   4: 69.755 ns/op
Iteration   5: 70.015 ns/op

# Run progress: 72.70% complete, ETA 02:38:50
# Fork: 3 of 3
# Warmup Iteration   1: 70.496 ns/op
# Warmup Iteration   2: 71.412 ns/op
# Warmup Iteration   3: 70.570 ns/op
Iteration   1: 69.583 ns/op
Iteration   2: 69.540 ns/op
Iteration   3: 69.514 ns/op
Iteration   4: 70.165 ns/op
Iteration   5: 69.558 ns/op


Result "org.openjdk.bench.valhalla.array.fill.InlineOpt.Def_to_Ref_as_Ref_arrayfill":
  69.640 ±(99.9%) 0.242 ns/op [Average]
  (min, avg, max) = (69.368, 69.640, 70.165), stdev = 0.227
  CI (99.9%): [69.397, 69.882] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.InlineOpt.Def_to_Ref_as_Ref_arrayfill
# Parameters: (size = 1000000)

# Run progress: 72.72% complete, ETA 02:38:42
# Fork: 1 of 3
# Warmup Iteration   1: 31019713.394 ns/op
# Warmup Iteration   2: 36443193.464 ns/op
# Warmup Iteration   3: 27098337.737 ns/op
Iteration   1: 36144882.464 ns/op
Iteration   2: 37824245.370 ns/op
Iteration   3: 29863053.912 ns/op
Iteration   4: 39859293.269 ns/op
Iteration   5: 32706541.656 ns/op

# Run progress: 72.75% complete, ETA 02:38:33
# Fork: 2 of 3
# Warmup Iteration   1: 32559319.000 ns/op
# Warmup Iteration   2: 33688127.677 ns/op
# Warmup Iteration   3: 32867755.219 ns/op
Iteration   1: 28346505.778 ns/op
Iteration   2: 32523613.281 ns/op
Iteration   3: 40056187.500 ns/op
Iteration   4: 23807700.581 ns/op
Iteration   5: 28060488.417 ns/op

# Run progress: 72.77% complete, ETA 02:38:25
# Fork: 3 of 3
# Warmup Iteration   1: 28983160.714 ns/op
# Warmup Iteration   2: 35092073.600 ns/op
# Warmup Iteration   3: 37828691.370 ns/op
Iteration   1: 31555584.606 ns/op
Iteration   2: 33599629.032 ns/op
Iteration   3: 29112355.971 ns/op
Iteration   4: 32845400.548 ns/op
Iteration   5: 31634080.719 ns/op


Result "org.openjdk.bench.valhalla.array.fill.InlineOpt.Def_to_Ref_as_Ref_arrayfill":
  32529304.207 ±(99.9%) 4838985.924 ns/op [Average]
  (min, avg, max) = (23807700.581, 32529304.207, 40056187.500), stdev = 4526390.436
  CI (99.9%): [27690318.283, 37368290.131] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.InlineOpt.Def_to_Ref_as_Ref_fill
# Parameters: (size = 100)

# Run progress: 72.79% complete, ETA 02:38:16
# Fork: 1 of 3
# Warmup Iteration   1: 70.168 ns/op
# Warmup Iteration   2: 71.245 ns/op
# Warmup Iteration   3: 69.515 ns/op
Iteration   1: 69.438 ns/op
Iteration   2: 69.429 ns/op
Iteration   3: 69.457 ns/op
Iteration   4: 69.495 ns/op
Iteration   5: 69.498 ns/op

# Run progress: 72.82% complete, ETA 02:38:07
# Fork: 2 of 3
# Warmup Iteration   1: 72.230 ns/op
# Warmup Iteration   2: 71.326 ns/op
# Warmup Iteration   3: 69.923 ns/op
Iteration   1: 69.727 ns/op
Iteration   2: 69.590 ns/op
Iteration   3: 69.458 ns/op
Iteration   4: 69.584 ns/op
Iteration   5: 69.788 ns/op

# Run progress: 72.84% complete, ETA 02:37:59
# Fork: 3 of 3
# Warmup Iteration   1: 82.332 ns/op
# Warmup Iteration   2: 93.242 ns/op
# Warmup Iteration   3: 83.324 ns/op
Iteration   1: 70.968 ns/op
Iteration   2: 81.825 ns/op
Iteration   3: 79.344 ns/op
Iteration   4: 77.579 ns/op
Iteration   5: 69.106 ns/op


Result "org.openjdk.bench.valhalla.array.fill.InlineOpt.Def_to_Ref_as_Ref_fill":
  71.619 ±(99.9%) 4.510 ns/op [Average]
  (min, avg, max) = (69.106, 71.619, 81.825), stdev = 4.219
  CI (99.9%): [67.109, 76.129] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.InlineOpt.Def_to_Ref_as_Ref_fill
# Parameters: (size = 1000000)

# Run progress: 72.87% complete, ETA 02:37:50
# Fork: 1 of 3
# Warmup Iteration   1: 27375909.892 ns/op
# Warmup Iteration   2: 29724269.588 ns/op
# Warmup Iteration   3: 33041552.419 ns/op
Iteration   1: 31292122.455 ns/op
Iteration   2: 35335827.586 ns/op
Iteration   3: 36330872.036 ns/op
Iteration   4: 13887524.216 ns/op
Iteration   5: 30671825.758 ns/op

# Run progress: 72.89% complete, ETA 02:37:42
# Fork: 2 of 3
# Warmup Iteration   1: 29678269.057 ns/op
# Warmup Iteration   2: 37379425.607 ns/op
# Warmup Iteration   3: 29640950.000 ns/op
Iteration   1: 38025138.889 ns/op
Iteration   2: 29648276.611 ns/op
Iteration   3: 34266686.100 ns/op
Iteration   4: 22979566.295 ns/op
Iteration   5: 29574223.059 ns/op

# Run progress: 72.92% complete, ETA 02:37:33
# Fork: 3 of 3
# Warmup Iteration   1: 27996815.972 ns/op
# Warmup Iteration   2: 31347673.000 ns/op
# Warmup Iteration   3: 28678824.083 ns/op
Iteration   1: 39178418.269 ns/op
Iteration   2: 32695311.219 ns/op
Iteration   3: 26211830.128 ns/op
Iteration   4: 30814358.576 ns/op
Iteration   5: 30849222.242 ns/op


Result "org.openjdk.bench.valhalla.array.fill.InlineOpt.Def_to_Ref_as_Ref_fill":
  30784080.229 ±(99.9%) 6764373.231 ns/op [Average]
  (min, avg, max) = (13887524.216, 30784080.229, 39178418.269), stdev = 6327398.917
  CI (99.9%): [24019706.999, 37548453.460] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.InlineOpt.Def_to_Val_as_Val_arrayfill
# Parameters: (size = 100)

# Run progress: 72.94% complete, ETA 02:37:24
# Fork: 1 of 3
# Warmup Iteration   1: 83.179 ns/op
# Warmup Iteration   2: 150.173 ns/op
# Warmup Iteration   3: 149.750 ns/op
Iteration   1: 162.640 ns/op
Iteration   2: 158.552 ns/op
Iteration   3: 146.277 ns/op
Iteration   4: 146.135 ns/op
Iteration   5: 146.339 ns/op

# Run progress: 72.97% complete, ETA 02:37:16
# Fork: 2 of 3
# Warmup Iteration   1: 151.363 ns/op
# Warmup Iteration   2: 151.531 ns/op
# Warmup Iteration   3: 145.049 ns/op
Iteration   1: 145.074 ns/op
Iteration   2: 145.036 ns/op
Iteration   3: 145.282 ns/op
Iteration   4: 145.324 ns/op
Iteration   5: 144.870 ns/op

# Run progress: 72.99% complete, ETA 02:37:07
# Fork: 3 of 3
# Warmup Iteration   1: 149.395 ns/op
# Warmup Iteration   2: 150.114 ns/op
# Warmup Iteration   3: 144.904 ns/op
Iteration   1: 144.921 ns/op
Iteration   2: 144.881 ns/op
Iteration   3: 144.981 ns/op
Iteration   4: 145.158 ns/op
Iteration   5: 137.723 ns/op


Result "org.openjdk.bench.valhalla.array.fill.InlineOpt.Def_to_Val_as_Val_arrayfill":
  146.880 ±(99.9%) 6.387 ns/op [Average]
  (min, avg, max) = (137.723, 146.880, 162.640), stdev = 5.975
  CI (99.9%): [140.492, 153.267] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.InlineOpt.Def_to_Val_as_Val_arrayfill
# Parameters: (size = 1000000)

# Run progress: 73.01% complete, ETA 02:36:59
# Fork: 1 of 3
# Warmup Iteration   1: 49580867.095 ns/op
# Warmup Iteration   2: 52886754.368 ns/op
# Warmup Iteration   3: 48665214.000 ns/op
Iteration   1: 48367429.909 ns/op
Iteration   2: 25397444.800 ns/op
Iteration   3: 28132587.972 ns/op
Iteration   4: 30033551.471 ns/op
Iteration   5: 47104157.182 ns/op

# Run progress: 73.04% complete, ETA 02:36:50
# Fork: 2 of 3
# Warmup Iteration   1: 43808847.250 ns/op
# Warmup Iteration   2: 46569397.727 ns/op
# Warmup Iteration   3: 52007712.500 ns/op
Iteration   1: 44984025.348 ns/op
Iteration   2: 55305750.000 ns/op
Iteration   3: 44702625.000 ns/op
Iteration   4: 55013223.684 ns/op
Iteration   5: 55971866.211 ns/op

# Run progress: 73.06% complete, ETA 02:36:42
# Fork: 3 of 3
# Warmup Iteration   1: 46692909.435 ns/op
# Warmup Iteration   2: 41082690.000 ns/op
# Warmup Iteration   3: 53971464.947 ns/op
Iteration   1: 56438324.056 ns/op
Iteration   2: 54805695.211 ns/op
Iteration   3: 27327487.921 ns/op
Iteration   4: 44008612.875 ns/op
Iteration   5: 45166416.652 ns/op


Result "org.openjdk.bench.valhalla.array.fill.InlineOpt.Def_to_Val_as_Val_arrayfill":
  44183946.553 ±(99.9%) 12006300.679 ns/op [Average]
  (min, avg, max) = (25397444.800, 44183946.553, 56438324.056), stdev = 11230701.105
  CI (99.9%): [32177645.874, 56190247.232] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.InlineOpt.Def_to_Val_as_Val_fill
# Parameters: (size = 100)

# Run progress: 73.09% complete, ETA 02:36:33
# Fork: 1 of 3
# Warmup Iteration   1: 71.589 ns/op
# Warmup Iteration   2: 71.114 ns/op
# Warmup Iteration   3: 69.509 ns/op
Iteration   1: 69.420 ns/op
Iteration   2: 70.072 ns/op
Iteration   3: 70.228 ns/op
Iteration   4: 70.190 ns/op
Iteration   5: 69.473 ns/op

# Run progress: 73.11% complete, ETA 02:36:25
# Fork: 2 of 3
# Warmup Iteration   1: 71.044 ns/op
# Warmup Iteration   2: 71.258 ns/op
# Warmup Iteration   3: 70.077 ns/op
Iteration   1: 69.859 ns/op
Iteration   2: 69.823 ns/op
Iteration   3: 69.882 ns/op
Iteration   4: 70.082 ns/op
Iteration   5: 69.596 ns/op

# Run progress: 73.14% complete, ETA 02:36:16
# Fork: 3 of 3
# Warmup Iteration   1: 70.284 ns/op
# Warmup Iteration   2: 72.090 ns/op
# Warmup Iteration   3: 77.366 ns/op
Iteration   1: 73.023 ns/op
Iteration   2: 69.698 ns/op
Iteration   3: 70.465 ns/op
Iteration   4: 69.495 ns/op
Iteration   5: 69.702 ns/op


Result "org.openjdk.bench.valhalla.array.fill.InlineOpt.Def_to_Val_as_Val_fill":
  70.067 ±(99.9%) 0.933 ns/op [Average]
  (min, avg, max) = (69.420, 70.067, 73.023), stdev = 0.873
  CI (99.9%): [69.134, 71.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.InlineOpt.Def_to_Val_as_Val_fill
# Parameters: (size = 1000000)

# Run progress: 73.16% complete, ETA 02:36:07
# Fork: 1 of 3
# Warmup Iteration   1: 11579232.477 ns/op
# Warmup Iteration   2: 18211543.161 ns/op
# Warmup Iteration   3: 20542808.673 ns/op
Iteration   1: 17748029.982 ns/op
Iteration   2: 19042568.182 ns/op
Iteration   3: 38348783.963 ns/op
Iteration   4: 19888863.569 ns/op
Iteration   5: 22596747.283 ns/op

# Run progress: 73.19% complete, ETA 02:35:59
# Fork: 2 of 3
# Warmup Iteration   1: 42155442.708 ns/op
# Warmup Iteration   2: 49908902.810 ns/op
# Warmup Iteration   3: 53532798.263 ns/op
Iteration   1: 46390009.043 ns/op
Iteration   2: 48167831.333 ns/op
Iteration   3: 43884429.348 ns/op
Iteration   4: 45584778.957 ns/op
Iteration   5: 42689439.250 ns/op

# Run progress: 73.21% complete, ETA 02:35:50
# Fork: 3 of 3
# Warmup Iteration   1: 42689345.500 ns/op
# Warmup Iteration   2: 53666190.789 ns/op
# Warmup Iteration   3: 41918559.042 ns/op
Iteration   1: 48650311.524 ns/op
Iteration   2: 50418718.750 ns/op
Iteration   3: 43359623.250 ns/op
Iteration   4: 50056642.857 ns/op
Iteration   5: 53705460.526 ns/op


Result "org.openjdk.bench.valhalla.array.fill.InlineOpt.Def_to_Val_as_Val_fill":
  39368815.854 ±(99.9%) 13652271.811 ns/op [Average]
  (min, avg, max) = (17748029.982, 39368815.854, 53705460.526), stdev = 12770343.524
  CI (99.9%): [25716544.043, 53021087.665] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.InlineOpt.New_to_Ref_as_Ref_arrayfill
# Parameters: (size = 100)

# Run progress: 73.24% complete, ETA 02:35:42
# Fork: 1 of 3
# Warmup Iteration   1: 88.499 ns/op
# Warmup Iteration   2: 86.805 ns/op
# Warmup Iteration   3: 166.072 ns/op
Iteration   1: 168.107 ns/op
Iteration   2: 168.793 ns/op
Iteration   3: 167.230 ns/op
Iteration   4: 167.416 ns/op
Iteration   5: 168.311 ns/op

# Run progress: 73.26% complete, ETA 02:35:33
# Fork: 2 of 3
# Warmup Iteration   1: 89.204 ns/op
# Warmup Iteration   2: 86.599 ns/op
# Warmup Iteration   3: 168.702 ns/op
Iteration   1: 167.261 ns/op
Iteration   2: 167.998 ns/op
Iteration   3: 166.236 ns/op
Iteration   4: 166.287 ns/op
Iteration   5: 209.883 ns/op

# Run progress: 73.28% complete, ETA 02:35:24
# Fork: 3 of 3
# Warmup Iteration   1: 89.157 ns/op
# Warmup Iteration   2: 87.594 ns/op
# Warmup Iteration   3: 177.063 ns/op
Iteration   1: 169.623 ns/op
Iteration   2: 165.982 ns/op
Iteration   3: 166.808 ns/op
Iteration   4: 167.484 ns/op
Iteration   5: 167.093 ns/op


Result "org.openjdk.bench.valhalla.array.fill.InlineOpt.New_to_Ref_as_Ref_arrayfill":
  170.301 ±(99.9%) 11.753 ns/op [Average]
  (min, avg, max) = (165.982, 170.301, 209.883), stdev = 10.994
  CI (99.9%): [158.547, 182.054] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.InlineOpt.New_to_Ref_as_Ref_arrayfill
# Parameters: (size = 1000000)

# Run progress: 73.31% complete, ETA 02:35:16
# Fork: 1 of 3
# Warmup Iteration   1: 31979985.688 ns/op
# Warmup Iteration   2: 13956848.178 ns/op
# Warmup Iteration   3: 15792891.938 ns/op
Iteration   1: 24830764.244 ns/op
Iteration   2: 26731231.821 ns/op
Iteration   3: 31628690.667 ns/op
Iteration   4: 32497095.063 ns/op
Iteration   5: 36062298.862 ns/op

# Run progress: 73.33% complete, ETA 02:35:08
# Fork: 2 of 3
# Warmup Iteration   1: 24940961.390 ns/op
# Warmup Iteration   2: 30273180.147 ns/op
# Warmup Iteration   3: 22045483.696 ns/op
Iteration   1: 22662447.222 ns/op
Iteration   2: 21959320.021 ns/op
Iteration   3: 22448002.778 ns/op
Iteration   4: 25253585.425 ns/op
Iteration   5: 27528322.054 ns/op

# Run progress: 73.36% complete, ETA 02:34:59
# Fork: 3 of 3
# Warmup Iteration   1: 28465137.750 ns/op
# Warmup Iteration   2: 29744849.265 ns/op
# Warmup Iteration   3: 26944884.615 ns/op
Iteration   1: 33337821.258 ns/op
Iteration   2: 28371737.278 ns/op
Iteration   3: 27916932.432 ns/op
Iteration   4: 27334597.973 ns/op
Iteration   5: 27817978.622 ns/op


Result "org.openjdk.bench.valhalla.array.fill.InlineOpt.New_to_Ref_as_Ref_arrayfill":
  27758721.715 ±(99.9%) 4443405.272 ns/op [Average]
  (min, avg, max) = (21959320.021, 27758721.715, 36062298.862), stdev = 4156364.049
  CI (99.9%): [23315316.443, 32202126.987] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.InlineOpt.New_to_Ref_as_Ref_fill
# Parameters: (size = 100)

# Run progress: 73.38% complete, ETA 02:34:50
# Fork: 1 of 3
# Warmup Iteration   1: 230.269 ns/op
# Warmup Iteration   2: 193.193 ns/op
# Warmup Iteration   3: 177.861 ns/op
Iteration   1: 189.720 ns/op
Iteration   2: 298.514 ns/op
Iteration   3: 176.880 ns/op
Iteration   4: 176.402 ns/op
Iteration   5: 176.451 ns/op

# Run progress: 73.41% complete, ETA 02:34:42
# Fork: 2 of 3
# Warmup Iteration   1: 208.503 ns/op
# Warmup Iteration   2: 197.577 ns/op
# Warmup Iteration   3: 195.822 ns/op
Iteration   1: 195.793 ns/op
Iteration   2: 194.940 ns/op
Iteration   3: 195.003 ns/op
Iteration   4: 195.321 ns/op
Iteration   5: 197.939 ns/op

# Run progress: 73.43% complete, ETA 02:34:33
# Fork: 3 of 3
# Warmup Iteration   1: 214.782 ns/op
# Warmup Iteration   2: 200.868 ns/op
# Warmup Iteration   3: 187.081 ns/op
Iteration   1: 185.583 ns/op
Iteration   2: 184.640 ns/op
Iteration   3: 186.905 ns/op
Iteration   4: 181.368 ns/op
Iteration   5: 184.905 ns/op


Result "org.openjdk.bench.valhalla.array.fill.InlineOpt.New_to_Ref_as_Ref_fill":
  194.691 ±(99.9%) 31.711 ns/op [Average]
  (min, avg, max) = (176.402, 194.691, 298.514), stdev = 29.663
  CI (99.9%): [162.979, 226.402] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.InlineOpt.New_to_Ref_as_Ref_fill
# Parameters: (size = 1000000)

# Run progress: 73.46% complete, ETA 02:34:25
# Fork: 1 of 3
# Warmup Iteration   1: 3350394.658 ns/op
# Warmup Iteration   2: 5502998.170 ns/op
# Warmup Iteration   3: 2360297.353 ns/op
Iteration   1: 2452069.782 ns/op
Iteration   2: 1909984.405 ns/op
Iteration   3: 2003877.480 ns/op
Iteration   4: 1890901.938 ns/op
Iteration   5: 1975463.643 ns/op

# Run progress: 73.48% complete, ETA 02:34:16
# Fork: 2 of 3
# Warmup Iteration   1: 3180576.126 ns/op
# Warmup Iteration   2: 3106647.822 ns/op
# Warmup Iteration   3: 1963568.679 ns/op
Iteration   1: 2600242.075 ns/op
Iteration   2: 1815432.600 ns/op
Iteration   3: 1993406.949 ns/op
Iteration   4: 1970453.704 ns/op
Iteration   5: 1994189.679 ns/op

# Run progress: 73.50% complete, ETA 02:34:07
# Fork: 3 of 3
# Warmup Iteration   1: 3137493.421 ns/op
# Warmup Iteration   2: 2585755.744 ns/op
# Warmup Iteration   3: 2171259.101 ns/op
Iteration   1: 1966425.049 ns/op
Iteration   2: 2833165.493 ns/op
Iteration   3: 1910312.696 ns/op
Iteration   4: 1993572.958 ns/op
Iteration   5: 2060084.608 ns/op


Result "org.openjdk.bench.valhalla.array.fill.InlineOpt.New_to_Ref_as_Ref_fill":
  2091305.537 ±(99.9%) 313279.858 ns/op [Average]
  (min, avg, max) = (1815432.600, 2091305.537, 2833165.493), stdev = 293042.173
  CI (99.9%): [1778025.679, 2404585.395] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.InlineOpt.New_to_Val_as_Val_arrayfill
# Parameters: (size = 100)

# Run progress: 73.53% complete, ETA 02:33:59
# Fork: 1 of 3
# Warmup Iteration   1: 93.381 ns/op
# Warmup Iteration   2: 92.154 ns/op
# Warmup Iteration   3: 167.121 ns/op
Iteration   1: 167.016 ns/op
Iteration   2: 169.525 ns/op
Iteration   3: 167.256 ns/op
Iteration   4: 167.345 ns/op
Iteration   5: 167.064 ns/op

# Run progress: 73.55% complete, ETA 02:33:50
# Fork: 2 of 3
# Warmup Iteration   1: 91.704 ns/op
# Warmup Iteration   2: 90.827 ns/op
# Warmup Iteration   3: 175.508 ns/op
Iteration   1: 172.467 ns/op
Iteration   2: 166.843 ns/op
Iteration   3: 166.959 ns/op
Iteration   4: 166.934 ns/op
Iteration   5: 166.915 ns/op

# Run progress: 73.58% complete, ETA 02:33:41
# Fork: 3 of 3
# Warmup Iteration   1: 91.940 ns/op
# Warmup Iteration   2: 90.362 ns/op
# Warmup Iteration   3: 167.832 ns/op
Iteration   1: 167.328 ns/op
Iteration   2: 170.092 ns/op
Iteration   3: 175.132 ns/op
Iteration   4: 167.779 ns/op
Iteration   5: 166.910 ns/op


Result "org.openjdk.bench.valhalla.array.fill.InlineOpt.New_to_Val_as_Val_arrayfill":
  168.371 ±(99.9%) 2.630 ns/op [Average]
  (min, avg, max) = (166.843, 168.371, 175.132), stdev = 2.460
  CI (99.9%): [165.741, 171.001] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.InlineOpt.New_to_Val_as_Val_arrayfill
# Parameters: (size = 1000000)

# Run progress: 73.60% complete, ETA 02:33:33
# Fork: 1 of 3
# Warmup Iteration   1: 25906555.564 ns/op
# Warmup Iteration   2: 32569959.677 ns/op
# Warmup Iteration   3: 37879494.036 ns/op
Iteration   1: 31848312.500 ns/op
Iteration   2: 31341703.273 ns/op
Iteration   3: 29875314.971 ns/op
Iteration   4: 31991007.813 ns/op
Iteration   5: 29856529.412 ns/op

# Run progress: 73.63% complete, ETA 02:33:24
# Fork: 2 of 3
# Warmup Iteration   1: 31842201.813 ns/op
# Warmup Iteration   2: 28046432.861 ns/op
# Warmup Iteration   3: 31955867.188 ns/op
Iteration   1: 30606561.265 ns/op
Iteration   2: 27383047.158 ns/op
Iteration   3: 36031729.897 ns/op
Iteration   4: 28264221.056 ns/op
Iteration   5: 30118754.912 ns/op

# Run progress: 73.65% complete, ETA 02:33:16
# Fork: 3 of 3
# Warmup Iteration   1: 24100993.071 ns/op
# Warmup Iteration   2: 27290911.184 ns/op
# Warmup Iteration   3: 29831313.086 ns/op
Iteration   1: 29695703.441 ns/op
Iteration   2: 30252580.882 ns/op
Iteration   3: 30742983.576 ns/op
Iteration   4: 29948817.857 ns/op
Iteration   5: 27157980.263 ns/op


Result "org.openjdk.bench.valhalla.array.fill.InlineOpt.New_to_Val_as_Val_arrayfill":
  30341016.552 ±(99.9%) 2265759.318 ns/op [Average]
  (min, avg, max) = (27157980.263, 30341016.552, 36031729.897), stdev = 2119392.672
  CI (99.9%): [28075257.234, 32606775.870] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.InlineOpt.New_to_Val_as_Val_fill
# Parameters: (size = 100)

# Run progress: 73.68% complete, ETA 02:33:07
# Fork: 1 of 3
# Warmup Iteration   1: 213.550 ns/op
# Warmup Iteration   2: 204.960 ns/op
# Warmup Iteration   3: 178.009 ns/op
Iteration   1: 178.417 ns/op
Iteration   2: 179.781 ns/op
Iteration   3: 182.002 ns/op
Iteration   4: 178.164 ns/op
Iteration   5: 179.119 ns/op

# Run progress: 73.70% complete, ETA 02:32:58
# Fork: 2 of 3
# Warmup Iteration   1: 213.374 ns/op
# Warmup Iteration   2: 193.982 ns/op
# Warmup Iteration   3: 178.159 ns/op
Iteration   1: 176.498 ns/op
Iteration   2: 178.426 ns/op
Iteration   3: 180.583 ns/op
Iteration   4: 186.508 ns/op
Iteration   5: 179.841 ns/op

# Run progress: 73.73% complete, ETA 02:32:50
# Fork: 3 of 3
# Warmup Iteration   1: 252.092 ns/op
# Warmup Iteration   2: 249.971 ns/op
# Warmup Iteration   3: 233.500 ns/op
Iteration   1: 186.501 ns/op
Iteration   2: 176.532 ns/op
Iteration   3: 179.197 ns/op
Iteration   4: 190.998 ns/op
Iteration   5: 192.473 ns/op


Result "org.openjdk.bench.valhalla.array.fill.InlineOpt.New_to_Val_as_Val_fill":
  181.669 ±(99.9%) 5.405 ns/op [Average]
  (min, avg, max) = (176.498, 181.669, 192.473), stdev = 5.056
  CI (99.9%): [176.265, 187.074] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.InlineOpt.New_to_Val_as_Val_fill
# Parameters: (size = 1000000)

# Run progress: 73.75% complete, ETA 02:32:41
# Fork: 1 of 3
# Warmup Iteration   1: 3382292.361 ns/op
# Warmup Iteration   2: 3903128.728 ns/op
# Warmup Iteration   3: 2091415.201 ns/op
Iteration   1: 2619818.648 ns/op
Iteration   2: 1918300.839 ns/op
Iteration   3: 1996657.856 ns/op
Iteration   4: 1944676.523 ns/op
Iteration   5: 1960045.906 ns/op

# Run progress: 73.77% complete, ETA 02:32:33
# Fork: 2 of 3
# Warmup Iteration   1: 3199615.844 ns/op
# Warmup Iteration   2: 3198123.936 ns/op
# Warmup Iteration   3: 2033055.976 ns/op
Iteration   1: 4534407.261 ns/op
Iteration   2: 2533517.693 ns/op
Iteration   3: 2092071.154 ns/op
Iteration   4: 2342467.613 ns/op
Iteration   5: 2284883.180 ns/op

# Run progress: 73.80% complete, ETA 02:32:25
# Fork: 3 of 3
# Warmup Iteration   1: 3200911.921 ns/op
# Warmup Iteration   2: 2573512.830 ns/op
# Warmup Iteration   3: 2400660.629 ns/op
Iteration   1: 2303115.793 ns/op
Iteration   2: 1916257.952 ns/op
Iteration   3: 2109063.501 ns/op
Iteration   4: 1930135.117 ns/op
Iteration   5: 1976881.164 ns/op


Result "org.openjdk.bench.valhalla.array.fill.InlineOpt.New_to_Val_as_Val_fill":
  2297486.680 ±(99.9%) 705616.271 ns/op [Average]
  (min, avg, max) = (1916257.952, 2297486.680, 4534407.261), stdev = 660033.898
  CI (99.9%): [1591870.409, 3003102.951] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.InlineOpt.Ref_to_Ref_as_Ref_arrayfillinst
# Parameters: (size = 100)

# Run progress: 73.82% complete, ETA 02:32:16
# Fork: 1 of 3
# Warmup Iteration   1: 88.984 ns/op
# Warmup Iteration   2: 96.185 ns/op
# Warmup Iteration   3: 86.771 ns/op
Iteration   1: 70.181 ns/op
Iteration   2: 69.752 ns/op
Iteration   3: 69.774 ns/op
Iteration   4: 69.797 ns/op
Iteration   5: 71.385 ns/op

# Run progress: 73.85% complete, ETA 02:32:07
# Fork: 2 of 3
# Warmup Iteration   1: 71.618 ns/op
# Warmup Iteration   2: 84.265 ns/op
# Warmup Iteration   3: 96.088 ns/op
Iteration   1: 93.924 ns/op
Iteration   2: 94.271 ns/op
Iteration   3: 91.549 ns/op
Iteration   4: 84.606 ns/op
Iteration   5: 73.066 ns/op

# Run progress: 73.87% complete, ETA 02:31:59
# Fork: 3 of 3
# Warmup Iteration   1: 71.959 ns/op
# Warmup Iteration   2: 71.661 ns/op
# Warmup Iteration   3: 70.099 ns/op
Iteration   1: 69.820 ns/op
Iteration   2: 69.790 ns/op
Iteration   3: 70.041 ns/op
Iteration   4: 79.015 ns/op
Iteration   5: 85.206 ns/op


Result "org.openjdk.bench.valhalla.array.fill.InlineOpt.Ref_to_Ref_as_Ref_arrayfillinst":
  77.478 ±(99.9%) 10.398 ns/op [Average]
  (min, avg, max) = (69.752, 77.478, 94.271), stdev = 9.726
  CI (99.9%): [67.081, 87.876] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.InlineOpt.Ref_to_Ref_as_Ref_arrayfillinst
# Parameters: (size = 1000000)

# Run progress: 73.90% complete, ETA 02:31:50
# Fork: 1 of 3
# Warmup Iteration   1: 39483838.154 ns/op
# Warmup Iteration   2: 34848377.897 ns/op
# Warmup Iteration   3: 32312744.781 ns/op
Iteration   1: 34960148.633 ns/op
Iteration   2: 27409997.816 ns/op
Iteration   3: 31692299.242 ns/op
Iteration   4: 32374442.719 ns/op
Iteration   5: 24936617.878 ns/op

# Run progress: 73.92% complete, ETA 02:31:42
# Fork: 2 of 3
# Warmup Iteration   1: 18754491.673 ns/op
# Warmup Iteration   2: 21132393.320 ns/op
# Warmup Iteration   3: 34979581.967 ns/op
Iteration   1: 34578844.467 ns/op
Iteration   2: 32987365.581 ns/op
Iteration   3: 28946335.714 ns/op
Iteration   4: 35027566.103 ns/op
Iteration   5: 34879554.621 ns/op

# Run progress: 73.95% complete, ETA 02:31:33
# Fork: 3 of 3
# Warmup Iteration   1: 7059560.155 ns/op
# Warmup Iteration   2: 6924664.664 ns/op
# Warmup Iteration   3: 6970385.924 ns/op
Iteration   1: 7036581.294 ns/op
Iteration   2: 7325506.341 ns/op
Iteration   3: 7033452.257 ns/op
Iteration   4: 7010580.462 ns/op
Iteration   5: 7007643.386 ns/op


Result "org.openjdk.bench.valhalla.array.fill.InlineOpt.Ref_to_Ref_as_Ref_arrayfillinst":
  23547129.101 ±(99.9%) 13239036.437 ns/op [Average]
  (min, avg, max) = (7007643.386, 23547129.101, 35027566.103), stdev = 12383802.898
  CI (99.9%): [10308092.664, 36786165.538] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.InlineOpt.Ref_to_Ref_as_Ref_arrayfillstat
# Parameters: (size = 100)

# Run progress: 73.97% complete, ETA 02:31:25
# Fork: 1 of 3
# Warmup Iteration   1: 163.654 ns/op
# Warmup Iteration   2: 143.149 ns/op
# Warmup Iteration   3: 145.393 ns/op
Iteration   1: 145.250 ns/op
Iteration   2: 145.344 ns/op
Iteration   3: 145.519 ns/op
Iteration   4: 145.403 ns/op
Iteration   5: 145.688 ns/op

# Run progress: 74.00% complete, ETA 02:31:16
# Fork: 2 of 3
# Warmup Iteration   1: 150.064 ns/op
# Warmup Iteration   2: 142.452 ns/op
# Warmup Iteration   3: 145.221 ns/op
Iteration   1: 145.372 ns/op
Iteration   2: 145.943 ns/op
Iteration   3: 145.515 ns/op
Iteration   4: 123.888 ns/op
Iteration   5: 78.393 ns/op

# Run progress: 74.02% complete, ETA 02:31:08
# Fork: 3 of 3
# Warmup Iteration   1: 101.089 ns/op
# Warmup Iteration   2: 105.285 ns/op
# Warmup Iteration   3: 73.106 ns/op
Iteration   1: 69.761 ns/op
Iteration   2: 69.787 ns/op
Iteration   3: 69.768 ns/op
Iteration   4: 69.792 ns/op
Iteration   5: 69.941 ns/op


Result "org.openjdk.bench.valhalla.array.fill.InlineOpt.Ref_to_Ref_as_Ref_arrayfillstat":
  114.357 ±(99.9%) 39.454 ns/op [Average]
  (min, avg, max) = (69.761, 114.357, 145.943), stdev = 36.905
  CI (99.9%): [74.903, 153.812] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.InlineOpt.Ref_to_Ref_as_Ref_arrayfillstat
# Parameters: (size = 1000000)

# Run progress: 74.04% complete, ETA 02:30:59
# Fork: 1 of 3
# Warmup Iteration   1: 32548287.613 ns/op
# Warmup Iteration   2: 29772610.714 ns/op
# Warmup Iteration   3: 32047967.182 ns/op
Iteration   1: 36022601.214 ns/op
Iteration   2: 36348001.464 ns/op
Iteration   3: 29883419.118 ns/op
Iteration   4: 29824359.543 ns/op
Iteration   5: 28035608.108 ns/op

# Run progress: 74.07% complete, ETA 02:30:50
# Fork: 2 of 3
# Warmup Iteration   1: 26477169.872 ns/op
# Warmup Iteration   2: 30471416.647 ns/op
# Warmup Iteration   3: 25468515.625 ns/op
Iteration   1: 35395579.034 ns/op
Iteration   2: 30253215.676 ns/op
Iteration   3: 27567570.946 ns/op
Iteration   4: 29658852.400 ns/op
Iteration   5: 29331065.457 ns/op

# Run progress: 74.09% complete, ETA 02:30:42
# Fork: 3 of 3
# Warmup Iteration   1: 25435400.000 ns/op
# Warmup Iteration   2: 30715046.697 ns/op
# Warmup Iteration   3: 29915894.029 ns/op
Iteration   1: 30473875.000 ns/op
Iteration   2: 33202596.774 ns/op
Iteration   3: 30476353.515 ns/op
Iteration   4: 29098534.514 ns/op
Iteration   5: 27339395.842 ns/op


Result "org.openjdk.bench.valhalla.array.fill.InlineOpt.Ref_to_Ref_as_Ref_arrayfillstat":
  30860735.240 ±(99.9%) 3176691.683 ns/op [Average]
  (min, avg, max) = (27339395.842, 30860735.240, 36348001.464), stdev = 2971479.371
  CI (99.9%): [27684043.558, 34037426.923] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.InlineOpt.Ref_to_Ref_as_Ref_fillinst
# Parameters: (size = 100)

# Run progress: 74.12% complete, ETA 02:30:33
# Fork: 1 of 3
# Warmup Iteration   1: 74.039 ns/op
# Warmup Iteration   2: 73.488 ns/op
# Warmup Iteration   3: 74.159 ns/op
Iteration   1: 73.531 ns/op
Iteration   2: 73.513 ns/op
Iteration   3: 73.547 ns/op
Iteration   4: 86.568 ns/op
Iteration   5: 74.308 ns/op

# Run progress: 74.14% complete, ETA 02:30:25
# Fork: 2 of 3
# Warmup Iteration   1: 74.494 ns/op
# Warmup Iteration   2: 73.502 ns/op
# Warmup Iteration   3: 73.560 ns/op
Iteration   1: 85.691 ns/op
Iteration   2: 73.430 ns/op
Iteration   3: 73.687 ns/op
Iteration   4: 73.607 ns/op
Iteration   5: 73.552 ns/op

# Run progress: 74.17% complete, ETA 02:30:16
# Fork: 3 of 3
# Warmup Iteration   1: 73.489 ns/op
# Warmup Iteration   2: 73.722 ns/op
# Warmup Iteration   3: 74.843 ns/op
Iteration   1: 73.205 ns/op
Iteration   2: 73.615 ns/op
Iteration   3: 74.324 ns/op
Iteration   4: 73.822 ns/op
Iteration   5: 73.478 ns/op


Result "org.openjdk.bench.valhalla.array.fill.InlineOpt.Ref_to_Ref_as_Ref_fillinst":
  75.325 ±(99.9%) 4.704 ns/op [Average]
  (min, avg, max) = (73.205, 75.325, 86.568), stdev = 4.400
  CI (99.9%): [70.621, 80.029] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.InlineOpt.Ref_to_Ref_as_Ref_fillinst
# Parameters: (size = 1000000)

# Run progress: 74.19% complete, ETA 02:30:07
# Fork: 1 of 3
# Warmup Iteration   1: 14622478.296 ns/op
# Warmup Iteration   2: 16990202.197 ns/op
# Warmup Iteration   3: 25749160.256 ns/op
Iteration   1: 33032629.032 ns/op
Iteration   2: 23459503.773 ns/op
Iteration   3: 28123475.694 ns/op
Iteration   4: 29013898.800 ns/op
Iteration   5: 28801940.972 ns/op

# Run progress: 74.22% complete, ETA 02:29:59
# Fork: 2 of 3
# Warmup Iteration   1: 25958275.641 ns/op
# Warmup Iteration   2: 31837042.969 ns/op
# Warmup Iteration   3: 27509777.027 ns/op
Iteration   1: 29195652.371 ns/op
Iteration   2: 27819644.135 ns/op
Iteration   3: 31092154.030 ns/op
Iteration   4: 25053993.902 ns/op
Iteration   5: 37427467.593 ns/op

# Run progress: 74.24% complete, ETA 02:29:50
# Fork: 3 of 3
# Warmup Iteration   1: 31081992.424 ns/op
# Warmup Iteration   2: 31492858.094 ns/op
# Warmup Iteration   3: 28786521.429 ns/op
Iteration   1: 28983023.800 ns/op
Iteration   2: 30305853.571 ns/op
Iteration   3: 46231670.455 ns/op
Iteration   4: 28136120.389 ns/op
Iteration   5: 29338942.857 ns/op


Result "org.openjdk.bench.valhalla.array.fill.InlineOpt.Ref_to_Ref_as_Ref_fillinst":
  30401064.758 ±(99.9%) 5786918.353 ns/op [Average]
  (min, avg, max) = (23459503.773, 30401064.758, 46231670.455), stdev = 5413087.019
  CI (99.9%): [24614146.405, 36187983.112] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.InlineOpt.Ref_to_Ref_as_Ref_fillstat
# Parameters: (size = 100)

# Run progress: 74.26% complete, ETA 02:29:42
# Fork: 1 of 3
# Warmup Iteration   1: 73.480 ns/op
# Warmup Iteration   2: 73.612 ns/op
# Warmup Iteration   3: 73.437 ns/op
Iteration   1: 73.244 ns/op
Iteration   2: 73.632 ns/op
Iteration   3: 73.475 ns/op
Iteration   4: 73.339 ns/op
Iteration   5: 73.239 ns/op

# Run progress: 74.29% complete, ETA 02:29:33
# Fork: 2 of 3
# Warmup Iteration   1: 74.661 ns/op
# Warmup Iteration   2: 74.744 ns/op
# Warmup Iteration   3: 73.625 ns/op
Iteration   1: 73.618 ns/op
Iteration   2: 73.512 ns/op
Iteration   3: 73.486 ns/op
Iteration   4: 73.647 ns/op
Iteration   5: 73.462 ns/op

# Run progress: 74.31% complete, ETA 02:29:24
# Fork: 3 of 3
# Warmup Iteration   1: 73.480 ns/op
# Warmup Iteration   2: 74.162 ns/op
# Warmup Iteration   3: 75.766 ns/op
Iteration   1: 74.230 ns/op
Iteration   2: 74.822 ns/op
Iteration   3: 73.604 ns/op
Iteration   4: 73.847 ns/op
Iteration   5: 73.546 ns/op


Result "org.openjdk.bench.valhalla.array.fill.InlineOpt.Ref_to_Ref_as_Ref_fillstat":
  73.647 ±(99.9%) 0.434 ns/op [Average]
  (min, avg, max) = (73.239, 73.647, 74.822), stdev = 0.406
  CI (99.9%): [73.213, 74.081] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.InlineOpt.Ref_to_Ref_as_Ref_fillstat
# Parameters: (size = 1000000)

# Run progress: 74.34% complete, ETA 02:29:16
# Fork: 1 of 3
# Warmup Iteration   1: 33065103.484 ns/op
# Warmup Iteration   2: 36249153.286 ns/op
# Warmup Iteration   3: 29970981.618 ns/op
Iteration   1: 29012982.143 ns/op
Iteration   2: 32947635.742 ns/op
Iteration   3: 24156156.738 ns/op
Iteration   4: 31010244.939 ns/op
Iteration   5: 43098703.125 ns/op

# Run progress: 74.36% complete, ETA 02:29:07
# Fork: 2 of 3
# Warmup Iteration   1: 35690051.724 ns/op
# Warmup Iteration   2: 31466094.697 ns/op
# Warmup Iteration   3: 34695233.333 ns/op
Iteration   1: 38776799.370 ns/op
Iteration   2: 35949165.241 ns/op
Iteration   3: 32681942.194 ns/op
Iteration   4: 29889698.529 ns/op
Iteration   5: 29629688.735 ns/op

# Run progress: 74.39% complete, ETA 02:28:59
# Fork: 3 of 3
# Warmup Iteration   1: 25939987.179 ns/op
# Warmup Iteration   2: 28485957.167 ns/op
# Warmup Iteration   3: 37144596.714 ns/op
Iteration   1: 29351551.171 ns/op
Iteration   2: 32216365.875 ns/op
Iteration   3: 30228083.324 ns/op
Iteration   4: 32807209.677 ns/op
Iteration   5: 38241689.815 ns/op


Result "org.openjdk.bench.valhalla.array.fill.InlineOpt.Ref_to_Ref_as_Ref_fillstat":
  32666527.775 ±(99.9%) 5036365.666 ns/op [Average]
  (min, avg, max) = (24156156.738, 32666527.775, 43098703.125), stdev = 4711019.569
  CI (99.9%): [27630162.108, 37702893.441] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.InlineOpt.Ref_to_Val_as_Val_arrayfillinst
# Parameters: (size = 100)

# Run progress: 74.41% complete, ETA 02:28:50
# Fork: 1 of 3
# Warmup Iteration   1: 71.774 ns/op
# Warmup Iteration   2: 71.496 ns/op
# Warmup Iteration   3: 70.355 ns/op
Iteration   1: 69.840 ns/op
Iteration   2: 69.808 ns/op
Iteration   3: 69.724 ns/op
Iteration   4: 69.769 ns/op
Iteration   5: 69.874 ns/op

# Run progress: 74.44% complete, ETA 02:28:41
# Fork: 2 of 3
# Warmup Iteration   1: 71.565 ns/op
# Warmup Iteration   2: 71.702 ns/op
# Warmup Iteration   3: 70.761 ns/op
Iteration   1: 69.689 ns/op
Iteration   2: 69.670 ns/op
Iteration   3: 69.600 ns/op
Iteration   4: 70.852 ns/op
Iteration   5: 69.905 ns/op

# Run progress: 74.46% complete, ETA 02:28:33
# Fork: 3 of 3
# Warmup Iteration   1: 71.825 ns/op
# Warmup Iteration   2: 71.547 ns/op
# Warmup Iteration   3: 69.429 ns/op
Iteration   1: 69.809 ns/op
Iteration   2: 69.837 ns/op
Iteration   3: 69.795 ns/op
Iteration   4: 69.849 ns/op
Iteration   5: 70.068 ns/op


Result "org.openjdk.bench.valhalla.array.fill.InlineOpt.Ref_to_Val_as_Val_arrayfillinst":
  69.873 ±(99.9%) 0.313 ns/op [Average]
  (min, avg, max) = (69.600, 69.873, 70.852), stdev = 0.293
  CI (99.9%): [69.560, 70.185] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.InlineOpt.Ref_to_Val_as_Val_arrayfillinst
# Parameters: (size = 1000000)

# Run progress: 74.49% complete, ETA 02:28:24
# Fork: 1 of 3
# Warmup Iteration   1: 30775042.939 ns/op
# Warmup Iteration   2: 33769943.033 ns/op
# Warmup Iteration   3: 30427837.029 ns/op
Iteration   1: 32688168.000 ns/op
Iteration   2: 32341032.531 ns/op
Iteration   3: 34593147.233 ns/op
Iteration   4: 27992906.541 ns/op
Iteration   5: 30752094.697 ns/op

# Run progress: 74.51% complete, ETA 02:28:16
# Fork: 2 of 3
# Warmup Iteration   1: 29409192.857 ns/op
# Warmup Iteration   2: 22193100.543 ns/op
# Warmup Iteration   3: 31665677.063 ns/op
Iteration   1: 25640470.850 ns/op
Iteration   2: 31661052.094 ns/op
Iteration   3: 33418526.871 ns/op
Iteration   4: 36722525.321 ns/op
Iteration   5: 30458338.235 ns/op

# Run progress: 74.53% complete, ETA 02:28:07
# Fork: 3 of 3
# Warmup Iteration   1: 28514616.889 ns/op
# Warmup Iteration   2: 36550910.714 ns/op
# Warmup Iteration   3: 32903329.323 ns/op
Iteration   1: 36897247.036 ns/op
Iteration   2: 37466668.222 ns/op
Iteration   3: 33788584.700 ns/op
Iteration   4: 37006660.714 ns/op
Iteration   5: 32553048.387 ns/op


Result "org.openjdk.bench.valhalla.array.fill.InlineOpt.Ref_to_Val_as_Val_arrayfillinst":
  32932031.429 ±(99.9%) 3631962.206 ns/op [Average]
  (min, avg, max) = (25640470.850, 32932031.429, 37466668.222), stdev = 3397339.701
  CI (99.9%): [29300069.223, 36563993.635] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.InlineOpt.Ref_to_Val_as_Val_arrayfillstat
# Parameters: (size = 100)

# Run progress: 74.56% complete, ETA 02:27:58
# Fork: 1 of 3
# Warmup Iteration   1: 71.662 ns/op
# Warmup Iteration   2: 68.376 ns/op
# Warmup Iteration   3: 69.461 ns/op
Iteration   1: 69.665 ns/op
Iteration   2: 69.713 ns/op
Iteration   3: 69.779 ns/op
Iteration   4: 69.642 ns/op
Iteration   5: 69.912 ns/op

# Run progress: 74.58% complete, ETA 02:27:50
# Fork: 2 of 3
# Warmup Iteration   1: 75.394 ns/op
# Warmup Iteration   2: 68.327 ns/op
# Warmup Iteration   3: 69.618 ns/op
Iteration   1: 69.900 ns/op
Iteration   2: 69.811 ns/op
Iteration   3: 69.755 ns/op
Iteration   4: 69.847 ns/op
Iteration   5: 70.015 ns/op

# Run progress: 74.61% complete, ETA 02:27:41
# Fork: 3 of 3
# Warmup Iteration   1: 67.255 ns/op
# Warmup Iteration   2: 69.696 ns/op
# Warmup Iteration   3: 69.641 ns/op
Iteration   1: 69.909 ns/op
Iteration   2: 69.695 ns/op
Iteration   3: 69.781 ns/op
Iteration   4: 69.685 ns/op
Iteration   5: 69.697 ns/op


Result "org.openjdk.bench.valhalla.array.fill.InlineOpt.Ref_to_Val_as_Val_arrayfillstat":
  69.787 ±(99.9%) 0.117 ns/op [Average]
  (min, avg, max) = (69.642, 69.787, 70.015), stdev = 0.110
  CI (99.9%): [69.670, 69.905] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.InlineOpt.Ref_to_Val_as_Val_arrayfillstat
# Parameters: (size = 1000000)

# Run progress: 74.63% complete, ETA 02:27:33
# Fork: 1 of 3
# Warmup Iteration   1: 28870667.857 ns/op
# Warmup Iteration   2: 36439023.786 ns/op
# Warmup Iteration   3: 31395847.212 ns/op
Iteration   1: 31339172.970 ns/op
Iteration   2: 32757716.156 ns/op
Iteration   3: 36533195.379 ns/op
Iteration   4: 32668539.063 ns/op
Iteration   5: 36080448.276 ns/op

# Run progress: 74.66% complete, ETA 02:27:24
# Fork: 2 of 3
# Warmup Iteration   1: 43154161.458 ns/op
# Warmup Iteration   2: 41291240.000 ns/op
# Warmup Iteration   3: 34891290.241 ns/op
Iteration   1: 30448606.061 ns/op
Iteration   2: 34579337.500 ns/op
Iteration   3: 30734731.061 ns/op
Iteration   4: 35945015.793 ns/op
Iteration   5: 35802393.655 ns/op

# Run progress: 74.68% complete, ETA 02:27:15
# Fork: 3 of 3
# Warmup Iteration   1: 27446527.027 ns/op
# Warmup Iteration   2: 31704992.188 ns/op
# Warmup Iteration   3: 34074355.567 ns/op
Iteration   1: 34015437.500 ns/op
Iteration   2: 33855155.903 ns/op
Iteration   3: 37123293.143 ns/op
Iteration   4: 33577322.200 ns/op
Iteration   5: 41767345.000 ns/op


Result "org.openjdk.bench.valhalla.array.fill.InlineOpt.Ref_to_Val_as_Val_arrayfillstat":
  34481847.311 ±(99.9%) 3111406.717 ns/op [Average]
  (min, avg, max) = (30448606.061, 34481847.311, 41767345.000), stdev = 2910411.774
  CI (99.9%): [31370440.593, 37593254.028] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.InlineOpt.Ref_to_Val_as_Val_fillinst
# Parameters: (size = 100)

# Run progress: 74.71% complete, ETA 02:27:07
# Fork: 1 of 3
# Warmup Iteration   1: 73.707 ns/op
# Warmup Iteration   2: 73.680 ns/op
# Warmup Iteration   3: 73.660 ns/op
Iteration   1: 73.574 ns/op
Iteration   2: 73.644 ns/op
Iteration   3: 73.738 ns/op
Iteration   4: 85.526 ns/op
Iteration   5: 105.520 ns/op

# Run progress: 74.73% complete, ETA 02:26:58
# Fork: 2 of 3
# Warmup Iteration   1: 103.739 ns/op
# Warmup Iteration   2: 77.381 ns/op
# Warmup Iteration   3: 73.937 ns/op
Iteration   1: 81.230 ns/op
Iteration   2: 90.824 ns/op
Iteration   3: 83.859 ns/op
Iteration   4: 73.423 ns/op
Iteration   5: 73.529 ns/op

# Run progress: 74.75% complete, ETA 02:26:50
# Fork: 3 of 3
# Warmup Iteration   1: 80.370 ns/op
# Warmup Iteration   2: 85.838 ns/op
# Warmup Iteration   3: 86.101 ns/op
Iteration   1: 73.746 ns/op
Iteration   2: 89.994 ns/op
Iteration   3: 91.165 ns/op
Iteration   4: 77.136 ns/op
Iteration   5: 94.811 ns/op


Result "org.openjdk.bench.valhalla.array.fill.InlineOpt.Ref_to_Val_as_Val_fillinst":
  82.781 ±(99.9%) 10.678 ns/op [Average]
  (min, avg, max) = (73.423, 82.781, 105.520), stdev = 9.988
  CI (99.9%): [72.104, 93.459] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.InlineOpt.Ref_to_Val_as_Val_fillinst
# Parameters: (size = 1000000)

# Run progress: 74.78% complete, ETA 02:26:41
# Fork: 1 of 3
# Warmup Iteration   1: 38110013.393 ns/op
# Warmup Iteration   2: 31171467.182 ns/op
# Warmup Iteration   3: 31615102.875 ns/op
Iteration   1: 31221935.606 ns/op
Iteration   2: 30327986.529 ns/op
Iteration   3: 38983677.885 ns/op
Iteration   4: 51003908.762 ns/op
Iteration   5: 40801315.731 ns/op

# Run progress: 74.80% complete, ETA 02:26:33
# Fork: 2 of 3
# Warmup Iteration   1: 44760032.609 ns/op
# Warmup Iteration   2: 31691612.364 ns/op
# Warmup Iteration   3: 46726472.826 ns/op
Iteration   1: 24937857.732 ns/op
Iteration   2: 41868768.320 ns/op
Iteration   3: 46949041.682 ns/op
Iteration   4: 47843696.955 ns/op
Iteration   5: 48756555.571 ns/op

# Run progress: 74.83% complete, ETA 02:26:24
# Fork: 3 of 3
# Warmup Iteration   1: 42220225.667 ns/op
# Warmup Iteration   2: 42575199.667 ns/op
# Warmup Iteration   3: 47316560.591 ns/op
Iteration   1: 45034202.913 ns/op
Iteration   2: 37953672.852 ns/op
Iteration   3: 32616780.903 ns/op
Iteration   4: 43182250.000 ns/op
Iteration   5: 44289154.000 ns/op


Result "org.openjdk.bench.valhalla.array.fill.InlineOpt.Ref_to_Val_as_Val_fillinst":
  40384720.363 ±(99.9%) 8184524.012 ns/op [Average]
  (min, avg, max) = (24937857.732, 40384720.363, 51003908.762), stdev = 7655808.840
  CI (99.9%): [32200196.351, 48569244.375] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.InlineOpt.Ref_to_Val_as_Val_fillstat
# Parameters: (size = 100)

# Run progress: 74.85% complete, ETA 02:26:16
# Fork: 1 of 3
# Warmup Iteration   1: 154.405 ns/op
# Warmup Iteration   2: 157.662 ns/op
# Warmup Iteration   3: 154.105 ns/op
Iteration   1: 154.179 ns/op
Iteration   2: 153.676 ns/op
Iteration   3: 126.544 ns/op
Iteration   4: 74.296 ns/op
Iteration   5: 73.726 ns/op

# Run progress: 74.88% complete, ETA 02:26:07
# Fork: 2 of 3
# Warmup Iteration   1: 77.197 ns/op
# Warmup Iteration   2: 75.316 ns/op
# Warmup Iteration   3: 73.327 ns/op
Iteration   1: 74.135 ns/op
Iteration   2: 74.152 ns/op
Iteration   3: 73.471 ns/op
Iteration   4: 74.179 ns/op
Iteration   5: 73.735 ns/op

# Run progress: 74.90% complete, ETA 02:25:58
# Fork: 3 of 3
# Warmup Iteration   1: 73.802 ns/op
# Warmup Iteration   2: 73.664 ns/op
# Warmup Iteration   3: 74.324 ns/op
Iteration   1: 73.416 ns/op
Iteration   2: 73.821 ns/op
Iteration   3: 73.570 ns/op
Iteration   4: 73.598 ns/op
Iteration   5: 73.641 ns/op


Result "org.openjdk.bench.valhalla.array.fill.InlineOpt.Ref_to_Val_as_Val_fillstat":
  88.009 ±(99.9%) 32.066 ns/op [Average]
  (min, avg, max) = (73.416, 88.009, 154.179), stdev = 29.994
  CI (99.9%): [55.943, 120.075] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.InlineOpt.Ref_to_Val_as_Val_fillstat
# Parameters: (size = 1000000)

# Run progress: 74.93% complete, ETA 02:25:50
# Fork: 1 of 3
# Warmup Iteration   1: 54451217.105 ns/op
# Warmup Iteration   2: 49328621.048 ns/op
# Warmup Iteration   3: 53601011.000 ns/op
Iteration   1: 46162227.273 ns/op
Iteration   2: 47634518.955 ns/op
Iteration   3: 47806655.318 ns/op
Iteration   4: 48687630.952 ns/op
Iteration   5: 51022644.810 ns/op

# Run progress: 74.95% complete, ETA 02:25:41
# Fork: 2 of 3
# Warmup Iteration   1: 44229664.917 ns/op
# Warmup Iteration   2: 57490706.000 ns/op
# Warmup Iteration   3: 52062966.650 ns/op
Iteration   1: 41716138.360 ns/op
Iteration   2: 56960446.778 ns/op
Iteration   3: 57044888.889 ns/op
Iteration   4: 54664866.211 ns/op
Iteration   5: 54460094.316 ns/op

# Run progress: 74.98% complete, ETA 02:25:33
# Fork: 3 of 3
# Warmup Iteration   1: 44418666.652 ns/op
# Warmup Iteration   2: 52259464.600 ns/op
# Warmup Iteration   3: 48385333.318 ns/op
Iteration   1: 43848967.391 ns/op
Iteration   2: 33663812.500 ns/op
Iteration   3: 42350324.667 ns/op
Iteration   4: 57264805.556 ns/op
Iteration   5: 50341021.810 ns/op


Result "org.openjdk.bench.valhalla.array.fill.InlineOpt.Ref_to_Val_as_Val_fillstat":
  48908602.919 ±(99.9%) 7197084.426 ns/op [Average]
  (min, avg, max) = (33663812.500, 48908602.919, 57264805.556), stdev = 6732157.238
  CI (99.9%): [41711518.493, 56105687.345] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.InlineOpt.Val_to_Ref_as_Ref_arrayfillinst
# Parameters: (size = 100)

# Run progress: 75.00% complete, ETA 02:25:24
# Fork: 1 of 3
# Warmup Iteration   1: 71.577 ns/op
# Warmup Iteration   2: 80.025 ns/op
# Warmup Iteration   3: 69.962 ns/op
Iteration   1: 71.298 ns/op
Iteration   2: 70.442 ns/op
Iteration   3: 69.779 ns/op
Iteration   4: 69.686 ns/op
Iteration   5: 69.827 ns/op

# Run progress: 75.02% complete, ETA 02:25:16
# Fork: 2 of 3
# Warmup Iteration   1: 71.553 ns/op
# Warmup Iteration   2: 71.796 ns/op
# Warmup Iteration   3: 69.748 ns/op
Iteration   1: 69.734 ns/op
Iteration   2: 70.642 ns/op
Iteration   3: 70.210 ns/op
Iteration   4: 69.999 ns/op
Iteration   5: 71.248 ns/op

# Run progress: 75.05% complete, ETA 02:25:07
# Fork: 3 of 3
# Warmup Iteration   1: 71.548 ns/op
# Warmup Iteration   2: 73.498 ns/op
# Warmup Iteration   3: 70.567 ns/op
Iteration   1: 69.612 ns/op
Iteration   2: 69.568 ns/op
Iteration   3: 69.711 ns/op
Iteration   4: 70.115 ns/op
Iteration   5: 70.748 ns/op


Result "org.openjdk.bench.valhalla.array.fill.InlineOpt.Val_to_Ref_as_Ref_arrayfillinst":
  70.175 ±(99.9%) 0.618 ns/op [Average]
  (min, avg, max) = (69.568, 70.175, 71.298), stdev = 0.578
  CI (99.9%): [69.556, 70.793] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.InlineOpt.Val_to_Ref_as_Ref_arrayfillinst
# Parameters: (size = 1000000)

# Run progress: 75.07% complete, ETA 02:24:58
# Fork: 1 of 3
# Warmup Iteration   1: 52035989.600 ns/op
# Warmup Iteration   2: 58344166.667 ns/op
# Warmup Iteration   3: 56899423.611 ns/op
Iteration   1: 54423791.684 ns/op
Iteration   2: 40315523.320 ns/op
Iteration   3: 50749570.800 ns/op
Iteration   4: 50433295.850 ns/op
Iteration   5: 23374949.628 ns/op

# Run progress: 75.10% complete, ETA 02:24:50
# Fork: 2 of 3
# Warmup Iteration   1: 19128935.185 ns/op
# Warmup Iteration   2: 42366331.625 ns/op
# Warmup Iteration   3: 27481681.297 ns/op
Iteration   1: 40415386.640 ns/op
Iteration   2: 39701847.769 ns/op
Iteration   3: 56237844.944 ns/op
Iteration   4: 44378054.348 ns/op
Iteration   5: 40015014.423 ns/op

# Run progress: 75.12% complete, ETA 02:24:41
# Fork: 3 of 3
# Warmup Iteration   1: 53842394.737 ns/op
# Warmup Iteration   2: 48215517.857 ns/op
# Warmup Iteration   3: 63486341.125 ns/op
Iteration   1: 42479010.417 ns/op
Iteration   2: 53796423.263 ns/op
Iteration   3: 41002100.000 ns/op
Iteration   4: 32202059.875 ns/op
Iteration   5: 23115321.977 ns/op


Result "org.openjdk.bench.valhalla.array.fill.InlineOpt.Val_to_Ref_as_Ref_arrayfillinst":
  42176012.996 ±(99.9%) 10933751.879 ns/op [Average]
  (min, avg, max) = (23115321.977, 42176012.996, 56237844.944), stdev = 10227438.292
  CI (99.9%): [31242261.117, 53109764.875] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.InlineOpt.Val_to_Ref_as_Ref_arrayfillstat
# Parameters: (size = 100)

# Run progress: 75.15% complete, ETA 02:24:33
# Fork: 1 of 3
# Warmup Iteration   1: 71.632 ns/op
# Warmup Iteration   2: 67.984 ns/op
# Warmup Iteration   3: 69.849 ns/op
Iteration   1: 69.940 ns/op
Iteration   2: 69.825 ns/op
Iteration   3: 69.624 ns/op
Iteration   4: 70.462 ns/op
Iteration   5: 69.588 ns/op

# Run progress: 75.17% complete, ETA 02:24:24
# Fork: 2 of 3
# Warmup Iteration   1: 67.615 ns/op
# Warmup Iteration   2: 69.708 ns/op
# Warmup Iteration   3: 69.645 ns/op
Iteration   1: 69.707 ns/op
Iteration   2: 69.688 ns/op
Iteration   3: 69.772 ns/op
Iteration   4: 70.445 ns/op
Iteration   5: 69.657 ns/op

# Run progress: 75.20% complete, ETA 02:24:15
# Fork: 3 of 3
# Warmup Iteration   1: 72.614 ns/op
# Warmup Iteration   2: 68.824 ns/op
# Warmup Iteration   3: 70.301 ns/op
Iteration   1: 69.636 ns/op
Iteration   2: 69.643 ns/op
Iteration   3: 69.746 ns/op
Iteration   4: 69.700 ns/op
Iteration   5: 70.071 ns/op


Result "org.openjdk.bench.valhalla.array.fill.InlineOpt.Val_to_Ref_as_Ref_arrayfillstat":
  69.834 ±(99.9%) 0.302 ns/op [Average]
  (min, avg, max) = (69.588, 69.834, 70.462), stdev = 0.282
  CI (99.9%): [69.532, 70.135] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.InlineOpt.Val_to_Ref_as_Ref_arrayfillstat
# Parameters: (size = 1000000)

# Run progress: 75.22% complete, ETA 02:24:07
# Fork: 1 of 3
# Warmup Iteration   1: 48381740.500 ns/op
# Warmup Iteration   2: 57646664.389 ns/op
# Warmup Iteration   3: 56997590.278 ns/op
Iteration   1: 56466571.722 ns/op
Iteration   2: 56500812.500 ns/op
Iteration   3: 48028814.409 ns/op
Iteration   4: 50061299.619 ns/op
Iteration   5: 50459605.143 ns/op

# Run progress: 75.25% complete, ETA 02:23:58
# Fork: 2 of 3
# Warmup Iteration   1: 53629552.632 ns/op
# Warmup Iteration   2: 54581361.842 ns/op
# Warmup Iteration   3: 55438390.368 ns/op
Iteration   1: 56877784.722 ns/op
Iteration   2: 53246914.600 ns/op
Iteration   3: 58622171.278 ns/op
Iteration   4: 44117387.652 ns/op
Iteration   5: 53544337.684 ns/op

# Run progress: 75.27% complete, ETA 02:23:50
# Fork: 3 of 3
# Warmup Iteration   1: 50526138.905 ns/op
# Warmup Iteration   2: 47527715.909 ns/op
# Warmup Iteration   3: 50549993.750 ns/op
Iteration   1: 54434973.684 ns/op
Iteration   2: 35174686.133 ns/op
Iteration   3: 45517759.087 ns/op
Iteration   4: 42090378.500 ns/op
Iteration   5: 19861337.412 ns/op


Result "org.openjdk.bench.valhalla.array.fill.InlineOpt.Val_to_Ref_as_Ref_arrayfillstat":
  48333655.610 ±(99.9%) 10903570.059 ns/op [Average]
  (min, avg, max) = (19861337.412, 48333655.610, 58622171.278), stdev = 10199206.199
  CI (99.9%): [37430085.550, 59237225.669] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.InlineOpt.Val_to_Ref_as_Ref_fillinst
# Parameters: (size = 100)

# Run progress: 75.29% complete, ETA 02:23:41
# Fork: 1 of 3
# Warmup Iteration   1: 74.699 ns/op
# Warmup Iteration   2: 73.945 ns/op
# Warmup Iteration   3: 74.503 ns/op
Iteration   1: 74.376 ns/op
Iteration   2: 74.637 ns/op
Iteration   3: 74.991 ns/op
Iteration   4: 74.819 ns/op
Iteration   5: 74.709 ns/op

# Run progress: 75.32% complete, ETA 02:23:32
# Fork: 2 of 3
# Warmup Iteration   1: 73.474 ns/op
# Warmup Iteration   2: 73.419 ns/op
# Warmup Iteration   3: 73.017 ns/op
Iteration   1: 73.820 ns/op
Iteration   2: 73.863 ns/op
Iteration   3: 73.640 ns/op
Iteration   4: 73.318 ns/op
Iteration   5: 73.616 ns/op

# Run progress: 75.34% complete, ETA 02:23:24
# Fork: 3 of 3
# Warmup Iteration   1: 75.833 ns/op
# Warmup Iteration   2: 74.440 ns/op
# Warmup Iteration   3: 73.886 ns/op
Iteration   1: 73.782 ns/op
Iteration   2: 73.873 ns/op
Iteration   3: 74.173 ns/op
Iteration   4: 74.606 ns/op
Iteration   5: 74.394 ns/op


Result "org.openjdk.bench.valhalla.array.fill.InlineOpt.Val_to_Ref_as_Ref_fillinst":
  74.174 ±(99.9%) 0.546 ns/op [Average]
  (min, avg, max) = (73.318, 74.174, 74.991), stdev = 0.511
  CI (99.9%): [73.628, 74.721] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.InlineOpt.Val_to_Ref_as_Ref_fillinst
# Parameters: (size = 1000000)

# Run progress: 75.37% complete, ETA 02:23:15
# Fork: 1 of 3
# Warmup Iteration   1: 51053022.900 ns/op
# Warmup Iteration   2: 26441010.400 ns/op
# Warmup Iteration   3: 42617079.833 ns/op
Iteration   1: 35628882.207 ns/op
Iteration   2: 48605577.381 ns/op
Iteration   3: 50608418.750 ns/op
Iteration   4: 38239077.393 ns/op
Iteration   5: 50159504.000 ns/op

# Run progress: 75.39% complete, ETA 02:23:07
# Fork: 2 of 3
# Warmup Iteration   1: 42460793.375 ns/op
# Warmup Iteration   2: 48516420.619 ns/op
# Warmup Iteration   3: 55032131.579 ns/op
Iteration   1: 42874814.250 ns/op
Iteration   2: 33828966.667 ns/op
Iteration   3: 48085579.381 ns/op
Iteration   4: 39828030.462 ns/op
Iteration   5: 27282976.974 ns/op

# Run progress: 75.42% complete, ETA 02:22:58
# Fork: 3 of 3
# Warmup Iteration   1: 46739060.591 ns/op
# Warmup Iteration   2: 44017824.261 ns/op
# Warmup Iteration   3: 40226981.680 ns/op
Iteration   1: 29040788.086 ns/op
Iteration   2: 55867592.556 ns/op
Iteration   3: 45253574.304 ns/op
Iteration   4: 52689729.150 ns/op
Iteration   5: 44734041.696 ns/op


Result "org.openjdk.bench.valhalla.array.fill.InlineOpt.Val_to_Ref_as_Ref_fillinst":
  42848503.550 ±(99.9%) 9243813.038 ns/op [Average]
  (min, avg, max) = (27282976.974, 42848503.550, 55867592.556), stdev = 8646668.452
  CI (99.9%): [33604690.512, 52092316.588] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.InlineOpt.Val_to_Ref_as_Ref_fillstat
# Parameters: (size = 100)

# Run progress: 75.44% complete, ETA 02:22:50
# Fork: 1 of 3
# Warmup Iteration   1: 74.213 ns/op
# Warmup Iteration   2: 74.398 ns/op
# Warmup Iteration   3: 73.306 ns/op
Iteration   1: 73.882 ns/op
Iteration   2: 73.233 ns/op
Iteration   3: 74.234 ns/op
Iteration   4: 73.762 ns/op
Iteration   5: 73.539 ns/op

# Run progress: 75.47% complete, ETA 02:22:41
# Fork: 2 of 3
# Warmup Iteration   1: 74.970 ns/op
# Warmup Iteration   2: 73.577 ns/op
# Warmup Iteration   3: 73.603 ns/op
Iteration   1: 74.737 ns/op
Iteration   2: 73.623 ns/op
Iteration   3: 73.600 ns/op
Iteration   4: 73.208 ns/op
Iteration   5: 73.774 ns/op

# Run progress: 75.49% complete, ETA 02:22:32
# Fork: 3 of 3
# Warmup Iteration   1: 73.602 ns/op
# Warmup Iteration   2: 74.575 ns/op
# Warmup Iteration   3: 73.368 ns/op
Iteration   1: 73.990 ns/op
Iteration   2: 74.669 ns/op
Iteration   3: 73.878 ns/op
Iteration   4: 74.861 ns/op
Iteration   5: 73.623 ns/op


Result "org.openjdk.bench.valhalla.array.fill.InlineOpt.Val_to_Ref_as_Ref_fillstat":
  73.907 ±(99.9%) 0.547 ns/op [Average]
  (min, avg, max) = (73.208, 73.907, 74.861), stdev = 0.512
  CI (99.9%): [73.360, 74.454] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.InlineOpt.Val_to_Ref_as_Ref_fillstat
# Parameters: (size = 1000000)

# Run progress: 75.51% complete, ETA 02:22:24
# Fork: 1 of 3
# Warmup Iteration   1: 46131331.455 ns/op
# Warmup Iteration   2: 34413704.290 ns/op
# Warmup Iteration   3: 57186576.389 ns/op
Iteration   1: 53164618.421 ns/op
Iteration   2: 56414243.056 ns/op
Iteration   3: 56638194.444 ns/op
Iteration   4: 42218690.958 ns/op
Iteration   5: 29594867.857 ns/op

# Run progress: 75.54% complete, ETA 02:22:15
# Fork: 2 of 3
# Warmup Iteration   1: 22991887.956 ns/op
# Warmup Iteration   2: 32475102.875 ns/op
# Warmup Iteration   3: 29615393.382 ns/op
Iteration   1: 33753971.774 ns/op
Iteration   2: 36442258.929 ns/op
Iteration   3: 35818047.414 ns/op
Iteration   4: 27641658.784 ns/op
Iteration   5: 35690686.793 ns/op

# Run progress: 75.56% complete, ETA 02:22:06
# Fork: 3 of 3
# Warmup Iteration   1: 30916421.559 ns/op
# Warmup Iteration   2: 34058354.167 ns/op
# Warmup Iteration   3: 32753819.903 ns/op
Iteration   1: 30188882.353 ns/op
Iteration   2: 36180648.000 ns/op
Iteration   3: 35162324.724 ns/op
Iteration   4: 35031882.172 ns/op
Iteration   5: 32652701.613 ns/op


Result "org.openjdk.bench.valhalla.array.fill.InlineOpt.Val_to_Ref_as_Ref_fillstat":
  38439578.486 ±(99.9%) 10100061.998 ns/op [Average]
  (min, avg, max) = (27641658.784, 38439578.486, 56638194.444), stdev = 9447604.261
  CI (99.9%): [28339516.488, 48539640.484] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.InlineOpt.Val_to_Val_as_Val_arrayfillinst
# Parameters: (size = 100)

# Run progress: 75.59% complete, ETA 02:21:58
# Fork: 1 of 3
# Warmup Iteration   1: 71.536 ns/op
# Warmup Iteration   2: 72.937 ns/op
# Warmup Iteration   3: 69.661 ns/op
Iteration   1: 69.751 ns/op
Iteration   2: 69.836 ns/op
Iteration   3: 69.715 ns/op
Iteration   4: 69.771 ns/op
Iteration   5: 70.196 ns/op

# Run progress: 75.61% complete, ETA 02:21:49
# Fork: 2 of 3
# Warmup Iteration   1: 71.501 ns/op
# Warmup Iteration   2: 71.618 ns/op
# Warmup Iteration   3: 69.916 ns/op
Iteration   1: 69.803 ns/op
Iteration   2: 69.826 ns/op
Iteration   3: 69.553 ns/op
Iteration   4: 70.160 ns/op
Iteration   5: 69.905 ns/op

# Run progress: 75.64% complete, ETA 02:21:41
# Fork: 3 of 3
# Warmup Iteration   1: 71.647 ns/op
# Warmup Iteration   2: 70.908 ns/op
# Warmup Iteration   3: 69.498 ns/op
Iteration   1: 70.296 ns/op
Iteration   2: 70.838 ns/op
Iteration   3: 70.642 ns/op
Iteration   4: 69.751 ns/op
Iteration   5: 69.701 ns/op


Result "org.openjdk.bench.valhalla.array.fill.InlineOpt.Val_to_Val_as_Val_arrayfillinst":
  69.983 ±(99.9%) 0.395 ns/op [Average]
  (min, avg, max) = (69.553, 69.983, 70.838), stdev = 0.370
  CI (99.9%): [69.588, 70.378] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.InlineOpt.Val_to_Val_as_Val_arrayfillinst
# Parameters: (size = 1000000)

# Run progress: 75.66% complete, ETA 02:21:32
# Fork: 1 of 3
# Warmup Iteration   1: 37489007.741 ns/op
# Warmup Iteration   2: 34174709.700 ns/op
# Warmup Iteration   3: 30862530.647 ns/op
Iteration   1: 31199517.697 ns/op
Iteration   2: 35791133.621 ns/op
Iteration   3: 34782226.400 ns/op
Iteration   4: 31096118.697 ns/op
Iteration   5: 33190223.129 ns/op

# Run progress: 75.69% complete, ETA 02:21:23
# Fork: 2 of 3
# Warmup Iteration   1: 30632973.485 ns/op
# Warmup Iteration   2: 29786275.735 ns/op
# Warmup Iteration   3: 31335358.606 ns/op
Iteration   1: 29749844.057 ns/op
Iteration   2: 31595378.906 ns/op
Iteration   3: 32146570.313 ns/op
Iteration   4: 23615532.953 ns/op
Iteration   5: 32591115.906 ns/op

# Run progress: 75.71% complete, ETA 02:21:15
# Fork: 3 of 3
# Warmup Iteration   1: 13987208.904 ns/op
# Warmup Iteration   2: 31307494.813 ns/op
# Warmup Iteration   3: 29304032.143 ns/op
Iteration   1: 32919591.419 ns/op
Iteration   2: 36837866.071 ns/op
Iteration   3: 29683714.286 ns/op
Iteration   4: 35128056.034 ns/op
Iteration   5: 51317097.950 ns/op


Result "org.openjdk.bench.valhalla.array.fill.InlineOpt.Val_to_Val_as_Val_arrayfillinst":
  33442932.496 ±(99.9%) 6274139.432 ns/op [Average]
  (min, avg, max) = (23615532.953, 33442932.496, 51317097.950), stdev = 5868833.918
  CI (99.9%): [27168793.064, 39717071.928] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.InlineOpt.Val_to_Val_as_Val_arrayfillstat
# Parameters: (size = 100)

# Run progress: 75.74% complete, ETA 02:21:06
# Fork: 1 of 3
# Warmup Iteration   1: 71.657 ns/op
# Warmup Iteration   2: 67.647 ns/op
# Warmup Iteration   3: 69.630 ns/op
Iteration   1: 69.669 ns/op
Iteration   2: 69.748 ns/op
Iteration   3: 70.073 ns/op
Iteration   4: 69.652 ns/op
Iteration   5: 69.620 ns/op

# Run progress: 75.76% complete, ETA 02:20:58
# Fork: 2 of 3
# Warmup Iteration   1: 71.697 ns/op
# Warmup Iteration   2: 68.221 ns/op
# Warmup Iteration   3: 69.766 ns/op
Iteration   1: 69.708 ns/op
Iteration   2: 70.549 ns/op
Iteration   3: 69.874 ns/op
Iteration   4: 69.757 ns/op
Iteration   5: 69.665 ns/op

# Run progress: 75.78% complete, ETA 02:20:49
# Fork: 3 of 3
# Warmup Iteration   1: 72.131 ns/op
# Warmup Iteration   2: 68.079 ns/op
# Warmup Iteration   3: 69.726 ns/op
Iteration   1: 69.976 ns/op
Iteration   2: 69.738 ns/op
Iteration   3: 69.801 ns/op
Iteration   4: 69.981 ns/op
Iteration   5: 69.946 ns/op


Result "org.openjdk.bench.valhalla.array.fill.InlineOpt.Val_to_Val_as_Val_arrayfillstat":
  69.850 ±(99.9%) 0.255 ns/op [Average]
  (min, avg, max) = (69.620, 69.850, 70.549), stdev = 0.238
  CI (99.9%): [69.596, 70.105] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.InlineOpt.Val_to_Val_as_Val_arrayfillstat
# Parameters: (size = 1000000)

# Run progress: 75.81% complete, ETA 02:20:40
# Fork: 1 of 3
# Warmup Iteration   1: 29934199.735 ns/op
# Warmup Iteration   2: 26585107.897 ns/op
# Warmup Iteration   3: 28927758.343 ns/op
Iteration   1: 37945739.222 ns/op
Iteration   2: 32198192.719 ns/op
Iteration   3: 36564263.393 ns/op
Iteration   4: 50773687.500 ns/op
Iteration   5: 34691109.207 ns/op

# Run progress: 75.83% complete, ETA 02:20:32
# Fork: 2 of 3
# Warmup Iteration   1: 33023099.452 ns/op
# Warmup Iteration   2: 32182921.875 ns/op
# Warmup Iteration   3: 27186786.027 ns/op
Iteration   1: 32629151.063 ns/op
Iteration   2: 33524747.290 ns/op
Iteration   3: 30736879.882 ns/op
Iteration   4: 35709632.172 ns/op
Iteration   5: 32607386.719 ns/op

# Run progress: 75.86% complete, ETA 02:20:23
# Fork: 3 of 3
# Warmup Iteration   1: 29737762.265 ns/op
# Warmup Iteration   2: 31335702.000 ns/op
# Warmup Iteration   3: 32223589.844 ns/op
Iteration   1: 29995204.771 ns/op
Iteration   2: 34673998.600 ns/op
Iteration   3: 32506126.281 ns/op
Iteration   4: 33702571.226 ns/op
Iteration   5: 31856131.500 ns/op


Result "org.openjdk.bench.valhalla.array.fill.InlineOpt.Val_to_Val_as_Val_arrayfillstat":
  34674321.436 ±(99.9%) 5279445.165 ns/op [Average]
  (min, avg, max) = (29995204.771, 34674321.436, 50773687.500), stdev = 4938396.283
  CI (99.9%): [29394876.271, 39953766.602] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.InlineOpt.Val_to_Val_as_Val_fillinst
# Parameters: (size = 100)

# Run progress: 75.88% complete, ETA 02:20:15
# Fork: 1 of 3
# Warmup Iteration   1: 73.868 ns/op
# Warmup Iteration   2: 73.532 ns/op
# Warmup Iteration   3: 98.993 ns/op
Iteration   1: 99.008 ns/op
Iteration   2: 99.041 ns/op
Iteration   3: 99.129 ns/op
Iteration   4: 100.214 ns/op
Iteration   5: 98.998 ns/op

# Run progress: 75.91% complete, ETA 02:20:06
# Fork: 2 of 3
# Warmup Iteration   1: 73.614 ns/op
# Warmup Iteration   2: 73.398 ns/op
# Warmup Iteration   3: 74.395 ns/op
Iteration   1: 74.009 ns/op
Iteration   2: 73.778 ns/op
Iteration   3: 73.668 ns/op
Iteration   4: 73.606 ns/op
Iteration   5: 73.422 ns/op

# Run progress: 75.93% complete, ETA 02:19:58
# Fork: 3 of 3
# Warmup Iteration   1: 74.281 ns/op
# Warmup Iteration   2: 73.675 ns/op
# Warmup Iteration   3: 73.803 ns/op
Iteration   1: 73.417 ns/op
Iteration   2: 73.302 ns/op
Iteration   3: 74.036 ns/op
Iteration   4: 73.544 ns/op
Iteration   5: 73.500 ns/op


Result "org.openjdk.bench.valhalla.array.fill.InlineOpt.Val_to_Val_as_Val_fillinst":
  82.178 ±(99.9%) 13.385 ns/op [Average]
  (min, avg, max) = (73.302, 82.178, 100.214), stdev = 12.520
  CI (99.9%): [68.793, 95.563] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.InlineOpt.Val_to_Val_as_Val_fillinst
# Parameters: (size = 1000000)

# Run progress: 75.96% complete, ETA 02:19:49
# Fork: 1 of 3
# Warmup Iteration   1: 29615323.800 ns/op
# Warmup Iteration   2: 28093459.500 ns/op
# Warmup Iteration   3: 32983111.548 ns/op
Iteration   1: 30655078.273 ns/op
Iteration   2: 29638539.206 ns/op
Iteration   3: 31370387.636 ns/op
Iteration   4: 26031045.825 ns/op
Iteration   5: 27895961.730 ns/op

# Run progress: 75.98% complete, ETA 02:19:40
# Fork: 2 of 3
# Warmup Iteration   1: 29118150.000 ns/op
# Warmup Iteration   2: 27092584.459 ns/op
# Warmup Iteration   3: 32790842.742 ns/op
Iteration   1: 29247275.000 ns/op
Iteration   2: 32070170.563 ns/op
Iteration   3: 31837342.152 ns/op
Iteration   4: 32785603.484 ns/op
Iteration   5: 32693044.355 ns/op

# Run progress: 76.00% complete, ETA 02:19:32
# Fork: 3 of 3
# Warmup Iteration   1: 29964975.500 ns/op
# Warmup Iteration   2: 26747194.079 ns/op
# Warmup Iteration   3: 33328309.161 ns/op
Iteration   1: 27525676.811 ns/op
Iteration   2: 29927261.029 ns/op
Iteration   3: 33832841.667 ns/op
Iteration   4: 33216688.161 ns/op
Iteration   5: 30819507.576 ns/op


Result "org.openjdk.bench.valhalla.array.fill.InlineOpt.Val_to_Val_as_Val_fillinst":
  30636428.231 ±(99.9%) 2417973.941 ns/op [Average]
  (min, avg, max) = (26031045.825, 30636428.231, 33832841.667), stdev = 2261774.325
  CI (99.9%): [28218454.290, 33054402.173] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.InlineOpt.Val_to_Val_as_Val_fillstat
# Parameters: (size = 100)

# Run progress: 76.03% complete, ETA 02:19:23
# Fork: 1 of 3
# Warmup Iteration   1: 74.109 ns/op
# Warmup Iteration   2: 75.591 ns/op
# Warmup Iteration   3: 74.568 ns/op
Iteration   1: 73.790 ns/op
Iteration   2: 73.344 ns/op
Iteration   3: 73.668 ns/op
Iteration   4: 73.310 ns/op
Iteration   5: 73.326 ns/op

# Run progress: 76.05% complete, ETA 02:19:15
# Fork: 2 of 3
# Warmup Iteration   1: 73.939 ns/op
# Warmup Iteration   2: 73.858 ns/op
# Warmup Iteration   3: 73.416 ns/op
Iteration   1: 73.323 ns/op
Iteration   2: 73.793 ns/op
Iteration   3: 73.413 ns/op
Iteration   4: 73.420 ns/op
Iteration   5: 73.425 ns/op

# Run progress: 76.08% complete, ETA 02:19:06
# Fork: 3 of 3
# Warmup Iteration   1: 82.659 ns/op
# Warmup Iteration   2: 82.141 ns/op
# Warmup Iteration   3: 77.540 ns/op
Iteration   1: 85.213 ns/op
Iteration   2: 99.701 ns/op
Iteration   3: 100.888 ns/op
Iteration   4: 94.204 ns/op
Iteration   5: 77.064 ns/op


Result "org.openjdk.bench.valhalla.array.fill.InlineOpt.Val_to_Val_as_Val_fillstat":
  79.459 ±(99.9%) 11.002 ns/op [Average]
  (min, avg, max) = (73.310, 79.459, 100.888), stdev = 10.292
  CI (99.9%): [68.456, 90.461] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.InlineOpt.Val_to_Val_as_Val_fillstat
# Parameters: (size = 1000000)

# Run progress: 76.10% complete, ETA 02:18:57
# Fork: 1 of 3
# Warmup Iteration   1: 29298755.943 ns/op
# Warmup Iteration   2: 34933816.103 ns/op
# Warmup Iteration   3: 25937419.800 ns/op
Iteration   1: 35252395.138 ns/op
Iteration   2: 30890526.515 ns/op
Iteration   3: 32474315.094 ns/op
Iteration   4: 29557080.943 ns/op
Iteration   5: 32647822.906 ns/op

# Run progress: 76.13% complete, ETA 02:18:49
# Fork: 2 of 3
# Warmup Iteration   1: 31838272.125 ns/op
# Warmup Iteration   2: 34759487.500 ns/op
# Warmup Iteration   3: 26490751.077 ns/op
Iteration   1: 34435862.500 ns/op
Iteration   2: 28512394.667 ns/op
Iteration   3: 33432659.935 ns/op
Iteration   4: 32600635.742 ns/op
Iteration   5: 28885203.571 ns/op

# Run progress: 76.15% complete, ETA 02:18:40
# Fork: 3 of 3
# Warmup Iteration   1: 27361593.486 ns/op
# Warmup Iteration   2: 32423740.613 ns/op
# Warmup Iteration   3: 33869868.290 ns/op
Iteration   1: 30029269.057 ns/op
Iteration   2: 25777614.575 ns/op
Iteration   3: 26433597.579 ns/op
Iteration   4: 31347344.697 ns/op
Iteration   5: 32884530.903 ns/op


Result "org.openjdk.bench.valhalla.array.fill.InlineOpt.Val_to_Val_as_Val_fillstat":
  31010750.255 ±(99.9%) 2979557.239 ns/op [Average]
  (min, avg, max) = (25777614.575, 31010750.255, 35252395.138), stdev = 2787079.690
  CI (99.9%): [28031193.016, 33990307.494] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Primitive64.arrayfill
# Parameters: (size = 100)

# Run progress: 76.18% complete, ETA 02:18:32
# Fork: 1 of 3
# Warmup Iteration   1: 18.653 ns/op
# Warmup Iteration   2: 18.360 ns/op
# Warmup Iteration   3: 18.394 ns/op
Iteration   1: 18.350 ns/op
Iteration   2: 18.365 ns/op
Iteration   3: 18.336 ns/op
Iteration   4: 18.401 ns/op
Iteration   5: 18.529 ns/op

# Run progress: 76.20% complete, ETA 02:18:23
# Fork: 2 of 3
# Warmup Iteration   1: 18.498 ns/op
# Warmup Iteration   2: 18.298 ns/op
# Warmup Iteration   3: 18.579 ns/op
Iteration   1: 18.258 ns/op
Iteration   2: 18.275 ns/op
Iteration   3: 18.222 ns/op
Iteration   4: 18.274 ns/op
Iteration   5: 18.241 ns/op

# Run progress: 76.23% complete, ETA 02:18:15
# Fork: 3 of 3
# Warmup Iteration   1: 18.733 ns/op
# Warmup Iteration   2: 18.312 ns/op
# Warmup Iteration   3: 18.351 ns/op
Iteration   1: 18.416 ns/op
Iteration   2: 18.361 ns/op
Iteration   3: 18.364 ns/op
Iteration   4: 18.442 ns/op
Iteration   5: 19.042 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Primitive64.arrayfill":
  18.392 ±(99.9%) 0.212 ns/op [Average]
  (min, avg, max) = (18.222, 18.392, 19.042), stdev = 0.198
  CI (99.9%): [18.180, 18.604] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Primitive64.arrayfill
# Parameters: (size = 1000000)

# Run progress: 76.25% complete, ETA 02:18:06
# Fork: 1 of 3
# Warmup Iteration   1: 179941.683 ns/op
# Warmup Iteration   2: 212552.850 ns/op
# Warmup Iteration   3: 155331.788 ns/op
Iteration   1: 128431.929 ns/op
Iteration   2: 128012.234 ns/op
Iteration   3: 129184.714 ns/op
Iteration   4: 119029.333 ns/op
Iteration   5: 118458.104 ns/op

# Run progress: 76.27% complete, ETA 02:17:58
# Fork: 2 of 3
# Warmup Iteration   1: 146108.749 ns/op
# Warmup Iteration   2: 127840.426 ns/op
# Warmup Iteration   3: 128087.453 ns/op
Iteration   1: 118473.462 ns/op
Iteration   2: 127757.964 ns/op
Iteration   3: 128017.058 ns/op
Iteration   4: 128410.814 ns/op
Iteration   5: 119702.553 ns/op

# Run progress: 76.30% complete, ETA 02:17:49
# Fork: 3 of 3
# Warmup Iteration   1: 127735.162 ns/op
# Warmup Iteration   2: 127864.949 ns/op
# Warmup Iteration   3: 129187.460 ns/op
Iteration   1: 129315.987 ns/op
Iteration   2: 128474.582 ns/op
Iteration   3: 135171.545 ns/op
Iteration   4: 130413.057 ns/op
Iteration   5: 128507.942 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Primitive64.arrayfill":
  126490.752 ±(99.9%) 5407.879 ns/op [Average]
  (min, avg, max) = (118458.104, 126490.752, 135171.545), stdev = 5058.533
  CI (99.9%): [121082.873, 131898.631] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Primitive64.fill0
# Parameters: (size = 100)

# Run progress: 76.32% complete, ETA 02:17:41
# Fork: 1 of 3
# Warmup Iteration   1: 8.871 ns/op
# Warmup Iteration   2: 8.665 ns/op
# Warmup Iteration   3: 8.686 ns/op
Iteration   1: 8.701 ns/op
Iteration   2: 8.675 ns/op
Iteration   3: 8.664 ns/op
Iteration   4: 8.725 ns/op
Iteration   5: 8.711 ns/op

# Run progress: 76.35% complete, ETA 02:17:32
# Fork: 2 of 3
# Warmup Iteration   1: 8.796 ns/op
# Warmup Iteration   2: 8.802 ns/op
# Warmup Iteration   3: 8.801 ns/op
Iteration   1: 8.732 ns/op
Iteration   2: 8.743 ns/op
Iteration   3: 8.733 ns/op
Iteration   4: 8.744 ns/op
Iteration   5: 8.722 ns/op

# Run progress: 76.37% complete, ETA 02:17:24
# Fork: 3 of 3
# Warmup Iteration   1: 8.850 ns/op
# Warmup Iteration   2: 8.787 ns/op
# Warmup Iteration   3: 8.761 ns/op
Iteration   1: 8.741 ns/op
Iteration   2: 8.773 ns/op
Iteration   3: 8.740 ns/op
Iteration   4: 8.952 ns/op
Iteration   5: 8.878 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Primitive64.fill0":
  8.749 ±(99.9%) 0.079 ns/op [Average]
  (min, avg, max) = (8.664, 8.749, 8.952), stdev = 0.074
  CI (99.9%): [8.670, 8.828] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Primitive64.fill0
# Parameters: (size = 1000000)

# Run progress: 76.40% complete, ETA 02:17:15
# Fork: 1 of 3
# Warmup Iteration   1: 129908.881 ns/op
# Warmup Iteration   2: 129999.821 ns/op
# Warmup Iteration   3: 128343.091 ns/op
Iteration   1: 126864.015 ns/op
Iteration   2: 128897.609 ns/op
Iteration   3: 127822.529 ns/op
Iteration   4: 128116.475 ns/op
Iteration   5: 128641.310 ns/op

# Run progress: 76.42% complete, ETA 02:17:06
# Fork: 2 of 3
# Warmup Iteration   1: 129970.934 ns/op
# Warmup Iteration   2: 125637.345 ns/op
# Warmup Iteration   3: 120152.779 ns/op
Iteration   1: 127975.147 ns/op
Iteration   2: 129812.337 ns/op
Iteration   3: 128687.450 ns/op
Iteration   4: 124190.670 ns/op
Iteration   5: 129264.666 ns/op

# Run progress: 76.45% complete, ETA 02:16:58
# Fork: 3 of 3
# Warmup Iteration   1: 129076.281 ns/op
# Warmup Iteration   2: 125905.455 ns/op
# Warmup Iteration   3: 130964.562 ns/op
Iteration   1: 130046.168 ns/op
Iteration   2: 129714.000 ns/op
Iteration   3: 129922.448 ns/op
Iteration   4: 128085.803 ns/op
Iteration   5: 129471.540 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Primitive64.fill0":
  128500.811 ±(99.9%) 1607.447 ns/op [Average]
  (min, avg, max) = (124190.670, 128500.811, 130046.168), stdev = 1503.607
  CI (99.9%): [126893.364, 130108.258] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Primitive64.fill1
# Parameters: (size = 100)

# Run progress: 76.47% complete, ETA 02:16:49
# Fork: 1 of 3
# Warmup Iteration   1: 8.706 ns/op
# Warmup Iteration   2: 8.755 ns/op
# Warmup Iteration   3: 8.661 ns/op
Iteration   1: 8.749 ns/op
Iteration   2: 8.808 ns/op
Iteration   3: 8.730 ns/op
Iteration   4: 8.722 ns/op
Iteration   5: 8.705 ns/op

# Run progress: 76.50% complete, ETA 02:16:40
# Fork: 2 of 3
# Warmup Iteration   1: 8.898 ns/op
# Warmup Iteration   2: 8.881 ns/op
# Warmup Iteration   3: 9.003 ns/op
Iteration   1: 8.845 ns/op
Iteration   2: 8.856 ns/op
Iteration   3: 8.856 ns/op
Iteration   4: 8.851 ns/op
Iteration   5: 9.039 ns/op

# Run progress: 76.52% complete, ETA 02:16:32
# Fork: 3 of 3
# Warmup Iteration   1: 8.734 ns/op
# Warmup Iteration   2: 8.660 ns/op
# Warmup Iteration   3: 8.726 ns/op
Iteration   1: 8.674 ns/op
Iteration   2: 8.662 ns/op
Iteration   3: 8.684 ns/op
Iteration   4: 8.699 ns/op
Iteration   5: 8.662 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Primitive64.fill1":
  8.769 ±(99.9%) 0.112 ns/op [Average]
  (min, avg, max) = (8.662, 8.769, 9.039), stdev = 0.105
  CI (99.9%): [8.657, 8.882] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.fill.Primitive64.fill1
# Parameters: (size = 1000000)

# Run progress: 76.54% complete, ETA 02:16:23
# Fork: 1 of 3
# Warmup Iteration   1: 133565.735 ns/op
# Warmup Iteration   2: 128925.420 ns/op
# Warmup Iteration   3: 128353.577 ns/op
Iteration   1: 128342.990 ns/op
Iteration   2: 128726.052 ns/op
Iteration   3: 127997.410 ns/op
Iteration   4: 130266.461 ns/op
Iteration   5: 130452.423 ns/op

# Run progress: 76.57% complete, ETA 02:16:15
# Fork: 2 of 3
# Warmup Iteration   1: 129538.980 ns/op
# Warmup Iteration   2: 130323.662 ns/op
# Warmup Iteration   3: 128650.731 ns/op
Iteration   1: 128585.821 ns/op
Iteration   2: 128236.284 ns/op
Iteration   3: 129863.358 ns/op
Iteration   4: 127393.389 ns/op
Iteration   5: 127243.276 ns/op

# Run progress: 76.59% complete, ETA 02:16:06
# Fork: 3 of 3
# Warmup Iteration   1: 130263.661 ns/op
# Warmup Iteration   2: 129391.175 ns/op
# Warmup Iteration   3: 124485.689 ns/op
Iteration   1: 120003.960 ns/op
Iteration   2: 125571.088 ns/op
Iteration   3: 130591.203 ns/op
Iteration   4: 128288.768 ns/op
Iteration   5: 125651.910 ns/op


Result "org.openjdk.bench.valhalla.array.fill.Primitive64.fill1":
  127814.293 ±(99.9%) 2831.900 ns/op [Average]
  (min, avg, max) = (120003.960, 127814.293, 130591.203), stdev = 2648.961
  CI (99.9%): [124982.393, 130646.193] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.read.Inline128int.Val_as_Int_to_Int_read
# Parameters: (size = 100)

# Run progress: 76.62% complete, ETA 02:15:57
# Fork: 1 of 3
# Warmup Iteration   1: 0.791 ns/op
# Warmup Iteration   2: 0.775 ns/op
# Warmup Iteration   3: 0.773 ns/op
Iteration   1: 0.771 ns/op
Iteration   2: 0.772 ns/op
Iteration   3: 0.771 ns/op
Iteration   4: 0.776 ns/op
Iteration   5: 0.771 ns/op

# Run progress: 76.64% complete, ETA 02:15:49
# Fork: 2 of 3
# Warmup Iteration   1: 0.777 ns/op
# Warmup Iteration   2: 0.773 ns/op
# Warmup Iteration   3: 0.771 ns/op
Iteration   1: 0.777 ns/op
Iteration   2: 0.780 ns/op
Iteration   3: 0.772 ns/op
Iteration   4: 0.774 ns/op
Iteration   5: 0.772 ns/op

# Run progress: 76.67% complete, ETA 02:15:40
# Fork: 3 of 3
# Warmup Iteration   1: 0.776 ns/op
# Warmup Iteration   2: 0.777 ns/op
# Warmup Iteration   3: 0.775 ns/op
Iteration   1: 0.772 ns/op
Iteration   2: 0.771 ns/op
Iteration   3: 0.771 ns/op
Iteration   4: 0.771 ns/op
Iteration   5: 0.773 ns/op


Result "org.openjdk.bench.valhalla.array.read.Inline128int.Val_as_Int_to_Int_read":
  0.773 ±(99.9%) 0.003 ns/op [Average]
  (min, avg, max) = (0.771, 0.773, 0.780), stdev = 0.003
  CI (99.9%): [0.770, 0.776] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.read.Inline128int.Val_as_Int_to_Int_read
# Parameters: (size = 1000000)

# Run progress: 76.69% complete, ETA 02:15:32
# Fork: 1 of 3
# Warmup Iteration   1: 0.825 ns/op
# Warmup Iteration   2: 0.817 ns/op
# Warmup Iteration   3: 0.816 ns/op
Iteration   1: 0.817 ns/op
Iteration   2: 0.820 ns/op
Iteration   3: 0.816 ns/op
Iteration   4: 0.816 ns/op
Iteration   5: 0.818 ns/op

# Run progress: 76.72% complete, ETA 02:15:23
# Fork: 2 of 3
# Warmup Iteration   1: 0.891 ns/op
# Warmup Iteration   2: 0.773 ns/op
# Warmup Iteration   3: 0.770 ns/op
Iteration   1: 0.842 ns/op
Iteration   2: 0.923 ns/op
Iteration   3: 0.936 ns/op
Iteration   4: 0.777 ns/op
Iteration   5: 0.770 ns/op

# Run progress: 76.74% complete, ETA 02:15:14
# Fork: 3 of 3
# Warmup Iteration   1: 0.791 ns/op
# Warmup Iteration   2: 0.891 ns/op
# Warmup Iteration   3: 0.888 ns/op
Iteration   1: 0.788 ns/op
Iteration   2: 0.771 ns/op
Iteration   3: 0.907 ns/op
Iteration   4: 0.928 ns/op
Iteration   5: 0.936 ns/op


Result "org.openjdk.bench.valhalla.array.read.Inline128int.Val_as_Int_to_Int_read":
  0.844 ±(99.9%) 0.068 ns/op [Average]
  (min, avg, max) = (0.770, 0.844, 0.936), stdev = 0.063
  CI (99.9%): [0.777, 0.912] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.read.Inline128int.Val_as_Ref_to_Int_read
# Parameters: (size = 100)

# Run progress: 76.76% complete, ETA 02:15:06
# Fork: 1 of 3
# Warmup Iteration   1: 1.057 ns/op
# Warmup Iteration   2: 1.174 ns/op
# Warmup Iteration   3: 1.297 ns/op
Iteration   1: 1.081 ns/op
Iteration   2: 0.972 ns/op
Iteration   3: 0.980 ns/op
Iteration   4: 1.085 ns/op
Iteration   5: 1.010 ns/op

# Run progress: 76.79% complete, ETA 02:14:57
# Fork: 2 of 3
# Warmup Iteration   1: 0.937 ns/op
# Warmup Iteration   2: 1.020 ns/op
# Warmup Iteration   3: 1.060 ns/op
Iteration   1: 1.027 ns/op
Iteration   2: 0.928 ns/op
Iteration   3: 0.933 ns/op
Iteration   4: 1.076 ns/op
Iteration   5: 1.139 ns/op

# Run progress: 76.81% complete, ETA 02:14:49
# Fork: 3 of 3
# Warmup Iteration   1: 1.072 ns/op
# Warmup Iteration   2: 0.934 ns/op
# Warmup Iteration   3: 0.930 ns/op
Iteration   1: 0.964 ns/op
Iteration   2: 1.067 ns/op
Iteration   3: 0.958 ns/op
Iteration   4: 0.966 ns/op
Iteration   5: 1.195 ns/op


Result "org.openjdk.bench.valhalla.array.read.Inline128int.Val_as_Ref_to_Int_read":
  1.025 ±(99.9%) 0.085 ns/op [Average]
  (min, avg, max) = (0.928, 1.025, 1.195), stdev = 0.079
  CI (99.9%): [0.941, 1.110] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.read.Inline128int.Val_as_Ref_to_Int_read
# Parameters: (size = 1000000)

# Run progress: 76.84% complete, ETA 02:14:40
# Fork: 1 of 3
# Warmup Iteration   1: 1.338 ns/op
# Warmup Iteration   2: 1.265 ns/op
# Warmup Iteration   3: 1.070 ns/op
Iteration   1: 1.026 ns/op
Iteration   2: 1.056 ns/op
Iteration   3: 1.200 ns/op
Iteration   4: 0.975 ns/op
Iteration   5: 0.929 ns/op

# Run progress: 76.86% complete, ETA 02:14:31
# Fork: 2 of 3
# Warmup Iteration   1: 0.958 ns/op
# Warmup Iteration   2: 1.047 ns/op
# Warmup Iteration   3: 1.072 ns/op
Iteration   1: 0.934 ns/op
Iteration   2: 0.933 ns/op
Iteration   3: 1.609 ns/op
Iteration   4: 1.938 ns/op
Iteration   5: 1.937 ns/op

# Run progress: 76.89% complete, ETA 02:14:23
# Fork: 3 of 3
# Warmup Iteration   1: 1.978 ns/op
# Warmup Iteration   2: 1.942 ns/op
# Warmup Iteration   3: 1.937 ns/op
Iteration   1: 1.937 ns/op
Iteration   2: 1.938 ns/op
Iteration   3: 1.943 ns/op
Iteration   4: 1.939 ns/op
Iteration   5: 1.944 ns/op


Result "org.openjdk.bench.valhalla.array.read.Inline128int.Val_as_Ref_to_Int_read":
  1.482 ±(99.9%) 0.504 ns/op [Average]
  (min, avg, max) = (0.929, 1.482, 1.944), stdev = 0.472
  CI (99.9%): [0.978, 1.987] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.read.Inline128int.Val_as_Ref_to_Ref_read
# Parameters: (size = 100)

# Run progress: 76.91% complete, ETA 02:14:14
# Fork: 1 of 3
# Warmup Iteration   1: 1.972 ns/op
# Warmup Iteration   2: 1.946 ns/op
# Warmup Iteration   3: 1.936 ns/op
Iteration   1: 1.947 ns/op
Iteration   2: 1.938 ns/op
Iteration   3: 1.937 ns/op
Iteration   4: 1.938 ns/op
Iteration   5: 2.039 ns/op

# Run progress: 76.94% complete, ETA 02:14:06
# Fork: 2 of 3
# Warmup Iteration   1: 0.942 ns/op
# Warmup Iteration   2: 1.185 ns/op
# Warmup Iteration   3: 1.091 ns/op
Iteration   1: 0.928 ns/op
Iteration   2: 0.927 ns/op
Iteration   3: 0.929 ns/op
Iteration   4: 0.929 ns/op
Iteration   5: 0.928 ns/op

# Run progress: 76.96% complete, ETA 02:13:58
# Fork: 3 of 3
# Warmup Iteration   1: 0.935 ns/op
# Warmup Iteration   2: 0.931 ns/op
# Warmup Iteration   3: 0.928 ns/op
Iteration   1: 0.938 ns/op
Iteration   2: 0.928 ns/op
Iteration   3: 0.929 ns/op
Iteration   4: 0.929 ns/op
Iteration   5: 0.929 ns/op


Result "org.openjdk.bench.valhalla.array.read.Inline128int.Val_as_Ref_to_Ref_read":
  1.273 ±(99.9%) 0.538 ns/op [Average]
  (min, avg, max) = (0.927, 1.273, 2.039), stdev = 0.503
  CI (99.9%): [0.735, 1.811] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.read.Inline128int.Val_as_Ref_to_Ref_read
# Parameters: (size = 1000000)

# Run progress: 76.99% complete, ETA 02:13:49
# Fork: 1 of 3
# Warmup Iteration   1: 0.944 ns/op
# Warmup Iteration   2: 0.933 ns/op
# Warmup Iteration   3: 0.930 ns/op
Iteration   1: 0.930 ns/op
Iteration   2: 0.929 ns/op
Iteration   3: 0.941 ns/op
Iteration   4: 0.932 ns/op
Iteration   5: 0.929 ns/op

# Run progress: 77.01% complete, ETA 02:13:41
# Fork: 2 of 3
# Warmup Iteration   1: 0.944 ns/op
# Warmup Iteration   2: 0.932 ns/op
# Warmup Iteration   3: 0.932 ns/op
Iteration   1: 0.931 ns/op
Iteration   2: 0.933 ns/op
Iteration   3: 0.929 ns/op
Iteration   4: 0.930 ns/op
Iteration   5: 0.929 ns/op

# Run progress: 77.03% complete, ETA 02:13:32
# Fork: 3 of 3
# Warmup Iteration   1: 0.945 ns/op
# Warmup Iteration   2: 0.930 ns/op
# Warmup Iteration   3: 0.929 ns/op
Iteration   1: 0.931 ns/op
Iteration   2: 0.930 ns/op
Iteration   3: 0.939 ns/op
Iteration   4: 0.935 ns/op
Iteration   5: 0.930 ns/op


Result "org.openjdk.bench.valhalla.array.read.Inline128int.Val_as_Ref_to_Ref_read":
  0.932 ±(99.9%) 0.004 ns/op [Average]
  (min, avg, max) = (0.929, 0.932, 0.941), stdev = 0.004
  CI (99.9%): [0.928, 0.936] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.read.Inline128int.Val_as_Ref_to_Val_read
# Parameters: (size = 100)

# Run progress: 77.06% complete, ETA 02:13:24
# Fork: 1 of 3
# Warmup Iteration   1: 0.939 ns/op
# Warmup Iteration   2: 0.932 ns/op
# Warmup Iteration   3: 0.930 ns/op
Iteration   1: 0.933 ns/op
Iteration   2: 0.929 ns/op
Iteration   3: 0.928 ns/op
Iteration   4: 0.929 ns/op
Iteration   5: 0.931 ns/op

# Run progress: 77.08% complete, ETA 02:13:15
# Fork: 2 of 3
# Warmup Iteration   1: 0.936 ns/op
# Warmup Iteration   2: 0.936 ns/op
# Warmup Iteration   3: 0.928 ns/op
Iteration   1: 0.928 ns/op
Iteration   2: 0.928 ns/op
Iteration   3: 0.930 ns/op
Iteration   4: 0.935 ns/op
Iteration   5: 0.930 ns/op

# Run progress: 77.11% complete, ETA 02:13:06
# Fork: 3 of 3
# Warmup Iteration   1: 0.936 ns/op
# Warmup Iteration   2: 0.931 ns/op
# Warmup Iteration   3: 0.930 ns/op
Iteration   1: 0.950 ns/op
Iteration   2: 0.928 ns/op
Iteration   3: 0.941 ns/op
Iteration   4: 0.933 ns/op
Iteration   5: 0.929 ns/op


Result "org.openjdk.bench.valhalla.array.read.Inline128int.Val_as_Ref_to_Val_read":
  0.932 ±(99.9%) 0.007 ns/op [Average]
  (min, avg, max) = (0.928, 0.932, 0.950), stdev = 0.006
  CI (99.9%): [0.926, 0.939] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.read.Inline128int.Val_as_Ref_to_Val_read
# Parameters: (size = 1000000)

# Run progress: 77.13% complete, ETA 02:12:58
# Fork: 1 of 3
# Warmup Iteration   1: 0.946 ns/op
# Warmup Iteration   2: 0.932 ns/op
# Warmup Iteration   3: 0.931 ns/op
Iteration   1: 0.931 ns/op
Iteration   2: 0.941 ns/op
Iteration   3: 0.930 ns/op
Iteration   4: 0.935 ns/op
Iteration   5: 0.929 ns/op

# Run progress: 77.16% complete, ETA 02:12:49
# Fork: 2 of 3
# Warmup Iteration   1: 0.942 ns/op
# Warmup Iteration   2: 0.932 ns/op
# Warmup Iteration   3: 0.929 ns/op
Iteration   1: 0.929 ns/op
Iteration   2: 0.930 ns/op
Iteration   3: 0.930 ns/op
Iteration   4: 0.935 ns/op
Iteration   5: 0.955 ns/op

# Run progress: 77.18% complete, ETA 02:12:41
# Fork: 3 of 3
# Warmup Iteration   1: 0.946 ns/op
# Warmup Iteration   2: 0.938 ns/op
# Warmup Iteration   3: 0.941 ns/op
Iteration   1: 0.939 ns/op
Iteration   2: 0.930 ns/op
Iteration   3: 0.929 ns/op
Iteration   4: 0.930 ns/op
Iteration   5: 0.929 ns/op


Result "org.openjdk.bench.valhalla.array.read.Inline128int.Val_as_Ref_to_Val_read":
  0.934 ±(99.9%) 0.008 ns/op [Average]
  (min, avg, max) = (0.929, 0.934, 0.955), stdev = 0.007
  CI (99.9%): [0.926, 0.941] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.read.Inline128int.Val_as_Val_to_Int_read
# Parameters: (size = 100)

# Run progress: 77.21% complete, ETA 02:12:32
# Fork: 1 of 3
# Warmup Iteration   1: 0.934 ns/op
# Warmup Iteration   2: 0.931 ns/op
# Warmup Iteration   3: 0.928 ns/op
Iteration   1: 0.929 ns/op
Iteration   2: 0.929 ns/op
Iteration   3: 0.928 ns/op
Iteration   4: 0.927 ns/op
Iteration   5: 0.929 ns/op

# Run progress: 77.23% complete, ETA 02:12:23
# Fork: 2 of 3
# Warmup Iteration   1: 0.938 ns/op
# Warmup Iteration   2: 0.932 ns/op
# Warmup Iteration   3: 0.929 ns/op
Iteration   1: 0.929 ns/op
Iteration   2: 0.927 ns/op
Iteration   3: 0.949 ns/op
Iteration   4: 0.928 ns/op
Iteration   5: 0.930 ns/op

# Run progress: 77.25% complete, ETA 02:12:15
# Fork: 3 of 3
# Warmup Iteration   1: 0.933 ns/op
# Warmup Iteration   2: 0.930 ns/op
# Warmup Iteration   3: 0.927 ns/op
Iteration   1: 0.926 ns/op
Iteration   2: 0.927 ns/op
Iteration   3: 0.927 ns/op
Iteration   4: 0.932 ns/op
Iteration   5: 0.926 ns/op


Result "org.openjdk.bench.valhalla.array.read.Inline128int.Val_as_Val_to_Int_read":
  0.930 ±(99.9%) 0.006 ns/op [Average]
  (min, avg, max) = (0.926, 0.930, 0.949), stdev = 0.006
  CI (99.9%): [0.924, 0.936] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.read.Inline128int.Val_as_Val_to_Int_read
# Parameters: (size = 1000000)

# Run progress: 77.28% complete, ETA 02:12:06
# Fork: 1 of 3
# Warmup Iteration   1: 0.959 ns/op
# Warmup Iteration   2: 0.953 ns/op
# Warmup Iteration   3: 0.953 ns/op
Iteration   1: 0.953 ns/op
Iteration   2: 0.952 ns/op
Iteration   3: 0.951 ns/op
Iteration   4: 0.951 ns/op
Iteration   5: 0.952 ns/op

# Run progress: 77.30% complete, ETA 02:11:58
# Fork: 2 of 3
# Warmup Iteration   1: 0.952 ns/op
# Warmup Iteration   2: 0.951 ns/op
# Warmup Iteration   3: 0.931 ns/op
Iteration   1: 1.027 ns/op
Iteration   2: 1.094 ns/op
Iteration   3: 1.153 ns/op
Iteration   4: 1.001 ns/op
Iteration   5: 0.942 ns/op

# Run progress: 77.33% complete, ETA 02:11:49
# Fork: 3 of 3
# Warmup Iteration   1: 0.945 ns/op
# Warmup Iteration   2: 0.932 ns/op
# Warmup Iteration   3: 0.934 ns/op
Iteration   1: 0.935 ns/op
Iteration   2: 0.930 ns/op
Iteration   3: 0.929 ns/op
Iteration   4: 0.939 ns/op
Iteration   5: 0.929 ns/op


Result "org.openjdk.bench.valhalla.array.read.Inline128int.Val_as_Val_to_Int_read":
  0.976 ±(99.9%) 0.071 ns/op [Average]
  (min, avg, max) = (0.929, 0.976, 1.153), stdev = 0.067
  CI (99.9%): [0.905, 1.047] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.read.Inline128int.Val_as_Val_to_Ref_read
# Parameters: (size = 100)

# Run progress: 77.35% complete, ETA 02:11:40
# Fork: 1 of 3
# Warmup Iteration   1: 0.938 ns/op
# Warmup Iteration   2: 0.933 ns/op
# Warmup Iteration   3: 0.928 ns/op
Iteration   1: 0.928 ns/op
Iteration   2: 0.930 ns/op
Iteration   3: 0.935 ns/op
Iteration   4: 1.089 ns/op
Iteration   5: 1.143 ns/op

# Run progress: 77.38% complete, ETA 02:11:32
# Fork: 2 of 3
# Warmup Iteration   1: 1.150 ns/op
# Warmup Iteration   2: 1.147 ns/op
# Warmup Iteration   3: 1.160 ns/op
Iteration   1: 1.054 ns/op
Iteration   2: 0.928 ns/op
Iteration   3: 0.927 ns/op
Iteration   4: 0.932 ns/op
Iteration   5: 0.940 ns/op

# Run progress: 77.40% complete, ETA 02:11:23
# Fork: 3 of 3
# Warmup Iteration   1: 0.935 ns/op
# Warmup Iteration   2: 0.933 ns/op
# Warmup Iteration   3: 0.986 ns/op
Iteration   1: 1.132 ns/op
Iteration   2: 1.213 ns/op
Iteration   3: 1.009 ns/op
Iteration   4: 0.928 ns/op
Iteration   5: 0.973 ns/op


Result "org.openjdk.bench.valhalla.array.read.Inline128int.Val_as_Val_to_Ref_read":
  1.004 ±(99.9%) 0.104 ns/op [Average]
  (min, avg, max) = (0.927, 1.004, 1.213), stdev = 0.097
  CI (99.9%): [0.900, 1.108] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.read.Inline128int.Val_as_Val_to_Ref_read
# Parameters: (size = 1000000)

# Run progress: 77.43% complete, ETA 02:11:15
# Fork: 1 of 3
# Warmup Iteration   1: 1.095 ns/op
# Warmup Iteration   2: 0.974 ns/op
# Warmup Iteration   3: 0.929 ns/op
Iteration   1: 1.003 ns/op
Iteration   2: 1.114 ns/op
Iteration   3: 1.185 ns/op
Iteration   4: 1.086 ns/op
Iteration   5: 1.141 ns/op

# Run progress: 77.45% complete, ETA 02:11:06
# Fork: 2 of 3
# Warmup Iteration   1: 1.183 ns/op
# Warmup Iteration   2: 1.181 ns/op
# Warmup Iteration   3: 1.057 ns/op
Iteration   1: 0.942 ns/op
Iteration   2: 1.102 ns/op
Iteration   3: 1.147 ns/op
Iteration   4: 1.085 ns/op
Iteration   5: 0.936 ns/op

# Run progress: 77.48% complete, ETA 02:10:57
# Fork: 3 of 3
# Warmup Iteration   1: 0.952 ns/op
# Warmup Iteration   2: 1.057 ns/op
# Warmup Iteration   3: 1.093 ns/op
Iteration   1: 0.943 ns/op
Iteration   2: 0.936 ns/op
Iteration   3: 1.153 ns/op
Iteration   4: 1.353 ns/op
Iteration   5: 1.350 ns/op


Result "org.openjdk.bench.valhalla.array.read.Inline128int.Val_as_Val_to_Ref_read":
  1.098 ±(99.9%) 0.144 ns/op [Average]
  (min, avg, max) = (0.936, 1.098, 1.353), stdev = 0.135
  CI (99.9%): [0.955, 1.242] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.read.Inline128int.Val_as_Val_to_Val_read
# Parameters: (size = 100)

# Run progress: 77.50% complete, ETA 02:10:49
# Fork: 1 of 3
# Warmup Iteration   1: 0.984 ns/op
# Warmup Iteration   2: 0.932 ns/op
# Warmup Iteration   3: 0.996 ns/op
Iteration   1: 1.113 ns/op
Iteration   2: 1.128 ns/op
Iteration   3: 0.985 ns/op
Iteration   4: 1.138 ns/op
Iteration   5: 1.264 ns/op

# Run progress: 77.52% complete, ETA 02:10:40
# Fork: 2 of 3
# Warmup Iteration   1: 1.300 ns/op
# Warmup Iteration   2: 1.288 ns/op
# Warmup Iteration   3: 1.127 ns/op
Iteration   1: 1.124 ns/op
Iteration   2: 2.000 ns/op
Iteration   3: 1.938 ns/op
Iteration   4: 1.933 ns/op
Iteration   5: 1.936 ns/op

# Run progress: 77.55% complete, ETA 02:10:32
# Fork: 3 of 3
# Warmup Iteration   1: 1.963 ns/op
# Warmup Iteration   2: 1.945 ns/op
# Warmup Iteration   3: 1.933 ns/op
Iteration   1: 1.935 ns/op
Iteration   2: 1.936 ns/op
Iteration   3: 1.935 ns/op
Iteration   4: 1.933 ns/op
Iteration   5: 1.940 ns/op


Result "org.openjdk.bench.valhalla.array.read.Inline128int.Val_as_Val_to_Val_read":
  1.616 ±(99.9%) 0.447 ns/op [Average]
  (min, avg, max) = (0.985, 1.616, 2.000), stdev = 0.418
  CI (99.9%): [1.169, 2.063] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.read.Inline128int.Val_as_Val_to_Val_read
# Parameters: (size = 1000000)

# Run progress: 77.57% complete, ETA 02:10:23
# Fork: 1 of 3
# Warmup Iteration   1: 1.996 ns/op
# Warmup Iteration   2: 1.949 ns/op
# Warmup Iteration   3: 1.938 ns/op
Iteration   1: 1.945 ns/op
Iteration   2: 1.939 ns/op
Iteration   3: 1.946 ns/op
Iteration   4: 1.941 ns/op
Iteration   5: 1.941 ns/op

# Run progress: 77.60% complete, ETA 02:10:15
# Fork: 2 of 3
# Warmup Iteration   1: 0.993 ns/op
# Warmup Iteration   2: 0.934 ns/op
# Warmup Iteration   3: 1.003 ns/op
Iteration   1: 0.929 ns/op
Iteration   2: 0.942 ns/op
Iteration   3: 0.936 ns/op
Iteration   4: 0.930 ns/op
Iteration   5: 0.928 ns/op

# Run progress: 77.62% complete, ETA 02:10:06
# Fork: 3 of 3
# Warmup Iteration   1: 0.941 ns/op
# Warmup Iteration   2: 0.931 ns/op
# Warmup Iteration   3: 0.928 ns/op
Iteration   1: 0.929 ns/op
Iteration   2: 0.947 ns/op
Iteration   3: 0.943 ns/op
Iteration   4: 0.934 ns/op
Iteration   5: 0.928 ns/op


Result "org.openjdk.bench.valhalla.array.read.Inline128int.Val_as_Val_to_Val_read":
  1.270 ±(99.9%) 0.526 ns/op [Average]
  (min, avg, max) = (0.928, 1.270, 1.946), stdev = 0.492
  CI (99.9%): [0.745, 1.796] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.read.Inline32int.Val_as_Int_to_Int_read
# Parameters: (size = 100)

# Run progress: 77.65% complete, ETA 02:09:58
# Fork: 1 of 3
# Warmup Iteration   1: 0.787 ns/op
# Warmup Iteration   2: 0.772 ns/op
# Warmup Iteration   3: 0.770 ns/op
Iteration   1: 0.776 ns/op
Iteration   2: 0.780 ns/op
Iteration   3: 0.776 ns/op
Iteration   4: 0.772 ns/op
Iteration   5: 0.796 ns/op

# Run progress: 77.67% complete, ETA 02:09:49
# Fork: 2 of 3
# Warmup Iteration   1: 0.775 ns/op
# Warmup Iteration   2: 0.772 ns/op
# Warmup Iteration   3: 0.787 ns/op
Iteration   1: 0.770 ns/op
Iteration   2: 0.770 ns/op
Iteration   3: 0.771 ns/op
Iteration   4: 0.783 ns/op
Iteration   5: 0.772 ns/op

# Run progress: 77.70% complete, ETA 02:09:41
# Fork: 3 of 3
# Warmup Iteration   1: 0.783 ns/op
# Warmup Iteration   2: 0.775 ns/op
# Warmup Iteration   3: 0.770 ns/op
Iteration   1: 0.771 ns/op
Iteration   2: 0.775 ns/op
Iteration   3: 0.778 ns/op
Iteration   4: 0.779 ns/op
Iteration   5: 0.785 ns/op


Result "org.openjdk.bench.valhalla.array.read.Inline32int.Val_as_Int_to_Int_read":
  0.777 ±(99.9%) 0.008 ns/op [Average]
  (min, avg, max) = (0.770, 0.777, 0.796), stdev = 0.007
  CI (99.9%): [0.770, 0.785] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.read.Inline32int.Val_as_Int_to_Int_read
# Parameters: (size = 1000000)

# Run progress: 77.72% complete, ETA 02:09:32
# Fork: 1 of 3
# Warmup Iteration   1: 0.787 ns/op
# Warmup Iteration   2: 0.777 ns/op
# Warmup Iteration   3: 0.774 ns/op
Iteration   1: 0.893 ns/op
Iteration   2: 0.778 ns/op
Iteration   3: 0.770 ns/op
Iteration   4: 0.770 ns/op
Iteration   5: 0.772 ns/op

# Run progress: 77.75% complete, ETA 02:09:23
# Fork: 2 of 3
# Warmup Iteration   1: 0.778 ns/op
# Warmup Iteration   2: 0.780 ns/op
# Warmup Iteration   3: 0.784 ns/op
Iteration   1: 0.771 ns/op
Iteration   2: 0.770 ns/op
Iteration   3: 0.771 ns/op
Iteration   4: 0.775 ns/op
Iteration   5: 0.771 ns/op

# Run progress: 77.77% complete, ETA 02:09:15
# Fork: 3 of 3
# Warmup Iteration   1: 0.777 ns/op
# Warmup Iteration   2: 0.773 ns/op
# Warmup Iteration   3: 0.771 ns/op
Iteration   1: 0.795 ns/op
Iteration   2: 0.779 ns/op
Iteration   3: 0.788 ns/op
Iteration   4: 0.777 ns/op
Iteration   5: 0.773 ns/op


Result "org.openjdk.bench.valhalla.array.read.Inline32int.Val_as_Int_to_Int_read":
  0.784 ±(99.9%) 0.033 ns/op [Average]
  (min, avg, max) = (0.770, 0.784, 0.893), stdev = 0.031
  CI (99.9%): [0.750, 0.817] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.read.Inline32int.Val_as_Ref_to_Int_read
# Parameters: (size = 100)

# Run progress: 77.79% complete, ETA 02:09:06
# Fork: 1 of 3
# Warmup Iteration   1: 0.775 ns/op
# Warmup Iteration   2: 0.772 ns/op
# Warmup Iteration   3: 0.770 ns/op
Iteration   1: 0.771 ns/op
Iteration   2: 0.772 ns/op
Iteration   3: 0.790 ns/op
Iteration   4: 0.772 ns/op
Iteration   5: 0.771 ns/op

# Run progress: 77.82% complete, ETA 02:08:58
# Fork: 2 of 3
# Warmup Iteration   1: 0.781 ns/op
# Warmup Iteration   2: 0.777 ns/op
# Warmup Iteration   3: 0.770 ns/op
Iteration   1: 0.771 ns/op
Iteration   2: 0.771 ns/op
Iteration   3: 0.777 ns/op
Iteration   4: 0.773 ns/op
Iteration   5: 0.772 ns/op

# Run progress: 77.84% complete, ETA 02:08:49
# Fork: 3 of 3
# Warmup Iteration   1: 0.787 ns/op
# Warmup Iteration   2: 0.781 ns/op
# Warmup Iteration   3: 0.771 ns/op
Iteration   1: 0.770 ns/op
Iteration   2: 0.770 ns/op
Iteration   3: 0.771 ns/op
Iteration   4: 0.770 ns/op
Iteration   5: 0.775 ns/op


Result "org.openjdk.bench.valhalla.array.read.Inline32int.Val_as_Ref_to_Int_read":
  0.773 ±(99.9%) 0.005 ns/op [Average]
  (min, avg, max) = (0.770, 0.773, 0.790), stdev = 0.005
  CI (99.9%): [0.768, 0.779] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.read.Inline32int.Val_as_Ref_to_Int_read
# Parameters: (size = 1000000)

# Run progress: 77.87% complete, ETA 02:08:40
# Fork: 1 of 3
# Warmup Iteration   1: 0.807 ns/op
# Warmup Iteration   2: 0.800 ns/op
# Warmup Iteration   3: 0.794 ns/op
Iteration   1: 0.774 ns/op
Iteration   2: 0.770 ns/op
Iteration   3: 0.775 ns/op
Iteration   4: 0.777 ns/op
Iteration   5: 0.770 ns/op

# Run progress: 77.89% complete, ETA 02:08:32
# Fork: 2 of 3
# Warmup Iteration   1: 0.782 ns/op
# Warmup Iteration   2: 0.769 ns/op
# Warmup Iteration   3: 0.780 ns/op
Iteration   1: 0.772 ns/op
Iteration   2: 0.774 ns/op
Iteration   3: 0.771 ns/op
Iteration   4: 0.791 ns/op
Iteration   5: 0.795 ns/op

# Run progress: 77.92% complete, ETA 02:08:24
# Fork: 3 of 3
# Warmup Iteration   1: 0.779 ns/op
# Warmup Iteration   2: 0.792 ns/op
# Warmup Iteration   3: 0.771 ns/op
Iteration   1: 0.770 ns/op
Iteration   2: 0.773 ns/op
Iteration   3: 0.777 ns/op
Iteration   4: 0.777 ns/op
Iteration   5: 0.822 ns/op


Result "org.openjdk.bench.valhalla.array.read.Inline32int.Val_as_Ref_to_Int_read":
  0.779 ±(99.9%) 0.015 ns/op [Average]
  (min, avg, max) = (0.770, 0.779, 0.822), stdev = 0.014
  CI (99.9%): [0.764, 0.794] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.read.Inline32int.Val_as_Ref_to_Ref_read
# Parameters: (size = 100)

# Run progress: 77.94% complete, ETA 02:08:15
# Fork: 1 of 3
# Warmup Iteration   1: 0.791 ns/op
# Warmup Iteration   2: 0.804 ns/op
# Warmup Iteration   3: 0.792 ns/op
Iteration   1: 0.776 ns/op
Iteration   2: 0.770 ns/op
Iteration   3: 0.778 ns/op
Iteration   4: 0.771 ns/op
Iteration   5: 0.776 ns/op

# Run progress: 77.97% complete, ETA 02:08:07
# Fork: 2 of 3
# Warmup Iteration   1: 0.865 ns/op
# Warmup Iteration   2: 0.874 ns/op
# Warmup Iteration   3: 0.862 ns/op
Iteration   1: 0.867 ns/op
Iteration   2: 0.871 ns/op
Iteration   3: 0.870 ns/op
Iteration   4: 0.862 ns/op
Iteration   5: 0.860 ns/op

# Run progress: 77.99% complete, ETA 02:07:58
# Fork: 3 of 3
# Warmup Iteration   1: 0.790 ns/op
# Warmup Iteration   2: 0.781 ns/op
# Warmup Iteration   3: 0.771 ns/op
Iteration   1: 0.773 ns/op
Iteration   2: 0.771 ns/op
Iteration   3: 0.784 ns/op
Iteration   4: 0.772 ns/op
Iteration   5: 0.786 ns/op


Result "org.openjdk.bench.valhalla.array.read.Inline32int.Val_as_Ref_to_Ref_read":
  0.806 ±(99.9%) 0.047 ns/op [Average]
  (min, avg, max) = (0.770, 0.806, 0.871), stdev = 0.044
  CI (99.9%): [0.758, 0.853] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.read.Inline32int.Val_as_Ref_to_Ref_read
# Parameters: (size = 1000000)

# Run progress: 78.01% complete, ETA 02:07:49
# Fork: 1 of 3
# Warmup Iteration   1: 0.780 ns/op
# Warmup Iteration   2: 0.802 ns/op
# Warmup Iteration   3: 0.770 ns/op
Iteration   1: 0.775 ns/op
Iteration   2: 0.775 ns/op
Iteration   3: 0.777 ns/op
Iteration   4: 0.770 ns/op
Iteration   5: 0.770 ns/op

# Run progress: 78.04% complete, ETA 02:07:41
# Fork: 2 of 3
# Warmup Iteration   1: 0.782 ns/op
# Warmup Iteration   2: 0.775 ns/op
# Warmup Iteration   3: 0.773 ns/op
Iteration   1: 0.771 ns/op
Iteration   2: 0.775 ns/op
Iteration   3: 0.771 ns/op
Iteration   4: 0.769 ns/op
Iteration   5: 0.769 ns/op

# Run progress: 78.06% complete, ETA 02:07:32
# Fork: 3 of 3
# Warmup Iteration   1: 0.783 ns/op
# Warmup Iteration   2: 0.774 ns/op
# Warmup Iteration   3: 0.777 ns/op
Iteration   1: 0.775 ns/op
Iteration   2: 0.771 ns/op
Iteration   3: 0.772 ns/op
Iteration   4: 0.771 ns/op
Iteration   5: 0.771 ns/op


Result "org.openjdk.bench.valhalla.array.read.Inline32int.Val_as_Ref_to_Ref_read":
  0.772 ±(99.9%) 0.003 ns/op [Average]
  (min, avg, max) = (0.769, 0.772, 0.777), stdev = 0.003
  CI (99.9%): [0.769, 0.775] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.read.Inline32int.Val_as_Ref_to_Val_read
# Parameters: (size = 100)

# Run progress: 78.09% complete, ETA 02:07:24
# Fork: 1 of 3
# Warmup Iteration   1: 0.776 ns/op
# Warmup Iteration   2: 0.779 ns/op
# Warmup Iteration   3: 0.774 ns/op
Iteration   1: 0.773 ns/op
Iteration   2: 0.771 ns/op
Iteration   3: 0.771 ns/op
Iteration   4: 0.771 ns/op
Iteration   5: 0.771 ns/op

# Run progress: 78.11% complete, ETA 02:07:15
# Fork: 2 of 3
# Warmup Iteration   1: 0.777 ns/op
# Warmup Iteration   2: 0.772 ns/op
# Warmup Iteration   3: 0.771 ns/op
Iteration   1: 0.773 ns/op
Iteration   2: 0.771 ns/op
Iteration   3: 0.771 ns/op
Iteration   4: 0.771 ns/op
Iteration   5: 0.772 ns/op

# Run progress: 78.14% complete, ETA 02:07:06
# Fork: 3 of 3
# Warmup Iteration   1: 0.787 ns/op
# Warmup Iteration   2: 0.817 ns/op
# Warmup Iteration   3: 0.771 ns/op
Iteration   1: 0.799 ns/op
Iteration   2: 0.771 ns/op
Iteration   3: 0.772 ns/op
Iteration   4: 0.774 ns/op
Iteration   5: 0.771 ns/op


Result "org.openjdk.bench.valhalla.array.read.Inline32int.Val_as_Ref_to_Val_read":
  0.774 ±(99.9%) 0.008 ns/op [Average]
  (min, avg, max) = (0.771, 0.774, 0.799), stdev = 0.007
  CI (99.9%): [0.766, 0.781] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.read.Inline32int.Val_as_Ref_to_Val_read
# Parameters: (size = 1000000)

# Run progress: 78.16% complete, ETA 02:06:58
# Fork: 1 of 3
# Warmup Iteration   1: 0.780 ns/op
# Warmup Iteration   2: 0.777 ns/op
# Warmup Iteration   3: 0.780 ns/op
Iteration   1: 0.773 ns/op
Iteration   2: 0.771 ns/op
Iteration   3: 0.772 ns/op
Iteration   4: 0.771 ns/op
Iteration   5: 0.771 ns/op

# Run progress: 78.19% complete, ETA 02:06:49
# Fork: 2 of 3
# Warmup Iteration   1: 0.780 ns/op
# Warmup Iteration   2: 0.777 ns/op
# Warmup Iteration   3: 0.772 ns/op
Iteration   1: 0.772 ns/op
Iteration   2: 0.775 ns/op
Iteration   3: 0.789 ns/op
Iteration   4: 0.818 ns/op
Iteration   5: 0.771 ns/op

# Run progress: 78.21% complete, ETA 02:06:40
# Fork: 3 of 3
# Warmup Iteration   1: 0.781 ns/op
# Warmup Iteration   2: 0.794 ns/op
# Warmup Iteration   3: 0.771 ns/op
Iteration   1: 0.772 ns/op
Iteration   2: 0.771 ns/op
Iteration   3: 0.778 ns/op
Iteration   4: 0.772 ns/op
Iteration   5: 0.771 ns/op


Result "org.openjdk.bench.valhalla.array.read.Inline32int.Val_as_Ref_to_Val_read":
  0.776 ±(99.9%) 0.013 ns/op [Average]
  (min, avg, max) = (0.771, 0.776, 0.818), stdev = 0.012
  CI (99.9%): [0.763, 0.790] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.read.Inline32int.Val_as_Val_to_Int_read
# Parameters: (size = 100)

# Run progress: 78.24% complete, ETA 02:06:32
# Fork: 1 of 3
# Warmup Iteration   1: 0.776 ns/op
# Warmup Iteration   2: 0.774 ns/op
# Warmup Iteration   3: 0.771 ns/op
Iteration   1: 0.777 ns/op
Iteration   2: 0.771 ns/op
Iteration   3: 0.771 ns/op
Iteration   4: 0.771 ns/op
Iteration   5: 0.772 ns/op

# Run progress: 78.26% complete, ETA 02:06:23
# Fork: 2 of 3
# Warmup Iteration   1: 0.776 ns/op
# Warmup Iteration   2: 0.774 ns/op
# Warmup Iteration   3: 0.772 ns/op
Iteration   1: 0.771 ns/op
Iteration   2: 0.790 ns/op
Iteration   3: 0.771 ns/op
Iteration   4: 0.798 ns/op
Iteration   5: 0.776 ns/op

# Run progress: 78.28% complete, ETA 02:06:15
# Fork: 3 of 3
# Warmup Iteration   1: 0.776 ns/op
# Warmup Iteration   2: 0.773 ns/op
# Warmup Iteration   3: 0.771 ns/op
Iteration   1: 0.771 ns/op
Iteration   2: 0.771 ns/op
Iteration   3: 0.773 ns/op
Iteration   4: 0.771 ns/op
Iteration   5: 0.771 ns/op


Result "org.openjdk.bench.valhalla.array.read.Inline32int.Val_as_Val_to_Int_read":
  0.775 ±(99.9%) 0.009 ns/op [Average]
  (min, avg, max) = (0.771, 0.775, 0.798), stdev = 0.008
  CI (99.9%): [0.766, 0.784] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.read.Inline32int.Val_as_Val_to_Int_read
# Parameters: (size = 1000000)

# Run progress: 78.31% complete, ETA 02:06:06
# Fork: 1 of 3
# Warmup Iteration   1: 0.788 ns/op
# Warmup Iteration   2: 0.922 ns/op
# Warmup Iteration   3: 1.013 ns/op
Iteration   1: 1.033 ns/op
Iteration   2: 0.816 ns/op
Iteration   3: 0.775 ns/op
Iteration   4: 0.774 ns/op
Iteration   5: 0.786 ns/op

# Run progress: 78.33% complete, ETA 02:05:57
# Fork: 2 of 3
# Warmup Iteration   1: 0.808 ns/op
# Warmup Iteration   2: 0.774 ns/op
# Warmup Iteration   3: 0.886 ns/op
Iteration   1: 1.013 ns/op
Iteration   2: 1.083 ns/op
Iteration   3: 1.037 ns/op
Iteration   4: 0.814 ns/op
Iteration   5: 0.772 ns/op

# Run progress: 78.36% complete, ETA 02:05:49
# Fork: 3 of 3
# Warmup Iteration   1: 0.817 ns/op
# Warmup Iteration   2: 0.803 ns/op
# Warmup Iteration   3: 0.788 ns/op
Iteration   1: 0.783 ns/op
Iteration   2: 0.910 ns/op
Iteration   3: 0.951 ns/op
Iteration   4: 0.860 ns/op
Iteration   5: 0.777 ns/op


Result "org.openjdk.bench.valhalla.array.read.Inline32int.Val_as_Val_to_Int_read":
  0.879 ±(99.9%) 0.123 ns/op [Average]
  (min, avg, max) = (0.772, 0.879, 1.083), stdev = 0.115
  CI (99.9%): [0.756, 1.002] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.read.Inline32int.Val_as_Val_to_Ref_read
# Parameters: (size = 100)

# Run progress: 78.38% complete, ETA 02:05:40
# Fork: 1 of 3
# Warmup Iteration   1: 0.928 ns/op
# Warmup Iteration   2: 0.926 ns/op
# Warmup Iteration   3: 0.847 ns/op
Iteration   1: 0.776 ns/op
Iteration   2: 0.775 ns/op
Iteration   3: 0.847 ns/op
Iteration   4: 0.920 ns/op
Iteration   5: 0.813 ns/op

# Run progress: 78.41% complete, ETA 02:05:32
# Fork: 2 of 3
# Warmup Iteration   1: 0.814 ns/op
# Warmup Iteration   2: 0.958 ns/op
# Warmup Iteration   3: 1.087 ns/op
Iteration   1: 1.087 ns/op
Iteration   2: 0.949 ns/op
Iteration   3: 0.894 ns/op
Iteration   4: 0.771 ns/op
Iteration   5: 0.821 ns/op

# Run progress: 78.43% complete, ETA 02:05:23
# Fork: 3 of 3
# Warmup Iteration   1: 0.862 ns/op
# Warmup Iteration   2: 0.779 ns/op
# Warmup Iteration   3: 0.776 ns/op
Iteration   1: 0.855 ns/op
Iteration   2: 0.926 ns/op
Iteration   3: 0.970 ns/op
Iteration   4: 0.840 ns/op
Iteration   5: 0.772 ns/op


Result "org.openjdk.bench.valhalla.array.read.Inline32int.Val_as_Val_to_Ref_read":
  0.868 ±(99.9%) 0.096 ns/op [Average]
  (min, avg, max) = (0.771, 0.868, 1.087), stdev = 0.090
  CI (99.9%): [0.771, 0.964] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.read.Inline32int.Val_as_Val_to_Ref_read
# Parameters: (size = 1000000)

# Run progress: 78.46% complete, ETA 02:05:14
# Fork: 1 of 3
# Warmup Iteration   1: 0.849 ns/op
# Warmup Iteration   2: 0.901 ns/op
# Warmup Iteration   3: 0.888 ns/op
Iteration   1: 0.770 ns/op
Iteration   2: 0.790 ns/op
Iteration   3: 0.939 ns/op
Iteration   4: 1.057 ns/op
Iteration   5: 1.055 ns/op

# Run progress: 78.48% complete, ETA 02:05:06
# Fork: 2 of 3
# Warmup Iteration   1: 0.811 ns/op
# Warmup Iteration   2: 0.900 ns/op
# Warmup Iteration   3: 1.016 ns/op
Iteration   1: 1.063 ns/op
Iteration   2: 0.954 ns/op
Iteration   3: 0.827 ns/op
Iteration   4: 0.916 ns/op
Iteration   5: 0.927 ns/op

# Run progress: 78.50% complete, ETA 02:04:57
# Fork: 3 of 3
# Warmup Iteration   1: 0.842 ns/op
# Warmup Iteration   2: 0.780 ns/op
# Warmup Iteration   3: 0.786 ns/op
Iteration   1: 0.892 ns/op
Iteration   2: 0.919 ns/op
Iteration   3: 1.061 ns/op
Iteration   4: 1.578 ns/op
Iteration   5: 1.600 ns/op


Result "org.openjdk.bench.valhalla.array.read.Inline32int.Val_as_Val_to_Ref_read":
  1.023 ±(99.9%) 0.265 ns/op [Average]
  (min, avg, max) = (0.770, 1.023, 1.600), stdev = 0.248
  CI (99.9%): [0.758, 1.289] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.read.Inline32int.Val_as_Val_to_Val_read
# Parameters: (size = 100)

# Run progress: 78.53% complete, ETA 02:04:49
# Fork: 1 of 3
# Warmup Iteration   1: 1.629 ns/op
# Warmup Iteration   2: 1.616 ns/op
# Warmup Iteration   3: 1.609 ns/op
Iteration   1: 1.606 ns/op
Iteration   2: 1.610 ns/op
Iteration   3: 1.610 ns/op
Iteration   4: 1.618 ns/op
Iteration   5: 1.610 ns/op

# Run progress: 78.55% complete, ETA 02:04:40
# Fork: 2 of 3
# Warmup Iteration   1: 1.628 ns/op
# Warmup Iteration   2: 1.617 ns/op
# Warmup Iteration   3: 1.611 ns/op
Iteration   1: 1.608 ns/op
Iteration   2: 1.609 ns/op
Iteration   3: 1.613 ns/op
Iteration   4: 1.609 ns/op
Iteration   5: 1.609 ns/op

# Run progress: 78.58% complete, ETA 02:04:32
# Fork: 3 of 3
# Warmup Iteration   1: 1.636 ns/op
# Warmup Iteration   2: 1.655 ns/op
# Warmup Iteration   3: 1.687 ns/op
Iteration   1: 1.613 ns/op
Iteration   2: 1.638 ns/op
Iteration   3: 1.540 ns/op
Iteration   4: 1.069 ns/op
Iteration   5: 1.417 ns/op


Result "org.openjdk.bench.valhalla.array.read.Inline32int.Val_as_Val_to_Val_read":
  1.559 ±(99.9%) 0.156 ns/op [Average]
  (min, avg, max) = (1.069, 1.559, 1.638), stdev = 0.146
  CI (99.9%): [1.403, 1.714] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.read.Inline32int.Val_as_Val_to_Val_read
# Parameters: (size = 1000000)

# Run progress: 78.60% complete, ETA 02:04:23
# Fork: 1 of 3
# Warmup Iteration   1: 1.256 ns/op
# Warmup Iteration   2: 0.774 ns/op
# Warmup Iteration   3: 0.772 ns/op
Iteration   1: 0.775 ns/op
Iteration   2: 0.771 ns/op
Iteration   3: 0.771 ns/op
Iteration   4: 0.771 ns/op
Iteration   5: 0.771 ns/op

# Run progress: 78.63% complete, ETA 02:04:14
# Fork: 2 of 3
# Warmup Iteration   1: 0.787 ns/op
# Warmup Iteration   2: 0.780 ns/op
# Warmup Iteration   3: 0.776 ns/op
Iteration   1: 0.792 ns/op
Iteration   2: 0.776 ns/op
Iteration   3: 0.787 ns/op
Iteration   4: 0.773 ns/op
Iteration   5: 0.810 ns/op

# Run progress: 78.65% complete, ETA 02:04:06
# Fork: 3 of 3
# Warmup Iteration   1: 0.781 ns/op
# Warmup Iteration   2: 0.788 ns/op
# Warmup Iteration   3: 0.788 ns/op
Iteration   1: 0.771 ns/op
Iteration   2: 0.783 ns/op
Iteration   3: 0.831 ns/op
Iteration   4: 0.775 ns/op
Iteration   5: 0.773 ns/op


Result "org.openjdk.bench.valhalla.array.read.Inline32int.Val_as_Val_to_Val_read":
  0.782 ±(99.9%) 0.019 ns/op [Average]
  (min, avg, max) = (0.771, 0.782, 0.831), stdev = 0.017
  CI (99.9%): [0.763, 0.801] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.read.Inline64byte.Val_as_Int_to_Int_read
# Parameters: (size = 100)

# Run progress: 78.68% complete, ETA 02:03:57
# Fork: 1 of 3
# Warmup Iteration   1: 0.816 ns/op
# Warmup Iteration   2: 0.814 ns/op
# Warmup Iteration   3: 0.813 ns/op
Iteration   1: 0.813 ns/op
Iteration   2: 0.815 ns/op
Iteration   3: 0.815 ns/op
Iteration   4: 0.815 ns/op
Iteration   5: 0.821 ns/op

# Run progress: 78.70% complete, ETA 02:03:49
# Fork: 2 of 3
# Warmup Iteration   1: 0.821 ns/op
# Warmup Iteration   2: 0.813 ns/op
# Warmup Iteration   3: 0.812 ns/op
Iteration   1: 0.812 ns/op
Iteration   2: 0.826 ns/op
Iteration   3: 0.811 ns/op
Iteration   4: 0.821 ns/op
Iteration   5: 0.827 ns/op

# Run progress: 78.73% complete, ETA 02:03:40
# Fork: 3 of 3
# Warmup Iteration   1: 0.786 ns/op
# Warmup Iteration   2: 0.774 ns/op
# Warmup Iteration   3: 0.772 ns/op
Iteration   1: 0.776 ns/op
Iteration   2: 0.777 ns/op
Iteration   3: 0.791 ns/op
Iteration   4: 0.776 ns/op
Iteration   5: 0.772 ns/op


Result "org.openjdk.bench.valhalla.array.read.Inline64byte.Val_as_Int_to_Int_read":
  0.804 ±(99.9%) 0.021 ns/op [Average]
  (min, avg, max) = (0.772, 0.804, 0.827), stdev = 0.020
  CI (99.9%): [0.783, 0.826] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.read.Inline64byte.Val_as_Int_to_Int_read
# Parameters: (size = 1000000)

# Run progress: 78.75% complete, ETA 02:03:31
# Fork: 1 of 3
# Warmup Iteration   1: 0.779 ns/op
# Warmup Iteration   2: 0.780 ns/op
# Warmup Iteration   3: 0.776 ns/op
Iteration   1: 0.772 ns/op
Iteration   2: 0.774 ns/op
Iteration   3: 0.773 ns/op
Iteration   4: 0.774 ns/op
Iteration   5: 0.776 ns/op

# Run progress: 78.77% complete, ETA 02:03:23
# Fork: 2 of 3
# Warmup Iteration   1: 0.779 ns/op
# Warmup Iteration   2: 0.775 ns/op
# Warmup Iteration   3: 0.787 ns/op
Iteration   1: 0.771 ns/op
Iteration   2: 0.771 ns/op
Iteration   3: 0.796 ns/op
Iteration   4: 0.772 ns/op
Iteration   5: 0.786 ns/op

# Run progress: 78.80% complete, ETA 02:03:14
# Fork: 3 of 3
# Warmup Iteration   1: 0.777 ns/op
# Warmup Iteration   2: 0.773 ns/op
# Warmup Iteration   3: 0.771 ns/op
Iteration   1: 0.773 ns/op
Iteration   2: 0.773 ns/op
Iteration   3: 0.773 ns/op
Iteration   4: 0.772 ns/op
Iteration   5: 0.771 ns/op


Result "org.openjdk.bench.valhalla.array.read.Inline64byte.Val_as_Int_to_Int_read":
  0.775 ±(99.9%) 0.007 ns/op [Average]
  (min, avg, max) = (0.771, 0.775, 0.796), stdev = 0.007
  CI (99.9%): [0.768, 0.782] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.read.Inline64byte.Val_as_Ref_to_Int_read
# Parameters: (size = 100)

# Run progress: 78.82% complete, ETA 02:03:06
# Fork: 1 of 3
# Warmup Iteration   1: 0.940 ns/op
# Warmup Iteration   2: 0.931 ns/op
# Warmup Iteration   3: 0.929 ns/op
Iteration   1: 0.926 ns/op
Iteration   2: 0.929 ns/op
Iteration   3: 0.930 ns/op
Iteration   4: 0.930 ns/op
Iteration   5: 0.928 ns/op

# Run progress: 78.85% complete, ETA 02:02:57
# Fork: 2 of 3
# Warmup Iteration   1: 0.938 ns/op
# Warmup Iteration   2: 0.938 ns/op
# Warmup Iteration   3: 0.929 ns/op
Iteration   1: 0.952 ns/op
Iteration   2: 0.943 ns/op
Iteration   3: 0.934 ns/op
Iteration   4: 0.929 ns/op
Iteration   5: 0.929 ns/op

# Run progress: 78.87% complete, ETA 02:02:48
# Fork: 3 of 3
# Warmup Iteration   1: 0.937 ns/op
# Warmup Iteration   2: 0.933 ns/op
# Warmup Iteration   3: 0.930 ns/op
Iteration   1: 0.928 ns/op
Iteration   2: 0.928 ns/op
Iteration   3: 0.928 ns/op
Iteration   4: 0.930 ns/op
Iteration   5: 0.928 ns/op


Result "org.openjdk.bench.valhalla.array.read.Inline64byte.Val_as_Ref_to_Int_read":
  0.932 ±(99.9%) 0.007 ns/op [Average]
  (min, avg, max) = (0.926, 0.932, 0.952), stdev = 0.007
  CI (99.9%): [0.924, 0.939] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.read.Inline64byte.Val_as_Ref_to_Int_read
# Parameters: (size = 1000000)

# Run progress: 78.90% complete, ETA 02:02:40
# Fork: 1 of 3
# Warmup Iteration   1: 0.940 ns/op
# Warmup Iteration   2: 0.937 ns/op
# Warmup Iteration   3: 0.930 ns/op
Iteration   1: 0.930 ns/op
Iteration   2: 0.929 ns/op
Iteration   3: 0.931 ns/op
Iteration   4: 0.930 ns/op
Iteration   5: 0.935 ns/op

# Run progress: 78.92% complete, ETA 02:02:31
# Fork: 2 of 3
# Warmup Iteration   1: 0.940 ns/op
# Warmup Iteration   2: 0.975 ns/op
# Warmup Iteration   3: 0.931 ns/op
Iteration   1: 0.936 ns/op
Iteration   2: 0.931 ns/op
Iteration   3: 0.943 ns/op
Iteration   4: 1.021 ns/op
Iteration   5: 1.037 ns/op

# Run progress: 78.95% complete, ETA 02:02:23
# Fork: 3 of 3
# Warmup Iteration   1: 0.963 ns/op
# Warmup Iteration   2: 0.993 ns/op
# Warmup Iteration   3: 1.016 ns/op
Iteration   1: 1.051 ns/op
Iteration   2: 0.956 ns/op
Iteration   3: 0.954 ns/op
Iteration   4: 0.952 ns/op
Iteration   5: 1.022 ns/op


Result "org.openjdk.bench.valhalla.array.read.Inline64byte.Val_as_Ref_to_Int_read":
  0.964 ±(99.9%) 0.048 ns/op [Average]
  (min, avg, max) = (0.929, 0.964, 1.051), stdev = 0.045
  CI (99.9%): [0.916, 1.011] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.read.Inline64byte.Val_as_Ref_to_Ref_read
# Parameters: (size = 100)

# Run progress: 78.97% complete, ETA 02:02:14
# Fork: 1 of 3
# Warmup Iteration   1: 0.946 ns/op
# Warmup Iteration   2: 0.930 ns/op
# Warmup Iteration   3: 0.987 ns/op
Iteration   1: 1.048 ns/op
Iteration   2: 1.027 ns/op
Iteration   3: 0.935 ns/op
Iteration   4: 0.971 ns/op
Iteration   5: 1.127 ns/op

# Run progress: 79.00% complete, ETA 02:02:05
# Fork: 2 of 3
# Warmup Iteration   1: 1.206 ns/op
# Warmup Iteration   2: 1.135 ns/op
# Warmup Iteration   3: 1.146 ns/op
Iteration   1: 0.953 ns/op
Iteration   2: 1.006 ns/op
Iteration   3: 1.034 ns/op
Iteration   4: 1.058 ns/op
Iteration   5: 0.931 ns/op

# Run progress: 79.02% complete, ETA 02:01:57
# Fork: 3 of 3
# Warmup Iteration   1: 0.938 ns/op
# Warmup Iteration   2: 0.981 ns/op
# Warmup Iteration   3: 1.065 ns/op
Iteration   1: 0.956 ns/op
Iteration   2: 0.935 ns/op
Iteration   3: 0.983 ns/op
Iteration   4: 1.100 ns/op
Iteration   5: 1.092 ns/op


Result "org.openjdk.bench.valhalla.array.read.Inline64byte.Val_as_Ref_to_Ref_read":
  1.010 ±(99.9%) 0.069 ns/op [Average]
  (min, avg, max) = (0.931, 1.010, 1.127), stdev = 0.065
  CI (99.9%): [0.941, 1.080] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.read.Inline64byte.Val_as_Ref_to_Ref_read
# Parameters: (size = 1000000)

# Run progress: 79.04% complete, ETA 02:01:48
# Fork: 1 of 3
# Warmup Iteration   1: 0.943 ns/op
# Warmup Iteration   2: 0.995 ns/op
# Warmup Iteration   3: 1.119 ns/op
Iteration   1: 1.118 ns/op
Iteration   2: 1.010 ns/op
Iteration   3: 0.946 ns/op
Iteration   4: 1.119 ns/op
Iteration   5: 1.210 ns/op

# Run progress: 79.07% complete, ETA 02:01:40
# Fork: 2 of 3
# Warmup Iteration   1: 1.240 ns/op
# Warmup Iteration   2: 1.143 ns/op
# Warmup Iteration   3: 1.181 ns/op
Iteration   1: 1.155 ns/op
Iteration   2: 1.004 ns/op
Iteration   3: 1.062 ns/op
Iteration   4: 1.105 ns/op
Iteration   5: 1.044 ns/op

# Run progress: 79.09% complete, ETA 02:01:31
# Fork: 3 of 3
# Warmup Iteration   1: 0.945 ns/op
# Warmup Iteration   2: 0.954 ns/op
# Warmup Iteration   3: 1.084 ns/op
Iteration   1: 1.114 ns/op
Iteration   2: 1.050 ns/op
Iteration   3: 0.933 ns/op
Iteration   4: 1.104 ns/op
Iteration   5: 1.188 ns/op


Result "org.openjdk.bench.valhalla.array.read.Inline64byte.Val_as_Ref_to_Ref_read":
  1.077 ±(99.9%) 0.087 ns/op [Average]
  (min, avg, max) = (0.933, 1.077, 1.210), stdev = 0.081
  CI (99.9%): [0.991, 1.164] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.read.Inline64byte.Val_as_Ref_to_Val_read
# Parameters: (size = 100)

# Run progress: 79.12% complete, ETA 02:01:23
# Fork: 1 of 3
# Warmup Iteration   1: 1.158 ns/op
# Warmup Iteration   2: 0.936 ns/op
# Warmup Iteration   3: 1.004 ns/op
Iteration   1: 1.112 ns/op
Iteration   2: 1.112 ns/op
Iteration   3: 0.974 ns/op
Iteration   4: 0.953 ns/op
Iteration   5: 1.239 ns/op

# Run progress: 79.14% complete, ETA 02:01:14
# Fork: 2 of 3
# Warmup Iteration   1: 1.434 ns/op
# Warmup Iteration   2: 1.321 ns/op
# Warmup Iteration   3: 1.230 ns/op
Iteration   1: 1.154 ns/op
Iteration   2: 1.029 ns/op
Iteration   3: 1.095 ns/op
Iteration   4: 1.097 ns/op
Iteration   5: 1.085 ns/op

# Run progress: 79.17% complete, ETA 02:01:05
# Fork: 3 of 3
# Warmup Iteration   1: 1.382 ns/op
# Warmup Iteration   2: 1.950 ns/op
# Warmup Iteration   3: 1.940 ns/op
Iteration   1: 1.939 ns/op
Iteration   2: 1.966 ns/op
Iteration   3: 1.943 ns/op
Iteration   4: 1.945 ns/op
Iteration   5: 1.939 ns/op


Result "org.openjdk.bench.valhalla.array.read.Inline64byte.Val_as_Ref_to_Val_read":
  1.372 ±(99.9%) 0.455 ns/op [Average]
  (min, avg, max) = (0.953, 1.372, 1.966), stdev = 0.426
  CI (99.9%): [0.917, 1.827] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.read.Inline64byte.Val_as_Ref_to_Val_read
# Parameters: (size = 1000000)

# Run progress: 79.19% complete, ETA 02:00:57
# Fork: 1 of 3
# Warmup Iteration   1: 1.996 ns/op
# Warmup Iteration   2: 1.948 ns/op
# Warmup Iteration   3: 1.941 ns/op
Iteration   1: 1.938 ns/op
Iteration   2: 1.937 ns/op
Iteration   3: 1.940 ns/op
Iteration   4: 1.936 ns/op
Iteration   5: 1.938 ns/op

# Run progress: 79.22% complete, ETA 02:00:48
# Fork: 2 of 3
# Warmup Iteration   1: 1.990 ns/op
# Warmup Iteration   2: 1.952 ns/op
# Warmup Iteration   3: 1.940 ns/op
Iteration   1: 1.946 ns/op
Iteration   2: 2.327 ns/op
Iteration   3: 0.960 ns/op
Iteration   4: 0.936 ns/op
Iteration   5: 1.122 ns/op

# Run progress: 79.24% complete, ETA 02:00:40
# Fork: 3 of 3
# Warmup Iteration   1: 1.128 ns/op
# Warmup Iteration   2: 0.946 ns/op
# Warmup Iteration   3: 0.932 ns/op
Iteration   1: 0.929 ns/op
Iteration   2: 0.928 ns/op
Iteration   3: 0.926 ns/op
Iteration   4: 0.929 ns/op
Iteration   5: 0.932 ns/op


Result "org.openjdk.bench.valhalla.array.read.Inline64byte.Val_as_Ref_to_Val_read":
  1.442 ±(99.9%) 0.584 ns/op [Average]
  (min, avg, max) = (0.926, 1.442, 2.327), stdev = 0.546
  CI (99.9%): [0.858, 2.026] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.read.Inline64byte.Val_as_Val_to_Int_read
# Parameters: (size = 100)

# Run progress: 79.26% complete, ETA 02:00:31
# Fork: 1 of 3
# Warmup Iteration   1: 0.935 ns/op
# Warmup Iteration   2: 0.934 ns/op
# Warmup Iteration   3: 0.940 ns/op
Iteration   1: 0.927 ns/op
Iteration   2: 0.929 ns/op
Iteration   3: 0.931 ns/op
Iteration   4: 0.932 ns/op
Iteration   5: 0.929 ns/op

# Run progress: 79.29% complete, ETA 02:00:23
# Fork: 2 of 3
# Warmup Iteration   1: 0.942 ns/op
# Warmup Iteration   2: 0.932 ns/op
# Warmup Iteration   3: 0.930 ns/op
Iteration   1: 0.930 ns/op
Iteration   2: 0.928 ns/op
Iteration   3: 0.928 ns/op
Iteration   4: 0.929 ns/op
Iteration   5: 0.960 ns/op

# Run progress: 79.31% complete, ETA 02:00:14
# Fork: 3 of 3
# Warmup Iteration   1: 0.939 ns/op
# Warmup Iteration   2: 0.942 ns/op
# Warmup Iteration   3: 0.929 ns/op
Iteration   1: 0.929 ns/op
Iteration   2: 0.929 ns/op
Iteration   3: 0.930 ns/op
Iteration   4: 0.929 ns/op
Iteration   5: 0.931 ns/op


Result "org.openjdk.bench.valhalla.array.read.Inline64byte.Val_as_Val_to_Int_read":
  0.931 ±(99.9%) 0.009 ns/op [Average]
  (min, avg, max) = (0.927, 0.931, 0.960), stdev = 0.008
  CI (99.9%): [0.923, 0.940] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.read.Inline64byte.Val_as_Val_to_Int_read
# Parameters: (size = 1000000)

# Run progress: 79.34% complete, ETA 02:00:05
# Fork: 1 of 3
# Warmup Iteration   1: 0.938 ns/op
# Warmup Iteration   2: 0.933 ns/op
# Warmup Iteration   3: 0.932 ns/op
Iteration   1: 0.931 ns/op
Iteration   2: 0.930 ns/op
Iteration   3: 0.936 ns/op
Iteration   4: 0.931 ns/op
Iteration   5: 0.930 ns/op

# Run progress: 79.36% complete, ETA 01:59:57
# Fork: 2 of 3
# Warmup Iteration   1: 0.940 ns/op
# Warmup Iteration   2: 1.209 ns/op
# Warmup Iteration   3: 0.937 ns/op
Iteration   1: 0.938 ns/op
Iteration   2: 0.976 ns/op
Iteration   3: 0.931 ns/op
Iteration   4: 0.939 ns/op
Iteration   5: 0.930 ns/op

# Run progress: 79.39% complete, ETA 01:59:48
# Fork: 3 of 3
# Warmup Iteration   1: 0.944 ns/op
# Warmup Iteration   2: 0.936 ns/op
# Warmup Iteration   3: 0.943 ns/op
Iteration   1: 0.935 ns/op
Iteration   2: 0.931 ns/op
Iteration   3: 0.930 ns/op
Iteration   4: 0.929 ns/op
Iteration   5: 0.930 ns/op


Result "org.openjdk.bench.valhalla.array.read.Inline64byte.Val_as_Val_to_Int_read":
  0.935 ±(99.9%) 0.013 ns/op [Average]
  (min, avg, max) = (0.929, 0.935, 0.976), stdev = 0.012
  CI (99.9%): [0.923, 0.948] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.read.Inline64byte.Val_as_Val_to_Ref_read
# Parameters: (size = 100)

# Run progress: 79.41% complete, ETA 01:59:40
# Fork: 1 of 3
# Warmup Iteration   1: 0.956 ns/op
# Warmup Iteration   2: 0.931 ns/op
# Warmup Iteration   3: 0.932 ns/op
Iteration   1: 0.933 ns/op
Iteration   2: 0.933 ns/op
Iteration   3: 0.931 ns/op
Iteration   4: 0.932 ns/op
Iteration   5: 0.929 ns/op

# Run progress: 79.44% complete, ETA 01:59:31
# Fork: 2 of 3
# Warmup Iteration   1: 0.950 ns/op
# Warmup Iteration   2: 0.934 ns/op
# Warmup Iteration   3: 0.934 ns/op
Iteration   1: 0.930 ns/op
Iteration   2: 0.956 ns/op
Iteration   3: 0.932 ns/op
Iteration   4: 0.929 ns/op
Iteration   5: 0.932 ns/op

# Run progress: 79.46% complete, ETA 01:59:22
# Fork: 3 of 3
# Warmup Iteration   1: 0.941 ns/op
# Warmup Iteration   2: 0.934 ns/op
# Warmup Iteration   3: 0.930 ns/op
Iteration   1: 0.933 ns/op
Iteration   2: 0.931 ns/op
Iteration   3: 0.935 ns/op
Iteration   4: 0.935 ns/op
Iteration   5: 0.951 ns/op


Result "org.openjdk.bench.valhalla.array.read.Inline64byte.Val_as_Val_to_Ref_read":
  0.935 ±(99.9%) 0.008 ns/op [Average]
  (min, avg, max) = (0.929, 0.935, 0.956), stdev = 0.008
  CI (99.9%): [0.926, 0.943] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.read.Inline64byte.Val_as_Val_to_Ref_read
# Parameters: (size = 1000000)

# Run progress: 79.49% complete, ETA 01:59:14
# Fork: 1 of 3
# Warmup Iteration   1: 0.952 ns/op
# Warmup Iteration   2: 0.944 ns/op
# Warmup Iteration   3: 0.938 ns/op
Iteration   1: 0.937 ns/op
Iteration   2: 0.930 ns/op
Iteration   3: 0.936 ns/op
Iteration   4: 0.937 ns/op
Iteration   5: 0.937 ns/op

# Run progress: 79.51% complete, ETA 01:59:05
# Fork: 2 of 3
# Warmup Iteration   1: 0.943 ns/op
# Warmup Iteration   2: 0.938 ns/op
# Warmup Iteration   3: 0.936 ns/op
Iteration   1: 0.936 ns/op
Iteration   2: 0.944 ns/op
Iteration   3: 0.938 ns/op
Iteration   4: 0.931 ns/op
Iteration   5: 0.932 ns/op

# Run progress: 79.53% complete, ETA 01:58:57
# Fork: 3 of 3
# Warmup Iteration   1: 0.946 ns/op
# Warmup Iteration   2: 0.936 ns/op
# Warmup Iteration   3: 0.931 ns/op
Iteration   1: 0.932 ns/op
Iteration   2: 0.934 ns/op
Iteration   3: 0.935 ns/op
Iteration   4: 0.967 ns/op
Iteration   5: 0.930 ns/op


Result "org.openjdk.bench.valhalla.array.read.Inline64byte.Val_as_Val_to_Ref_read":
  0.937 ±(99.9%) 0.010 ns/op [Average]
  (min, avg, max) = (0.930, 0.937, 0.967), stdev = 0.009
  CI (99.9%): [0.927, 0.947] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.read.Inline64byte.Val_as_Val_to_Val_read
# Parameters: (size = 100)

# Run progress: 79.56% complete, ETA 01:58:48
# Fork: 1 of 3
# Warmup Iteration   1: 0.938 ns/op
# Warmup Iteration   2: 0.936 ns/op
# Warmup Iteration   3: 0.930 ns/op
Iteration   1: 0.931 ns/op
Iteration   2: 0.933 ns/op
Iteration   3: 0.935 ns/op
Iteration   4: 0.932 ns/op
Iteration   5: 0.931 ns/op

# Run progress: 79.58% complete, ETA 01:58:39
# Fork: 2 of 3
# Warmup Iteration   1: 0.941 ns/op
# Warmup Iteration   2: 0.932 ns/op
# Warmup Iteration   3: 0.936 ns/op
Iteration   1: 0.950 ns/op
Iteration   2: 0.931 ns/op
Iteration   3: 0.929 ns/op
Iteration   4: 0.934 ns/op
Iteration   5: 0.932 ns/op

# Run progress: 79.61% complete, ETA 01:58:31
# Fork: 3 of 3
# Warmup Iteration   1: 0.939 ns/op
# Warmup Iteration   2: 0.931 ns/op
# Warmup Iteration   3: 0.932 ns/op
Iteration   1: 0.930 ns/op
Iteration   2: 0.930 ns/op
Iteration   3: 1.004 ns/op
Iteration   4: 0.928 ns/op
Iteration   5: 0.931 ns/op


Result "org.openjdk.bench.valhalla.array.read.Inline64byte.Val_as_Val_to_Val_read":
  0.937 ±(99.9%) 0.021 ns/op [Average]
  (min, avg, max) = (0.928, 0.937, 1.004), stdev = 0.019
  CI (99.9%): [0.917, 0.958] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.read.Inline64byte.Val_as_Val_to_Val_read
# Parameters: (size = 1000000)

# Run progress: 79.63% complete, ETA 01:58:22
# Fork: 1 of 3
# Warmup Iteration   1: 0.950 ns/op
# Warmup Iteration   2: 0.933 ns/op
# Warmup Iteration   3: 0.929 ns/op
Iteration   1: 0.928 ns/op
Iteration   2: 0.929 ns/op
Iteration   3: 0.932 ns/op
Iteration   4: 0.930 ns/op
Iteration   5: 0.928 ns/op

# Run progress: 79.66% complete, ETA 01:58:14
# Fork: 2 of 3
# Warmup Iteration   1: 0.948 ns/op
# Warmup Iteration   2: 0.932 ns/op
# Warmup Iteration   3: 0.932 ns/op
Iteration   1: 0.929 ns/op
Iteration   2: 0.930 ns/op
Iteration   3: 0.929 ns/op
Iteration   4: 0.929 ns/op
Iteration   5: 0.929 ns/op

# Run progress: 79.68% complete, ETA 01:58:05
# Fork: 3 of 3
# Warmup Iteration   1: 0.943 ns/op
# Warmup Iteration   2: 0.932 ns/op
# Warmup Iteration   3: 0.939 ns/op
Iteration   1: 0.932 ns/op
Iteration   2: 0.930 ns/op
Iteration   3: 0.929 ns/op
Iteration   4: 0.930 ns/op
Iteration   5: 0.928 ns/op


Result "org.openjdk.bench.valhalla.array.read.Inline64byte.Val_as_Val_to_Val_read":
  0.929 ±(99.9%) 0.001 ns/op [Average]
  (min, avg, max) = (0.928, 0.929, 0.932), stdev = 0.001
  CI (99.9%): [0.928, 0.931] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.read.Inline64int.Val_as_Int_to_Int_read
# Parameters: (size = 100)

# Run progress: 79.71% complete, ETA 01:57:56
# Fork: 1 of 3
# Warmup Iteration   1: 0.777 ns/op
# Warmup Iteration   2: 0.773 ns/op
# Warmup Iteration   3: 0.771 ns/op
Iteration   1: 0.771 ns/op
Iteration   2: 0.772 ns/op
Iteration   3: 0.775 ns/op
Iteration   4: 0.772 ns/op
Iteration   5: 0.820 ns/op

# Run progress: 79.73% complete, ETA 01:57:48
# Fork: 2 of 3
# Warmup Iteration   1: 1.059 ns/op
# Warmup Iteration   2: 1.108 ns/op
# Warmup Iteration   3: 1.036 ns/op
Iteration   1: 0.960 ns/op
Iteration   2: 0.819 ns/op
Iteration   3: 0.779 ns/op
Iteration   4: 0.774 ns/op
Iteration   5: 0.774 ns/op

# Run progress: 79.75% complete, ETA 01:57:39
# Fork: 3 of 3
# Warmup Iteration   1: 0.778 ns/op
# Warmup Iteration   2: 0.774 ns/op
# Warmup Iteration   3: 0.772 ns/op
Iteration   1: 0.791 ns/op
Iteration   2: 0.807 ns/op
Iteration   3: 0.886 ns/op
Iteration   4: 0.909 ns/op
Iteration   5: 0.778 ns/op


Result "org.openjdk.bench.valhalla.array.read.Inline64int.Val_as_Int_to_Int_read":
  0.812 ±(99.9%) 0.063 ns/op [Average]
  (min, avg, max) = (0.771, 0.812, 0.960), stdev = 0.059
  CI (99.9%): [0.749, 0.876] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.read.Inline64int.Val_as_Int_to_Int_read
# Parameters: (size = 1000000)

# Run progress: 79.78% complete, ETA 01:57:31
# Fork: 1 of 3
# Warmup Iteration   1: 0.885 ns/op
# Warmup Iteration   2: 1.003 ns/op
# Warmup Iteration   3: 0.970 ns/op
Iteration   1: 0.811 ns/op
Iteration   2: 0.775 ns/op
Iteration   3: 0.822 ns/op
Iteration   4: 0.863 ns/op
Iteration   5: 0.909 ns/op

# Run progress: 79.80% complete, ETA 01:57:22
# Fork: 2 of 3
# Warmup Iteration   1: 0.964 ns/op
# Warmup Iteration   2: 0.933 ns/op
# Warmup Iteration   3: 0.964 ns/op
Iteration   1: 0.889 ns/op
Iteration   2: 0.818 ns/op
Iteration   3: 0.769 ns/op
Iteration   4: 0.769 ns/op
Iteration   5: 0.846 ns/op

# Run progress: 79.83% complete, ETA 01:57:14
# Fork: 3 of 3
# Warmup Iteration   1: 0.965 ns/op
# Warmup Iteration   2: 0.929 ns/op
# Warmup Iteration   3: 0.825 ns/op
Iteration   1: 0.941 ns/op
Iteration   2: 0.980 ns/op
Iteration   3: 0.938 ns/op
Iteration   4: 0.805 ns/op
Iteration   5: 0.771 ns/op


Result "org.openjdk.bench.valhalla.array.read.Inline64int.Val_as_Int_to_Int_read":
  0.847 ±(99.9%) 0.075 ns/op [Average]
  (min, avg, max) = (0.769, 0.847, 0.980), stdev = 0.070
  CI (99.9%): [0.772, 0.922] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.read.Inline64int.Val_as_Ref_to_Int_read
# Parameters: (size = 100)

# Run progress: 79.85% complete, ETA 01:57:05
# Fork: 1 of 3
# Warmup Iteration   1: 0.936 ns/op
# Warmup Iteration   2: 0.944 ns/op
# Warmup Iteration   3: 1.025 ns/op
Iteration   1: 0.928 ns/op
Iteration   2: 1.093 ns/op
Iteration   3: 1.179 ns/op
Iteration   4: 1.359 ns/op
Iteration   5: 1.301 ns/op

# Run progress: 79.88% complete, ETA 01:56:56
# Fork: 2 of 3
# Warmup Iteration   1: 1.170 ns/op
# Warmup Iteration   2: 1.125 ns/op
# Warmup Iteration   3: 1.048 ns/op
Iteration   1: 1.131 ns/op
Iteration   2: 1.104 ns/op
Iteration   3: 1.021 ns/op
Iteration   4: 0.928 ns/op
Iteration   5: 0.930 ns/op

# Run progress: 79.90% complete, ETA 01:56:48
# Fork: 3 of 3
# Warmup Iteration   1: 0.990 ns/op
# Warmup Iteration   2: 1.054 ns/op
# Warmup Iteration   3: 1.007 ns/op
Iteration   1: 0.929 ns/op
Iteration   2: 1.027 ns/op
Iteration   3: 1.181 ns/op
Iteration   4: 1.271 ns/op
Iteration   5: 1.751 ns/op


Result "org.openjdk.bench.valhalla.array.read.Inline64int.Val_as_Ref_to_Int_read":
  1.142 ±(99.9%) 0.235 ns/op [Average]
  (min, avg, max) = (0.928, 1.142, 1.751), stdev = 0.220
  CI (99.9%): [0.907, 1.377] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.read.Inline64int.Val_as_Ref_to_Int_read
# Parameters: (size = 1000000)

# Run progress: 79.93% complete, ETA 01:56:39
# Fork: 1 of 3
# Warmup Iteration   1: 1.978 ns/op
# Warmup Iteration   2: 1.955 ns/op
# Warmup Iteration   3: 1.942 ns/op
Iteration   1: 1.938 ns/op
Iteration   2: 1.939 ns/op
Iteration   3: 1.944 ns/op
Iteration   4: 1.939 ns/op
Iteration   5: 1.938 ns/op

# Run progress: 79.95% complete, ETA 01:56:31
# Fork: 2 of 3
# Warmup Iteration   1: 1.981 ns/op
# Warmup Iteration   2: 1.948 ns/op
# Warmup Iteration   3: 1.939 ns/op
Iteration   1: 1.939 ns/op
Iteration   2: 2.036 ns/op
Iteration   3: 1.976 ns/op
Iteration   4: 1.941 ns/op
Iteration   5: 1.954 ns/op

# Run progress: 79.98% complete, ETA 01:56:22
# Fork: 3 of 3
# Warmup Iteration   1: 1.970 ns/op
# Warmup Iteration   2: 1.948 ns/op
# Warmup Iteration   3: 1.937 ns/op
Iteration   1: 2.269 ns/op
Iteration   2: 1.028 ns/op
Iteration   3: 1.259 ns/op
Iteration   4: 1.167 ns/op
Iteration   5: 1.020 ns/op


Result "org.openjdk.bench.valhalla.array.read.Inline64int.Val_as_Ref_to_Int_read":
  1.753 ±(99.9%) 0.436 ns/op [Average]
  (min, avg, max) = (1.020, 1.753, 2.269), stdev = 0.408
  CI (99.9%): [1.316, 2.189] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.read.Inline64int.Val_as_Ref_to_Ref_read
# Parameters: (size = 100)

# Run progress: 80.00% complete, ETA 01:56:14
# Fork: 1 of 3
# Warmup Iteration   1: 0.939 ns/op
# Warmup Iteration   2: 0.938 ns/op
# Warmup Iteration   3: 0.933 ns/op
Iteration   1: 0.937 ns/op
Iteration   2: 0.933 ns/op
Iteration   3: 0.930 ns/op
Iteration   4: 0.930 ns/op
Iteration   5: 0.940 ns/op

# Run progress: 80.02% complete, ETA 01:56:05
# Fork: 2 of 3
# Warmup Iteration   1: 0.944 ns/op
# Warmup Iteration   2: 0.932 ns/op
# Warmup Iteration   3: 0.929 ns/op
Iteration   1: 0.935 ns/op
Iteration   2: 0.934 ns/op
Iteration   3: 0.931 ns/op
Iteration   4: 0.934 ns/op
Iteration   5: 0.931 ns/op

# Run progress: 80.05% complete, ETA 01:55:56
# Fork: 3 of 3
# Warmup Iteration   1: 0.948 ns/op
# Warmup Iteration   2: 0.937 ns/op
# Warmup Iteration   3: 0.932 ns/op
Iteration   1: 0.934 ns/op
Iteration   2: 0.929 ns/op
Iteration   3: 0.934 ns/op
Iteration   4: 0.934 ns/op
Iteration   5: 0.930 ns/op


Result "org.openjdk.bench.valhalla.array.read.Inline64int.Val_as_Ref_to_Ref_read":
  0.933 ±(99.9%) 0.003 ns/op [Average]
  (min, avg, max) = (0.929, 0.933, 0.940), stdev = 0.003
  CI (99.9%): [0.930, 0.936] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.read.Inline64int.Val_as_Ref_to_Ref_read
# Parameters: (size = 1000000)

# Run progress: 80.07% complete, ETA 01:55:48
# Fork: 1 of 3
# Warmup Iteration   1: 0.951 ns/op
# Warmup Iteration   2: 0.934 ns/op
# Warmup Iteration   3: 0.935 ns/op
Iteration   1: 0.932 ns/op
Iteration   2: 0.932 ns/op
Iteration   3: 0.931 ns/op
Iteration   4: 0.934 ns/op
Iteration   5: 0.932 ns/op

# Run progress: 80.10% complete, ETA 01:55:39
# Fork: 2 of 3
# Warmup Iteration   1: 0.947 ns/op
# Warmup Iteration   2: 0.940 ns/op
# Warmup Iteration   3: 0.931 ns/op
Iteration   1: 0.930 ns/op
Iteration   2: 0.936 ns/op
Iteration   3: 0.943 ns/op
Iteration   4: 0.944 ns/op
Iteration   5: 0.932 ns/op

# Run progress: 80.12% complete, ETA 01:55:31
# Fork: 3 of 3
# Warmup Iteration   1: 0.951 ns/op
# Warmup Iteration   2: 0.946 ns/op
# Warmup Iteration   3: 0.934 ns/op
Iteration   1: 0.930 ns/op
Iteration   2: 0.936 ns/op
Iteration   3: 0.932 ns/op
Iteration   4: 0.935 ns/op
Iteration   5: 0.932 ns/op


Result "org.openjdk.bench.valhalla.array.read.Inline64int.Val_as_Ref_to_Ref_read":
  0.934 ±(99.9%) 0.005 ns/op [Average]
  (min, avg, max) = (0.930, 0.934, 0.944), stdev = 0.004
  CI (99.9%): [0.929, 0.939] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.read.Inline64int.Val_as_Ref_to_Val_read
# Parameters: (size = 100)

# Run progress: 80.15% complete, ETA 01:55:22
# Fork: 1 of 3
# Warmup Iteration   1: 0.939 ns/op
# Warmup Iteration   2: 0.949 ns/op
# Warmup Iteration   3: 0.953 ns/op
Iteration   1: 0.929 ns/op
Iteration   2: 0.932 ns/op
Iteration   3: 0.929 ns/op
Iteration   4: 0.932 ns/op
Iteration   5: 0.930 ns/op

# Run progress: 80.17% complete, ETA 01:55:13
# Fork: 2 of 3
# Warmup Iteration   1: 0.944 ns/op
# Warmup Iteration   2: 0.935 ns/op
# Warmup Iteration   3: 0.930 ns/op
Iteration   1: 0.933 ns/op
Iteration   2: 0.931 ns/op
Iteration   3: 0.947 ns/op
Iteration   4: 0.934 ns/op
Iteration   5: 0.953 ns/op

# Run progress: 80.20% complete, ETA 01:55:05
# Fork: 3 of 3
# Warmup Iteration   1: 0.934 ns/op
# Warmup Iteration   2: 0.931 ns/op
# Warmup Iteration   3: 0.928 ns/op
Iteration   1: 0.929 ns/op
Iteration   2: 0.930 ns/op
Iteration   3: 0.933 ns/op
Iteration   4: 0.937 ns/op
Iteration   5: 0.928 ns/op


Result "org.openjdk.bench.valhalla.array.read.Inline64int.Val_as_Ref_to_Val_read":
  0.934 ±(99.9%) 0.008 ns/op [Average]
  (min, avg, max) = (0.928, 0.934, 0.953), stdev = 0.007
  CI (99.9%): [0.926, 0.941] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.read.Inline64int.Val_as_Ref_to_Val_read
# Parameters: (size = 1000000)

# Run progress: 80.22% complete, ETA 01:54:56
# Fork: 1 of 3
# Warmup Iteration   1: 0.957 ns/op
# Warmup Iteration   2: 0.941 ns/op
# Warmup Iteration   3: 0.932 ns/op
Iteration   1: 0.930 ns/op
Iteration   2: 0.930 ns/op
Iteration   3: 0.930 ns/op
Iteration   4: 0.931 ns/op
Iteration   5: 0.929 ns/op

# Run progress: 80.25% complete, ETA 01:54:48
# Fork: 2 of 3
# Warmup Iteration   1: 0.944 ns/op
# Warmup Iteration   2: 0.933 ns/op
# Warmup Iteration   3: 0.935 ns/op
Iteration   1: 0.955 ns/op
Iteration   2: 0.967 ns/op
Iteration   3: 0.937 ns/op
Iteration   4: 0.931 ns/op
Iteration   5: 0.930 ns/op

# Run progress: 80.27% complete, ETA 01:54:39
# Fork: 3 of 3
# Warmup Iteration   1: 0.942 ns/op
# Warmup Iteration   2: 0.932 ns/op
# Warmup Iteration   3: 0.929 ns/op
Iteration   1: 0.929 ns/op
Iteration   2: 0.930 ns/op
Iteration   3: 0.929 ns/op
Iteration   4: 0.929 ns/op
Iteration   5: 0.932 ns/op


Result "org.openjdk.bench.valhalla.array.read.Inline64int.Val_as_Ref_to_Val_read":
  0.934 ±(99.9%) 0.012 ns/op [Average]
  (min, avg, max) = (0.929, 0.934, 0.967), stdev = 0.011
  CI (99.9%): [0.923, 0.946] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.read.Inline64int.Val_as_Val_to_Int_read
# Parameters: (size = 100)

# Run progress: 80.29% complete, ETA 01:54:30
# Fork: 1 of 3
# Warmup Iteration   1: 0.942 ns/op
# Warmup Iteration   2: 0.932 ns/op
# Warmup Iteration   3: 0.933 ns/op
Iteration   1: 0.928 ns/op
Iteration   2: 0.929 ns/op
Iteration   3: 0.929 ns/op
Iteration   4: 0.930 ns/op
Iteration   5: 0.930 ns/op

# Run progress: 80.32% complete, ETA 01:54:22
# Fork: 2 of 3
# Warmup Iteration   1: 0.943 ns/op
# Warmup Iteration   2: 0.933 ns/op
# Warmup Iteration   3: 0.929 ns/op
Iteration   1: 0.954 ns/op
Iteration   2: 0.936 ns/op
Iteration   3: 0.929 ns/op
Iteration   4: 0.928 ns/op
Iteration   5: 0.927 ns/op

# Run progress: 80.34% complete, ETA 01:54:13
# Fork: 3 of 3
# Warmup Iteration   1: 0.939 ns/op
# Warmup Iteration   2: 0.933 ns/op
# Warmup Iteration   3: 0.932 ns/op
Iteration   1: 1.059 ns/op
Iteration   2: 1.134 ns/op
Iteration   3: 1.018 ns/op
Iteration   4: 0.921 ns/op
Iteration   5: 0.976 ns/op


Result "org.openjdk.bench.valhalla.array.read.Inline64int.Val_as_Val_to_Int_read":
  0.962 ±(99.9%) 0.066 ns/op [Average]
  (min, avg, max) = (0.921, 0.962, 1.134), stdev = 0.062
  CI (99.9%): [0.896, 1.028] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.read.Inline64int.Val_as_Val_to_Int_read
# Parameters: (size = 1000000)

# Run progress: 80.37% complete, ETA 01:54:05
# Fork: 1 of 3
# Warmup Iteration   1: 1.022 ns/op
# Warmup Iteration   2: 0.935 ns/op
# Warmup Iteration   3: 0.932 ns/op
Iteration   1: 0.931 ns/op
Iteration   2: 0.952 ns/op
Iteration   3: 0.963 ns/op
Iteration   4: 0.931 ns/op
Iteration   5: 1.039 ns/op

# Run progress: 80.39% complete, ETA 01:53:56
# Fork: 2 of 3
# Warmup Iteration   1: 1.203 ns/op
# Warmup Iteration   2: 1.236 ns/op
# Warmup Iteration   3: 1.229 ns/op
Iteration   1: 1.057 ns/op
Iteration   2: 1.034 ns/op
Iteration   3: 0.971 ns/op
Iteration   4: 0.962 ns/op
Iteration   5: 0.930 ns/op

# Run progress: 80.42% complete, ETA 01:53:48
# Fork: 3 of 3
# Warmup Iteration   1: 0.944 ns/op
# Warmup Iteration   2: 0.932 ns/op
# Warmup Iteration   3: 0.964 ns/op
Iteration   1: 0.964 ns/op
Iteration   2: 0.932 ns/op
Iteration   3: 1.129 ns/op
Iteration   4: 1.243 ns/op
Iteration   5: 1.245 ns/op


Result "org.openjdk.bench.valhalla.array.read.Inline64int.Val_as_Val_to_Int_read":
  1.019 ±(99.9%) 0.115 ns/op [Average]
  (min, avg, max) = (0.930, 1.019, 1.245), stdev = 0.108
  CI (99.9%): [0.904, 1.134] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.read.Inline64int.Val_as_Val_to_Ref_read
# Parameters: (size = 100)

# Run progress: 80.44% complete, ETA 01:53:39
# Fork: 1 of 3
# Warmup Iteration   1: 0.992 ns/op
# Warmup Iteration   2: 0.933 ns/op
# Warmup Iteration   3: 0.929 ns/op
Iteration   1: 0.928 ns/op
Iteration   2: 0.959 ns/op
Iteration   3: 0.935 ns/op
Iteration   4: 0.956 ns/op
Iteration   5: 1.271 ns/op

# Run progress: 80.47% complete, ETA 01:53:30
# Fork: 2 of 3
# Warmup Iteration   1: 1.581 ns/op
# Warmup Iteration   2: 1.520 ns/op
# Warmup Iteration   3: 1.312 ns/op
Iteration   1: 1.047 ns/op
Iteration   2: 1.082 ns/op
Iteration   3: 1.018 ns/op
Iteration   4: 0.996 ns/op
Iteration   5: 0.927 ns/op

# Run progress: 80.49% complete, ETA 01:53:22
# Fork: 3 of 3
# Warmup Iteration   1: 0.940 ns/op
# Warmup Iteration   2: 0.941 ns/op
# Warmup Iteration   3: 1.060 ns/op
Iteration   1: 1.013 ns/op
Iteration   2: 0.956 ns/op
Iteration   3: 1.139 ns/op
Iteration   4: 1.211 ns/op
Iteration   5: 1.196 ns/op


Result "org.openjdk.bench.valhalla.array.read.Inline64int.Val_as_Val_to_Ref_read":
  1.042 ±(99.9%) 0.121 ns/op [Average]
  (min, avg, max) = (0.927, 1.042, 1.271), stdev = 0.113
  CI (99.9%): [0.921, 1.163] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.read.Inline64int.Val_as_Val_to_Ref_read
# Parameters: (size = 1000000)

# Run progress: 80.51% complete, ETA 01:53:13
# Fork: 1 of 3
# Warmup Iteration   1: 0.975 ns/op
# Warmup Iteration   2: 0.936 ns/op
# Warmup Iteration   3: 0.961 ns/op
Iteration   1: 1.075 ns/op
Iteration   2: 1.538 ns/op
Iteration   3: 1.941 ns/op
Iteration   4: 1.941 ns/op
Iteration   5: 1.940 ns/op

# Run progress: 80.54% complete, ETA 01:53:05
# Fork: 2 of 3
# Warmup Iteration   1: 1.995 ns/op
# Warmup Iteration   2: 1.962 ns/op
# Warmup Iteration   3: 1.935 ns/op
Iteration   1: 1.995 ns/op
Iteration   2: 1.938 ns/op
Iteration   3: 1.943 ns/op
Iteration   4: 1.941 ns/op
Iteration   5: 1.942 ns/op

# Run progress: 80.56% complete, ETA 01:52:56
# Fork: 3 of 3
# Warmup Iteration   1: 1.998 ns/op
# Warmup Iteration   2: 1.948 ns/op
# Warmup Iteration   3: 1.940 ns/op
Iteration   1: 1.940 ns/op
Iteration   2: 1.938 ns/op
Iteration   3: 1.939 ns/op
Iteration   4: 1.951 ns/op
Iteration   5: 2.249 ns/op


Result "org.openjdk.bench.valhalla.array.read.Inline64int.Val_as_Val_to_Ref_read":
  1.881 ±(99.9%) 0.279 ns/op [Average]
  (min, avg, max) = (1.075, 1.881, 2.249), stdev = 0.261
  CI (99.9%): [1.602, 2.160] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.read.Inline64int.Val_as_Val_to_Val_read
# Parameters: (size = 100)

# Run progress: 80.59% complete, ETA 01:52:48
# Fork: 1 of 3
# Warmup Iteration   1: 1.370 ns/op
# Warmup Iteration   2: 1.511 ns/op
# Warmup Iteration   3: 1.056 ns/op
Iteration   1: 0.930 ns/op
Iteration   2: 0.932 ns/op
Iteration   3: 0.932 ns/op
Iteration   4: 0.931 ns/op
Iteration   5: 0.930 ns/op

# Run progress: 80.61% complete, ETA 01:52:39
# Fork: 2 of 3
# Warmup Iteration   1: 0.938 ns/op
# Warmup Iteration   2: 0.930 ns/op
# Warmup Iteration   3: 0.931 ns/op
Iteration   1: 0.932 ns/op
Iteration   2: 0.937 ns/op
Iteration   3: 0.932 ns/op
Iteration   4: 0.928 ns/op
Iteration   5: 0.928 ns/op

# Run progress: 80.64% complete, ETA 01:52:31
# Fork: 3 of 3
# Warmup Iteration   1: 0.937 ns/op
# Warmup Iteration   2: 0.929 ns/op
# Warmup Iteration   3: 0.937 ns/op
Iteration   1: 0.928 ns/op
Iteration   2: 0.930 ns/op
Iteration   3: 0.929 ns/op
Iteration   4: 0.927 ns/op
Iteration   5: 0.926 ns/op


Result "org.openjdk.bench.valhalla.array.read.Inline64int.Val_as_Val_to_Val_read":
  0.930 ±(99.9%) 0.003 ns/op [Average]
  (min, avg, max) = (0.926, 0.930, 0.937), stdev = 0.003
  CI (99.9%): [0.927, 0.933] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.read.Inline64int.Val_as_Val_to_Val_read
# Parameters: (size = 1000000)

# Run progress: 80.66% complete, ETA 01:52:22
# Fork: 1 of 3
# Warmup Iteration   1: 0.944 ns/op
# Warmup Iteration   2: 0.936 ns/op
# Warmup Iteration   3: 0.929 ns/op
Iteration   1: 0.929 ns/op
Iteration   2: 0.931 ns/op
Iteration   3: 0.936 ns/op
Iteration   4: 0.929 ns/op
Iteration   5: 0.932 ns/op

# Run progress: 80.69% complete, ETA 01:52:13
# Fork: 2 of 3
# Warmup Iteration   1: 0.961 ns/op
# Warmup Iteration   2: 0.936 ns/op
# Warmup Iteration   3: 0.936 ns/op
Iteration   1: 0.929 ns/op
Iteration   2: 0.937 ns/op
Iteration   3: 0.929 ns/op
Iteration   4: 0.933 ns/op
Iteration   5: 0.942 ns/op

# Run progress: 80.71% complete, ETA 01:52:05
# Fork: 3 of 3
# Warmup Iteration   1: 0.940 ns/op
# Warmup Iteration   2: 0.934 ns/op
# Warmup Iteration   3: 0.946 ns/op
Iteration   1: 1.068 ns/op
Iteration   2: 0.932 ns/op
Iteration   3: 0.929 ns/op
Iteration   4: 0.939 ns/op
Iteration   5: 0.933 ns/op


Result "org.openjdk.bench.valhalla.array.read.Inline64int.Val_as_Val_to_Val_read":
  0.942 ±(99.9%) 0.037 ns/op [Average]
  (min, avg, max) = (0.929, 0.942, 1.068), stdev = 0.035
  CI (99.9%): [0.904, 0.979] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.read.Primitive128int.p128int_read
# Parameters: (size = 100)

# Run progress: 80.74% complete, ETA 01:51:56
# Fork: 1 of 3
# Warmup Iteration   1: 1.556 ns/op
# Warmup Iteration   2: 1.542 ns/op
# Warmup Iteration   3: 1.533 ns/op
Iteration   1: 1.531 ns/op
Iteration   2: 1.536 ns/op
Iteration   3: 1.533 ns/op
Iteration   4: 1.534 ns/op
Iteration   5: 1.535 ns/op

# Run progress: 80.76% complete, ETA 01:51:48
# Fork: 2 of 3
# Warmup Iteration   1: 1.550 ns/op
# Warmup Iteration   2: 1.537 ns/op
# Warmup Iteration   3: 1.546 ns/op
Iteration   1: 1.575 ns/op
Iteration   2: 1.535 ns/op
Iteration   3: 1.550 ns/op
Iteration   4: 1.532 ns/op
Iteration   5: 1.535 ns/op

# Run progress: 80.78% complete, ETA 01:51:39
# Fork: 3 of 3
# Warmup Iteration   1: 1.553 ns/op
# Warmup Iteration   2: 1.538 ns/op
# Warmup Iteration   3: 1.542 ns/op
Iteration   1: 1.536 ns/op
Iteration   2: 1.533 ns/op
Iteration   3: 1.540 ns/op
Iteration   4: 1.548 ns/op
Iteration   5: 1.536 ns/op


Result "org.openjdk.bench.valhalla.array.read.Primitive128int.p128int_read":
  1.539 ±(99.9%) 0.012 ns/op [Average]
  (min, avg, max) = (1.531, 1.539, 1.575), stdev = 0.011
  CI (99.9%): [1.527, 1.551] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.read.Primitive128int.p128int_read
# Parameters: (size = 1000000)

# Run progress: 80.81% complete, ETA 01:51:30
# Fork: 1 of 3
# Warmup Iteration   1: 1.545 ns/op
# Warmup Iteration   2: 1.535 ns/op
# Warmup Iteration   3: 1.536 ns/op
Iteration   1: 1.549 ns/op
Iteration   2: 1.542 ns/op
Iteration   3: 1.541 ns/op
Iteration   4: 1.545 ns/op
Iteration   5: 1.535 ns/op

# Run progress: 80.83% complete, ETA 01:51:22
# Fork: 2 of 3
# Warmup Iteration   1: 1.546 ns/op
# Warmup Iteration   2: 1.536 ns/op
# Warmup Iteration   3: 1.536 ns/op
Iteration   1: 1.558 ns/op
Iteration   2: 1.533 ns/op
Iteration   3: 1.546 ns/op
Iteration   4: 1.532 ns/op
Iteration   5: 1.549 ns/op

# Run progress: 80.86% complete, ETA 01:51:13
# Fork: 3 of 3
# Warmup Iteration   1: 1.557 ns/op
# Warmup Iteration   2: 1.539 ns/op
# Warmup Iteration   3: 1.534 ns/op
Iteration   1: 1.532 ns/op
Iteration   2: 1.534 ns/op
Iteration   3: 1.534 ns/op
Iteration   4: 1.532 ns/op
Iteration   5: 1.535 ns/op


Result "org.openjdk.bench.valhalla.array.read.Primitive128int.p128int_read":
  1.540 ±(99.9%) 0.009 ns/op [Average]
  (min, avg, max) = (1.532, 1.540, 1.558), stdev = 0.008
  CI (99.9%): [1.531, 1.548] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.read.Primitive32int.p32int_read
# Parameters: (size = 100)

# Run progress: 80.88% complete, ETA 01:51:05
# Fork: 1 of 3
# Warmup Iteration   1: 0.548 ns/op
# Warmup Iteration   2: 0.544 ns/op
# Warmup Iteration   3: 0.543 ns/op
Iteration   1: 0.543 ns/op
Iteration   2: 0.544 ns/op
Iteration   3: 0.550 ns/op
Iteration   4: 0.571 ns/op
Iteration   5: 0.597 ns/op

# Run progress: 80.91% complete, ETA 01:50:57
# Fork: 2 of 3
# Warmup Iteration   1: 0.556 ns/op
# Warmup Iteration   2: 0.544 ns/op
# Warmup Iteration   3: 0.543 ns/op
Iteration   1: 0.545 ns/op
Iteration   2: 0.545 ns/op
Iteration   3: 0.549 ns/op
Iteration   4: 0.546 ns/op
Iteration   5: 0.565 ns/op

# Run progress: 80.93% complete, ETA 01:50:48
# Fork: 3 of 3
# Warmup Iteration   1: 0.546 ns/op
# Warmup Iteration   2: 0.544 ns/op
# Warmup Iteration   3: 0.547 ns/op
Iteration   1: 0.543 ns/op
Iteration   2: 0.543 ns/op
Iteration   3: 0.544 ns/op
Iteration   4: 0.543 ns/op
Iteration   5: 0.543 ns/op


Result "org.openjdk.bench.valhalla.array.read.Primitive32int.p32int_read":
  0.551 ±(99.9%) 0.016 ns/op [Average]
  (min, avg, max) = (0.543, 0.551, 0.597), stdev = 0.015
  CI (99.9%): [0.535, 0.567] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.read.Primitive32int.p32int_read
# Parameters: (size = 1000000)

# Run progress: 80.96% complete, ETA 01:50:39
# Fork: 1 of 3
# Warmup Iteration   1: 0.547 ns/op
# Warmup Iteration   2: 0.544 ns/op
# Warmup Iteration   3: 0.543 ns/op
Iteration   1: 0.543 ns/op
Iteration   2: 0.547 ns/op
Iteration   3: 0.547 ns/op
Iteration   4: 0.597 ns/op
Iteration   5: 0.543 ns/op

# Run progress: 80.98% complete, ETA 01:50:31
# Fork: 2 of 3
# Warmup Iteration   1: 0.570 ns/op
# Warmup Iteration   2: 0.544 ns/op
# Warmup Iteration   3: 0.613 ns/op
Iteration   1: 0.616 ns/op
Iteration   2: 0.615 ns/op
Iteration   3: 0.614 ns/op
Iteration   4: 0.616 ns/op
Iteration   5: 0.617 ns/op

# Run progress: 81.00% complete, ETA 01:50:22
# Fork: 3 of 3
# Warmup Iteration   1: 0.551 ns/op
# Warmup Iteration   2: 0.548 ns/op
# Warmup Iteration   3: 0.544 ns/op
Iteration   1: 0.547 ns/op
Iteration   2: 0.545 ns/op
Iteration   3: 0.543 ns/op
Iteration   4: 0.545 ns/op
Iteration   5: 0.546 ns/op


Result "org.openjdk.bench.valhalla.array.read.Primitive32int.p32int_read":
  0.572 ±(99.9%) 0.037 ns/op [Average]
  (min, avg, max) = (0.543, 0.572, 0.617), stdev = 0.035
  CI (99.9%): [0.535, 0.609] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.read.Primitive64byte.p64byte_read
# Parameters: (size = 100)

# Run progress: 81.03% complete, ETA 01:50:14
# Fork: 1 of 3
# Warmup Iteration   1: 2.782 ns/op
# Warmup Iteration   2: 2.769 ns/op
# Warmup Iteration   3: 2.767 ns/op
Iteration   1: 2.922 ns/op
Iteration   2: 2.823 ns/op
Iteration   3: 2.774 ns/op
Iteration   4: 2.761 ns/op
Iteration   5: 2.764 ns/op

# Run progress: 81.05% complete, ETA 01:50:05
# Fork: 2 of 3
# Warmup Iteration   1: 2.780 ns/op
# Warmup Iteration   2: 2.766 ns/op
# Warmup Iteration   3: 2.766 ns/op
Iteration   1: 2.761 ns/op
Iteration   2: 2.761 ns/op
Iteration   3: 2.760 ns/op
Iteration   4: 2.767 ns/op
Iteration   5: 2.783 ns/op

# Run progress: 81.08% complete, ETA 01:49:56
# Fork: 3 of 3
# Warmup Iteration   1: 2.782 ns/op
# Warmup Iteration   2: 2.768 ns/op
# Warmup Iteration   3: 2.764 ns/op
Iteration   1: 2.761 ns/op
Iteration   2: 2.759 ns/op
Iteration   3: 2.772 ns/op
Iteration   4: 2.764 ns/op
Iteration   5: 2.799 ns/op


Result "org.openjdk.bench.valhalla.array.read.Primitive64byte.p64byte_read":
  2.782 ±(99.9%) 0.046 ns/op [Average]
  (min, avg, max) = (2.759, 2.782, 2.922), stdev = 0.043
  CI (99.9%): [2.736, 2.828] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.read.Primitive64byte.p64byte_read
# Parameters: (size = 1000000)

# Run progress: 81.10% complete, ETA 01:49:48
# Fork: 1 of 3
# Warmup Iteration   1: 2.789 ns/op
# Warmup Iteration   2: 2.766 ns/op
# Warmup Iteration   3: 2.837 ns/op
Iteration   1: 2.829 ns/op
Iteration   2: 2.796 ns/op
Iteration   3: 2.761 ns/op
Iteration   4: 2.762 ns/op
Iteration   5: 2.763 ns/op

# Run progress: 81.13% complete, ETA 01:49:39
# Fork: 2 of 3
# Warmup Iteration   1: 2.788 ns/op
# Warmup Iteration   2: 2.769 ns/op
# Warmup Iteration   3: 2.761 ns/op
Iteration   1: 2.765 ns/op
Iteration   2: 2.763 ns/op
Iteration   3: 2.766 ns/op
Iteration   4: 2.794 ns/op
Iteration   5: 2.761 ns/op

# Run progress: 81.15% complete, ETA 01:49:31
# Fork: 3 of 3
# Warmup Iteration   1: 2.794 ns/op
# Warmup Iteration   2: 2.765 ns/op
# Warmup Iteration   3: 2.762 ns/op
Iteration   1: 2.763 ns/op
Iteration   2: 2.778 ns/op
Iteration   3: 2.764 ns/op
Iteration   4: 2.761 ns/op
Iteration   5: 2.769 ns/op


Result "org.openjdk.bench.valhalla.array.read.Primitive64byte.p64byte_read":
  2.773 ±(99.9%) 0.021 ns/op [Average]
  (min, avg, max) = (2.761, 2.773, 2.829), stdev = 0.019
  CI (99.9%): [2.752, 2.794] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.read.Primitive64int.read
# Parameters: (size = 100)

# Run progress: 81.18% complete, ETA 01:49:22
# Fork: 1 of 3
# Warmup Iteration   1: 1.019 ns/op
# Warmup Iteration   2: 0.981 ns/op
# Warmup Iteration   3: 0.964 ns/op
Iteration   1: 0.977 ns/op
Iteration   2: 0.964 ns/op
Iteration   3: 0.965 ns/op
Iteration   4: 0.964 ns/op
Iteration   5: 0.965 ns/op

# Run progress: 81.20% complete, ETA 01:49:14
# Fork: 2 of 3
# Warmup Iteration   1: 0.975 ns/op
# Warmup Iteration   2: 0.969 ns/op
# Warmup Iteration   3: 0.966 ns/op
Iteration   1: 0.964 ns/op
Iteration   2: 0.965 ns/op
Iteration   3: 0.964 ns/op
Iteration   4: 0.980 ns/op
Iteration   5: 0.964 ns/op

# Run progress: 81.23% complete, ETA 01:49:05
# Fork: 3 of 3
# Warmup Iteration   1: 0.971 ns/op
# Warmup Iteration   2: 0.966 ns/op
# Warmup Iteration   3: 0.973 ns/op
Iteration   1: 0.964 ns/op
Iteration   2: 0.964 ns/op
Iteration   3: 0.965 ns/op
Iteration   4: 0.967 ns/op
Iteration   5: 0.974 ns/op


Result "org.openjdk.bench.valhalla.array.read.Primitive64int.read":
  0.967 ±(99.9%) 0.006 ns/op [Average]
  (min, avg, max) = (0.964, 0.967, 0.980), stdev = 0.005
  CI (99.9%): [0.962, 0.973] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.read.Primitive64int.read
# Parameters: (size = 1000000)

# Run progress: 81.25% complete, ETA 01:48:56
# Fork: 1 of 3
# Warmup Iteration   1: 0.972 ns/op
# Warmup Iteration   2: 0.967 ns/op
# Warmup Iteration   3: 0.989 ns/op
Iteration   1: 1.121 ns/op
Iteration   2: 1.212 ns/op
Iteration   3: 1.176 ns/op
Iteration   4: 1.037 ns/op
Iteration   5: 0.983 ns/op

# Run progress: 81.27% complete, ETA 01:48:48
# Fork: 2 of 3
# Warmup Iteration   1: 0.971 ns/op
# Warmup Iteration   2: 0.966 ns/op
# Warmup Iteration   3: 0.993 ns/op
Iteration   1: 0.983 ns/op
Iteration   2: 0.984 ns/op
Iteration   3: 1.119 ns/op
Iteration   4: 1.149 ns/op
Iteration   5: 1.102 ns/op

# Run progress: 81.30% complete, ETA 01:48:39
# Fork: 3 of 3
# Warmup Iteration   1: 0.971 ns/op
# Warmup Iteration   2: 0.980 ns/op
# Warmup Iteration   3: 1.066 ns/op
Iteration   1: 1.069 ns/op
Iteration   2: 0.980 ns/op
Iteration   3: 0.989 ns/op
Iteration   4: 1.143 ns/op
Iteration   5: 1.193 ns/op


Result "org.openjdk.bench.valhalla.array.read.Primitive64int.read":
  1.083 ±(99.9%) 0.090 ns/op [Average]
  (min, avg, max) = (0.980, 1.083, 1.212), stdev = 0.085
  CI (99.9%): [0.992, 1.173] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.read.Primitive64long.p64long_read
# Parameters: (size = 100)

# Run progress: 81.32% complete, ETA 01:48:31
# Fork: 1 of 3
# Warmup Iteration   1: 0.597 ns/op
# Warmup Iteration   2: 0.672 ns/op
# Warmup Iteration   3: 0.733 ns/op
Iteration   1: 0.584 ns/op
Iteration   2: 0.631 ns/op
Iteration   3: 0.647 ns/op
Iteration   4: 0.587 ns/op
Iteration   5: 0.543 ns/op

# Run progress: 81.35% complete, ETA 01:48:22
# Fork: 2 of 3
# Warmup Iteration   1: 0.550 ns/op
# Warmup Iteration   2: 0.546 ns/op
# Warmup Iteration   3: 0.614 ns/op
Iteration   1: 0.636 ns/op
Iteration   2: 0.547 ns/op
Iteration   3: 0.649 ns/op
Iteration   4: 0.683 ns/op
Iteration   5: 0.690 ns/op

# Run progress: 81.37% complete, ETA 01:48:13
# Fork: 3 of 3
# Warmup Iteration   1: 0.577 ns/op
# Warmup Iteration   2: 0.545 ns/op
# Warmup Iteration   3: 0.570 ns/op
Iteration   1: 0.623 ns/op
Iteration   2: 0.618 ns/op
Iteration   3: 0.546 ns/op
Iteration   4: 0.652 ns/op
Iteration   5: 0.770 ns/op


Result "org.openjdk.bench.valhalla.array.read.Primitive64long.p64long_read":
  0.627 ±(99.9%) 0.066 ns/op [Average]
  (min, avg, max) = (0.543, 0.627, 0.770), stdev = 0.061
  CI (99.9%): [0.561, 0.693] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.read.Primitive64long.p64long_read
# Parameters: (size = 1000000)

# Run progress: 81.40% complete, ETA 01:48:05
# Fork: 1 of 3
# Warmup Iteration   1: 0.746 ns/op
# Warmup Iteration   2: 0.693 ns/op
# Warmup Iteration   3: 0.689 ns/op
Iteration   1: 0.612 ns/op
Iteration   2: 0.636 ns/op
Iteration   3: 0.612 ns/op
Iteration   4: 0.561 ns/op
Iteration   5: 0.546 ns/op

# Run progress: 81.42% complete, ETA 01:47:56
# Fork: 2 of 3
# Warmup Iteration   1: 0.572 ns/op
# Warmup Iteration   2: 0.548 ns/op
# Warmup Iteration   3: 0.579 ns/op
Iteration   1: 0.544 ns/op
Iteration   2: 0.568 ns/op
Iteration   3: 0.697 ns/op
Iteration   4: 0.778 ns/op
Iteration   5: 0.760 ns/op

# Run progress: 81.45% complete, ETA 01:47:48
# Fork: 3 of 3
# Warmup Iteration   1: 0.552 ns/op
# Warmup Iteration   2: 0.545 ns/op
# Warmup Iteration   3: 0.564 ns/op
Iteration   1: 0.621 ns/op
Iteration   2: 0.630 ns/op
Iteration   3: 0.543 ns/op
Iteration   4: 0.596 ns/op
Iteration   5: 0.769 ns/op


Result "org.openjdk.bench.valhalla.array.read.Primitive64long.p64long_read":
  0.632 ±(99.9%) 0.088 ns/op [Average]
  (min, avg, max) = (0.543, 0.632, 0.778), stdev = 0.083
  CI (99.9%): [0.543, 0.720] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.set.Inline128int.New_to_Ref_as_Ref_set
# Parameters: (size = 100)

# Run progress: 81.47% complete, ETA 01:47:39
# Fork: 1 of 3
# Warmup Iteration   1: 1820.534 ns/op
# Warmup Iteration   2: 1083.590 ns/op
# Warmup Iteration   3: 1210.733 ns/op
Iteration   1: 1261.878 ns/op
Iteration   2: 1186.123 ns/op
Iteration   3: 1254.773 ns/op
Iteration   4: 1247.416 ns/op
Iteration   5: 1225.112 ns/op

# Run progress: 81.50% complete, ETA 01:47:30
# Fork: 2 of 3
# Warmup Iteration   1: 947.919 ns/op
# Warmup Iteration   2: 793.512 ns/op
# Warmup Iteration   3: 1384.359 ns/op
Iteration   1: 1891.616 ns/op
Iteration   2: 1887.592 ns/op
Iteration   3: 1987.863 ns/op
Iteration   4: 1920.286 ns/op
Iteration   5: 1871.974 ns/op

# Run progress: 81.52% complete, ETA 01:47:22
# Fork: 3 of 3
# Warmup Iteration   1: 2115.674 ns/op
# Warmup Iteration   2: 1656.005 ns/op
# Warmup Iteration   3: 1875.973 ns/op
Iteration   1: 1870.040 ns/op
Iteration   2: 1880.400 ns/op
Iteration   3: 1875.668 ns/op
Iteration   4: 1870.242 ns/op
Iteration   5: 1881.018 ns/op


Result "org.openjdk.bench.valhalla.array.set.Inline128int.New_to_Ref_as_Ref_set":
  1674.133 ±(99.9%) 345.412 ns/op [Average]
  (min, avg, max) = (1186.123, 1674.133, 1987.863), stdev = 323.099
  CI (99.9%): [1328.721, 2019.546] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.set.Inline128int.New_to_Ref_as_Ref_set
# Parameters: (size = 1000000)

# Run progress: 81.54% complete, ETA 01:47:13
# Fork: 1 of 3
# Warmup Iteration   1: 48599549.571 ns/op
# Warmup Iteration   2: 47066123.091 ns/op
# Warmup Iteration   3: 23692781.977 ns/op
Iteration   1: 18280619.054 ns/op
Iteration   2: 18043938.982 ns/op
Iteration   3: 18757447.519 ns/op
Iteration   4: 18077386.911 ns/op
Iteration   5: 18159970.982 ns/op

# Run progress: 81.57% complete, ETA 01:47:05
# Fork: 2 of 3
# Warmup Iteration   1: 32898221.774 ns/op
# Warmup Iteration   2: 32980778.226 ns/op
# Warmup Iteration   3: 12148997.988 ns/op
Iteration   1: 20840945.571 ns/op
Iteration   2: 9168055.550 ns/op
Iteration   3: 9342052.852 ns/op
Iteration   4: 9106075.221 ns/op
Iteration   5: 9118348.589 ns/op

# Run progress: 81.59% complete, ETA 01:46:57
# Fork: 3 of 3
# Warmup Iteration   1: 16342668.694 ns/op
# Warmup Iteration   2: 9108844.973 ns/op
# Warmup Iteration   3: 17142618.644 ns/op
Iteration   1: 9492192.217 ns/op
Iteration   2: 9563745.283 ns/op
Iteration   3: 9030353.045 ns/op
Iteration   4: 9047018.223 ns/op
Iteration   5: 9045526.411 ns/op


Result "org.openjdk.bench.valhalla.array.set.Inline128int.New_to_Ref_as_Ref_set":
  13004911.761 ±(99.9%) 5188670.478 ns/op [Average]
  (min, avg, max) = (9030353.045, 13004911.761, 20840945.571), stdev = 4853485.585
  CI (99.9%): [7816241.282, 18193582.239] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.set.Inline128int.New_to_Val_as_Val_set
# Parameters: (size = 100)

# Run progress: 81.62% complete, ETA 01:46:48
# Fork: 1 of 3
# Warmup Iteration   1: 908.879 ns/op
# Warmup Iteration   2: 794.005 ns/op
# Warmup Iteration   3: 910.204 ns/op
Iteration   1: 908.665 ns/op
Iteration   2: 919.479 ns/op
Iteration   3: 909.466 ns/op
Iteration   4: 912.527 ns/op
Iteration   5: 906.978 ns/op

# Run progress: 81.64% complete, ETA 01:46:40
# Fork: 2 of 3
# Warmup Iteration   1: 892.932 ns/op
# Warmup Iteration   2: 796.211 ns/op
# Warmup Iteration   3: 910.279 ns/op
Iteration   1: 910.245 ns/op
Iteration   2: 940.561 ns/op
Iteration   3: 1040.596 ns/op
Iteration   4: 998.121 ns/op
Iteration   5: 913.817 ns/op

# Run progress: 81.67% complete, ETA 01:46:31
# Fork: 3 of 3
# Warmup Iteration   1: 882.096 ns/op
# Warmup Iteration   2: 792.106 ns/op
# Warmup Iteration   3: 907.945 ns/op
Iteration   1: 907.054 ns/op
Iteration   2: 907.933 ns/op
Iteration   3: 911.296 ns/op
Iteration   4: 912.055 ns/op
Iteration   5: 908.591 ns/op


Result "org.openjdk.bench.valhalla.array.set.Inline128int.New_to_Val_as_Val_set":
  927.159 ±(99.9%) 41.876 ns/op [Average]
  (min, avg, max) = (906.978, 927.159, 1040.596), stdev = 39.171
  CI (99.9%): [885.283, 969.035] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.set.Inline128int.New_to_Val_as_Val_set
# Parameters: (size = 1000000)

# Run progress: 81.69% complete, ETA 01:46:23
# Fork: 1 of 3
# Warmup Iteration   1: 15810415.359 ns/op
# Warmup Iteration   2: 10672414.042 ns/op
# Warmup Iteration   3: 16224299.742 ns/op
Iteration   1: 8919078.211 ns/op
Iteration   2: 8800251.825 ns/op
Iteration   3: 8987113.566 ns/op
Iteration   4: 9106331.459 ns/op
Iteration   5: 8929453.579 ns/op

# Run progress: 81.72% complete, ETA 01:46:14
# Fork: 2 of 3
# Warmup Iteration   1: 15417848.485 ns/op
# Warmup Iteration   2: 9091031.532 ns/op
# Warmup Iteration   3: 10141921.250 ns/op
Iteration   1: 10427233.680 ns/op
Iteration   2: 10200386.778 ns/op
Iteration   3: 9342273.312 ns/op
Iteration   4: 8900541.307 ns/op
Iteration   5: 9518506.292 ns/op

# Run progress: 81.74% complete, ETA 01:46:06
# Fork: 3 of 3
# Warmup Iteration   1: 17344980.603 ns/op
# Warmup Iteration   2: 10248973.330 ns/op
# Warmup Iteration   3: 12534332.815 ns/op
Iteration   1: 8890038.377 ns/op
Iteration   2: 8911063.228 ns/op
Iteration   3: 8927541.298 ns/op
Iteration   4: 8932446.272 ns/op
Iteration   5: 8804085.504 ns/op


Result "org.openjdk.bench.valhalla.array.set.Inline128int.New_to_Val_as_Val_set":
  9173089.646 ±(99.9%) 538752.502 ns/op [Average]
  (min, avg, max) = (8800251.825, 9173089.646, 10427233.680), stdev = 503949.424
  CI (99.9%): [8634337.144, 9711842.148] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.set.Inline128int.Ref_to_Ref_as_Ref_set
# Parameters: (size = 100)

# Run progress: 81.76% complete, ETA 01:45:57
# Fork: 1 of 3
# Warmup Iteration   1: 931.887 ns/op
# Warmup Iteration   2: 816.335 ns/op
# Warmup Iteration   3: 920.129 ns/op
Iteration   1: 918.905 ns/op
Iteration   2: 910.369 ns/op
Iteration   3: 916.082 ns/op
Iteration   4: 921.923 ns/op
Iteration   5: 910.382 ns/op

# Run progress: 81.79% complete, ETA 01:45:48
# Fork: 2 of 3
# Warmup Iteration   1: 992.846 ns/op
# Warmup Iteration   2: 807.231 ns/op
# Warmup Iteration   3: 911.991 ns/op
Iteration   1: 911.510 ns/op
Iteration   2: 908.824 ns/op
Iteration   3: 911.109 ns/op
Iteration   4: 907.228 ns/op
Iteration   5: 908.134 ns/op

# Run progress: 81.81% complete, ETA 01:45:40
# Fork: 3 of 3
# Warmup Iteration   1: 1049.530 ns/op
# Warmup Iteration   2: 891.921 ns/op
# Warmup Iteration   3: 951.349 ns/op
Iteration   1: 908.039 ns/op
Iteration   2: 906.236 ns/op
Iteration   3: 904.375 ns/op
Iteration   4: 905.485 ns/op
Iteration   5: 905.435 ns/op


Result "org.openjdk.bench.valhalla.array.set.Inline128int.Ref_to_Ref_as_Ref_set":
  910.269 ±(99.9%) 5.456 ns/op [Average]
  (min, avg, max) = (904.375, 910.269, 921.923), stdev = 5.103
  CI (99.9%): [904.814, 915.725] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.set.Inline128int.Ref_to_Ref_as_Ref_set
# Parameters: (size = 1000000)

# Run progress: 81.84% complete, ETA 01:45:31
# Fork: 1 of 3
# Warmup Iteration   1: 16637348.361 ns/op
# Warmup Iteration   2: 9062864.589 ns/op
# Warmup Iteration   3: 9078474.330 ns/op
Iteration   1: 9352829.861 ns/op
Iteration   2: 9445652.645 ns/op
Iteration   3: 8977098.823 ns/op
Iteration   4: 9147891.673 ns/op
Iteration   5: 8890550.439 ns/op

# Run progress: 81.86% complete, ETA 01:45:23
# Fork: 2 of 3
# Warmup Iteration   1: 16286585.355 ns/op
# Warmup Iteration   2: 9065016.741 ns/op
# Warmup Iteration   3: 15546285.985 ns/op
Iteration   1: 8727789.852 ns/op
Iteration   2: 8680052.709 ns/op
Iteration   3: 8735037.678 ns/op
Iteration   4: 8949151.186 ns/op
Iteration   5: 8765337.687 ns/op

# Run progress: 81.89% complete, ETA 01:45:14
# Fork: 3 of 3
# Warmup Iteration   1: 15908080.734 ns/op
# Warmup Iteration   2: 10209138.465 ns/op
# Warmup Iteration   3: 13279357.910 ns/op
Iteration   1: 8995664.429 ns/op
Iteration   2: 9174530.300 ns/op
Iteration   3: 9186660.991 ns/op
Iteration   4: 8945829.646 ns/op
Iteration   5: 8939275.814 ns/op


Result "org.openjdk.bench.valhalla.array.set.Inline128int.Ref_to_Ref_as_Ref_set":
  8994223.582 ±(99.9%) 244658.411 ns/op [Average]
  (min, avg, max) = (8680052.709, 8994223.582, 9445652.645), stdev = 228853.630
  CI (99.9%): [8749565.171, 9238881.993] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.set.Inline128int.Ref_to_Val_as_Val_set
# Parameters: (size = 100)

# Run progress: 81.91% complete, ETA 01:45:06
# Fork: 1 of 3
# Warmup Iteration   1: 1075.329 ns/op
# Warmup Iteration   2: 944.941 ns/op
# Warmup Iteration   3: 1011.421 ns/op
Iteration   1: 907.805 ns/op
Iteration   2: 913.055 ns/op
Iteration   3: 912.135 ns/op
Iteration   4: 954.897 ns/op
Iteration   5: 921.970 ns/op

# Run progress: 81.94% complete, ETA 01:44:57
# Fork: 2 of 3
# Warmup Iteration   1: 912.884 ns/op
# Warmup Iteration   2: 800.408 ns/op
# Warmup Iteration   3: 912.847 ns/op
Iteration   1: 922.524 ns/op
Iteration   2: 923.348 ns/op
Iteration   3: 913.089 ns/op
Iteration   4: 908.694 ns/op
Iteration   5: 945.992 ns/op

# Run progress: 81.96% complete, ETA 01:44:48
# Fork: 3 of 3
# Warmup Iteration   1: 1105.011 ns/op
# Warmup Iteration   2: 841.482 ns/op
# Warmup Iteration   3: 904.496 ns/op
Iteration   1: 1063.174 ns/op
Iteration   2: 1186.566 ns/op
Iteration   3: 1220.654 ns/op
Iteration   4: 1111.267 ns/op
Iteration   5: 1044.383 ns/op


Result "org.openjdk.bench.valhalla.array.set.Inline128int.Ref_to_Val_as_Val_set":
  989.970 ±(99.9%) 115.324 ns/op [Average]
  (min, avg, max) = (907.805, 989.970, 1220.654), stdev = 107.874
  CI (99.9%): [874.646, 1105.294] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.set.Inline128int.Ref_to_Val_as_Val_set
# Parameters: (size = 1000000)

# Run progress: 81.99% complete, ETA 01:44:40
# Fork: 1 of 3
# Warmup Iteration   1: 19932450.980 ns/op
# Warmup Iteration   2: 10310902.633 ns/op
# Warmup Iteration   3: 9229770.836 ns/op
Iteration   1: 9039742.188 ns/op
Iteration   2: 8927260.699 ns/op
Iteration   3: 9502168.224 ns/op
Iteration   4: 10185754.535 ns/op
Iteration   5: 9975153.465 ns/op

# Run progress: 82.01% complete, ETA 01:44:31
# Fork: 2 of 3
# Warmup Iteration   1: 16185265.206 ns/op
# Warmup Iteration   2: 11748482.955 ns/op
# Warmup Iteration   3: 11480288.830 ns/op
Iteration   1: 11277090.278 ns/op
Iteration   2: 9140150.901 ns/op
Iteration   3: 9062741.071 ns/op
Iteration   4: 9386735.468 ns/op
Iteration   5: 10443868.134 ns/op

# Run progress: 82.03% complete, ETA 01:44:23
# Fork: 3 of 3
# Warmup Iteration   1: 19477438.308 ns/op
# Warmup Iteration   2: 9172485.360 ns/op
# Warmup Iteration   3: 9515858.491 ns/op
Iteration   1: 9989531.049 ns/op
Iteration   2: 10728806.137 ns/op
Iteration   3: 11623143.195 ns/op
Iteration   4: 9877022.650 ns/op
Iteration   5: 9447253.888 ns/op


Result "org.openjdk.bench.valhalla.array.set.Inline128int.Ref_to_Val_as_Val_set":
  9907094.792 ±(99.9%) 882251.877 ns/op [Average]
  (min, avg, max) = (8927260.699, 9907094.792, 11623143.195), stdev = 825258.953
  CI (99.9%): [9024842.916, 10789346.669] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.set.Inline128int.Val_to_Ref_as_Ref_set
# Parameters: (size = 100)

# Run progress: 82.06% complete, ETA 01:44:14
# Fork: 1 of 3
# Warmup Iteration   1: 1262.903 ns/op
# Warmup Iteration   2: 1291.787 ns/op
# Warmup Iteration   3: 1200.755 ns/op
Iteration   1: 1146.668 ns/op
Iteration   2: 1119.604 ns/op
Iteration   3: 1074.016 ns/op
Iteration   4: 912.942 ns/op
Iteration   5: 910.528 ns/op

# Run progress: 82.08% complete, ETA 01:44:06
# Fork: 2 of 3
# Warmup Iteration   1: 922.000 ns/op
# Warmup Iteration   2: 912.051 ns/op
# Warmup Iteration   3: 1088.276 ns/op
Iteration   1: 989.805 ns/op
Iteration   2: 914.234 ns/op
Iteration   3: 974.273 ns/op
Iteration   4: 1138.685 ns/op
Iteration   5: 1170.921 ns/op

# Run progress: 82.11% complete, ETA 01:43:57
# Fork: 3 of 3
# Warmup Iteration   1: 999.137 ns/op
# Warmup Iteration   2: 809.373 ns/op
# Warmup Iteration   3: 959.876 ns/op
Iteration   1: 1104.766 ns/op
Iteration   2: 1200.487 ns/op
Iteration   3: 2134.255 ns/op
Iteration   4: 1871.698 ns/op
Iteration   5: 1883.781 ns/op


Result "org.openjdk.bench.valhalla.array.set.Inline128int.Val_to_Ref_as_Ref_set":
  1236.444 ±(99.9%) 419.286 ns/op [Average]
  (min, avg, max) = (910.528, 1236.444, 2134.255), stdev = 392.200
  CI (99.9%): [817.159, 1655.730] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.set.Inline128int.Val_to_Ref_as_Ref_set
# Parameters: (size = 1000000)

# Run progress: 82.13% complete, ETA 01:43:48
# Fork: 1 of 3
# Warmup Iteration   1: 39388775.654 ns/op
# Warmup Iteration   2: 25212187.500 ns/op
# Warmup Iteration   3: 18361531.818 ns/op
Iteration   1: 18437165.179 ns/op
Iteration   2: 17981564.333 ns/op
Iteration   3: 18295508.196 ns/op
Iteration   4: 18281295.316 ns/op
Iteration   5: 18368369.691 ns/op

# Run progress: 82.16% complete, ETA 01:43:40
# Fork: 2 of 3
# Warmup Iteration   1: 40524091.640 ns/op
# Warmup Iteration   2: 23467338.186 ns/op
# Warmup Iteration   3: 18304846.218 ns/op
Iteration   1: 19236782.226 ns/op
Iteration   2: 18924791.667 ns/op
Iteration   3: 19587649.038 ns/op
Iteration   4: 18915594.130 ns/op
Iteration   5: 19670326.135 ns/op

# Run progress: 82.18% complete, ETA 01:43:31
# Fork: 3 of 3
# Warmup Iteration   1: 24674216.463 ns/op
# Warmup Iteration   2: 14686568.841 ns/op
# Warmup Iteration   3: 10296368.204 ns/op
Iteration   1: 9485079.822 ns/op
Iteration   2: 8877180.193 ns/op
Iteration   3: 8992904.496 ns/op
Iteration   4: 8964731.938 ns/op
Iteration   5: 9304577.157 ns/op


Result "org.openjdk.bench.valhalla.array.set.Inline128int.Val_to_Ref_as_Ref_set":
  15554901.301 ±(99.9%) 5058538.236 ns/op [Average]
  (min, avg, max) = (8877180.193, 15554901.301, 19670326.135), stdev = 4731759.805
  CI (99.9%): [10496363.065, 20613439.538] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.set.Inline128int.Val_to_Val_as_Val_set
# Parameters: (size = 100)

# Run progress: 82.21% complete, ETA 01:43:23
# Fork: 1 of 3
# Warmup Iteration   1: 889.973 ns/op
# Warmup Iteration   2: 793.822 ns/op
# Warmup Iteration   3: 907.654 ns/op
Iteration   1: 908.051 ns/op
Iteration   2: 906.250 ns/op
Iteration   3: 909.930 ns/op
Iteration   4: 906.284 ns/op
Iteration   5: 919.237 ns/op

# Run progress: 82.23% complete, ETA 01:43:15
# Fork: 2 of 3
# Warmup Iteration   1: 954.860 ns/op
# Warmup Iteration   2: 799.150 ns/op
# Warmup Iteration   3: 1299.005 ns/op
Iteration   1: 913.842 ns/op
Iteration   2: 910.991 ns/op
Iteration   3: 908.821 ns/op
Iteration   4: 907.115 ns/op
Iteration   5: 908.067 ns/op

# Run progress: 82.25% complete, ETA 01:43:06
# Fork: 3 of 3
# Warmup Iteration   1: 927.347 ns/op
# Warmup Iteration   2: 801.193 ns/op
# Warmup Iteration   3: 906.501 ns/op
Iteration   1: 909.103 ns/op
Iteration   2: 910.281 ns/op
Iteration   3: 942.752 ns/op
Iteration   4: 910.381 ns/op
Iteration   5: 907.380 ns/op


Result "org.openjdk.bench.valhalla.array.set.Inline128int.Val_to_Val_as_Val_set":
  911.899 ±(99.9%) 9.784 ns/op [Average]
  (min, avg, max) = (906.250, 911.899, 942.752), stdev = 9.152
  CI (99.9%): [902.115, 921.683] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.set.Inline128int.Val_to_Val_as_Val_set
# Parameters: (size = 1000000)

# Run progress: 82.28% complete, ETA 01:42:58
# Fork: 1 of 3
# Warmup Iteration   1: 21729931.745 ns/op
# Warmup Iteration   2: 9723165.854 ns/op
# Warmup Iteration   3: 10212969.881 ns/op
Iteration   1: 12147001.000 ns/op
Iteration   2: 8960639.752 ns/op
Iteration   3: 8867926.895 ns/op
Iteration   4: 8916516.447 ns/op
Iteration   5: 9006603.982 ns/op

# Run progress: 82.30% complete, ETA 01:42:49
# Fork: 2 of 3
# Warmup Iteration   1: 15461925.631 ns/op
# Warmup Iteration   2: 9179234.845 ns/op
# Warmup Iteration   3: 9025518.973 ns/op
Iteration   1: 9574938.084 ns/op
Iteration   2: 9962364.893 ns/op
Iteration   3: 9691019.255 ns/op
Iteration   4: 10724502.632 ns/op
Iteration   5: 10355786.561 ns/op

# Run progress: 82.33% complete, ETA 01:42:41
# Fork: 3 of 3
# Warmup Iteration   1: 16141100.524 ns/op
# Warmup Iteration   2: 9173151.045 ns/op
# Warmup Iteration   3: 9003514.381 ns/op
Iteration   1: 9497985.066 ns/op
Iteration   2: 9453401.869 ns/op
Iteration   3: 8953509.584 ns/op
Iteration   4: 9024514.143 ns/op
Iteration   5: 8897624.632 ns/op


Result "org.openjdk.bench.valhalla.array.set.Inline128int.Val_to_Val_as_Val_set":
  9602288.986 ±(99.9%) 968978.325 ns/op [Average]
  (min, avg, max) = (8867926.895, 9602288.986, 12147001.000), stdev = 906382.926
  CI (99.9%): [8633310.662, 10571267.311] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.set.Inline32int.New_to_Ref_as_Ref_set
# Parameters: (size = 100)

# Run progress: 82.35% complete, ETA 01:42:32
# Fork: 1 of 3
# Warmup Iteration   1: 193.042 ns/op
# Warmup Iteration   2: 179.272 ns/op
# Warmup Iteration   3: 178.652 ns/op
Iteration   1: 178.513 ns/op
Iteration   2: 178.795 ns/op
Iteration   3: 183.300 ns/op
Iteration   4: 178.711 ns/op
Iteration   5: 178.987 ns/op

# Run progress: 82.38% complete, ETA 01:42:23
# Fork: 2 of 3
# Warmup Iteration   1: 186.941 ns/op
# Warmup Iteration   2: 184.970 ns/op
# Warmup Iteration   3: 178.778 ns/op
Iteration   1: 179.154 ns/op
Iteration   2: 179.331 ns/op
Iteration   3: 199.933 ns/op
Iteration   4: 198.630 ns/op
Iteration   5: 182.880 ns/op

# Run progress: 82.40% complete, ETA 01:42:15
# Fork: 3 of 3
# Warmup Iteration   1: 186.357 ns/op
# Warmup Iteration   2: 180.740 ns/op
# Warmup Iteration   3: 180.662 ns/op
Iteration   1: 180.254 ns/op
Iteration   2: 180.281 ns/op
Iteration   3: 179.033 ns/op
Iteration   4: 178.950 ns/op
Iteration   5: 178.682 ns/op


Result "org.openjdk.bench.valhalla.array.set.Inline32int.New_to_Ref_as_Ref_set":
  182.362 ±(99.9%) 7.512 ns/op [Average]
  (min, avg, max) = (178.513, 182.362, 199.933), stdev = 7.027
  CI (99.9%): [174.850, 189.875] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.set.Inline32int.New_to_Ref_as_Ref_set
# Parameters: (size = 1000000)

# Run progress: 82.43% complete, ETA 01:42:06
# Fork: 1 of 3
# Warmup Iteration   1: 2776937.272 ns/op
# Warmup Iteration   2: 2043169.275 ns/op
# Warmup Iteration   3: 1837014.016 ns/op
Iteration   1: 1803964.361 ns/op
Iteration   2: 1826397.237 ns/op
Iteration   3: 1825639.672 ns/op
Iteration   4: 1831420.743 ns/op
Iteration   5: 1805408.409 ns/op

# Run progress: 82.45% complete, ETA 01:41:58
# Fork: 2 of 3
# Warmup Iteration   1: 2571303.964 ns/op
# Warmup Iteration   2: 1914487.880 ns/op
# Warmup Iteration   3: 1922611.745 ns/op
Iteration   1: 1866972.223 ns/op
Iteration   2: 1802140.968 ns/op
Iteration   3: 1814222.721 ns/op
Iteration   4: 1896366.134 ns/op
Iteration   5: 1936017.994 ns/op

# Run progress: 82.48% complete, ETA 01:41:49
# Fork: 3 of 3
# Warmup Iteration   1: 2732721.622 ns/op
# Warmup Iteration   2: 1935271.872 ns/op
# Warmup Iteration   3: 1853935.550 ns/op
Iteration   1: 1809780.616 ns/op
Iteration   2: 1805223.668 ns/op
Iteration   3: 1812185.111 ns/op
Iteration   4: 1813143.395 ns/op
Iteration   5: 1814273.039 ns/op


Result "org.openjdk.bench.valhalla.array.set.Inline32int.New_to_Ref_as_Ref_set":
  1830877.086 ±(99.9%) 41613.881 ns/op [Average]
  (min, avg, max) = (1802140.968, 1830877.086, 1936017.994), stdev = 38925.650
  CI (99.9%): [1789263.205, 1872490.967] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.set.Inline32int.New_to_Val_as_Val_set
# Parameters: (size = 100)

# Run progress: 82.50% complete, ETA 01:41:40
# Fork: 1 of 3
# Warmup Iteration   1: 189.712 ns/op
# Warmup Iteration   2: 183.482 ns/op
# Warmup Iteration   3: 188.262 ns/op
Iteration   1: 181.513 ns/op
Iteration   2: 178.563 ns/op
Iteration   3: 178.897 ns/op
Iteration   4: 179.282 ns/op
Iteration   5: 178.962 ns/op

# Run progress: 82.52% complete, ETA 01:41:32
# Fork: 2 of 3
# Warmup Iteration   1: 188.370 ns/op
# Warmup Iteration   2: 190.927 ns/op
# Warmup Iteration   3: 182.002 ns/op
Iteration   1: 179.148 ns/op
Iteration   2: 178.970 ns/op
Iteration   3: 178.683 ns/op
Iteration   4: 178.727 ns/op
Iteration   5: 178.852 ns/op

# Run progress: 82.55% complete, ETA 01:41:23
# Fork: 3 of 3
# Warmup Iteration   1: 199.679 ns/op
# Warmup Iteration   2: 207.639 ns/op
# Warmup Iteration   3: 177.631 ns/op
Iteration   1: 205.224 ns/op
Iteration   2: 223.275 ns/op
Iteration   3: 200.898 ns/op
Iteration   4: 175.739 ns/op
Iteration   5: 184.341 ns/op


Result "org.openjdk.bench.valhalla.array.set.Inline32int.New_to_Val_as_Val_set":
  185.405 ±(99.9%) 14.451 ns/op [Average]
  (min, avg, max) = (175.739, 185.405, 223.275), stdev = 13.518
  CI (99.9%): [170.954, 199.856] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.set.Inline32int.New_to_Val_as_Val_set
# Parameters: (size = 1000000)

# Run progress: 82.57% complete, ETA 01:41:15
# Fork: 1 of 3
# Warmup Iteration   1: 3055596.512 ns/op
# Warmup Iteration   2: 2092942.288 ns/op
# Warmup Iteration   3: 1832710.976 ns/op
Iteration   1: 1841540.605 ns/op
Iteration   2: 1977614.031 ns/op
Iteration   3: 1921407.795 ns/op
Iteration   4: 2013047.974 ns/op
Iteration   5: 1800079.626 ns/op

# Run progress: 82.60% complete, ETA 01:41:06
# Fork: 2 of 3
# Warmup Iteration   1: 2772134.359 ns/op
# Warmup Iteration   2: 2151991.755 ns/op
# Warmup Iteration   3: 2257543.991 ns/op
Iteration   1: 2029901.942 ns/op
Iteration   2: 1810802.568 ns/op
Iteration   3: 1835401.163 ns/op
Iteration   4: 1904911.488 ns/op
Iteration   5: 2079443.844 ns/op

# Run progress: 82.62% complete, ETA 01:40:58
# Fork: 3 of 3
# Warmup Iteration   1: 2702357.733 ns/op
# Warmup Iteration   2: 2228282.579 ns/op
# Warmup Iteration   3: 2341443.095 ns/op
Iteration   1: 2714413.642 ns/op
Iteration   2: 2280577.691 ns/op
Iteration   3: 2294646.594 ns/op
Iteration   4: 2211277.716 ns/op
Iteration   5: 2140365.996 ns/op


Result "org.openjdk.bench.valhalla.array.set.Inline32int.New_to_Val_as_Val_set":
  2057028.845 ±(99.9%) 262261.741 ns/op [Average]
  (min, avg, max) = (1800079.626, 2057028.845, 2714413.642), stdev = 245319.796
  CI (99.9%): [1794767.104, 2319290.586] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.set.Inline32int.Ref_to_Ref_as_Ref_set
# Parameters: (size = 100)

# Run progress: 82.65% complete, ETA 01:40:49
# Fork: 1 of 3
# Warmup Iteration   1: 181.547 ns/op
# Warmup Iteration   2: 178.764 ns/op
# Warmup Iteration   3: 174.983 ns/op
Iteration   1: 175.245 ns/op
Iteration   2: 179.830 ns/op
Iteration   3: 175.953 ns/op
Iteration   4: 177.143 ns/op
Iteration   5: 207.560 ns/op

# Run progress: 82.67% complete, ETA 01:40:40
# Fork: 2 of 3
# Warmup Iteration   1: 240.210 ns/op
# Warmup Iteration   2: 242.515 ns/op
# Warmup Iteration   3: 184.182 ns/op
Iteration   1: 180.272 ns/op
Iteration   2: 185.846 ns/op
Iteration   3: 194.658 ns/op
Iteration   4: 192.357 ns/op
Iteration   5: 178.634 ns/op

# Run progress: 82.70% complete, ETA 01:40:32
# Fork: 3 of 3
# Warmup Iteration   1: 196.870 ns/op
# Warmup Iteration   2: 218.160 ns/op
# Warmup Iteration   3: 238.515 ns/op
Iteration   1: 227.696 ns/op
Iteration   2: 192.993 ns/op
Iteration   3: 210.169 ns/op
Iteration   4: 228.031 ns/op
Iteration   5: 238.584 ns/op


Result "org.openjdk.bench.valhalla.array.set.Inline32int.Ref_to_Ref_as_Ref_set":
  196.331 ±(99.9%) 22.683 ns/op [Average]
  (min, avg, max) = (175.245, 196.331, 238.584), stdev = 21.218
  CI (99.9%): [173.649, 219.014] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.set.Inline32int.Ref_to_Ref_as_Ref_set
# Parameters: (size = 1000000)

# Run progress: 82.72% complete, ETA 01:40:23
# Fork: 1 of 3
# Warmup Iteration   1: 3649306.913 ns/op
# Warmup Iteration   2: 2728058.559 ns/op
# Warmup Iteration   3: 2332964.812 ns/op
Iteration   1: 2115940.726 ns/op
Iteration   2: 3563608.127 ns/op
Iteration   3: 3826850.920 ns/op
Iteration   4: 3933724.708 ns/op
Iteration   5: 3885204.954 ns/op

# Run progress: 82.75% complete, ETA 01:40:15
# Fork: 2 of 3
# Warmup Iteration   1: 5565235.346 ns/op
# Warmup Iteration   2: 4900733.332 ns/op
# Warmup Iteration   3: 4134734.741 ns/op
Iteration   1: 3721473.611 ns/op
Iteration   2: 3744642.130 ns/op
Iteration   3: 3754317.317 ns/op
Iteration   4: 4240425.908 ns/op
Iteration   5: 4273626.232 ns/op

# Run progress: 82.77% complete, ETA 01:40:06
# Fork: 3 of 3
# Warmup Iteration   1: 5292416.010 ns/op
# Warmup Iteration   2: 4143933.368 ns/op
# Warmup Iteration   3: 4081199.766 ns/op
Iteration   1: 3962691.996 ns/op
Iteration   2: 3725251.077 ns/op
Iteration   3: 3903319.712 ns/op
Iteration   4: 4171244.813 ns/op
Iteration   5: 5148564.702 ns/op


Result "org.openjdk.bench.valhalla.array.set.Inline32int.Ref_to_Ref_as_Ref_set":
  3864725.796 ±(99.9%) 656764.403 ns/op [Average]
  (min, avg, max) = (2115940.726, 3864725.796, 5148564.702), stdev = 614337.831
  CI (99.9%): [3207961.392, 4521490.199] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.set.Inline32int.Ref_to_Val_as_Val_set
# Parameters: (size = 100)

# Run progress: 82.79% complete, ETA 01:39:58
# Fork: 1 of 3
# Warmup Iteration   1: 199.573 ns/op
# Warmup Iteration   2: 259.020 ns/op
# Warmup Iteration   3: 216.230 ns/op
Iteration   1: 178.655 ns/op
Iteration   2: 179.086 ns/op
Iteration   3: 182.830 ns/op
Iteration   4: 179.507 ns/op
Iteration   5: 262.420 ns/op

# Run progress: 82.82% complete, ETA 01:39:49
# Fork: 2 of 3
# Warmup Iteration   1: 185.814 ns/op
# Warmup Iteration   2: 201.605 ns/op
# Warmup Iteration   3: 206.908 ns/op
Iteration   1: 178.626 ns/op
Iteration   2: 175.259 ns/op
Iteration   3: 175.401 ns/op
Iteration   4: 181.470 ns/op
Iteration   5: 260.756 ns/op

# Run progress: 82.84% complete, ETA 01:39:41
# Fork: 3 of 3
# Warmup Iteration   1: 190.674 ns/op
# Warmup Iteration   2: 180.920 ns/op
# Warmup Iteration   3: 180.410 ns/op
Iteration   1: 180.002 ns/op
Iteration   2: 179.526 ns/op
Iteration   3: 179.081 ns/op
Iteration   4: 178.854 ns/op
Iteration   5: 178.941 ns/op


Result "org.openjdk.bench.valhalla.array.set.Inline32int.Ref_to_Val_as_Val_set":
  190.028 ±(99.9%) 31.127 ns/op [Average]
  (min, avg, max) = (175.259, 190.028, 262.420), stdev = 29.116
  CI (99.9%): [158.901, 221.154] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.set.Inline32int.Ref_to_Val_as_Val_set
# Parameters: (size = 1000000)

# Run progress: 82.87% complete, ETA 01:39:32
# Fork: 1 of 3
# Warmup Iteration   1: 3121356.106 ns/op
# Warmup Iteration   2: 2305803.736 ns/op
# Warmup Iteration   3: 1822016.380 ns/op
Iteration   1: 1824692.623 ns/op
Iteration   2: 1801368.192 ns/op
Iteration   3: 1809662.268 ns/op
Iteration   4: 1787293.875 ns/op
Iteration   5: 1834961.521 ns/op

# Run progress: 82.89% complete, ETA 01:39:24
# Fork: 2 of 3
# Warmup Iteration   1: 2669774.625 ns/op
# Warmup Iteration   2: 1914794.435 ns/op
# Warmup Iteration   3: 1794364.140 ns/op
Iteration   1: 1974639.813 ns/op
Iteration   2: 1945911.656 ns/op
Iteration   3: 2358866.491 ns/op
Iteration   4: 1830882.926 ns/op
Iteration   5: 1881773.520 ns/op

# Run progress: 82.92% complete, ETA 01:39:15
# Fork: 3 of 3
# Warmup Iteration   1: 2819084.610 ns/op
# Warmup Iteration   2: 2135477.572 ns/op
# Warmup Iteration   3: 1915732.211 ns/op
Iteration   1: 1868771.872 ns/op
Iteration   2: 1865186.184 ns/op
Iteration   3: 1961560.593 ns/op
Iteration   4: 1790232.373 ns/op
Iteration   5: 1778074.146 ns/op


Result "org.openjdk.bench.valhalla.array.set.Inline32int.Ref_to_Val_as_Val_set":
  1887591.870 ±(99.9%) 155032.793 ns/op [Average]
  (min, avg, max) = (1778074.146, 1887591.870, 2358866.491), stdev = 145017.770
  CI (99.9%): [1732559.078, 2042624.663] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.set.Inline32int.Val_to_Ref_as_Ref_set
# Parameters: (size = 100)

# Run progress: 82.94% complete, ETA 01:39:06
# Fork: 1 of 3
# Warmup Iteration   1: 206.313 ns/op
# Warmup Iteration   2: 175.333 ns/op
# Warmup Iteration   3: 174.699 ns/op
Iteration   1: 215.292 ns/op
Iteration   2: 174.457 ns/op
Iteration   3: 174.789 ns/op
Iteration   4: 174.790 ns/op
Iteration   5: 175.024 ns/op

# Run progress: 82.97% complete, ETA 01:38:58
# Fork: 2 of 3
# Warmup Iteration   1: 185.526 ns/op
# Warmup Iteration   2: 182.630 ns/op
# Warmup Iteration   3: 179.714 ns/op
Iteration   1: 178.961 ns/op
Iteration   2: 182.155 ns/op
Iteration   3: 185.266 ns/op
Iteration   4: 184.430 ns/op
Iteration   5: 179.002 ns/op

# Run progress: 82.99% complete, ETA 01:38:49
# Fork: 3 of 3
# Warmup Iteration   1: 190.416 ns/op
# Warmup Iteration   2: 184.175 ns/op
# Warmup Iteration   3: 183.498 ns/op
Iteration   1: 195.078 ns/op
Iteration   2: 179.143 ns/op
Iteration   3: 178.446 ns/op
Iteration   4: 178.448 ns/op
Iteration   5: 178.657 ns/op


Result "org.openjdk.bench.valhalla.array.set.Inline32int.Val_to_Ref_as_Ref_set":
  182.263 ±(99.9%) 11.311 ns/op [Average]
  (min, avg, max) = (174.457, 182.263, 215.292), stdev = 10.581
  CI (99.9%): [170.951, 193.574] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.set.Inline32int.Val_to_Ref_as_Ref_set
# Parameters: (size = 1000000)

# Run progress: 83.01% complete, ETA 01:38:41
# Fork: 1 of 3
# Warmup Iteration   1: 2574794.529 ns/op
# Warmup Iteration   2: 1918808.095 ns/op
# Warmup Iteration   3: 1937505.029 ns/op
Iteration   1: 1818799.835 ns/op
Iteration   2: 1824235.759 ns/op
Iteration   3: 1799191.799 ns/op
Iteration   4: 1808987.179 ns/op
Iteration   5: 1832455.995 ns/op

# Run progress: 83.04% complete, ETA 01:38:32
# Fork: 2 of 3
# Warmup Iteration   1: 2583925.809 ns/op
# Warmup Iteration   2: 2092097.973 ns/op
# Warmup Iteration   3: 1898816.463 ns/op
Iteration   1: 1819128.297 ns/op
Iteration   2: 1828539.633 ns/op
Iteration   3: 1842401.557 ns/op
Iteration   4: 1816555.057 ns/op
Iteration   5: 1831414.770 ns/op

# Run progress: 83.06% complete, ETA 01:38:24
# Fork: 3 of 3
# Warmup Iteration   1: 2717488.129 ns/op
# Warmup Iteration   2: 1885147.543 ns/op
# Warmup Iteration   3: 1967622.811 ns/op
Iteration   1: 1828304.348 ns/op
Iteration   2: 1885299.654 ns/op
Iteration   3: 1849524.893 ns/op
Iteration   4: 1929691.602 ns/op
Iteration   5: 2262876.697 ns/op


Result "org.openjdk.bench.valhalla.array.set.Inline32int.Val_to_Ref_as_Ref_set":
  1865160.472 ±(99.9%) 122636.547 ns/op [Average]
  (min, avg, max) = (1799191.799, 1865160.472, 2262876.697), stdev = 114714.302
  CI (99.9%): [1742523.924, 1987797.019] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.set.Inline32int.Val_to_Val_as_Val_set
# Parameters: (size = 100)

# Run progress: 83.09% complete, ETA 01:38:15
# Fork: 1 of 3
# Warmup Iteration   1: 193.125 ns/op
# Warmup Iteration   2: 180.402 ns/op
# Warmup Iteration   3: 178.629 ns/op
Iteration   1: 178.648 ns/op
Iteration   2: 178.843 ns/op
Iteration   3: 179.785 ns/op
Iteration   4: 180.032 ns/op
Iteration   5: 180.759 ns/op

# Run progress: 83.11% complete, ETA 01:38:06
# Fork: 2 of 3
# Warmup Iteration   1: 192.605 ns/op
# Warmup Iteration   2: 179.806 ns/op
# Warmup Iteration   3: 179.007 ns/op
Iteration   1: 179.018 ns/op
Iteration   2: 179.004 ns/op
Iteration   3: 178.910 ns/op
Iteration   4: 180.692 ns/op
Iteration   5: 178.503 ns/op

# Run progress: 83.14% complete, ETA 01:37:58
# Fork: 3 of 3
# Warmup Iteration   1: 187.638 ns/op
# Warmup Iteration   2: 186.304 ns/op
# Warmup Iteration   3: 222.231 ns/op
Iteration   1: 183.328 ns/op
Iteration   2: 191.858 ns/op
Iteration   3: 194.225 ns/op
Iteration   4: 228.617 ns/op
Iteration   5: 189.472 ns/op


Result "org.openjdk.bench.valhalla.array.set.Inline32int.Val_to_Val_as_Val_set":
  185.446 ±(99.9%) 13.916 ns/op [Average]
  (min, avg, max) = (178.503, 185.446, 228.617), stdev = 13.017
  CI (99.9%): [171.531, 199.362] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.set.Inline32int.Val_to_Val_as_Val_set
# Parameters: (size = 1000000)

# Run progress: 83.16% complete, ETA 01:37:49
# Fork: 1 of 3
# Warmup Iteration   1: 2771595.436 ns/op
# Warmup Iteration   2: 1940786.014 ns/op
# Warmup Iteration   3: 1808197.599 ns/op
Iteration   1: 1813895.758 ns/op
Iteration   2: 1829288.803 ns/op
Iteration   3: 1821264.341 ns/op
Iteration   4: 1857368.222 ns/op
Iteration   5: 1819701.138 ns/op

# Run progress: 83.19% complete, ETA 01:37:41
# Fork: 2 of 3
# Warmup Iteration   1: 2785637.269 ns/op
# Warmup Iteration   2: 2011082.670 ns/op
# Warmup Iteration   3: 1857696.725 ns/op
Iteration   1: 1955750.888 ns/op
Iteration   2: 1770643.827 ns/op
Iteration   3: 1786801.954 ns/op
Iteration   4: 1804246.130 ns/op
Iteration   5: 1808091.622 ns/op

# Run progress: 83.21% complete, ETA 01:37:32
# Fork: 3 of 3
# Warmup Iteration   1: 2750696.118 ns/op
# Warmup Iteration   2: 1801840.502 ns/op
# Warmup Iteration   3: 1737449.811 ns/op
Iteration   1: 1808655.411 ns/op
Iteration   2: 1822813.253 ns/op
Iteration   3: 1804296.875 ns/op
Iteration   4: 1789451.968 ns/op
Iteration   5: 1835322.748 ns/op


Result "org.openjdk.bench.valhalla.array.set.Inline32int.Val_to_Val_as_Val_set":
  1821839.529 ±(99.9%) 45516.728 ns/op [Average]
  (min, avg, max) = (1770643.827, 1821839.529, 1955750.888), stdev = 42576.375
  CI (99.9%): [1776322.802, 1867356.257] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.set.Inline64byte.New_to_Ref_as_Ref_set
# Parameters: (size = 100)

# Run progress: 83.24% complete, ETA 01:37:23
# Fork: 1 of 3
# Warmup Iteration   1: 974.680 ns/op
# Warmup Iteration   2: 777.144 ns/op
# Warmup Iteration   3: 827.658 ns/op
Iteration   1: 816.259 ns/op
Iteration   2: 821.270 ns/op
Iteration   3: 813.383 ns/op
Iteration   4: 819.101 ns/op
Iteration   5: 817.468 ns/op

# Run progress: 83.26% complete, ETA 01:37:15
# Fork: 2 of 3
# Warmup Iteration   1: 859.137 ns/op
# Warmup Iteration   2: 788.948 ns/op
# Warmup Iteration   3: 826.041 ns/op
Iteration   1: 832.988 ns/op
Iteration   2: 877.986 ns/op
Iteration   3: 818.468 ns/op
Iteration   4: 817.380 ns/op
Iteration   5: 819.038 ns/op

# Run progress: 83.28% complete, ETA 01:37:06
# Fork: 3 of 3
# Warmup Iteration   1: 842.621 ns/op
# Warmup Iteration   2: 782.904 ns/op
# Warmup Iteration   3: 814.503 ns/op
Iteration   1: 813.112 ns/op
Iteration   2: 822.217 ns/op
Iteration   3: 823.934 ns/op
Iteration   4: 817.346 ns/op
Iteration   5: 817.680 ns/op


Result "org.openjdk.bench.valhalla.array.set.Inline64byte.New_to_Ref_as_Ref_set":
  823.175 ±(99.9%) 16.992 ns/op [Average]
  (min, avg, max) = (813.112, 823.175, 877.986), stdev = 15.894
  CI (99.9%): [806.183, 840.167] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.set.Inline64byte.New_to_Ref_as_Ref_set
# Parameters: (size = 1000000)

# Run progress: 83.31% complete, ETA 01:36:58
# Fork: 1 of 3
# Warmup Iteration   1: 12616895.313 ns/op
# Warmup Iteration   2: 13169964.286 ns/op
# Warmup Iteration   3: 7829727.062 ns/op
Iteration   1: 7959646.331 ns/op
Iteration   2: 7722563.290 ns/op
Iteration   3: 7662811.382 ns/op
Iteration   4: 7776358.977 ns/op
Iteration   5: 7734732.504 ns/op

# Run progress: 83.33% complete, ETA 01:36:49
# Fork: 2 of 3
# Warmup Iteration   1: 11991883.341 ns/op
# Warmup Iteration   2: 11447224.719 ns/op
# Warmup Iteration   3: 7614423.924 ns/op
Iteration   1: 7568399.120 ns/op
Iteration   2: 7743403.947 ns/op
Iteration   3: 8023583.000 ns/op
Iteration   4: 7903717.445 ns/op
Iteration   5: 7619966.481 ns/op

# Run progress: 83.36% complete, ETA 01:36:41
# Fork: 3 of 3
# Warmup Iteration   1: 12118585.821 ns/op
# Warmup Iteration   2: 8583753.849 ns/op
# Warmup Iteration   3: 7786505.814 ns/op
Iteration   1: 7908354.492 ns/op
Iteration   2: 7800070.192 ns/op
Iteration   3: 7777647.762 ns/op
Iteration   4: 7943152.344 ns/op
Iteration   5: 7847665.039 ns/op


Result "org.openjdk.bench.valhalla.array.set.Inline64byte.New_to_Ref_as_Ref_set":
  7799471.487 ±(99.9%) 140009.155 ns/op [Average]
  (min, avg, max) = (7568399.120, 7799471.487, 8023583.000), stdev = 130964.650
  CI (99.9%): [7659462.332, 7939480.642] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.set.Inline64byte.New_to_Val_as_Val_set
# Parameters: (size = 100)

# Run progress: 83.38% complete, ETA 01:36:32
# Fork: 1 of 3
# Warmup Iteration   1: 859.783 ns/op
# Warmup Iteration   2: 783.451 ns/op
# Warmup Iteration   3: 835.607 ns/op
Iteration   1: 893.486 ns/op
Iteration   2: 885.358 ns/op
Iteration   3: 818.960 ns/op
Iteration   4: 817.351 ns/op
Iteration   5: 818.736 ns/op

# Run progress: 83.41% complete, ETA 01:36:23
# Fork: 2 of 3
# Warmup Iteration   1: 854.365 ns/op
# Warmup Iteration   2: 791.264 ns/op
# Warmup Iteration   3: 819.222 ns/op
Iteration   1: 818.736 ns/op
Iteration   2: 818.333 ns/op
Iteration   3: 818.668 ns/op
Iteration   4: 827.124 ns/op
Iteration   5: 845.403 ns/op

# Run progress: 83.43% complete, ETA 01:36:15
# Fork: 3 of 3
# Warmup Iteration   1: 870.301 ns/op
# Warmup Iteration   2: 780.623 ns/op
# Warmup Iteration   3: 816.833 ns/op
Iteration   1: 817.787 ns/op
Iteration   2: 825.249 ns/op
Iteration   3: 818.508 ns/op
Iteration   4: 821.351 ns/op
Iteration   5: 818.300 ns/op


Result "org.openjdk.bench.valhalla.array.set.Inline64byte.New_to_Val_as_Val_set":
  830.890 ±(99.9%) 26.565 ns/op [Average]
  (min, avg, max) = (817.351, 830.890, 893.486), stdev = 24.849
  CI (99.9%): [804.325, 857.455] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.set.Inline64byte.New_to_Val_as_Val_set
# Parameters: (size = 1000000)

# Run progress: 83.46% complete, ETA 01:36:06
# Fork: 1 of 3
# Warmup Iteration   1: 12126089.855 ns/op
# Warmup Iteration   2: 11651303.632 ns/op
# Warmup Iteration   3: 7886347.328 ns/op
Iteration   1: 7847443.481 ns/op
Iteration   2: 7880949.142 ns/op
Iteration   3: 7626187.189 ns/op
Iteration   4: 7976000.992 ns/op
Iteration   5: 8720844.474 ns/op

# Run progress: 83.48% complete, ETA 01:35:58
# Fork: 2 of 3
# Warmup Iteration   1: 12484887.864 ns/op
# Warmup Iteration   2: 10114046.660 ns/op
# Warmup Iteration   3: 8075840.672 ns/op
Iteration   1: 7726001.285 ns/op
Iteration   2: 7722336.832 ns/op
Iteration   3: 7650623.735 ns/op
Iteration   4: 7689661.893 ns/op
Iteration   5: 7811452.569 ns/op

# Run progress: 83.50% complete, ETA 01:35:49
# Fork: 3 of 3
# Warmup Iteration   1: 12404861.280 ns/op
# Warmup Iteration   2: 8591498.237 ns/op
# Warmup Iteration   3: 8227224.593 ns/op
Iteration   1: 7814713.462 ns/op
Iteration   2: 7928837.891 ns/op
Iteration   3: 7762234.733 ns/op
Iteration   4: 7777022.115 ns/op
Iteration   5: 7614278.409 ns/op


Result "org.openjdk.bench.valhalla.array.set.Inline64byte.New_to_Val_as_Val_set":
  7836572.547 ±(99.9%) 285328.330 ns/op [Average]
  (min, avg, max) = (7614278.409, 7836572.547, 8720844.474), stdev = 266896.297
  CI (99.9%): [7551244.216, 8121900.877] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.set.Inline64byte.Ref_to_Ref_as_Ref_set
# Parameters: (size = 100)

# Run progress: 83.53% complete, ETA 01:35:41
# Fork: 1 of 3
# Warmup Iteration   1: 850.034 ns/op
# Warmup Iteration   2: 843.241 ns/op
# Warmup Iteration   3: 813.117 ns/op
Iteration   1: 816.541 ns/op
Iteration   2: 819.068 ns/op
Iteration   3: 816.619 ns/op
Iteration   4: 825.867 ns/op
Iteration   5: 894.276 ns/op

# Run progress: 83.55% complete, ETA 01:35:32
# Fork: 2 of 3
# Warmup Iteration   1: 1023.567 ns/op
# Warmup Iteration   2: 839.498 ns/op
# Warmup Iteration   3: 870.910 ns/op
Iteration   1: 847.225 ns/op
Iteration   2: 987.104 ns/op
Iteration   3: 1326.822 ns/op
Iteration   4: 1480.125 ns/op
Iteration   5: 1405.559 ns/op

# Run progress: 83.58% complete, ETA 01:35:23
# Fork: 3 of 3
# Warmup Iteration   1: 927.861 ns/op
# Warmup Iteration   2: 784.015 ns/op
# Warmup Iteration   3: 839.589 ns/op
Iteration   1: 965.607 ns/op
Iteration   2: 969.510 ns/op
Iteration   3: 828.961 ns/op
Iteration   4: 820.269 ns/op
Iteration   5: 866.208 ns/op


Result "org.openjdk.bench.valhalla.array.set.Inline64byte.Ref_to_Ref_as_Ref_set":
  977.984 ±(99.9%) 245.973 ns/op [Average]
  (min, avg, max) = (816.541, 977.984, 1480.125), stdev = 230.084
  CI (99.9%): [732.011, 1223.957] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.set.Inline64byte.Ref_to_Ref_as_Ref_set
# Parameters: (size = 1000000)

# Run progress: 83.60% complete, ETA 01:35:15
# Fork: 1 of 3
# Warmup Iteration   1: 13214467.532 ns/op
# Warmup Iteration   2: 10380242.268 ns/op
# Warmup Iteration   3: 7661724.432 ns/op
Iteration   1: 7698941.160 ns/op
Iteration   2: 7670688.765 ns/op
Iteration   3: 8595045.231 ns/op
Iteration   4: 7898754.227 ns/op
Iteration   5: 7617337.098 ns/op

# Run progress: 83.63% complete, ETA 01:35:06
# Fork: 2 of 3
# Warmup Iteration   1: 13229236.468 ns/op
# Warmup Iteration   2: 12421364.198 ns/op
# Warmup Iteration   3: 10070070.545 ns/op
Iteration   1: 11491051.614 ns/op
Iteration   2: 9350645.833 ns/op
Iteration   3: 7717515.588 ns/op
Iteration   4: 8169462.032 ns/op
Iteration   5: 10269584.184 ns/op

# Run progress: 83.65% complete, ETA 01:34:58
# Fork: 3 of 3
# Warmup Iteration   1: 16128486.778 ns/op
# Warmup Iteration   2: 14206708.915 ns/op
# Warmup Iteration   3: 9660490.876 ns/op
Iteration   1: 9944071.490 ns/op
Iteration   2: 10034874.584 ns/op
Iteration   3: 9807223.301 ns/op
Iteration   4: 8402012.850 ns/op
Iteration   5: 8915779.867 ns/op


Result "org.openjdk.bench.valhalla.array.set.Inline64byte.Ref_to_Ref_as_Ref_set":
  8905532.522 ±(99.9%) 1273537.674 ns/op [Average]
  (min, avg, max) = (7617337.098, 8905532.522, 11491051.614), stdev = 1191267.930
  CI (99.9%): [7631994.848, 10179070.195] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.set.Inline64byte.Ref_to_Val_as_Val_set
# Parameters: (size = 100)

# Run progress: 83.68% complete, ETA 01:34:49
# Fork: 1 of 3
# Warmup Iteration   1: 1033.749 ns/op
# Warmup Iteration   2: 1005.207 ns/op
# Warmup Iteration   3: 1147.761 ns/op
Iteration   1: 859.282 ns/op
Iteration   2: 850.668 ns/op
Iteration   3: 976.105 ns/op
Iteration   4: 977.917 ns/op
Iteration   5: 893.269 ns/op

# Run progress: 83.70% complete, ETA 01:34:41
# Fork: 2 of 3
# Warmup Iteration   1: 856.166 ns/op
# Warmup Iteration   2: 816.431 ns/op
# Warmup Iteration   3: 944.121 ns/op
Iteration   1: 971.430 ns/op
Iteration   2: 873.100 ns/op
Iteration   3: 822.502 ns/op
Iteration   4: 927.327 ns/op
Iteration   5: 1079.845 ns/op

# Run progress: 83.73% complete, ETA 01:34:32
# Fork: 3 of 3
# Warmup Iteration   1: 1122.946 ns/op
# Warmup Iteration   2: 917.393 ns/op
# Warmup Iteration   3: 972.335 ns/op
Iteration   1: 1050.651 ns/op
Iteration   2: 857.746 ns/op
Iteration   3: 933.588 ns/op
Iteration   4: 1245.277 ns/op
Iteration   5: 1353.300 ns/op


Result "org.openjdk.bench.valhalla.array.set.Inline64byte.Ref_to_Val_as_Val_set":
  978.134 ±(99.9%) 161.540 ns/op [Average]
  (min, avg, max) = (822.502, 978.134, 1353.300), stdev = 151.104
  CI (99.9%): [816.594, 1139.674] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.set.Inline64byte.Ref_to_Val_as_Val_set
# Parameters: (size = 1000000)

# Run progress: 83.75% complete, ETA 01:34:24
# Fork: 1 of 3
# Warmup Iteration   1: 15268872.522 ns/op
# Warmup Iteration   2: 13937442.932 ns/op
# Warmup Iteration   3: 10340937.500 ns/op
Iteration   1: 10849588.202 ns/op
Iteration   2: 10537042.969 ns/op
Iteration   3: 9191762.118 ns/op
Iteration   4: 10052599.010 ns/op
Iteration   5: 15449027.773 ns/op

# Run progress: 83.77% complete, ETA 01:34:15
# Fork: 2 of 3
# Warmup Iteration   1: 25520184.375 ns/op
# Warmup Iteration   2: 23065372.159 ns/op
# Warmup Iteration   3: 23937136.628 ns/op
Iteration   1: 19025784.722 ns/op
Iteration   2: 15558439.108 ns/op
Iteration   3: 15819022.141 ns/op
Iteration   4: 15688269.531 ns/op
Iteration   5: 15978002.594 ns/op

# Run progress: 83.80% complete, ETA 01:34:07
# Fork: 3 of 3
# Warmup Iteration   1: 24096843.262 ns/op
# Warmup Iteration   2: 23771698.651 ns/op
# Warmup Iteration   3: 19295916.660 ns/op
Iteration   1: 16382122.306 ns/op
Iteration   2: 16105973.540 ns/op
Iteration   3: 16209028.903 ns/op
Iteration   4: 15577662.831 ns/op
Iteration   5: 15928044.266 ns/op


Result "org.openjdk.bench.valhalla.array.set.Inline64byte.Ref_to_Val_as_Val_set":
  14556824.668 ±(99.9%) 3090806.000 ns/op [Average]
  (min, avg, max) = (9191762.118, 14556824.668, 19025784.722), stdev = 2891141.851
  CI (99.9%): [11466018.667, 17647630.668] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.set.Inline64byte.Val_to_Ref_as_Ref_set
# Parameters: (size = 100)

# Run progress: 83.82% complete, ETA 01:33:58
# Fork: 1 of 3
# Warmup Iteration   1: 1845.719 ns/op
# Warmup Iteration   2: 1702.540 ns/op
# Warmup Iteration   3: 820.361 ns/op
Iteration   1: 819.149 ns/op
Iteration   2: 850.044 ns/op
Iteration   3: 1015.273 ns/op
Iteration   4: 845.722 ns/op
Iteration   5: 940.469 ns/op

# Run progress: 83.85% complete, ETA 01:33:50
# Fork: 2 of 3
# Warmup Iteration   1: 855.230 ns/op
# Warmup Iteration   2: 900.397 ns/op
# Warmup Iteration   3: 990.635 ns/op
Iteration   1: 893.644 ns/op
Iteration   2: 821.189 ns/op
Iteration   3: 821.565 ns/op
Iteration   4: 819.547 ns/op
Iteration   5: 888.795 ns/op

# Run progress: 83.87% complete, ETA 01:33:41
# Fork: 3 of 3
# Warmup Iteration   1: 873.470 ns/op
# Warmup Iteration   2: 779.686 ns/op
# Warmup Iteration   3: 823.542 ns/op
Iteration   1: 865.341 ns/op
Iteration   2: 837.330 ns/op
Iteration   3: 819.902 ns/op
Iteration   4: 818.275 ns/op
Iteration   5: 817.631 ns/op


Result "org.openjdk.bench.valhalla.array.set.Inline64byte.Val_to_Ref_as_Ref_set":
  858.258 ±(99.9%) 60.461 ns/op [Average]
  (min, avg, max) = (817.631, 858.258, 1015.273), stdev = 56.555
  CI (99.9%): [797.798, 918.719] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.set.Inline64byte.Val_to_Ref_as_Ref_set
# Parameters: (size = 1000000)

# Run progress: 83.90% complete, ETA 01:33:32
# Fork: 1 of 3
# Warmup Iteration   1: 12002184.800 ns/op
# Warmup Iteration   2: 11391310.178 ns/op
# Warmup Iteration   3: 7691371.183 ns/op
Iteration   1: 7781071.154 ns/op
Iteration   2: 7761598.715 ns/op
Iteration   3: 7644557.765 ns/op
Iteration   4: 7795478.523 ns/op
Iteration   5: 7791653.101 ns/op

# Run progress: 83.92% complete, ETA 01:33:24
# Fork: 2 of 3
# Warmup Iteration   1: 12056867.560 ns/op
# Warmup Iteration   2: 9718530.452 ns/op
# Warmup Iteration   3: 7877745.473 ns/op
Iteration   1: 7781807.692 ns/op
Iteration   2: 8026684.055 ns/op
Iteration   3: 8088646.000 ns/op
Iteration   4: 7849197.438 ns/op
Iteration   5: 9730493.657 ns/op

# Run progress: 83.95% complete, ETA 01:33:15
# Fork: 3 of 3
# Warmup Iteration   1: 12332591.361 ns/op
# Warmup Iteration   2: 8914132.675 ns/op
# Warmup Iteration   3: 7827772.612 ns/op
Iteration   1: 8078441.143 ns/op
Iteration   2: 8049082.008 ns/op
Iteration   3: 7828597.217 ns/op
Iteration   4: 9318575.620 ns/op
Iteration   5: 7690046.122 ns/op


Result "org.openjdk.bench.valhalla.array.set.Inline64byte.Val_to_Ref_as_Ref_set":
  8081062.014 ±(99.9%) 649276.473 ns/op [Average]
  (min, avg, max) = (7644557.765, 8081062.014, 9730493.657), stdev = 607333.616
  CI (99.9%): [7431785.541, 8730338.487] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.set.Inline64byte.Val_to_Val_as_Val_set
# Parameters: (size = 100)

# Run progress: 83.97% complete, ETA 01:33:07
# Fork: 1 of 3
# Warmup Iteration   1: 856.202 ns/op
# Warmup Iteration   2: 786.536 ns/op
# Warmup Iteration   3: 818.472 ns/op
Iteration   1: 816.340 ns/op
Iteration   2: 818.063 ns/op
Iteration   3: 825.265 ns/op
Iteration   4: 818.213 ns/op
Iteration   5: 827.935 ns/op

# Run progress: 84.00% complete, ETA 01:32:58
# Fork: 2 of 3
# Warmup Iteration   1: 850.824 ns/op
# Warmup Iteration   2: 802.417 ns/op
# Warmup Iteration   3: 820.549 ns/op
Iteration   1: 818.983 ns/op
Iteration   2: 818.694 ns/op
Iteration   3: 827.027 ns/op
Iteration   4: 818.382 ns/op
Iteration   5: 823.516 ns/op

# Run progress: 84.02% complete, ETA 01:32:50
# Fork: 3 of 3
# Warmup Iteration   1: 865.540 ns/op
# Warmup Iteration   2: 856.161 ns/op
# Warmup Iteration   3: 989.404 ns/op
Iteration   1: 837.681 ns/op
Iteration   2: 851.635 ns/op
Iteration   3: 815.235 ns/op
Iteration   4: 814.568 ns/op
Iteration   5: 810.310 ns/op


Result "org.openjdk.bench.valhalla.array.set.Inline64byte.Val_to_Val_as_Val_set":
  822.790 ±(99.9%) 11.143 ns/op [Average]
  (min, avg, max) = (810.310, 822.790, 851.635), stdev = 10.423
  CI (99.9%): [811.647, 833.933] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.set.Inline64byte.Val_to_Val_as_Val_set
# Parameters: (size = 1000000)

# Run progress: 84.04% complete, ETA 01:32:41
# Fork: 1 of 3
# Warmup Iteration   1: 12089464.774 ns/op
# Warmup Iteration   2: 12673965.113 ns/op
# Warmup Iteration   3: 7777197.762 ns/op
Iteration   1: 7758749.687 ns/op
Iteration   2: 7664290.083 ns/op
Iteration   3: 7732749.046 ns/op
Iteration   4: 7711931.618 ns/op
Iteration   5: 7716155.769 ns/op

# Run progress: 84.07% complete, ETA 01:32:32
# Fork: 2 of 3
# Warmup Iteration   1: 11908151.471 ns/op
# Warmup Iteration   2: 8603890.186 ns/op
# Warmup Iteration   3: 7937142.063 ns/op
Iteration   1: 7930465.220 ns/op
Iteration   2: 7771665.700 ns/op
Iteration   3: 7700923.715 ns/op
Iteration   4: 7740577.603 ns/op
Iteration   5: 7752348.916 ns/op

# Run progress: 84.09% complete, ETA 01:32:24
# Fork: 3 of 3
# Warmup Iteration   1: 12018848.214 ns/op
# Warmup Iteration   2: 10505786.458 ns/op
# Warmup Iteration   3: 8048007.874 ns/op
Iteration   1: 7876085.617 ns/op
Iteration   2: 8048986.770 ns/op
Iteration   3: 8107972.000 ns/op
Iteration   4: 8466661.412 ns/op
Iteration   5: 7701708.969 ns/op


Result "org.openjdk.bench.valhalla.array.set.Inline64byte.Val_to_Val_as_Val_set":
  7845418.142 ±(99.9%) 231882.286 ns/op [Average]
  (min, avg, max) = (7664290.083, 7845418.142, 8466661.412), stdev = 216902.835
  CI (99.9%): [7613535.855, 8077300.428] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.set.Inline64int.New_to_Ref_as_Ref_set
# Parameters: (size = 100)

# Run progress: 84.12% complete, ETA 01:32:15
# Fork: 1 of 3
# Warmup Iteration   1: 673.591 ns/op
# Warmup Iteration   2: 599.010 ns/op
# Warmup Iteration   3: 466.641 ns/op
Iteration   1: 472.035 ns/op
Iteration   2: 470.572 ns/op
Iteration   3: 466.320 ns/op
Iteration   4: 471.239 ns/op
Iteration   5: 472.619 ns/op

# Run progress: 84.14% complete, ETA 01:32:07
# Fork: 2 of 3
# Warmup Iteration   1: 673.857 ns/op
# Warmup Iteration   2: 590.268 ns/op
# Warmup Iteration   3: 465.163 ns/op
Iteration   1: 469.946 ns/op
Iteration   2: 468.743 ns/op
Iteration   3: 465.625 ns/op
Iteration   4: 466.232 ns/op
Iteration   5: 470.568 ns/op

# Run progress: 84.17% complete, ETA 01:31:58
# Fork: 3 of 3
# Warmup Iteration   1: 671.605 ns/op
# Warmup Iteration   2: 596.361 ns/op
# Warmup Iteration   3: 475.060 ns/op
Iteration   1: 464.676 ns/op
Iteration   2: 466.269 ns/op
Iteration   3: 534.843 ns/op
Iteration   4: 536.789 ns/op
Iteration   5: 473.468 ns/op


Result "org.openjdk.bench.valhalla.array.set.Inline64int.New_to_Ref_as_Ref_set":
  477.996 ±(99.9%) 25.270 ns/op [Average]
  (min, avg, max) = (464.676, 477.996, 536.789), stdev = 23.637
  CI (99.9%): [452.727, 503.266] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.set.Inline64int.New_to_Ref_as_Ref_set
# Parameters: (size = 1000000)

# Run progress: 84.19% complete, ETA 01:31:50
# Fork: 1 of 3
# Warmup Iteration   1: 10985999.108 ns/op
# Warmup Iteration   2: 6859366.211 ns/op
# Warmup Iteration   3: 4992647.167 ns/op
Iteration   1: 5032856.134 ns/op
Iteration   2: 5348783.291 ns/op
Iteration   3: 4978897.576 ns/op
Iteration   4: 4932110.907 ns/op
Iteration   5: 4922205.893 ns/op

# Run progress: 84.22% complete, ETA 01:31:41
# Fork: 2 of 3
# Warmup Iteration   1: 9630175.000 ns/op
# Warmup Iteration   2: 6083449.102 ns/op
# Warmup Iteration   3: 5290840.927 ns/op
Iteration   1: 5512655.120 ns/op
Iteration   2: 4886313.609 ns/op
Iteration   3: 5016850.450 ns/op
Iteration   4: 5018110.415 ns/op
Iteration   5: 4971937.299 ns/op

# Run progress: 84.24% complete, ETA 01:31:32
# Fork: 3 of 3
# Warmup Iteration   1: 9634183.733 ns/op
# Warmup Iteration   2: 5324424.435 ns/op
# Warmup Iteration   3: 4997084.975 ns/op
Iteration   1: 5102130.258 ns/op
Iteration   2: 4865112.779 ns/op
Iteration   3: 4966335.384 ns/op
Iteration   4: 5028105.721 ns/op
Iteration   5: 5292366.927 ns/op


Result "org.openjdk.bench.valhalla.array.set.Inline64int.New_to_Ref_as_Ref_set":
  5058318.118 ±(99.9%) 197122.259 ns/op [Average]
  (min, avg, max) = (4865112.779, 5058318.118, 5512655.120), stdev = 184388.284
  CI (99.9%): [4861195.858, 5255440.377] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.set.Inline64int.New_to_Val_as_Val_set
# Parameters: (size = 100)

# Run progress: 84.26% complete, ETA 01:31:24
# Fork: 1 of 3
# Warmup Iteration   1: 714.931 ns/op
# Warmup Iteration   2: 655.614 ns/op
# Warmup Iteration   3: 483.208 ns/op
Iteration   1: 470.623 ns/op
Iteration   2: 482.149 ns/op
Iteration   3: 465.974 ns/op
Iteration   4: 465.315 ns/op
Iteration   5: 465.587 ns/op

# Run progress: 84.29% complete, ETA 01:31:15
# Fork: 2 of 3
# Warmup Iteration   1: 662.736 ns/op
# Warmup Iteration   2: 593.813 ns/op
# Warmup Iteration   3: 467.173 ns/op
Iteration   1: 465.878 ns/op
Iteration   2: 465.546 ns/op
Iteration   3: 490.736 ns/op
Iteration   4: 464.051 ns/op
Iteration   5: 465.025 ns/op

# Run progress: 84.31% complete, ETA 01:31:07
# Fork: 3 of 3
# Warmup Iteration   1: 686.305 ns/op
# Warmup Iteration   2: 583.964 ns/op
# Warmup Iteration   3: 465.752 ns/op
Iteration   1: 464.781 ns/op
Iteration   2: 466.166 ns/op
Iteration   3: 466.723 ns/op
Iteration   4: 466.410 ns/op
Iteration   5: 467.559 ns/op


Result "org.openjdk.bench.valhalla.array.set.Inline64int.New_to_Val_as_Val_set":
  468.835 ±(99.9%) 7.999 ns/op [Average]
  (min, avg, max) = (464.051, 468.835, 490.736), stdev = 7.482
  CI (99.9%): [460.836, 476.834] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.set.Inline64int.New_to_Val_as_Val_set
# Parameters: (size = 1000000)

# Run progress: 84.34% complete, ETA 01:30:58
# Fork: 1 of 3
# Warmup Iteration   1: 9337550.157 ns/op
# Warmup Iteration   2: 5631193.289 ns/op
# Warmup Iteration   3: 5014564.564 ns/op
Iteration   1: 5039368.368 ns/op
Iteration   2: 6177873.726 ns/op
Iteration   3: 5348651.016 ns/op
Iteration   4: 6510881.494 ns/op
Iteration   5: 5465797.715 ns/op

# Run progress: 84.36% complete, ETA 01:30:50
# Fork: 2 of 3
# Warmup Iteration   1: 10216475.596 ns/op
# Warmup Iteration   2: 6226995.141 ns/op
# Warmup Iteration   3: 7868603.357 ns/op
Iteration   1: 12201331.831 ns/op
Iteration   2: 10579180.125 ns/op
Iteration   3: 8180834.016 ns/op
Iteration   4: 5002740.718 ns/op
Iteration   5: 5899242.250 ns/op

# Run progress: 84.39% complete, ETA 01:30:41
# Fork: 3 of 3
# Warmup Iteration   1: 10827850.806 ns/op
# Warmup Iteration   2: 6894753.116 ns/op
# Warmup Iteration   3: 7673393.311 ns/op
Iteration   1: 5620724.772 ns/op
Iteration   2: 4955129.495 ns/op
Iteration   3: 5302542.759 ns/op
Iteration   4: 5683147.831 ns/op
Iteration   5: 5262737.849 ns/op


Result "org.openjdk.bench.valhalla.array.set.Inline64int.New_to_Val_as_Val_set":
  6482012.264 ±(99.9%) 2321050.129 ns/op [Average]
  (min, avg, max) = (4955129.495, 6482012.264, 12201331.831), stdev = 2171111.731
  CI (99.9%): [4160962.135, 8803062.394] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.set.Inline64int.Ref_to_Ref_as_Ref_set
# Parameters: (size = 100)

# Run progress: 84.41% complete, ETA 01:30:32
# Fork: 1 of 3
# Warmup Iteration   1: 669.943 ns/op
# Warmup Iteration   2: 593.331 ns/op
# Warmup Iteration   3: 473.578 ns/op
Iteration   1: 512.747 ns/op
Iteration   2: 472.817 ns/op
Iteration   3: 468.723 ns/op
Iteration   4: 468.555 ns/op
Iteration   5: 487.813 ns/op

# Run progress: 84.44% complete, ETA 01:30:24
# Fork: 2 of 3
# Warmup Iteration   1: 819.855 ns/op
# Warmup Iteration   2: 869.057 ns/op
# Warmup Iteration   3: 774.878 ns/op
Iteration   1: 545.192 ns/op
Iteration   2: 555.442 ns/op
Iteration   3: 561.111 ns/op
Iteration   4: 541.825 ns/op
Iteration   5: 585.515 ns/op

# Run progress: 84.46% complete, ETA 01:30:15
# Fork: 3 of 3
# Warmup Iteration   1: 875.313 ns/op
# Warmup Iteration   2: 755.281 ns/op
# Warmup Iteration   3: 855.018 ns/op
Iteration   1: 524.201 ns/op
Iteration   2: 465.191 ns/op
Iteration   3: 472.902 ns/op
Iteration   4: 511.774 ns/op
Iteration   5: 551.746 ns/op


Result "org.openjdk.bench.valhalla.array.set.Inline64int.Ref_to_Ref_as_Ref_set":
  515.037 ±(99.9%) 43.224 ns/op [Average]
  (min, avg, max) = (465.191, 515.037, 585.515), stdev = 40.432
  CI (99.9%): [471.813, 558.261] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.set.Inline64int.Ref_to_Ref_as_Ref_set
# Parameters: (size = 1000000)

# Run progress: 84.49% complete, ETA 01:30:07
# Fork: 1 of 3
# Warmup Iteration   1: 9402692.130 ns/op
# Warmup Iteration   2: 5683735.719 ns/op
# Warmup Iteration   3: 5654843.346 ns/op
Iteration   1: 5950013.724 ns/op
Iteration   2: 6165636.939 ns/op
Iteration   3: 5136379.041 ns/op
Iteration   4: 4935895.732 ns/op
Iteration   5: 5258930.269 ns/op

# Run progress: 84.51% complete, ETA 01:29:58
# Fork: 2 of 3
# Warmup Iteration   1: 17420959.034 ns/op
# Warmup Iteration   2: 17633828.211 ns/op
# Warmup Iteration   3: 10505723.804 ns/op
Iteration   1: 10202397.727 ns/op
Iteration   2: 9597152.781 ns/op
Iteration   3: 9719139.019 ns/op
Iteration   4: 9969769.816 ns/op
Iteration   5: 9886020.833 ns/op

# Run progress: 84.53% complete, ETA 01:29:50
# Fork: 3 of 3
# Warmup Iteration   1: 17706990.672 ns/op
# Warmup Iteration   2: 17856439.316 ns/op
# Warmup Iteration   3: 10900062.043 ns/op
Iteration   1: 9983328.833 ns/op
Iteration   2: 10556050.781 ns/op
Iteration   3: 10019235.554 ns/op
Iteration   4: 9903902.784 ns/op
Iteration   5: 10221218.859 ns/op


Result "org.openjdk.bench.valhalla.array.set.Inline64int.Ref_to_Ref_as_Ref_set":
  8500338.180 ±(99.9%) 2387274.918 ns/op [Average]
  (min, avg, max) = (4935895.732, 8500338.180, 10556050.781), stdev = 2233058.440
  CI (99.9%): [6113063.261, 10887613.098] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.set.Inline64int.Ref_to_Val_as_Val_set
# Parameters: (size = 100)

# Run progress: 84.56% complete, ETA 01:29:41
# Fork: 1 of 3
# Warmup Iteration   1: 1510.320 ns/op
# Warmup Iteration   2: 1264.559 ns/op
# Warmup Iteration   3: 973.546 ns/op
Iteration   1: 972.631 ns/op
Iteration   2: 608.075 ns/op
Iteration   3: 558.435 ns/op
Iteration   4: 472.218 ns/op
Iteration   5: 445.366 ns/op

# Run progress: 84.58% complete, ETA 01:29:33
# Fork: 2 of 3
# Warmup Iteration   1: 740.994 ns/op
# Warmup Iteration   2: 595.056 ns/op
# Warmup Iteration   3: 471.120 ns/op
Iteration   1: 469.321 ns/op
Iteration   2: 467.197 ns/op
Iteration   3: 466.466 ns/op
Iteration   4: 466.370 ns/op
Iteration   5: 465.851 ns/op

# Run progress: 84.61% complete, ETA 01:29:24
# Fork: 3 of 3
# Warmup Iteration   1: 697.363 ns/op
# Warmup Iteration   2: 585.752 ns/op
# Warmup Iteration   3: 467.585 ns/op
Iteration   1: 468.039 ns/op
Iteration   2: 467.761 ns/op
Iteration   3: 468.057 ns/op
Iteration   4: 465.307 ns/op
Iteration   5: 471.381 ns/op


Result "org.openjdk.bench.valhalla.array.set.Inline64int.Ref_to_Val_as_Val_set":
  515.498 ±(99.9%) 142.622 ns/op [Average]
  (min, avg, max) = (445.366, 515.498, 972.631), stdev = 133.409
  CI (99.9%): [372.876, 658.121] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.set.Inline64int.Ref_to_Val_as_Val_set
# Parameters: (size = 1000000)

# Run progress: 84.63% complete, ETA 01:29:16
# Fork: 1 of 3
# Warmup Iteration   1: 10771232.208 ns/op
# Warmup Iteration   2: 7120181.042 ns/op
# Warmup Iteration   3: 4984156.813 ns/op
Iteration   1: 5631889.117 ns/op
Iteration   2: 4960282.887 ns/op
Iteration   3: 4999614.224 ns/op
Iteration   4: 4972178.773 ns/op
Iteration   5: 4889214.372 ns/op

# Run progress: 84.66% complete, ETA 01:29:07
# Fork: 2 of 3
# Warmup Iteration   1: 9092781.153 ns/op
# Warmup Iteration   2: 5215987.912 ns/op
# Warmup Iteration   3: 4945625.410 ns/op
Iteration   1: 5077434.256 ns/op
Iteration   2: 5060984.165 ns/op
Iteration   3: 5361523.365 ns/op
Iteration   4: 5719660.311 ns/op
Iteration   5: 4971685.456 ns/op

# Run progress: 84.68% complete, ETA 01:28:58
# Fork: 3 of 3
# Warmup Iteration   1: 9431745.720 ns/op
# Warmup Iteration   2: 5223694.588 ns/op
# Warmup Iteration   3: 5288387.937 ns/op
Iteration   1: 5157649.026 ns/op
Iteration   2: 4939571.284 ns/op
Iteration   3: 4964616.216 ns/op
Iteration   4: 4962157.005 ns/op
Iteration   5: 4876801.082 ns/op


Result "org.openjdk.bench.valhalla.array.set.Inline64int.Ref_to_Val_as_Val_set":
  5103017.436 ±(99.9%) 279976.982 ns/op [Average]
  (min, avg, max) = (4876801.082, 5103017.436, 5719660.311), stdev = 261890.643
  CI (99.9%): [4823040.454, 5382994.418] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.set.Inline64int.Val_to_Ref_as_Ref_set
# Parameters: (size = 100)

# Run progress: 84.71% complete, ETA 01:28:50
# Fork: 1 of 3
# Warmup Iteration   1: 674.302 ns/op
# Warmup Iteration   2: 590.037 ns/op
# Warmup Iteration   3: 470.338 ns/op
Iteration   1: 466.728 ns/op
Iteration   2: 526.132 ns/op
Iteration   3: 485.895 ns/op
Iteration   4: 467.229 ns/op
Iteration   5: 473.240 ns/op

# Run progress: 84.73% complete, ETA 01:28:41
# Fork: 2 of 3
# Warmup Iteration   1: 717.030 ns/op
# Warmup Iteration   2: 594.005 ns/op
# Warmup Iteration   3: 468.517 ns/op
Iteration   1: 464.410 ns/op
Iteration   2: 470.290 ns/op
Iteration   3: 471.246 ns/op
Iteration   4: 467.710 ns/op
Iteration   5: 467.070 ns/op

# Run progress: 84.75% complete, ETA 01:28:33
# Fork: 3 of 3
# Warmup Iteration   1: 695.264 ns/op
# Warmup Iteration   2: 591.225 ns/op
# Warmup Iteration   3: 470.733 ns/op
Iteration   1: 470.665 ns/op
Iteration   2: 470.436 ns/op
Iteration   3: 464.630 ns/op
Iteration   4: 467.795 ns/op
Iteration   5: 471.196 ns/op


Result "org.openjdk.bench.valhalla.array.set.Inline64int.Val_to_Ref_as_Ref_set":
  473.645 ±(99.9%) 16.452 ns/op [Average]
  (min, avg, max) = (464.410, 473.645, 526.132), stdev = 15.389
  CI (99.9%): [457.193, 490.097] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.set.Inline64int.Val_to_Ref_as_Ref_set
# Parameters: (size = 1000000)

# Run progress: 84.78% complete, ETA 01:28:24
# Fork: 1 of 3
# Warmup Iteration   1: 10770059.653 ns/op
# Warmup Iteration   2: 7431734.375 ns/op
# Warmup Iteration   3: 4967436.887 ns/op
Iteration   1: 4911109.830 ns/op
Iteration   2: 5209832.902 ns/op
Iteration   3: 4900308.575 ns/op
Iteration   4: 4977950.946 ns/op
Iteration   5: 5111122.235 ns/op

# Run progress: 84.80% complete, ETA 01:28:16
# Fork: 2 of 3
# Warmup Iteration   1: 9888172.382 ns/op
# Warmup Iteration   2: 6812294.480 ns/op
# Warmup Iteration   3: 5382537.652 ns/op
Iteration   1: 5070582.495 ns/op
Iteration   2: 5122920.898 ns/op
Iteration   3: 4928955.693 ns/op
Iteration   4: 4952491.015 ns/op
Iteration   5: 4925632.078 ns/op

# Run progress: 84.83% complete, ETA 01:28:07
# Fork: 3 of 3
# Warmup Iteration   1: 9773283.583 ns/op
# Warmup Iteration   2: 5990970.414 ns/op
# Warmup Iteration   3: 5038141.875 ns/op
Iteration   1: 4898555.957 ns/op
Iteration   2: 4906350.325 ns/op
Iteration   3: 5195730.128 ns/op
Iteration   4: 5206413.430 ns/op
Iteration   5: 4982662.176 ns/op


Result "org.openjdk.bench.valhalla.array.set.Inline64int.Val_to_Ref_as_Ref_set":
  5020041.246 ±(99.9%) 128377.669 ns/op [Average]
  (min, avg, max) = (4898555.957, 5020041.246, 5209832.902), stdev = 120084.551
  CI (99.9%): [4891663.577, 5148418.914] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.set.Inline64int.Val_to_Val_as_Val_set
# Parameters: (size = 100)

# Run progress: 84.85% complete, ETA 01:27:59
# Fork: 1 of 3
# Warmup Iteration   1: 675.581 ns/op
# Warmup Iteration   2: 582.936 ns/op
# Warmup Iteration   3: 467.814 ns/op
Iteration   1: 468.849 ns/op
Iteration   2: 467.846 ns/op
Iteration   3: 467.068 ns/op
Iteration   4: 474.152 ns/op
Iteration   5: 468.679 ns/op

# Run progress: 84.88% complete, ETA 01:27:50
# Fork: 2 of 3
# Warmup Iteration   1: 683.586 ns/op
# Warmup Iteration   2: 709.619 ns/op
# Warmup Iteration   3: 497.272 ns/op
Iteration   1: 469.753 ns/op
Iteration   2: 484.297 ns/op
Iteration   3: 476.736 ns/op
Iteration   4: 467.897 ns/op
Iteration   5: 464.027 ns/op

# Run progress: 84.90% complete, ETA 01:27:42
# Fork: 3 of 3
# Warmup Iteration   1: 690.666 ns/op
# Warmup Iteration   2: 588.069 ns/op
# Warmup Iteration   3: 468.805 ns/op
Iteration   1: 466.128 ns/op
Iteration   2: 481.034 ns/op
Iteration   3: 467.588 ns/op
Iteration   4: 468.565 ns/op
Iteration   5: 467.121 ns/op


Result "org.openjdk.bench.valhalla.array.set.Inline64int.Val_to_Val_as_Val_set":
  470.650 ±(99.9%) 6.195 ns/op [Average]
  (min, avg, max) = (464.027, 470.650, 484.297), stdev = 5.794
  CI (99.9%): [464.455, 476.844] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.set.Inline64int.Val_to_Val_as_Val_set
# Parameters: (size = 1000000)

# Run progress: 84.93% complete, ETA 01:27:33
# Fork: 1 of 3
# Warmup Iteration   1: 10498527.485 ns/op
# Warmup Iteration   2: 6899607.993 ns/op
# Warmup Iteration   3: 4938419.512 ns/op
Iteration   1: 4808799.842 ns/op
Iteration   2: 4893272.966 ns/op
Iteration   3: 4983552.547 ns/op
Iteration   4: 5289813.267 ns/op
Iteration   5: 5034880.184 ns/op

# Run progress: 84.95% complete, ETA 01:27:24
# Fork: 2 of 3
# Warmup Iteration   1: 9758684.058 ns/op
# Warmup Iteration   2: 5930185.535 ns/op
# Warmup Iteration   3: 5588812.387 ns/op
Iteration   1: 4996020.832 ns/op
Iteration   2: 4872390.024 ns/op
Iteration   3: 5311859.733 ns/op
Iteration   4: 5310858.688 ns/op
Iteration   5: 5068306.111 ns/op

# Run progress: 84.98% complete, ETA 01:27:16
# Fork: 3 of 3
# Warmup Iteration   1: 9983853.960 ns/op
# Warmup Iteration   2: 5222065.974 ns/op
# Warmup Iteration   3: 4959362.132 ns/op
Iteration   1: 5023749.375 ns/op
Iteration   2: 4980673.030 ns/op
Iteration   3: 4968546.770 ns/op
Iteration   4: 4920036.180 ns/op
Iteration   5: 4929889.706 ns/op


Result "org.openjdk.bench.valhalla.array.set.Inline64int.Val_to_Val_as_Val_set":
  5026176.617 ±(99.9%) 169332.696 ns/op [Average]
  (min, avg, max) = (4808799.842, 5026176.617, 5311859.733), stdev = 158393.909
  CI (99.9%): [4856843.921, 5195509.313] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.set.Primitive32.set
# Parameters: (size = 100)

# Run progress: 85.00% complete, ETA 01:27:07
# Fork: 1 of 3
# Warmup Iteration   1: 15.718 ns/op
# Warmup Iteration   2: 15.384 ns/op
# Warmup Iteration   3: 15.463 ns/op
Iteration   1: 15.361 ns/op
Iteration   2: 15.355 ns/op
Iteration   3: 15.347 ns/op
Iteration   4: 15.337 ns/op
Iteration   5: 15.430 ns/op

# Run progress: 85.02% complete, ETA 01:26:59
# Fork: 2 of 3
# Warmup Iteration   1: 15.399 ns/op
# Warmup Iteration   2: 15.368 ns/op
# Warmup Iteration   3: 15.432 ns/op
Iteration   1: 15.419 ns/op
Iteration   2: 15.379 ns/op
Iteration   3: 15.367 ns/op
Iteration   4: 15.346 ns/op
Iteration   5: 15.337 ns/op

# Run progress: 85.05% complete, ETA 01:26:50
# Fork: 3 of 3
# Warmup Iteration   1: 15.417 ns/op
# Warmup Iteration   2: 15.498 ns/op
# Warmup Iteration   3: 15.717 ns/op
Iteration   1: 15.613 ns/op
Iteration   2: 15.474 ns/op
Iteration   3: 15.398 ns/op
Iteration   4: 15.339 ns/op
Iteration   5: 15.337 ns/op


Result "org.openjdk.bench.valhalla.array.set.Primitive32.set":
  15.389 ±(99.9%) 0.079 ns/op [Average]
  (min, avg, max) = (15.337, 15.389, 15.613), stdev = 0.074
  CI (99.9%): [15.310, 15.469] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.set.Primitive32.set
# Parameters: (size = 1000000)

# Run progress: 85.07% complete, ETA 01:26:42
# Fork: 1 of 3
# Warmup Iteration   1: 155253.086 ns/op
# Warmup Iteration   2: 154542.212 ns/op
# Warmup Iteration   3: 154460.197 ns/op
Iteration   1: 151835.782 ns/op
Iteration   2: 154941.858 ns/op
Iteration   3: 166426.498 ns/op
Iteration   4: 154526.106 ns/op
Iteration   5: 151649.496 ns/op

# Run progress: 85.10% complete, ETA 01:26:33
# Fork: 2 of 3
# Warmup Iteration   1: 155025.304 ns/op
# Warmup Iteration   2: 154494.093 ns/op
# Warmup Iteration   3: 154522.874 ns/op
Iteration   1: 154385.276 ns/op
Iteration   2: 154956.432 ns/op
Iteration   3: 154950.357 ns/op
Iteration   4: 154347.137 ns/op
Iteration   5: 154400.186 ns/op

# Run progress: 85.12% complete, ETA 01:26:24
# Fork: 3 of 3
# Warmup Iteration   1: 155330.009 ns/op
# Warmup Iteration   2: 159220.944 ns/op
# Warmup Iteration   3: 155881.440 ns/op
Iteration   1: 155000.886 ns/op
Iteration   2: 162268.715 ns/op
Iteration   3: 156971.472 ns/op
Iteration   4: 154859.727 ns/op
Iteration   5: 154665.604 ns/op


Result "org.openjdk.bench.valhalla.array.set.Primitive32.set":
  155745.702 ±(99.9%) 4057.912 ns/op [Average]
  (min, avg, max) = (151649.496, 155745.702, 166426.498), stdev = 3795.774
  CI (99.9%): [151687.790, 159803.614] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.set.Primitive64.set0
# Parameters: (size = 100)

# Run progress: 85.15% complete, ETA 01:26:16
# Fork: 1 of 3
# Warmup Iteration   1: 16.723 ns/op
# Warmup Iteration   2: 17.643 ns/op
# Warmup Iteration   3: 15.693 ns/op
Iteration   1: 18.395 ns/op
Iteration   2: 20.658 ns/op
Iteration   3: 19.272 ns/op
Iteration   4: 16.698 ns/op
Iteration   5: 15.353 ns/op

# Run progress: 85.17% complete, ETA 01:26:07
# Fork: 2 of 3
# Warmup Iteration   1: 16.333 ns/op
# Warmup Iteration   2: 15.360 ns/op
# Warmup Iteration   3: 15.423 ns/op
Iteration   1: 16.323 ns/op
Iteration   2: 15.900 ns/op
Iteration   3: 15.346 ns/op
Iteration   4: 15.771 ns/op
Iteration   5: 18.277 ns/op

# Run progress: 85.20% complete, ETA 01:25:59
# Fork: 3 of 3
# Warmup Iteration   1: 18.744 ns/op
# Warmup Iteration   2: 15.718 ns/op
# Warmup Iteration   3: 15.357 ns/op
Iteration   1: 17.282 ns/op
Iteration   2: 18.426 ns/op
Iteration   3: 18.557 ns/op
Iteration   4: 18.441 ns/op
Iteration   5: 19.728 ns/op


Result "org.openjdk.bench.valhalla.array.set.Primitive64.set0":
  17.628 ±(99.9%) 1.784 ns/op [Average]
  (min, avg, max) = (15.346, 17.628, 20.658), stdev = 1.668
  CI (99.9%): [15.845, 19.412] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.set.Primitive64.set0
# Parameters: (size = 1000000)

# Run progress: 85.22% complete, ETA 01:25:50
# Fork: 1 of 3
# Warmup Iteration   1: 187080.324 ns/op
# Warmup Iteration   2: 199771.900 ns/op
# Warmup Iteration   3: 187491.357 ns/op
Iteration   1: 183593.443 ns/op
Iteration   2: 170258.212 ns/op
Iteration   3: 170862.279 ns/op
Iteration   4: 178972.759 ns/op
Iteration   5: 189375.633 ns/op

# Run progress: 85.25% complete, ETA 01:25:42
# Fork: 2 of 3
# Warmup Iteration   1: 176923.833 ns/op
# Warmup Iteration   2: 170137.787 ns/op
# Warmup Iteration   3: 177500.022 ns/op
Iteration   1: 215687.825 ns/op
Iteration   2: 356558.458 ns/op
Iteration   3: 352219.433 ns/op
Iteration   4: 354091.211 ns/op
Iteration   5: 351783.165 ns/op

# Run progress: 85.27% complete, ETA 01:25:33
# Fork: 3 of 3
# Warmup Iteration   1: 349774.417 ns/op
# Warmup Iteration   2: 351933.414 ns/op
# Warmup Iteration   3: 353026.759 ns/op
Iteration   1: 352787.029 ns/op
Iteration   2: 351123.445 ns/op
Iteration   3: 351118.410 ns/op
Iteration   4: 343323.194 ns/op
Iteration   5: 346119.761 ns/op


Result "org.openjdk.bench.valhalla.array.set.Primitive64.set0":
  284524.950 ±(99.9%) 90808.094 ns/op [Average]
  (min, avg, max) = (170258.212, 284524.950, 356558.458), stdev = 84941.948
  CI (99.9%): [193716.856, 375333.045] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.set.Primitive64.set1
# Parameters: (size = 100)

# Run progress: 85.29% complete, ETA 01:25:24
# Fork: 1 of 3
# Warmup Iteration   1: 32.312 ns/op
# Warmup Iteration   2: 32.054 ns/op
# Warmup Iteration   3: 32.031 ns/op
Iteration   1: 32.091 ns/op
Iteration   2: 32.078 ns/op
Iteration   3: 32.330 ns/op
Iteration   4: 32.105 ns/op
Iteration   5: 35.621 ns/op

# Run progress: 85.32% complete, ETA 01:25:16
# Fork: 2 of 3
# Warmup Iteration   1: 20.702 ns/op
# Warmup Iteration   2: 20.313 ns/op
# Warmup Iteration   3: 16.166 ns/op
Iteration   1: 17.054 ns/op
Iteration   2: 16.620 ns/op
Iteration   3: 15.712 ns/op
Iteration   4: 15.743 ns/op
Iteration   5: 17.033 ns/op

# Run progress: 85.34% complete, ETA 01:25:08
# Fork: 3 of 3
# Warmup Iteration   1: 16.789 ns/op
# Warmup Iteration   2: 15.329 ns/op
# Warmup Iteration   3: 15.392 ns/op
Iteration   1: 15.419 ns/op
Iteration   2: 15.152 ns/op
Iteration   3: 15.343 ns/op
Iteration   4: 15.478 ns/op
Iteration   5: 15.381 ns/op


Result "org.openjdk.bench.valhalla.array.set.Primitive64.set1":
  21.544 ±(99.9%) 8.909 ns/op [Average]
  (min, avg, max) = (15.152, 21.544, 35.621), stdev = 8.334
  CI (99.9%): [12.635, 30.453] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.set.Primitive64.set1
# Parameters: (size = 1000000)

# Run progress: 85.37% complete, ETA 01:24:59
# Fork: 1 of 3
# Warmup Iteration   1: 172191.208 ns/op
# Warmup Iteration   2: 174470.303 ns/op
# Warmup Iteration   3: 184617.353 ns/op
Iteration   1: 171557.732 ns/op
Iteration   2: 173782.013 ns/op
Iteration   3: 173797.553 ns/op
Iteration   4: 170378.179 ns/op
Iteration   5: 173653.018 ns/op

# Run progress: 85.39% complete, ETA 01:24:51
# Fork: 2 of 3
# Warmup Iteration   1: 291011.607 ns/op
# Warmup Iteration   2: 174509.405 ns/op
# Warmup Iteration   3: 176919.223 ns/op
Iteration   1: 172572.520 ns/op
Iteration   2: 188080.378 ns/op
Iteration   3: 183611.109 ns/op
Iteration   4: 172222.013 ns/op
Iteration   5: 202239.249 ns/op

# Run progress: 85.42% complete, ETA 01:24:42
# Fork: 3 of 3
# Warmup Iteration   1: 193727.638 ns/op
# Warmup Iteration   2: 199789.139 ns/op
# Warmup Iteration   3: 183989.111 ns/op
Iteration   1: 193720.547 ns/op
Iteration   2: 200752.163 ns/op
Iteration   3: 235162.025 ns/op
Iteration   4: 217156.652 ns/op
Iteration   5: 178570.709 ns/op


Result "org.openjdk.bench.valhalla.array.set.Primitive64.set1":
  187150.391 ±(99.9%) 20697.033 ns/op [Average]
  (min, avg, max) = (170378.179, 187150.391, 235162.025), stdev = 19360.017
  CI (99.9%): [166453.358, 207847.423] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.sum.IdentityOpt.Int_as_Int_sum
# Parameters: (size = 100)

# Run progress: 85.44% complete, ETA 01:24:34
# Fork: 1 of 3
# Warmup Iteration   1: 76.751 ns/op
# Warmup Iteration   2: 67.995 ns/op
# Warmup Iteration   3: 73.597 ns/op
Iteration   1: 73.633 ns/op
Iteration   2: 73.518 ns/op
Iteration   3: 73.338 ns/op
Iteration   4: 73.687 ns/op
Iteration   5: 73.518 ns/op

# Run progress: 85.47% complete, ETA 01:24:25
# Fork: 2 of 3
# Warmup Iteration   1: 67.764 ns/op
# Warmup Iteration   2: 63.944 ns/op
# Warmup Iteration   3: 73.274 ns/op
Iteration   1: 75.591 ns/op
Iteration   2: 84.837 ns/op
Iteration   3: 73.148 ns/op
Iteration   4: 73.547 ns/op
Iteration   5: 73.658 ns/op

# Run progress: 85.49% complete, ETA 01:24:17
# Fork: 3 of 3
# Warmup Iteration   1: 66.188 ns/op
# Warmup Iteration   2: 65.472 ns/op
# Warmup Iteration   3: 77.417 ns/op
Iteration   1: 73.545 ns/op
Iteration   2: 74.957 ns/op
Iteration   3: 75.596 ns/op
Iteration   4: 75.365 ns/op
Iteration   5: 74.876 ns/op


Result "org.openjdk.bench.valhalla.array.sum.IdentityOpt.Int_as_Int_sum":
  74.854 ±(99.9%) 3.097 ns/op [Average]
  (min, avg, max) = (73.148, 74.854, 84.837), stdev = 2.897
  CI (99.9%): [71.757, 77.952] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.sum.IdentityOpt.Int_as_Int_sum
# Parameters: (size = 1000000)

# Run progress: 85.51% complete, ETA 01:24:08
# Fork: 1 of 3
# Warmup Iteration   1: 861545.207 ns/op
# Warmup Iteration   2: 885581.901 ns/op
# Warmup Iteration   3: 846639.695 ns/op
Iteration   1: 839033.327 ns/op
Iteration   2: 872142.072 ns/op
Iteration   3: 871812.030 ns/op
Iteration   4: 884700.801 ns/op
Iteration   5: 818664.122 ns/op

# Run progress: 85.54% complete, ETA 01:24:01
# Fork: 2 of 3
# Warmup Iteration   1: 851811.933 ns/op
# Warmup Iteration   2: 852874.432 ns/op
# Warmup Iteration   3: 836354.097 ns/op
Iteration   1: 898728.441 ns/op
Iteration   2: 957400.674 ns/op
Iteration   3: 814981.993 ns/op
Iteration   4: 815358.394 ns/op
Iteration   5: 810871.663 ns/op

# Run progress: 85.56% complete, ETA 01:23:52
# Fork: 3 of 3
# Warmup Iteration   1: 879806.553 ns/op
# Warmup Iteration   2: 861474.150 ns/op
# Warmup Iteration   3: 880961.766 ns/op
Iteration   1: 810293.926 ns/op
Iteration   2: 815084.961 ns/op
Iteration   3: 821633.190 ns/op
Iteration   4: 817688.534 ns/op
Iteration   5: 821082.823 ns/op


Result "org.openjdk.bench.valhalla.array.sum.IdentityOpt.Int_as_Int_sum":
  844631.797 ±(99.9%) 46236.418 ns/op [Average]
  (min, avg, max) = (810293.926, 844631.797, 957400.674), stdev = 43249.574
  CI (99.9%): [798395.379, 890868.214] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.sum.IdentityOpt.Ref_as_Ref_fields
# Parameters: (size = 100)

# Run progress: 85.59% complete, ETA 01:23:44
# Fork: 1 of 3
# Warmup Iteration   1: 50.955 ns/op
# Warmup Iteration   2: 50.787 ns/op
# Warmup Iteration   3: 50.878 ns/op
Iteration   1: 50.922 ns/op
Iteration   2: 50.981 ns/op
Iteration   3: 51.344 ns/op
Iteration   4: 51.075 ns/op
Iteration   5: 51.100 ns/op

# Run progress: 85.61% complete, ETA 01:23:36
# Fork: 2 of 3
# Warmup Iteration   1: 51.321 ns/op
# Warmup Iteration   2: 49.951 ns/op
# Warmup Iteration   3: 50.725 ns/op
Iteration   1: 50.534 ns/op
Iteration   2: 50.203 ns/op
Iteration   3: 49.545 ns/op
Iteration   4: 50.230 ns/op
Iteration   5: 50.049 ns/op

# Run progress: 85.64% complete, ETA 01:23:27
# Fork: 3 of 3
# Warmup Iteration   1: 50.434 ns/op
# Warmup Iteration   2: 50.023 ns/op
# Warmup Iteration   3: 50.084 ns/op
Iteration   1: 49.695 ns/op
Iteration   2: 50.254 ns/op
Iteration   3: 49.950 ns/op
Iteration   4: 50.127 ns/op
Iteration   5: 50.190 ns/op


Result "org.openjdk.bench.valhalla.array.sum.IdentityOpt.Ref_as_Ref_fields":
  50.413 ±(99.9%) 0.587 ns/op [Average]
  (min, avg, max) = (49.545, 50.413, 51.344), stdev = 0.549
  CI (99.9%): [49.826, 51.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.sum.IdentityOpt.Ref_as_Ref_fields
# Parameters: (size = 1000000)

# Run progress: 85.66% complete, ETA 01:23:19
# Fork: 1 of 3
# Warmup Iteration   1: 731144.235 ns/op
# Warmup Iteration   2: 737933.272 ns/op
# Warmup Iteration   3: 736955.675 ns/op
Iteration   1: 744502.346 ns/op
Iteration   2: 741438.162 ns/op
Iteration   3: 750844.847 ns/op
Iteration   4: 733472.008 ns/op
Iteration   5: 747369.486 ns/op

# Run progress: 85.69% complete, ETA 01:23:10
# Fork: 2 of 3
# Warmup Iteration   1: 735891.155 ns/op
# Warmup Iteration   2: 738581.029 ns/op
# Warmup Iteration   3: 743696.137 ns/op
Iteration   1: 747288.526 ns/op
Iteration   2: 740464.940 ns/op
Iteration   3: 740364.884 ns/op
Iteration   4: 751318.978 ns/op
Iteration   5: 746262.246 ns/op

# Run progress: 85.71% complete, ETA 01:23:02
# Fork: 3 of 3
# Warmup Iteration   1: 736196.900 ns/op
# Warmup Iteration   2: 737589.602 ns/op
# Warmup Iteration   3: 737832.263 ns/op
Iteration   1: 740249.569 ns/op
Iteration   2: 746368.844 ns/op
Iteration   3: 734099.483 ns/op
Iteration   4: 739878.832 ns/op
Iteration   5: 744834.665 ns/op


Result "org.openjdk.bench.valhalla.array.sum.IdentityOpt.Ref_as_Ref_fields":
  743250.521 ±(99.9%) 5700.223 ns/op [Average]
  (min, avg, max) = (733472.008, 743250.521, 751318.978), stdev = 5331.992
  CI (99.9%): [737550.298, 748950.744] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.sum.IdentityOpt.Ref_as_Ref_sum
# Parameters: (size = 100)

# Run progress: 85.74% complete, ETA 01:22:53
# Fork: 1 of 3
# Warmup Iteration   1: 50.566 ns/op
# Warmup Iteration   2: 50.131 ns/op
# Warmup Iteration   3: 49.948 ns/op
Iteration   1: 49.645 ns/op
Iteration   2: 49.961 ns/op
Iteration   3: 50.600 ns/op
Iteration   4: 49.958 ns/op
Iteration   5: 49.859 ns/op

# Run progress: 85.76% complete, ETA 01:22:44
# Fork: 2 of 3
# Warmup Iteration   1: 50.000 ns/op
# Warmup Iteration   2: 49.954 ns/op
# Warmup Iteration   3: 49.788 ns/op
Iteration   1: 50.289 ns/op
Iteration   2: 50.646 ns/op
Iteration   3: 50.548 ns/op
Iteration   4: 50.393 ns/op
Iteration   5: 50.188 ns/op

# Run progress: 85.78% complete, ETA 01:22:36
# Fork: 3 of 3
# Warmup Iteration   1: 50.492 ns/op
# Warmup Iteration   2: 49.765 ns/op
# Warmup Iteration   3: 50.066 ns/op
Iteration   1: 49.995 ns/op
Iteration   2: 50.043 ns/op
Iteration   3: 50.128 ns/op
Iteration   4: 49.970 ns/op
Iteration   5: 49.458 ns/op


Result "org.openjdk.bench.valhalla.array.sum.IdentityOpt.Ref_as_Ref_sum":
  50.112 ±(99.9%) 0.364 ns/op [Average]
  (min, avg, max) = (49.458, 50.112, 50.646), stdev = 0.341
  CI (99.9%): [49.748, 50.476] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.sum.IdentityOpt.Ref_as_Ref_sum
# Parameters: (size = 1000000)

# Run progress: 85.81% complete, ETA 01:22:27
# Fork: 1 of 3
# Warmup Iteration   1: 710644.566 ns/op
# Warmup Iteration   2: 731821.416 ns/op
# Warmup Iteration   3: 740300.050 ns/op
Iteration   1: 736310.135 ns/op
Iteration   2: 740433.309 ns/op
Iteration   3: 744856.939 ns/op
Iteration   4: 742114.869 ns/op
Iteration   5: 744386.027 ns/op

# Run progress: 85.83% complete, ETA 01:22:19
# Fork: 2 of 3
# Warmup Iteration   1: 716502.673 ns/op
# Warmup Iteration   2: 717278.206 ns/op
# Warmup Iteration   3: 717669.195 ns/op
Iteration   1: 734608.139 ns/op
Iteration   2: 724235.591 ns/op
Iteration   3: 728597.818 ns/op
Iteration   4: 730555.940 ns/op
Iteration   5: 729723.270 ns/op

# Run progress: 85.86% complete, ETA 01:22:10
# Fork: 3 of 3
# Warmup Iteration   1: 753306.710 ns/op
# Warmup Iteration   2: 754645.959 ns/op
# Warmup Iteration   3: 756027.662 ns/op
Iteration   1: 751350.555 ns/op
Iteration   2: 753766.867 ns/op
Iteration   3: 749749.688 ns/op
Iteration   4: 754374.156 ns/op
Iteration   5: 746350.074 ns/op


Result "org.openjdk.bench.valhalla.array.sum.IdentityOpt.Ref_as_Ref_sum":
  740760.892 ±(99.9%) 10361.683 ns/op [Average]
  (min, avg, max) = (724235.591, 740760.892, 754374.156), stdev = 9692.325
  CI (99.9%): [730399.209, 751122.575] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.sum.Inline128int.Int_as_Int_sum
# Parameters: (size = 100)

# Run progress: 85.88% complete, ETA 01:22:01
# Fork: 1 of 3
# Warmup Iteration   1: 281.229 ns/op
# Warmup Iteration   2: 277.370 ns/op
# Warmup Iteration   3: 278.367 ns/op
Iteration   1: 279.518 ns/op
Iteration   2: 277.794 ns/op
Iteration   3: 277.801 ns/op
Iteration   4: 279.452 ns/op
Iteration   5: 278.600 ns/op

# Run progress: 85.91% complete, ETA 01:21:53
# Fork: 2 of 3
# Warmup Iteration   1: 279.996 ns/op
# Warmup Iteration   2: 277.068 ns/op
# Warmup Iteration   3: 277.797 ns/op
Iteration   1: 279.002 ns/op
Iteration   2: 279.072 ns/op
Iteration   3: 278.534 ns/op
Iteration   4: 279.348 ns/op
Iteration   5: 282.477 ns/op

# Run progress: 85.93% complete, ETA 01:21:44
# Fork: 3 of 3
# Warmup Iteration   1: 283.542 ns/op
# Warmup Iteration   2: 279.792 ns/op
# Warmup Iteration   3: 277.361 ns/op
Iteration   1: 279.775 ns/op
Iteration   2: 279.503 ns/op
Iteration   3: 279.945 ns/op
Iteration   4: 277.522 ns/op
Iteration   5: 281.245 ns/op


Result "org.openjdk.bench.valhalla.array.sum.Inline128int.Int_as_Int_sum":
  279.306 ±(99.9%) 1.386 ns/op [Average]
  (min, avg, max) = (277.522, 279.306, 282.477), stdev = 1.296
  CI (99.9%): [277.920, 280.692] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.sum.Inline128int.Int_as_Int_sum
# Parameters: (size = 1000000)

# Run progress: 85.96% complete, ETA 01:21:36
# Fork: 1 of 3
# Warmup Iteration   1: 3290532.271 ns/op
# Warmup Iteration   2: 3235427.116 ns/op
# Warmup Iteration   3: 3257599.110 ns/op
Iteration   1: 3144757.684 ns/op
Iteration   2: 3137617.081 ns/op
Iteration   3: 3175437.174 ns/op
Iteration   4: 3139344.141 ns/op
Iteration   5: 3177672.978 ns/op

# Run progress: 85.98% complete, ETA 01:21:27
# Fork: 2 of 3
# Warmup Iteration   1: 3300700.685 ns/op
# Warmup Iteration   2: 3158289.308 ns/op
# Warmup Iteration   3: 3156752.358 ns/op
Iteration   1: 3200791.137 ns/op
Iteration   2: 3179812.962 ns/op
Iteration   3: 3158861.806 ns/op
Iteration   4: 3172359.095 ns/op
Iteration   5: 3173689.348 ns/op

# Run progress: 86.00% complete, ETA 01:21:19
# Fork: 3 of 3
# Warmup Iteration   1: 3262733.713 ns/op
# Warmup Iteration   2: 3120330.618 ns/op
# Warmup Iteration   3: 3102540.765 ns/op
Iteration   1: 3153179.116 ns/op
Iteration   2: 3112575.591 ns/op
Iteration   3: 3145038.661 ns/op
Iteration   4: 3128396.866 ns/op
Iteration   5: 3119557.112 ns/op


Result "org.openjdk.bench.valhalla.array.sum.Inline128int.Int_as_Int_sum":
  3154606.050 ±(99.9%) 26842.251 ns/op [Average]
  (min, avg, max) = (3112575.591, 3154606.050, 3200791.137), stdev = 25108.258
  CI (99.9%): [3127763.799, 3181448.301] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.sum.Inline128int.Ref_as_Int_sum
# Parameters: (size = 100)

# Run progress: 86.03% complete, ETA 01:21:10
# Fork: 1 of 3
# Warmup Iteration   1: 262.539 ns/op
# Warmup Iteration   2: 260.917 ns/op
# Warmup Iteration   3: 262.205 ns/op
Iteration   1: 260.931 ns/op
Iteration   2: 263.121 ns/op
Iteration   3: 263.093 ns/op
Iteration   4: 265.014 ns/op
Iteration   5: 263.510 ns/op

# Run progress: 86.05% complete, ETA 01:21:01
# Fork: 2 of 3
# Warmup Iteration   1: 263.325 ns/op
# Warmup Iteration   2: 261.263 ns/op
# Warmup Iteration   3: 261.342 ns/op
Iteration   1: 262.699 ns/op
Iteration   2: 262.710 ns/op
Iteration   3: 261.580 ns/op
Iteration   4: 259.840 ns/op
Iteration   5: 261.321 ns/op

# Run progress: 86.08% complete, ETA 01:20:53
# Fork: 3 of 3
# Warmup Iteration   1: 262.499 ns/op
# Warmup Iteration   2: 258.053 ns/op
# Warmup Iteration   3: 262.037 ns/op
Iteration   1: 260.574 ns/op
Iteration   2: 260.079 ns/op
Iteration   3: 259.771 ns/op
Iteration   4: 261.423 ns/op
Iteration   5: 261.313 ns/op


Result "org.openjdk.bench.valhalla.array.sum.Inline128int.Ref_as_Int_sum":
  261.799 ±(99.9%) 1.620 ns/op [Average]
  (min, avg, max) = (259.771, 261.799, 265.014), stdev = 1.515
  CI (99.9%): [260.179, 263.419] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.sum.Inline128int.Ref_as_Int_sum
# Parameters: (size = 1000000)

# Run progress: 86.10% complete, ETA 01:20:44
# Fork: 1 of 3
# Warmup Iteration   1: 3201898.223 ns/op
# Warmup Iteration   2: 3242198.625 ns/op
# Warmup Iteration   3: 3235786.309 ns/op
Iteration   1: 3123092.391 ns/op
Iteration   2: 3036641.867 ns/op
Iteration   3: 3045351.894 ns/op
Iteration   4: 3009182.559 ns/op
Iteration   5: 3013448.353 ns/op

# Run progress: 86.13% complete, ETA 01:20:36
# Fork: 2 of 3
# Warmup Iteration   1: 3149384.375 ns/op
# Warmup Iteration   2: 3082111.621 ns/op
# Warmup Iteration   3: 3072496.951 ns/op
Iteration   1: 3074710.627 ns/op
Iteration   2: 3080199.486 ns/op
Iteration   3: 3843918.893 ns/op
Iteration   4: 3067068.554 ns/op
Iteration   5: 3079138.549 ns/op

# Run progress: 86.15% complete, ETA 01:20:27
# Fork: 3 of 3
# Warmup Iteration   1: 3213127.804 ns/op
# Warmup Iteration   2: 3079008.792 ns/op
# Warmup Iteration   3: 3069814.530 ns/op
Iteration   1: 3026498.625 ns/op
Iteration   2: 3031785.876 ns/op
Iteration   3: 3016263.640 ns/op
Iteration   4: 3070925.868 ns/op
Iteration   5: 3025557.105 ns/op


Result "org.openjdk.bench.valhalla.array.sum.Inline128int.Ref_as_Int_sum":
  3102918.952 ±(99.9%) 221789.358 ns/op [Average]
  (min, avg, max) = (3009182.559, 3102918.952, 3843918.893), stdev = 207461.903
  CI (99.9%): [2881129.594, 3324708.310] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.sum.Inline128int.Ref_as_Ref_fields
# Parameters: (size = 100)

# Run progress: 86.18% complete, ETA 01:20:18
# Fork: 1 of 3
# Warmup Iteration   1: 156.284 ns/op
# Warmup Iteration   2: 155.214 ns/op
# Warmup Iteration   3: 144.842 ns/op
Iteration   1: 144.586 ns/op
Iteration   2: 144.177 ns/op
Iteration   3: 144.621 ns/op
Iteration   4: 147.333 ns/op
Iteration   5: 144.467 ns/op

# Run progress: 86.20% complete, ETA 01:20:10
# Fork: 2 of 3
# Warmup Iteration   1: 155.825 ns/op
# Warmup Iteration   2: 154.876 ns/op
# Warmup Iteration   3: 144.304 ns/op
Iteration   1: 143.796 ns/op
Iteration   2: 144.172 ns/op
Iteration   3: 145.107 ns/op
Iteration   4: 144.984 ns/op
Iteration   5: 143.775 ns/op

# Run progress: 86.23% complete, ETA 01:20:01
# Fork: 3 of 3
# Warmup Iteration   1: 156.688 ns/op
# Warmup Iteration   2: 155.051 ns/op
# Warmup Iteration   3: 144.541 ns/op
Iteration   1: 143.301 ns/op
Iteration   2: 144.705 ns/op
Iteration   3: 143.945 ns/op
Iteration   4: 143.709 ns/op
Iteration   5: 144.558 ns/op


Result "org.openjdk.bench.valhalla.array.sum.Inline128int.Ref_as_Ref_fields":
  144.482 ±(99.9%) 1.002 ns/op [Average]
  (min, avg, max) = (143.301, 144.482, 147.333), stdev = 0.937
  CI (99.9%): [143.480, 145.484] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.sum.Inline128int.Ref_as_Ref_fields
# Parameters: (size = 1000000)

# Run progress: 86.25% complete, ETA 01:19:53
# Fork: 1 of 3
# Warmup Iteration   1: 2531848.407 ns/op
# Warmup Iteration   2: 2487489.248 ns/op
# Warmup Iteration   3: 2503940.505 ns/op
Iteration   1: 2604141.409 ns/op
Iteration   2: 2580081.410 ns/op
Iteration   3: 2559583.547 ns/op
Iteration   4: 2520574.143 ns/op
Iteration   5: 2516705.415 ns/op

# Run progress: 86.27% complete, ETA 01:19:44
# Fork: 2 of 3
# Warmup Iteration   1: 2569248.823 ns/op
# Warmup Iteration   2: 2544331.549 ns/op
# Warmup Iteration   3: 2521778.645 ns/op
Iteration   1: 2511537.805 ns/op
Iteration   2: 2549337.575 ns/op
Iteration   3: 2608161.473 ns/op
Iteration   4: 2616236.728 ns/op
Iteration   5: 2593538.141 ns/op

# Run progress: 86.30% complete, ETA 01:19:35
# Fork: 3 of 3
# Warmup Iteration   1: 2528549.854 ns/op
# Warmup Iteration   2: 2517673.035 ns/op
# Warmup Iteration   3: 2479353.248 ns/op
Iteration   1: 2505159.496 ns/op
Iteration   2: 2494271.040 ns/op
Iteration   3: 2494705.851 ns/op
Iteration   4: 2501872.319 ns/op
Iteration   5: 2506499.280 ns/op


Result "org.openjdk.bench.valhalla.array.sum.Inline128int.Ref_as_Ref_fields":
  2544160.375 ±(99.9%) 48587.893 ns/op [Average]
  (min, avg, max) = (2494271.040, 2544160.375, 2616236.728), stdev = 45449.145
  CI (99.9%): [2495572.483, 2592748.268] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.sum.Inline128int.Ref_as_Ref_sum
# Parameters: (size = 100)

# Run progress: 86.32% complete, ETA 01:19:27
# Fork: 1 of 3
# Warmup Iteration   1: 266.878 ns/op
# Warmup Iteration   2: 267.206 ns/op
# Warmup Iteration   3: 272.250 ns/op
Iteration   1: 267.260 ns/op
Iteration   2: 267.374 ns/op
Iteration   3: 264.636 ns/op
Iteration   4: 265.802 ns/op
Iteration   5: 263.896 ns/op

# Run progress: 86.35% complete, ETA 01:19:18
# Fork: 2 of 3
# Warmup Iteration   1: 262.670 ns/op
# Warmup Iteration   2: 259.602 ns/op
# Warmup Iteration   3: 263.682 ns/op
Iteration   1: 268.357 ns/op
Iteration   2: 264.933 ns/op
Iteration   3: 262.957 ns/op
Iteration   4: 264.087 ns/op
Iteration   5: 263.881 ns/op

# Run progress: 86.37% complete, ETA 01:19:10
# Fork: 3 of 3
# Warmup Iteration   1: 265.112 ns/op
# Warmup Iteration   2: 260.027 ns/op
# Warmup Iteration   3: 265.847 ns/op
Iteration   1: 265.375 ns/op
Iteration   2: 263.913 ns/op
Iteration   3: 266.443 ns/op
Iteration   4: 264.423 ns/op
Iteration   5: 264.116 ns/op


Result "org.openjdk.bench.valhalla.array.sum.Inline128int.Ref_as_Ref_sum":
  265.164 ±(99.9%) 1.675 ns/op [Average]
  (min, avg, max) = (262.957, 265.164, 268.357), stdev = 1.567
  CI (99.9%): [263.488, 266.839] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.sum.Inline128int.Ref_as_Ref_sum
# Parameters: (size = 1000000)

# Run progress: 86.40% complete, ETA 01:19:01
# Fork: 1 of 3
# Warmup Iteration   1: 3154679.255 ns/op
# Warmup Iteration   2: 3066004.797 ns/op
# Warmup Iteration   3: 3056475.049 ns/op
Iteration   1: 3018603.293 ns/op
Iteration   2: 3046410.248 ns/op
Iteration   3: 3015184.559 ns/op
Iteration   4: 3037007.757 ns/op
Iteration   5: 3063625.252 ns/op

# Run progress: 86.42% complete, ETA 01:18:53
# Fork: 2 of 3
# Warmup Iteration   1: 3108122.049 ns/op
# Warmup Iteration   2: 3061017.803 ns/op
# Warmup Iteration   3: 3062721.760 ns/op
Iteration   1: 3045878.389 ns/op
Iteration   2: 3063968.182 ns/op
Iteration   3: 3057683.561 ns/op
Iteration   4: 3051691.945 ns/op
Iteration   5: 3286447.377 ns/op

# Run progress: 86.45% complete, ETA 01:18:44
# Fork: 3 of 3
# Warmup Iteration   1: 3325052.632 ns/op
# Warmup Iteration   2: 3193332.006 ns/op
# Warmup Iteration   3: 3012933.704 ns/op
Iteration   1: 3033135.792 ns/op
Iteration   2: 3022212.991 ns/op
Iteration   3: 3023673.443 ns/op
Iteration   4: 3031607.910 ns/op
Iteration   5: 3069889.648 ns/op


Result "org.openjdk.bench.valhalla.array.sum.Inline128int.Ref_as_Ref_sum":
  3057801.356 ±(99.9%) 70171.153 ns/op [Average]
  (min, avg, max) = (3015184.559, 3057801.356, 3286447.377), stdev = 65638.140
  CI (99.9%): [2987630.203, 3127972.510] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.sum.Inline128int.Val_as_Int_sum
# Parameters: (size = 100)

# Run progress: 86.47% complete, ETA 01:18:35
# Fork: 1 of 3
# Warmup Iteration   1: 259.521 ns/op
# Warmup Iteration   2: 259.249 ns/op
# Warmup Iteration   3: 263.195 ns/op
Iteration   1: 259.484 ns/op
Iteration   2: 259.118 ns/op
Iteration   3: 261.086 ns/op
Iteration   4: 260.077 ns/op
Iteration   5: 258.988 ns/op

# Run progress: 86.50% complete, ETA 01:18:27
# Fork: 2 of 3
# Warmup Iteration   1: 259.274 ns/op
# Warmup Iteration   2: 258.422 ns/op
# Warmup Iteration   3: 258.806 ns/op
Iteration   1: 258.877 ns/op
Iteration   2: 259.020 ns/op
Iteration   3: 257.982 ns/op
Iteration   4: 259.730 ns/op
Iteration   5: 258.233 ns/op

# Run progress: 86.52% complete, ETA 01:18:18
# Fork: 3 of 3
# Warmup Iteration   1: 258.538 ns/op
# Warmup Iteration   2: 256.489 ns/op
# Warmup Iteration   3: 265.007 ns/op
Iteration   1: 266.799 ns/op
Iteration   2: 265.865 ns/op
Iteration   3: 258.737 ns/op
Iteration   4: 262.178 ns/op
Iteration   5: 258.985 ns/op


Result "org.openjdk.bench.valhalla.array.sum.Inline128int.Val_as_Int_sum":
  260.344 ±(99.9%) 2.842 ns/op [Average]
  (min, avg, max) = (257.982, 260.344, 266.799), stdev = 2.659
  CI (99.9%): [257.502, 263.186] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.sum.Inline128int.Val_as_Int_sum
# Parameters: (size = 1000000)

# Run progress: 86.54% complete, ETA 01:18:10
# Fork: 1 of 3
# Warmup Iteration   1: 3161449.843 ns/op
# Warmup Iteration   2: 3015530.099 ns/op
# Warmup Iteration   3: 2999602.985 ns/op
Iteration   1: 3199454.247 ns/op
Iteration   2: 3257313.637 ns/op
Iteration   3: 3284984.305 ns/op
Iteration   4: 3232336.155 ns/op
Iteration   5: 3254252.152 ns/op

# Run progress: 86.57% complete, ETA 01:18:01
# Fork: 2 of 3
# Warmup Iteration   1: 3467547.089 ns/op
# Warmup Iteration   2: 3311446.822 ns/op
# Warmup Iteration   3: 3376476.390 ns/op
Iteration   1: 3315102.510 ns/op
Iteration   2: 3360068.613 ns/op
Iteration   3: 3099518.150 ns/op
Iteration   4: 3046579.819 ns/op
Iteration   5: 3038518.393 ns/op

# Run progress: 86.59% complete, ETA 01:17:53
# Fork: 3 of 3
# Warmup Iteration   1: 3135835.783 ns/op
# Warmup Iteration   2: 3035877.126 ns/op
# Warmup Iteration   3: 2987566.817 ns/op
Iteration   1: 2976316.270 ns/op
Iteration   2: 2975899.632 ns/op
Iteration   3: 2956456.386 ns/op
Iteration   4: 2985719.550 ns/op
Iteration   5: 2968249.507 ns/op


Result "org.openjdk.bench.valhalla.array.sum.Inline128int.Val_as_Int_sum":
  3130051.288 ±(99.9%) 156201.684 ns/op [Average]
  (min, avg, max) = (2956456.386, 3130051.288, 3360068.613), stdev = 146111.152
  CI (99.9%): [2973849.604, 3286252.973] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.sum.Inline128int.Val_as_Ref_fields
# Parameters: (size = 100)

# Run progress: 86.62% complete, ETA 01:17:44
# Fork: 1 of 3
# Warmup Iteration   1: 153.595 ns/op
# Warmup Iteration   2: 152.445 ns/op
# Warmup Iteration   3: 141.452 ns/op
Iteration   1: 142.185 ns/op
Iteration   2: 141.101 ns/op
Iteration   3: 141.085 ns/op
Iteration   4: 142.729 ns/op
Iteration   5: 141.630 ns/op

# Run progress: 86.64% complete, ETA 01:17:35
# Fork: 2 of 3
# Warmup Iteration   1: 152.904 ns/op
# Warmup Iteration   2: 152.759 ns/op
# Warmup Iteration   3: 141.611 ns/op
Iteration   1: 141.474 ns/op
Iteration   2: 141.999 ns/op
Iteration   3: 141.022 ns/op
Iteration   4: 141.383 ns/op
Iteration   5: 141.491 ns/op

# Run progress: 86.67% complete, ETA 01:17:27
# Fork: 3 of 3
# Warmup Iteration   1: 153.585 ns/op
# Warmup Iteration   2: 151.876 ns/op
# Warmup Iteration   3: 141.128 ns/op
Iteration   1: 142.130 ns/op
Iteration   2: 141.500 ns/op
Iteration   3: 141.416 ns/op
Iteration   4: 141.341 ns/op
Iteration   5: 143.190 ns/op


Result "org.openjdk.bench.valhalla.array.sum.Inline128int.Val_as_Ref_fields":
  141.712 ±(99.9%) 0.666 ns/op [Average]
  (min, avg, max) = (141.022, 141.712, 143.190), stdev = 0.623
  CI (99.9%): [141.046, 142.378] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.sum.Inline128int.Val_as_Ref_fields
# Parameters: (size = 1000000)

# Run progress: 86.69% complete, ETA 01:17:18
# Fork: 1 of 3
# Warmup Iteration   1: 2508632.548 ns/op
# Warmup Iteration   2: 2476012.551 ns/op
# Warmup Iteration   3: 2454790.951 ns/op
Iteration   1: 2480653.186 ns/op
Iteration   2: 2466318.015 ns/op
Iteration   3: 2482501.946 ns/op
Iteration   4: 2464386.233 ns/op
Iteration   5: 2470318.693 ns/op

# Run progress: 86.72% complete, ETA 01:17:10
# Fork: 2 of 3
# Warmup Iteration   1: 2486119.064 ns/op
# Warmup Iteration   2: 2455398.160 ns/op
# Warmup Iteration   3: 2458925.268 ns/op
Iteration   1: 2449640.235 ns/op
Iteration   2: 2459828.328 ns/op
Iteration   3: 2456016.563 ns/op
Iteration   4: 2454842.638 ns/op
Iteration   5: 2454477.750 ns/op

# Run progress: 86.74% complete, ETA 01:17:01
# Fork: 3 of 3
# Warmup Iteration   1: 2518535.313 ns/op
# Warmup Iteration   2: 2492308.251 ns/op
# Warmup Iteration   3: 2486723.894 ns/op
Iteration   1: 2486087.779 ns/op
Iteration   2: 2481784.791 ns/op
Iteration   3: 2486927.826 ns/op
Iteration   4: 2493685.494 ns/op
Iteration   5: 2491425.389 ns/op


Result "org.openjdk.bench.valhalla.array.sum.Inline128int.Val_as_Ref_fields":
  2471926.324 ±(99.9%) 16030.323 ns/op [Average]
  (min, avg, max) = (2449640.235, 2471926.324, 2493685.494), stdev = 14994.774
  CI (99.9%): [2455896.001, 2487956.647] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.sum.Inline128int.Val_as_Ref_sum
# Parameters: (size = 100)

# Run progress: 86.76% complete, ETA 01:16:52
# Fork: 1 of 3
# Warmup Iteration   1: 261.903 ns/op
# Warmup Iteration   2: 259.189 ns/op
# Warmup Iteration   3: 262.564 ns/op
Iteration   1: 262.761 ns/op
Iteration   2: 262.850 ns/op
Iteration   3: 262.373 ns/op
Iteration   4: 262.217 ns/op
Iteration   5: 262.336 ns/op

# Run progress: 86.79% complete, ETA 01:16:44
# Fork: 2 of 3
# Warmup Iteration   1: 260.321 ns/op
# Warmup Iteration   2: 257.310 ns/op
# Warmup Iteration   3: 263.351 ns/op
Iteration   1: 263.461 ns/op
Iteration   2: 262.247 ns/op
Iteration   3: 263.141 ns/op
Iteration   4: 263.045 ns/op
Iteration   5: 262.516 ns/op

# Run progress: 86.81% complete, ETA 01:16:35
# Fork: 3 of 3
# Warmup Iteration   1: 260.030 ns/op
# Warmup Iteration   2: 257.538 ns/op
# Warmup Iteration   3: 261.511 ns/op
Iteration   1: 262.435 ns/op
Iteration   2: 262.016 ns/op
Iteration   3: 262.010 ns/op
Iteration   4: 262.668 ns/op
Iteration   5: 261.730 ns/op


Result "org.openjdk.bench.valhalla.array.sum.Inline128int.Val_as_Ref_sum":
  262.520 ±(99.9%) 0.503 ns/op [Average]
  (min, avg, max) = (261.730, 262.520, 263.461), stdev = 0.471
  CI (99.9%): [262.017, 263.024] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.sum.Inline128int.Val_as_Ref_sum
# Parameters: (size = 1000000)

# Run progress: 86.84% complete, ETA 01:16:27
# Fork: 1 of 3
# Warmup Iteration   1: 3105836.164 ns/op
# Warmup Iteration   2: 3017284.680 ns/op
# Warmup Iteration   3: 3004018.961 ns/op
Iteration   1: 3014261.161 ns/op
Iteration   2: 3009059.524 ns/op
Iteration   3: 3027890.719 ns/op
Iteration   4: 3036468.405 ns/op
Iteration   5: 3005862.934 ns/op

# Run progress: 86.86% complete, ETA 01:16:18
# Fork: 2 of 3
# Warmup Iteration   1: 3042817.930 ns/op
# Warmup Iteration   2: 2967525.660 ns/op
# Warmup Iteration   3: 2966984.679 ns/op
Iteration   1: 2978426.103 ns/op
Iteration   2: 2963390.029 ns/op
Iteration   3: 3046368.223 ns/op
Iteration   4: 3215758.121 ns/op
Iteration   5: 3217868.721 ns/op

# Run progress: 86.89% complete, ETA 01:16:10
# Fork: 3 of 3
# Warmup Iteration   1: 3164451.803 ns/op
# Warmup Iteration   2: 2994162.821 ns/op
# Warmup Iteration   3: 3001678.892 ns/op
Iteration   1: 3017341.669 ns/op
Iteration   2: 2991940.173 ns/op
Iteration   3: 2984051.499 ns/op
Iteration   4: 3009122.887 ns/op
Iteration   5: 2979100.859 ns/op


Result "org.openjdk.bench.valhalla.array.sum.Inline128int.Val_as_Ref_sum":
  3033127.402 ±(99.9%) 83339.935 ns/op [Average]
  (min, avg, max) = (2963390.029, 3033127.402, 3217868.721), stdev = 77956.227
  CI (99.9%): [2949787.466, 3116467.337] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.sum.Inline128int.Val_as_Val_fields
# Parameters: (size = 100)

# Run progress: 86.91% complete, ETA 01:16:01
# Fork: 1 of 3
# Warmup Iteration   1: 153.578 ns/op
# Warmup Iteration   2: 152.485 ns/op
# Warmup Iteration   3: 141.673 ns/op
Iteration   1: 141.540 ns/op
Iteration   2: 141.579 ns/op
Iteration   3: 141.654 ns/op
Iteration   4: 141.811 ns/op
Iteration   5: 141.719 ns/op

# Run progress: 86.94% complete, ETA 01:15:52
# Fork: 2 of 3
# Warmup Iteration   1: 154.149 ns/op
# Warmup Iteration   2: 151.856 ns/op
# Warmup Iteration   3: 141.142 ns/op
Iteration   1: 141.590 ns/op
Iteration   2: 141.178 ns/op
Iteration   3: 141.042 ns/op
Iteration   4: 142.216 ns/op
Iteration   5: 141.189 ns/op

# Run progress: 86.96% complete, ETA 01:15:44
# Fork: 3 of 3
# Warmup Iteration   1: 154.606 ns/op
# Warmup Iteration   2: 151.883 ns/op
# Warmup Iteration   3: 141.426 ns/op
Iteration   1: 140.916 ns/op
Iteration   2: 140.952 ns/op
Iteration   3: 141.540 ns/op
Iteration   4: 141.021 ns/op
Iteration   5: 140.834 ns/op


Result "org.openjdk.bench.valhalla.array.sum.Inline128int.Val_as_Val_fields":
  141.385 ±(99.9%) 0.426 ns/op [Average]
  (min, avg, max) = (140.834, 141.385, 142.216), stdev = 0.399
  CI (99.9%): [140.959, 141.812] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.sum.Inline128int.Val_as_Val_fields
# Parameters: (size = 1000000)

# Run progress: 86.99% complete, ETA 01:15:35
# Fork: 1 of 3
# Warmup Iteration   1: 2462098.446 ns/op
# Warmup Iteration   2: 2437024.229 ns/op
# Warmup Iteration   3: 2437034.639 ns/op
Iteration   1: 2424041.666 ns/op
Iteration   2: 2427961.646 ns/op
Iteration   3: 2462387.255 ns/op
Iteration   4: 2457272.655 ns/op
Iteration   5: 2437907.889 ns/op

# Run progress: 87.01% complete, ETA 01:15:27
# Fork: 2 of 3
# Warmup Iteration   1: 2514482.587 ns/op
# Warmup Iteration   2: 2473728.602 ns/op
# Warmup Iteration   3: 2459774.203 ns/op
Iteration   1: 2475112.570 ns/op
Iteration   2: 2468850.184 ns/op
Iteration   3: 2487256.757 ns/op
Iteration   4: 2493526.581 ns/op
Iteration   5: 2486970.312 ns/op

# Run progress: 87.03% complete, ETA 01:15:18
# Fork: 3 of 3
# Warmup Iteration   1: 2553354.695 ns/op
# Warmup Iteration   2: 2492653.291 ns/op
# Warmup Iteration   3: 2505839.020 ns/op
Iteration   1: 2589715.597 ns/op
Iteration   2: 2476661.355 ns/op
Iteration   3: 2468024.467 ns/op
Iteration   4: 2469694.477 ns/op
Iteration   5: 2461861.655 ns/op


Result "org.openjdk.bench.valhalla.array.sum.Inline128int.Val_as_Val_fields":
  2472483.004 ±(99.9%) 41057.983 ns/op [Average]
  (min, avg, max) = (2424041.666, 2472483.004, 2589715.597), stdev = 38405.663
  CI (99.9%): [2431425.021, 2513540.987] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.sum.Inline128int.Val_as_Val_sum
# Parameters: (size = 100)

# Run progress: 87.06% complete, ETA 01:15:10
# Fork: 1 of 3
# Warmup Iteration   1: 259.819 ns/op
# Warmup Iteration   2: 259.653 ns/op
# Warmup Iteration   3: 266.685 ns/op
Iteration   1: 269.972 ns/op
Iteration   2: 264.248 ns/op
Iteration   3: 261.983 ns/op
Iteration   4: 263.083 ns/op
Iteration   5: 264.941 ns/op

# Run progress: 87.08% complete, ETA 01:15:01
# Fork: 2 of 3
# Warmup Iteration   1: 260.456 ns/op
# Warmup Iteration   2: 256.683 ns/op
# Warmup Iteration   3: 261.981 ns/op
Iteration   1: 261.859 ns/op
Iteration   2: 262.911 ns/op
Iteration   3: 262.685 ns/op
Iteration   4: 262.193 ns/op
Iteration   5: 260.949 ns/op

# Run progress: 87.11% complete, ETA 01:14:52
# Fork: 3 of 3
# Warmup Iteration   1: 259.196 ns/op
# Warmup Iteration   2: 257.109 ns/op
# Warmup Iteration   3: 262.638 ns/op
Iteration   1: 260.836 ns/op
Iteration   2: 260.166 ns/op
Iteration   3: 261.453 ns/op
Iteration   4: 260.202 ns/op
Iteration   5: 260.353 ns/op


Result "org.openjdk.bench.valhalla.array.sum.Inline128int.Val_as_Val_sum":
  262.522 ±(99.9%) 2.677 ns/op [Average]
  (min, avg, max) = (260.166, 262.522, 269.972), stdev = 2.504
  CI (99.9%): [259.846, 265.199] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.sum.Inline128int.Val_as_Val_sum
# Parameters: (size = 1000000)

# Run progress: 87.13% complete, ETA 01:14:44
# Fork: 1 of 3
# Warmup Iteration   1: 3057288.142 ns/op
# Warmup Iteration   2: 2954075.781 ns/op
# Warmup Iteration   3: 2955798.874 ns/op
Iteration   1: 3012643.087 ns/op
Iteration   2: 2962772.003 ns/op
Iteration   3: 2961603.921 ns/op
Iteration   4: 2956660.906 ns/op
Iteration   5: 2965126.965 ns/op

# Run progress: 87.16% complete, ETA 01:14:35
# Fork: 2 of 3
# Warmup Iteration   1: 3053129.154 ns/op
# Warmup Iteration   2: 2960863.482 ns/op
# Warmup Iteration   3: 2958956.245 ns/op
Iteration   1: 3079865.091 ns/op
Iteration   2: 3055084.604 ns/op
Iteration   3: 3192888.187 ns/op
Iteration   4: 3188065.063 ns/op
Iteration   5: 3229644.038 ns/op

# Run progress: 87.18% complete, ETA 01:14:27
# Fork: 3 of 3
# Warmup Iteration   1: 3053510.952 ns/op
# Warmup Iteration   2: 3153545.181 ns/op
# Warmup Iteration   3: 3263075.535 ns/op
Iteration   1: 2954500.731 ns/op
Iteration   2: 2944227.108 ns/op
Iteration   3: 2934362.088 ns/op
Iteration   4: 2939417.279 ns/op
Iteration   5: 2980548.571 ns/op


Result "org.openjdk.bench.valhalla.array.sum.Inline128int.Val_as_Val_sum":
  3023827.309 ±(99.9%) 109120.348 ns/op [Average]
  (min, avg, max) = (2934362.088, 3023827.309, 3229644.038), stdev = 102071.241
  CI (99.9%): [2914706.961, 3132947.657] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.sum.Inline32int.Int_as_Int_sum
# Parameters: (size = 100)

# Run progress: 87.21% complete, ETA 01:14:18
# Fork: 1 of 3
# Warmup Iteration   1: 34.879 ns/op
# Warmup Iteration   2: 34.136 ns/op
# Warmup Iteration   3: 32.415 ns/op
Iteration   1: 32.386 ns/op
Iteration   2: 32.446 ns/op
Iteration   3: 32.805 ns/op
Iteration   4: 33.661 ns/op
Iteration   5: 34.349 ns/op

# Run progress: 87.23% complete, ETA 01:14:10
# Fork: 2 of 3
# Warmup Iteration   1: 35.612 ns/op
# Warmup Iteration   2: 40.723 ns/op
# Warmup Iteration   3: 37.724 ns/op
Iteration   1: 41.167 ns/op
Iteration   2: 35.927 ns/op
Iteration   3: 34.763 ns/op
Iteration   4: 34.180 ns/op
Iteration   5: 33.946 ns/op

# Run progress: 87.25% complete, ETA 01:14:01
# Fork: 3 of 3
# Warmup Iteration   1: 34.858 ns/op
# Warmup Iteration   2: 35.026 ns/op
# Warmup Iteration   3: 34.140 ns/op
Iteration   1: 34.049 ns/op
Iteration   2: 34.682 ns/op
Iteration   3: 35.008 ns/op
Iteration   4: 34.726 ns/op
Iteration   5: 33.905 ns/op


Result "org.openjdk.bench.valhalla.array.sum.Inline32int.Int_as_Int_sum":
  34.533 ±(99.9%) 2.216 ns/op [Average]
  (min, avg, max) = (32.386, 34.533, 41.167), stdev = 2.073
  CI (99.9%): [32.318, 36.749] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.sum.Inline32int.Int_as_Int_sum
# Parameters: (size = 1000000)

# Run progress: 87.28% complete, ETA 01:13:53
# Fork: 1 of 3
# Warmup Iteration   1: 448106.312 ns/op
# Warmup Iteration   2: 445020.980 ns/op
# Warmup Iteration   3: 441978.893 ns/op
Iteration   1: 433099.192 ns/op
Iteration   2: 449010.346 ns/op
Iteration   3: 462330.149 ns/op
Iteration   4: 450771.795 ns/op
Iteration   5: 439658.428 ns/op

# Run progress: 87.30% complete, ETA 01:13:44
# Fork: 2 of 3
# Warmup Iteration   1: 451544.257 ns/op
# Warmup Iteration   2: 451594.467 ns/op
# Warmup Iteration   3: 461969.841 ns/op
Iteration   1: 496598.680 ns/op
Iteration   2: 448248.225 ns/op
Iteration   3: 465715.951 ns/op
Iteration   4: 455088.382 ns/op
Iteration   5: 465401.966 ns/op

# Run progress: 87.33% complete, ETA 01:13:36
# Fork: 3 of 3
# Warmup Iteration   1: 450508.935 ns/op
# Warmup Iteration   2: 443878.753 ns/op
# Warmup Iteration   3: 450230.578 ns/op
Iteration   1: 515259.779 ns/op
Iteration   2: 441701.866 ns/op
Iteration   3: 447087.537 ns/op
Iteration   4: 446073.767 ns/op
Iteration   5: 444673.947 ns/op


Result "org.openjdk.bench.valhalla.array.sum.Inline32int.Int_as_Int_sum":
  457381.334 ±(99.9%) 23549.691 ns/op [Average]
  (min, avg, max) = (433099.192, 457381.334, 515259.779), stdev = 22028.396
  CI (99.9%): [433831.643, 480931.025] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.sum.Inline32int.Ref_as_Ref_fields
# Parameters: (size = 100)

# Run progress: 87.35% complete, ETA 01:13:27
# Fork: 1 of 3
# Warmup Iteration   1: 25.923 ns/op
# Warmup Iteration   2: 25.818 ns/op
# Warmup Iteration   3: 25.810 ns/op
Iteration   1: 25.809 ns/op
Iteration   2: 25.811 ns/op
Iteration   3: 25.823 ns/op
Iteration   4: 25.813 ns/op
Iteration   5: 25.807 ns/op

# Run progress: 87.38% complete, ETA 01:13:18
# Fork: 2 of 3
# Warmup Iteration   1: 25.868 ns/op
# Warmup Iteration   2: 25.796 ns/op
# Warmup Iteration   3: 25.877 ns/op
Iteration   1: 25.995 ns/op
Iteration   2: 25.927 ns/op
Iteration   3: 25.800 ns/op
Iteration   4: 27.385 ns/op
Iteration   5: 26.060 ns/op

# Run progress: 87.40% complete, ETA 01:13:10
# Fork: 3 of 3
# Warmup Iteration   1: 25.932 ns/op
# Warmup Iteration   2: 26.600 ns/op
# Warmup Iteration   3: 25.932 ns/op
Iteration   1: 25.788 ns/op
Iteration   2: 25.810 ns/op
Iteration   3: 25.825 ns/op
Iteration   4: 25.942 ns/op
Iteration   5: 25.907 ns/op


Result "org.openjdk.bench.valhalla.array.sum.Inline32int.Ref_as_Ref_fields":
  25.967 ±(99.9%) 0.429 ns/op [Average]
  (min, avg, max) = (25.788, 25.967, 27.385), stdev = 0.401
  CI (99.9%): [25.538, 26.395] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.sum.Inline32int.Ref_as_Ref_fields
# Parameters: (size = 1000000)

# Run progress: 87.43% complete, ETA 01:13:01
# Fork: 1 of 3
# Warmup Iteration   1: 368878.985 ns/op
# Warmup Iteration   2: 369211.710 ns/op
# Warmup Iteration   3: 353723.121 ns/op
Iteration   1: 353083.041 ns/op
Iteration   2: 357554.266 ns/op
Iteration   3: 369000.593 ns/op
Iteration   4: 364325.030 ns/op
Iteration   5: 357668.732 ns/op

# Run progress: 87.45% complete, ETA 01:12:53
# Fork: 2 of 3
# Warmup Iteration   1: 367205.358 ns/op
# Warmup Iteration   2: 399629.005 ns/op
# Warmup Iteration   3: 370662.624 ns/op
Iteration   1: 375787.094 ns/op
Iteration   2: 362472.117 ns/op
Iteration   3: 380003.895 ns/op
Iteration   4: 382353.425 ns/op
Iteration   5: 389867.683 ns/op

# Run progress: 87.48% complete, ETA 01:12:44
# Fork: 3 of 3
# Warmup Iteration   1: 432158.540 ns/op
# Warmup Iteration   2: 426195.060 ns/op
# Warmup Iteration   3: 396606.223 ns/op
Iteration   1: 378837.474 ns/op
Iteration   2: 370247.557 ns/op
Iteration   3: 398641.779 ns/op
Iteration   4: 426934.929 ns/op
Iteration   5: 366556.547 ns/op


Result "org.openjdk.bench.valhalla.array.sum.Inline32int.Ref_as_Ref_fields":
  375555.611 ±(99.9%) 20309.939 ns/op [Average]
  (min, avg, max) = (353083.041, 375555.611, 426934.929), stdev = 18997.929
  CI (99.9%): [355245.672, 395865.550] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.sum.Inline32int.Ref_as_Ref_sum
# Parameters: (size = 100)

# Run progress: 87.50% complete, ETA 01:12:36
# Fork: 1 of 3
# Warmup Iteration   1: 26.018 ns/op
# Warmup Iteration   2: 26.049 ns/op
# Warmup Iteration   3: 26.008 ns/op
Iteration   1: 25.799 ns/op
Iteration   2: 25.854 ns/op
Iteration   3: 25.843 ns/op
Iteration   4: 25.798 ns/op
Iteration   5: 25.800 ns/op

# Run progress: 87.52% complete, ETA 01:12:27
# Fork: 2 of 3
# Warmup Iteration   1: 25.936 ns/op
# Warmup Iteration   2: 26.167 ns/op
# Warmup Iteration   3: 26.336 ns/op
Iteration   1: 25.804 ns/op
Iteration   2: 25.950 ns/op
Iteration   3: 25.927 ns/op
Iteration   4: 25.835 ns/op
Iteration   5: 25.824 ns/op

# Run progress: 87.55% complete, ETA 01:12:19
# Fork: 3 of 3
# Warmup Iteration   1: 25.960 ns/op
# Warmup Iteration   2: 25.793 ns/op
# Warmup Iteration   3: 27.624 ns/op
Iteration   1: 26.128 ns/op
Iteration   2: 26.595 ns/op
Iteration   3: 26.772 ns/op
Iteration   4: 27.046 ns/op
Iteration   5: 25.822 ns/op


Result "org.openjdk.bench.valhalla.array.sum.Inline32int.Ref_as_Ref_sum":
  26.053 ±(99.9%) 0.435 ns/op [Average]
  (min, avg, max) = (25.798, 26.053, 27.046), stdev = 0.407
  CI (99.9%): [25.618, 26.489] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.sum.Inline32int.Ref_as_Ref_sum
# Parameters: (size = 1000000)

# Run progress: 87.57% complete, ETA 01:12:10
# Fork: 1 of 3
# Warmup Iteration   1: 425323.654 ns/op
# Warmup Iteration   2: 356002.646 ns/op
# Warmup Iteration   3: 369060.468 ns/op
Iteration   1: 368611.592 ns/op
Iteration   2: 367306.182 ns/op
Iteration   3: 349282.993 ns/op
Iteration   4: 357801.482 ns/op
Iteration   5: 382888.353 ns/op

# Run progress: 87.60% complete, ETA 01:12:02
# Fork: 2 of 3
# Warmup Iteration   1: 377155.313 ns/op
# Warmup Iteration   2: 355867.928 ns/op
# Warmup Iteration   3: 358317.282 ns/op
Iteration   1: 1394671.230 ns/op
Iteration   2: 394825.255 ns/op
Iteration   3: 392252.149 ns/op
Iteration   4: 357655.395 ns/op
Iteration   5: 340747.049 ns/op

# Run progress: 87.62% complete, ETA 01:11:53
# Fork: 3 of 3
# Warmup Iteration   1: 371278.626 ns/op
# Warmup Iteration   2: 368364.792 ns/op
# Warmup Iteration   3: 367264.510 ns/op
Iteration   1: 345403.355 ns/op
Iteration   2: 366799.292 ns/op
Iteration   3: 378743.883 ns/op
Iteration   4: 408631.133 ns/op
Iteration   5: 404381.646 ns/op


Result "org.openjdk.bench.valhalla.array.sum.Inline32int.Ref_as_Ref_sum":
  440666.733 ±(99.9%) 283032.002 ns/op [Average]
  (min, avg, max) = (340747.049, 440666.733, 1394671.230), stdev = 264748.310
  CI (99.9%): [157634.731, 723698.735] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.sum.Inline32int.Val_as_Int_sum
# Parameters: (size = 100)

# Run progress: 87.65% complete, ETA 01:11:45
# Fork: 1 of 3
# Warmup Iteration   1: 27.760 ns/op
# Warmup Iteration   2: 26.784 ns/op
# Warmup Iteration   3: 25.848 ns/op
Iteration   1: 25.902 ns/op
Iteration   2: 25.818 ns/op
Iteration   3: 25.861 ns/op
Iteration   4: 26.836 ns/op
Iteration   5: 25.821 ns/op

# Run progress: 87.67% complete, ETA 01:11:36
# Fork: 2 of 3
# Warmup Iteration   1: 26.051 ns/op
# Warmup Iteration   2: 25.800 ns/op
# Warmup Iteration   3: 26.036 ns/op
Iteration   1: 26.013 ns/op
Iteration   2: 25.962 ns/op
Iteration   3: 25.821 ns/op
Iteration   4: 25.808 ns/op
Iteration   5: 25.886 ns/op

# Run progress: 87.70% complete, ETA 01:11:28
# Fork: 3 of 3
# Warmup Iteration   1: 26.006 ns/op
# Warmup Iteration   2: 25.846 ns/op
# Warmup Iteration   3: 25.837 ns/op
Iteration   1: 25.804 ns/op
Iteration   2: 25.791 ns/op
Iteration   3: 25.816 ns/op
Iteration   4: 25.995 ns/op
Iteration   5: 26.094 ns/op


Result "org.openjdk.bench.valhalla.array.sum.Inline32int.Val_as_Int_sum":
  25.948 ±(99.9%) 0.280 ns/op [Average]
  (min, avg, max) = (25.791, 25.948, 26.836), stdev = 0.262
  CI (99.9%): [25.668, 26.229] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.sum.Inline32int.Val_as_Int_sum
# Parameters: (size = 1000000)

# Run progress: 87.72% complete, ETA 01:11:19
# Fork: 1 of 3
# Warmup Iteration   1: 376792.242 ns/op
# Warmup Iteration   2: 415963.576 ns/op
# Warmup Iteration   3: 394891.309 ns/op
Iteration   1: 377749.656 ns/op
Iteration   2: 370782.921 ns/op
Iteration   3: 358863.313 ns/op
Iteration   4: 370004.791 ns/op
Iteration   5: 428950.242 ns/op

# Run progress: 87.75% complete, ETA 01:11:10
# Fork: 2 of 3
# Warmup Iteration   1: 363370.351 ns/op
# Warmup Iteration   2: 373064.601 ns/op
# Warmup Iteration   3: 364905.059 ns/op
Iteration   1: 354604.285 ns/op
Iteration   2: 363216.130 ns/op
Iteration   3: 370282.136 ns/op
Iteration   4: 371835.633 ns/op
Iteration   5: 359964.808 ns/op

# Run progress: 87.77% complete, ETA 01:11:02
# Fork: 3 of 3
# Warmup Iteration   1: 358708.259 ns/op
# Warmup Iteration   2: 358116.527 ns/op
# Warmup Iteration   3: 363198.415 ns/op
Iteration   1: 340194.052 ns/op
Iteration   2: 356434.756 ns/op
Iteration   3: 381766.881 ns/op
Iteration   4: 375792.215 ns/op
Iteration   5: 392879.628 ns/op


Result "org.openjdk.bench.valhalla.array.sum.Inline32int.Val_as_Int_sum":
  371554.763 ±(99.9%) 21719.619 ns/op [Average]
  (min, avg, max) = (340194.052, 371554.763, 428950.242), stdev = 20316.545
  CI (99.9%): [349835.144, 393274.381] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.sum.Inline32int.Val_as_Ref_fields
# Parameters: (size = 100)

# Run progress: 87.79% complete, ETA 01:10:54
# Fork: 1 of 3
# Warmup Iteration   1: 26.092 ns/op
# Warmup Iteration   2: 26.075 ns/op
# Warmup Iteration   3: 28.716 ns/op
Iteration   1: 26.878 ns/op
Iteration   2: 26.318 ns/op
Iteration   3: 26.283 ns/op
Iteration   4: 26.208 ns/op
Iteration   5: 25.824 ns/op

# Run progress: 87.82% complete, ETA 01:10:45
# Fork: 2 of 3
# Warmup Iteration   1: 25.932 ns/op
# Warmup Iteration   2: 25.806 ns/op
# Warmup Iteration   3: 25.816 ns/op
Iteration   1: 25.839 ns/op
Iteration   2: 25.858 ns/op
Iteration   3: 25.934 ns/op
Iteration   4: 26.010 ns/op
Iteration   5: 26.200 ns/op

# Run progress: 87.84% complete, ETA 01:10:36
# Fork: 3 of 3
# Warmup Iteration   1: 26.068 ns/op
# Warmup Iteration   2: 25.794 ns/op
# Warmup Iteration   3: 25.794 ns/op
Iteration   1: 25.797 ns/op
Iteration   2: 25.791 ns/op
Iteration   3: 25.789 ns/op
Iteration   4: 25.992 ns/op
Iteration   5: 25.795 ns/op


Result "org.openjdk.bench.valhalla.array.sum.Inline32int.Val_as_Ref_fields":
  26.034 ±(99.9%) 0.322 ns/op [Average]
  (min, avg, max) = (25.789, 26.034, 26.878), stdev = 0.301
  CI (99.9%): [25.712, 26.356] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.sum.Inline32int.Val_as_Ref_fields
# Parameters: (size = 1000000)

# Run progress: 87.87% complete, ETA 01:10:28
# Fork: 1 of 3
# Warmup Iteration   1: 399228.335 ns/op
# Warmup Iteration   2: 426836.779 ns/op
# Warmup Iteration   3: 390326.391 ns/op
Iteration   1: 376420.450 ns/op
Iteration   2: 385683.117 ns/op
Iteration   3: 402244.688 ns/op
Iteration   4: 409658.672 ns/op
Iteration   5: 374760.642 ns/op

# Run progress: 87.89% complete, ETA 01:10:19
# Fork: 2 of 3
# Warmup Iteration   1: 395781.123 ns/op
# Warmup Iteration   2: 415504.570 ns/op
# Warmup Iteration   3: 362592.239 ns/op
Iteration   1: 367564.148 ns/op
Iteration   2: 365638.813 ns/op
Iteration   3: 358717.277 ns/op
Iteration   4: 368647.263 ns/op
Iteration   5: 368166.880 ns/op

# Run progress: 87.92% complete, ETA 01:10:11
# Fork: 3 of 3
# Warmup Iteration   1: 365563.661 ns/op
# Warmup Iteration   2: 353113.014 ns/op
# Warmup Iteration   3: 339350.005 ns/op
Iteration   1: 363058.016 ns/op
Iteration   2: 429907.588 ns/op
Iteration   3: 384188.499 ns/op
Iteration   4: 339564.412 ns/op
Iteration   5: 341631.322 ns/op


Result "org.openjdk.bench.valhalla.array.sum.Inline32int.Val_as_Ref_fields":
  375723.453 ±(99.9%) 25806.535 ns/op [Average]
  (min, avg, max) = (339564.412, 375723.453, 429907.588), stdev = 24139.449
  CI (99.9%): [349916.918, 401529.987] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.sum.Inline32int.Val_as_Ref_sum
# Parameters: (size = 100)

# Run progress: 87.94% complete, ETA 01:10:02
# Fork: 1 of 3
# Warmup Iteration   1: 25.998 ns/op
# Warmup Iteration   2: 25.853 ns/op
# Warmup Iteration   3: 25.852 ns/op
Iteration   1: 25.834 ns/op
Iteration   2: 25.878 ns/op
Iteration   3: 26.266 ns/op
Iteration   4: 26.626 ns/op
Iteration   5: 25.788 ns/op

# Run progress: 87.97% complete, ETA 01:09:54
# Fork: 2 of 3
# Warmup Iteration   1: 28.256 ns/op
# Warmup Iteration   2: 26.396 ns/op
# Warmup Iteration   3: 25.808 ns/op
Iteration   1: 25.830 ns/op
Iteration   2: 25.825 ns/op
Iteration   3: 25.947 ns/op
Iteration   4: 26.181 ns/op
Iteration   5: 25.950 ns/op

# Run progress: 87.99% complete, ETA 01:09:45
# Fork: 3 of 3
# Warmup Iteration   1: 26.011 ns/op
# Warmup Iteration   2: 25.817 ns/op
# Warmup Iteration   3: 25.859 ns/op
Iteration   1: 25.815 ns/op
Iteration   2: 25.781 ns/op
Iteration   3: 25.882 ns/op
Iteration   4: 25.850 ns/op
Iteration   5: 25.817 ns/op


Result "org.openjdk.bench.valhalla.array.sum.Inline32int.Val_as_Ref_sum":
  25.951 ±(99.9%) 0.250 ns/op [Average]
  (min, avg, max) = (25.781, 25.951, 26.626), stdev = 0.234
  CI (99.9%): [25.701, 26.201] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.sum.Inline32int.Val_as_Ref_sum
# Parameters: (size = 1000000)

# Run progress: 88.01% complete, ETA 01:09:36
# Fork: 1 of 3
# Warmup Iteration   1: 348135.912 ns/op
# Warmup Iteration   2: 345935.631 ns/op
# Warmup Iteration   3: 353966.976 ns/op
Iteration   1: 358607.458 ns/op
Iteration   2: 348696.597 ns/op
Iteration   3: 357446.273 ns/op
Iteration   4: 363397.947 ns/op
Iteration   5: 368601.149 ns/op

# Run progress: 88.04% complete, ETA 01:09:28
# Fork: 2 of 3
# Warmup Iteration   1: 388321.028 ns/op
# Warmup Iteration   2: 429525.599 ns/op
# Warmup Iteration   3: 474367.732 ns/op
Iteration   1: 425911.329 ns/op
Iteration   2: 440410.574 ns/op
Iteration   3: 371806.374 ns/op
Iteration   4: 377614.673 ns/op
Iteration   5: 382997.978 ns/op

# Run progress: 88.06% complete, ETA 01:09:19
# Fork: 3 of 3
# Warmup Iteration   1: 441879.627 ns/op
# Warmup Iteration   2: 369083.836 ns/op
# Warmup Iteration   3: 370694.552 ns/op
Iteration   1: 368444.689 ns/op
Iteration   2: 388161.014 ns/op
Iteration   3: 424806.522 ns/op
Iteration   4: 359371.138 ns/op
Iteration   5: 363567.590 ns/op


Result "org.openjdk.bench.valhalla.array.sum.Inline32int.Val_as_Ref_sum":
  379989.420 ±(99.9%) 30094.446 ns/op [Average]
  (min, avg, max) = (348696.597, 379989.420, 440410.574), stdev = 28150.363
  CI (99.9%): [349894.975, 410083.866] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.sum.Inline32int.Val_as_Val_fields
# Parameters: (size = 100)

# Run progress: 88.09% complete, ETA 01:09:11
# Fork: 1 of 3
# Warmup Iteration   1: 26.003 ns/op
# Warmup Iteration   2: 25.770 ns/op
# Warmup Iteration   3: 26.064 ns/op
Iteration   1: 25.854 ns/op
Iteration   2: 25.789 ns/op
Iteration   3: 25.833 ns/op
Iteration   4: 25.825 ns/op
Iteration   5: 25.682 ns/op

# Run progress: 88.11% complete, ETA 01:09:02
# Fork: 2 of 3
# Warmup Iteration   1: 25.996 ns/op
# Warmup Iteration   2: 25.793 ns/op
# Warmup Iteration   3: 25.812 ns/op
Iteration   1: 25.851 ns/op
Iteration   2: 25.818 ns/op
Iteration   3: 25.977 ns/op
Iteration   4: 25.818 ns/op
Iteration   5: 26.129 ns/op

# Run progress: 88.14% complete, ETA 01:08:54
# Fork: 3 of 3
# Warmup Iteration   1: 28.937 ns/op
# Warmup Iteration   2: 27.311 ns/op
# Warmup Iteration   3: 25.826 ns/op
Iteration   1: 26.265 ns/op
Iteration   2: 25.972 ns/op
Iteration   3: 25.828 ns/op
Iteration   4: 25.849 ns/op
Iteration   5: 25.937 ns/op


Result "org.openjdk.bench.valhalla.array.sum.Inline32int.Val_as_Val_fields":
  25.895 ±(99.9%) 0.155 ns/op [Average]
  (min, avg, max) = (25.682, 25.895, 26.265), stdev = 0.145
  CI (99.9%): [25.740, 26.050] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.sum.Inline32int.Val_as_Val_fields
# Parameters: (size = 1000000)

# Run progress: 88.16% complete, ETA 01:08:45
# Fork: 1 of 3
# Warmup Iteration   1: 355935.054 ns/op
# Warmup Iteration   2: 359119.014 ns/op
# Warmup Iteration   3: 369615.045 ns/op
Iteration   1: 371295.617 ns/op
Iteration   2: 353638.251 ns/op
Iteration   3: 358709.089 ns/op
Iteration   4: 385099.926 ns/op
Iteration   5: 418325.397 ns/op

# Run progress: 88.19% complete, ETA 01:08:36
# Fork: 2 of 3
# Warmup Iteration   1: 360884.521 ns/op
# Warmup Iteration   2: 364464.090 ns/op
# Warmup Iteration   3: 366598.828 ns/op
Iteration   1: 368760.964 ns/op
Iteration   2: 355947.807 ns/op
Iteration   3: 348361.989 ns/op
Iteration   4: 370518.931 ns/op
Iteration   5: 368897.335 ns/op

# Run progress: 88.21% complete, ETA 01:08:28
# Fork: 3 of 3
# Warmup Iteration   1: 354406.510 ns/op
# Warmup Iteration   2: 353746.794 ns/op
# Warmup Iteration   3: 372004.127 ns/op
Iteration   1: 442336.137 ns/op
Iteration   2: 366002.929 ns/op
Iteration   3: 373476.956 ns/op
Iteration   4: 376392.045 ns/op
Iteration   5: 406232.558 ns/op


Result "org.openjdk.bench.valhalla.array.sum.Inline32int.Val_as_Val_fields":
  377599.729 ±(99.9%) 27667.244 ns/op [Average]
  (min, avg, max) = (348361.989, 377599.729, 442336.137), stdev = 25879.957
  CI (99.9%): [349932.485, 405266.973] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.sum.Inline32int.Val_as_Val_sum
# Parameters: (size = 100)

# Run progress: 88.24% complete, ETA 01:08:19
# Fork: 1 of 3
# Warmup Iteration   1: 26.376 ns/op
# Warmup Iteration   2: 26.040 ns/op
# Warmup Iteration   3: 25.819 ns/op
Iteration   1: 26.053 ns/op
Iteration   2: 25.796 ns/op
Iteration   3: 25.807 ns/op
Iteration   4: 25.810 ns/op
Iteration   5: 25.807 ns/op

# Run progress: 88.26% complete, ETA 01:08:11
# Fork: 2 of 3
# Warmup Iteration   1: 26.010 ns/op
# Warmup Iteration   2: 25.790 ns/op
# Warmup Iteration   3: 25.818 ns/op
Iteration   1: 25.813 ns/op
Iteration   2: 25.809 ns/op
Iteration   3: 25.859 ns/op
Iteration   4: 25.827 ns/op
Iteration   5: 25.831 ns/op

# Run progress: 88.28% complete, ETA 01:08:02
# Fork: 3 of 3
# Warmup Iteration   1: 25.908 ns/op
# Warmup Iteration   2: 25.755 ns/op
# Warmup Iteration   3: 25.837 ns/op
Iteration   1: 25.855 ns/op
Iteration   2: 25.778 ns/op
Iteration   3: 25.833 ns/op
Iteration   4: 25.896 ns/op
Iteration   5: 25.846 ns/op


Result "org.openjdk.bench.valhalla.array.sum.Inline32int.Val_as_Val_sum":
  25.841 ±(99.9%) 0.070 ns/op [Average]
  (min, avg, max) = (25.778, 25.841, 26.053), stdev = 0.066
  CI (99.9%): [25.771, 25.912] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.sum.Inline32int.Val_as_Val_sum
# Parameters: (size = 1000000)

# Run progress: 88.31% complete, ETA 01:07:54
# Fork: 1 of 3
# Warmup Iteration   1: 436259.265 ns/op
# Warmup Iteration   2: 401942.727 ns/op
# Warmup Iteration   3: 380488.792 ns/op
Iteration   1: 398352.613 ns/op
Iteration   2: 360389.241 ns/op
Iteration   3: 360290.461 ns/op
Iteration   4: 366870.733 ns/op
Iteration   5: 371024.612 ns/op

# Run progress: 88.33% complete, ETA 01:07:45
# Fork: 2 of 3
# Warmup Iteration   1: 367658.160 ns/op
# Warmup Iteration   2: 360735.553 ns/op
# Warmup Iteration   3: 353432.399 ns/op
Iteration   1: 401039.864 ns/op
Iteration   2: 360652.614 ns/op
Iteration   3: 357938.011 ns/op
Iteration   4: 342628.194 ns/op
Iteration   5: 358285.835 ns/op

# Run progress: 88.36% complete, ETA 01:07:37
# Fork: 3 of 3
# Warmup Iteration   1: 370924.376 ns/op
# Warmup Iteration   2: 359408.559 ns/op
# Warmup Iteration   3: 338268.678 ns/op
Iteration   1: 357479.970 ns/op
Iteration   2: 367013.440 ns/op
Iteration   3: 369483.190 ns/op
Iteration   4: 362485.784 ns/op
Iteration   5: 365264.567 ns/op


Result "org.openjdk.bench.valhalla.array.sum.Inline32int.Val_as_Val_sum":
  366613.275 ±(99.9%) 16053.482 ns/op [Average]
  (min, avg, max) = (342628.194, 366613.275, 401039.864), stdev = 15016.437
  CI (99.9%): [350559.793, 382666.758] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.sum.Inline64byte.Int_as_Int_sum
# Parameters: (size = 100)

# Run progress: 88.38% complete, ETA 01:07:28
# Fork: 1 of 3
# Warmup Iteration   1: 196.267 ns/op
# Warmup Iteration   2: 182.246 ns/op
# Warmup Iteration   3: 210.831 ns/op
Iteration   1: 236.740 ns/op
Iteration   2: 245.057 ns/op
Iteration   3: 230.659 ns/op
Iteration   4: 200.531 ns/op
Iteration   5: 216.967 ns/op

# Run progress: 88.41% complete, ETA 01:07:19
# Fork: 2 of 3
# Warmup Iteration   1: 182.190 ns/op
# Warmup Iteration   2: 180.520 ns/op
# Warmup Iteration   3: 181.454 ns/op
Iteration   1: 181.540 ns/op
Iteration   2: 181.505 ns/op
Iteration   3: 181.308 ns/op
Iteration   4: 194.723 ns/op
Iteration   5: 182.919 ns/op

# Run progress: 88.43% complete, ETA 01:07:11
# Fork: 3 of 3
# Warmup Iteration   1: 197.144 ns/op
# Warmup Iteration   2: 180.900 ns/op
# Warmup Iteration   3: 191.474 ns/op
Iteration   1: 222.432 ns/op
Iteration   2: 230.616 ns/op
Iteration   3: 215.078 ns/op
Iteration   4: 181.734 ns/op
Iteration   5: 181.505 ns/op


Result "org.openjdk.bench.valhalla.array.sum.Inline64byte.Int_as_Int_sum":
  205.554 ±(99.9%) 25.300 ns/op [Average]
  (min, avg, max) = (181.308, 205.554, 245.057), stdev = 23.665
  CI (99.9%): [180.254, 230.854] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.sum.Inline64byte.Int_as_Int_sum
# Parameters: (size = 1000000)

# Run progress: 88.46% complete, ETA 01:07:02
# Fork: 1 of 3
# Warmup Iteration   1: 1934172.004 ns/op
# Warmup Iteration   2: 1958351.986 ns/op
# Warmup Iteration   3: 1951394.737 ns/op
Iteration   1: 1882753.335 ns/op
Iteration   2: 2103095.538 ns/op
Iteration   3: 2703267.137 ns/op
Iteration   4: 2664042.437 ns/op
Iteration   5: 2184357.812 ns/op

# Run progress: 88.48% complete, ETA 01:06:54
# Fork: 2 of 3
# Warmup Iteration   1: 2434433.793 ns/op
# Warmup Iteration   2: 2306682.304 ns/op
# Warmup Iteration   3: 2280563.111 ns/op
Iteration   1: 1916769.011 ns/op
Iteration   2: 1950723.295 ns/op
Iteration   3: 2051728.195 ns/op
Iteration   4: 1737504.160 ns/op
Iteration   5: 1866252.690 ns/op

# Run progress: 88.50% complete, ETA 01:06:45
# Fork: 3 of 3
# Warmup Iteration   1: 2662048.813 ns/op
# Warmup Iteration   2: 3147745.808 ns/op
# Warmup Iteration   3: 3132393.963 ns/op
Iteration   1: 2349322.286 ns/op
Iteration   2: 1881794.316 ns/op
Iteration   3: 1893587.858 ns/op
Iteration   4: 2070382.086 ns/op
Iteration   5: 2118553.633 ns/op


Result "org.openjdk.bench.valhalla.array.sum.Inline64byte.Int_as_Int_sum":
  2091608.919 ±(99.9%) 304148.894 ns/op [Average]
  (min, avg, max) = (1737504.160, 2091608.919, 2703267.137), stdev = 284501.065
  CI (99.9%): [1787460.025, 2395757.814] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.sum.Inline64byte.Ref_as_Ref_fields
# Parameters: (size = 100)

# Run progress: 88.53% complete, ETA 01:06:37
# Fork: 1 of 3
# Warmup Iteration   1: 466.354 ns/op
# Warmup Iteration   2: 451.876 ns/op
# Warmup Iteration   3: 451.595 ns/op
Iteration   1: 451.232 ns/op
Iteration   2: 455.042 ns/op
Iteration   3: 451.010 ns/op
Iteration   4: 808.494 ns/op
Iteration   5: 940.754 ns/op

# Run progress: 88.55% complete, ETA 01:06:28
# Fork: 2 of 3
# Warmup Iteration   1: 960.777 ns/op
# Warmup Iteration   2: 941.845 ns/op
# Warmup Iteration   3: 941.855 ns/op
Iteration   1: 942.243 ns/op
Iteration   2: 940.520 ns/op
Iteration   3: 940.089 ns/op
Iteration   4: 937.558 ns/op
Iteration   5: 932.274 ns/op

# Run progress: 88.58% complete, ETA 01:06:20
# Fork: 3 of 3
# Warmup Iteration   1: 971.240 ns/op
# Warmup Iteration   2: 957.949 ns/op
# Warmup Iteration   3: 951.307 ns/op
Iteration   1: 950.198 ns/op
Iteration   2: 942.636 ns/op
Iteration   3: 942.657 ns/op
Iteration   4: 942.704 ns/op
Iteration   5: 942.906 ns/op


Result "org.openjdk.bench.valhalla.array.sum.Inline64byte.Ref_as_Ref_fields":
  834.688 ±(99.9%) 214.637 ns/op [Average]
  (min, avg, max) = (451.010, 834.688, 950.198), stdev = 200.771
  CI (99.9%): [620.051, 1049.325] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.sum.Inline64byte.Ref_as_Ref_fields
# Parameters: (size = 1000000)

# Run progress: 88.60% complete, ETA 01:06:11
# Fork: 1 of 3
# Warmup Iteration   1: 10609139.032 ns/op
# Warmup Iteration   2: 10322401.786 ns/op
# Warmup Iteration   3: 10488025.615 ns/op
Iteration   1: 5767045.926 ns/op
Iteration   2: 4977545.792 ns/op
Iteration   3: 6056071.611 ns/op
Iteration   4: 7128528.754 ns/op
Iteration   5: 5082485.899 ns/op

# Run progress: 88.63% complete, ETA 01:06:02
# Fork: 2 of 3
# Warmup Iteration   1: 5028124.585 ns/op
# Warmup Iteration   2: 4970025.123 ns/op
# Warmup Iteration   3: 5004331.475 ns/op
Iteration   1: 4966887.868 ns/op
Iteration   2: 4995692.532 ns/op
Iteration   3: 4995611.044 ns/op
Iteration   4: 4968782.475 ns/op
Iteration   5: 4998348.468 ns/op

# Run progress: 88.65% complete, ETA 01:05:54
# Fork: 3 of 3
# Warmup Iteration   1: 5027811.567 ns/op
# Warmup Iteration   2: 4978414.188 ns/op
# Warmup Iteration   3: 4977431.448 ns/op
Iteration   1: 4977277.228 ns/op
Iteration   2: 4971996.529 ns/op
Iteration   3: 4978679.601 ns/op
Iteration   4: 5007174.916 ns/op
Iteration   5: 5015816.832 ns/op


Result "org.openjdk.bench.valhalla.array.sum.Inline64byte.Ref_as_Ref_fields":
  5259196.365 ±(99.9%) 653915.684 ns/op [Average]
  (min, avg, max) = (4966887.868, 5259196.365, 7128528.754), stdev = 611673.136
  CI (99.9%): [4605280.681, 5913112.049] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.sum.Inline64byte.Ref_as_Ref_sum
# Parameters: (size = 100)

# Run progress: 88.68% complete, ETA 01:05:45
# Fork: 1 of 3
# Warmup Iteration   1: 203.042 ns/op
# Warmup Iteration   2: 190.825 ns/op
# Warmup Iteration   3: 178.719 ns/op
Iteration   1: 180.347 ns/op
Iteration   2: 191.396 ns/op
Iteration   3: 178.866 ns/op
Iteration   4: 180.792 ns/op
Iteration   5: 175.722 ns/op

# Run progress: 88.70% complete, ETA 01:05:37
# Fork: 2 of 3
# Warmup Iteration   1: 205.591 ns/op
# Warmup Iteration   2: 194.743 ns/op
# Warmup Iteration   3: 175.338 ns/op
Iteration   1: 179.973 ns/op
Iteration   2: 179.445 ns/op
Iteration   3: 175.099 ns/op
Iteration   4: 175.861 ns/op
Iteration   5: 174.961 ns/op

# Run progress: 88.73% complete, ETA 01:05:28
# Fork: 3 of 3
# Warmup Iteration   1: 202.056 ns/op
# Warmup Iteration   2: 186.874 ns/op
# Warmup Iteration   3: 177.605 ns/op
Iteration   1: 175.094 ns/op
Iteration   2: 174.831 ns/op
Iteration   3: 175.506 ns/op
Iteration   4: 175.932 ns/op
Iteration   5: 207.212 ns/op


Result "org.openjdk.bench.valhalla.array.sum.Inline64byte.Ref_as_Ref_sum":
  180.069 ±(99.9%) 9.236 ns/op [Average]
  (min, avg, max) = (174.831, 180.069, 207.212), stdev = 8.640
  CI (99.9%): [170.833, 189.306] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.sum.Inline64byte.Ref_as_Ref_sum
# Parameters: (size = 1000000)

# Run progress: 88.75% complete, ETA 01:05:20
# Fork: 1 of 3
# Warmup Iteration   1: 1893841.135 ns/op
# Warmup Iteration   2: 1877063.776 ns/op
# Warmup Iteration   3: 1879631.567 ns/op
Iteration   1: 1847943.707 ns/op
Iteration   2: 1815475.708 ns/op
Iteration   3: 1881863.820 ns/op
Iteration   4: 1952204.552 ns/op
Iteration   5: 1867069.985 ns/op

# Run progress: 88.77% complete, ETA 01:05:11
# Fork: 2 of 3
# Warmup Iteration   1: 1880346.113 ns/op
# Warmup Iteration   2: 1872293.750 ns/op
# Warmup Iteration   3: 1968052.246 ns/op
Iteration   1: 1888756.086 ns/op
Iteration   2: 2041732.408 ns/op
Iteration   3: 1934788.473 ns/op
Iteration   4: 2017385.311 ns/op
Iteration   5: 1928492.033 ns/op

# Run progress: 88.80% complete, ETA 01:05:03
# Fork: 3 of 3
# Warmup Iteration   1: 1904421.452 ns/op
# Warmup Iteration   2: 1878815.721 ns/op
# Warmup Iteration   3: 1818551.404 ns/op
Iteration   1: 1852407.185 ns/op
Iteration   2: 1860106.987 ns/op
Iteration   3: 1875365.028 ns/op
Iteration   4: 1738880.379 ns/op
Iteration   5: 1892918.773 ns/op


Result "org.openjdk.bench.valhalla.array.sum.Inline64byte.Ref_as_Ref_sum":
  1893026.029 ±(99.9%) 80688.145 ns/op [Average]
  (min, avg, max) = (1738880.379, 1893026.029, 2041732.408), stdev = 75475.741
  CI (99.9%): [1812337.884, 1973714.174] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.sum.Inline64byte.Val_as_Int_sum
# Parameters: (size = 100)

# Run progress: 88.82% complete, ETA 01:04:54
# Fork: 1 of 3
# Warmup Iteration   1: 171.733 ns/op
# Warmup Iteration   2: 170.541 ns/op
# Warmup Iteration   3: 164.784 ns/op
Iteration   1: 171.668 ns/op
Iteration   2: 172.649 ns/op
Iteration   3: 172.401 ns/op
Iteration   4: 170.579 ns/op
Iteration   5: 171.416 ns/op

# Run progress: 88.85% complete, ETA 01:04:45
# Fork: 2 of 3
# Warmup Iteration   1: 171.813 ns/op
# Warmup Iteration   2: 170.423 ns/op
# Warmup Iteration   3: 170.572 ns/op
Iteration   1: 170.951 ns/op
Iteration   2: 170.611 ns/op
Iteration   3: 174.782 ns/op
Iteration   4: 170.640 ns/op
Iteration   5: 171.744 ns/op

# Run progress: 88.87% complete, ETA 01:04:37
# Fork: 3 of 3
# Warmup Iteration   1: 178.156 ns/op
# Warmup Iteration   2: 170.405 ns/op
# Warmup Iteration   3: 170.721 ns/op
Iteration   1: 170.691 ns/op
Iteration   2: 172.629 ns/op
Iteration   3: 170.440 ns/op
Iteration   4: 171.383 ns/op
Iteration   5: 171.488 ns/op


Result "org.openjdk.bench.valhalla.array.sum.Inline64byte.Val_as_Int_sum":
  171.605 ±(99.9%) 1.232 ns/op [Average]
  (min, avg, max) = (170.440, 171.605, 174.782), stdev = 1.152
  CI (99.9%): [170.373, 172.836] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.sum.Inline64byte.Val_as_Int_sum
# Parameters: (size = 1000000)

# Run progress: 88.90% complete, ETA 01:04:28
# Fork: 1 of 3
# Warmup Iteration   1: 1897399.859 ns/op
# Warmup Iteration   2: 1852703.143 ns/op
# Warmup Iteration   3: 1879317.379 ns/op
Iteration   1: 1886329.215 ns/op
Iteration   2: 1872012.515 ns/op
Iteration   3: 1813014.487 ns/op
Iteration   4: 1717323.077 ns/op
Iteration   5: 1819721.897 ns/op

# Run progress: 88.92% complete, ETA 01:04:20
# Fork: 2 of 3
# Warmup Iteration   1: 1908356.760 ns/op
# Warmup Iteration   2: 1883462.920 ns/op
# Warmup Iteration   3: 1848134.692 ns/op
Iteration   1: 1839689.131 ns/op
Iteration   2: 1885014.798 ns/op
Iteration   3: 1870761.229 ns/op
Iteration   4: 1894483.303 ns/op
Iteration   5: 1849936.658 ns/op

# Run progress: 88.95% complete, ETA 01:04:11
# Fork: 3 of 3
# Warmup Iteration   1: 1886462.687 ns/op
# Warmup Iteration   2: 1862700.215 ns/op
# Warmup Iteration   3: 1828067.623 ns/op
Iteration   1: 1947133.381 ns/op
Iteration   2: 1907608.255 ns/op
Iteration   3: 2043688.516 ns/op
Iteration   4: 2217207.237 ns/op
Iteration   5: 2415386.962 ns/op


Result "org.openjdk.bench.valhalla.array.sum.Inline64byte.Val_as_Int_sum":
  1931954.044 ±(99.9%) 187240.413 ns/op [Average]
  (min, avg, max) = (1717323.077, 1931954.044, 2415386.962), stdev = 175144.798
  CI (99.9%): [1744713.631, 2119194.457] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.sum.Inline64byte.Val_as_Ref_fields
# Parameters: (size = 100)

# Run progress: 88.97% complete, ETA 01:04:03
# Fork: 1 of 3
# Warmup Iteration   1: 551.626 ns/op
# Warmup Iteration   2: 506.313 ns/op
# Warmup Iteration   3: 494.993 ns/op
Iteration   1: 460.433 ns/op
Iteration   2: 451.328 ns/op
Iteration   3: 451.548 ns/op
Iteration   4: 479.186 ns/op
Iteration   5: 459.192 ns/op

# Run progress: 89.00% complete, ETA 01:03:54
# Fork: 2 of 3
# Warmup Iteration   1: 526.470 ns/op
# Warmup Iteration   2: 451.476 ns/op
# Warmup Iteration   3: 451.083 ns/op
Iteration   1: 451.161 ns/op
Iteration   2: 450.946 ns/op
Iteration   3: 457.467 ns/op
Iteration   4: 464.214 ns/op
Iteration   5: 451.052 ns/op

# Run progress: 89.02% complete, ETA 01:03:46
# Fork: 3 of 3
# Warmup Iteration   1: 465.159 ns/op
# Warmup Iteration   2: 480.927 ns/op
# Warmup Iteration   3: 452.591 ns/op
Iteration   1: 452.093 ns/op
Iteration   2: 451.177 ns/op
Iteration   3: 451.098 ns/op
Iteration   4: 452.644 ns/op
Iteration   5: 489.891 ns/op


Result "org.openjdk.bench.valhalla.array.sum.Inline64byte.Val_as_Ref_fields":
  458.229 ±(99.9%) 12.454 ns/op [Average]
  (min, avg, max) = (450.946, 458.229, 489.891), stdev = 11.650
  CI (99.9%): [445.774, 470.683] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.sum.Inline64byte.Val_as_Ref_fields
# Parameters: (size = 1000000)

# Run progress: 89.04% complete, ETA 01:03:37
# Fork: 1 of 3
# Warmup Iteration   1: 6547196.968 ns/op
# Warmup Iteration   2: 5372757.537 ns/op
# Warmup Iteration   3: 5180431.551 ns/op
Iteration   1: 5651023.514 ns/op
Iteration   2: 6441939.490 ns/op
Iteration   3: 6008656.805 ns/op
Iteration   4: 6075700.850 ns/op
Iteration   5: 5953250.740 ns/op

# Run progress: 89.07% complete, ETA 01:03:28
# Fork: 2 of 3
# Warmup Iteration   1: 5915907.600 ns/op
# Warmup Iteration   2: 5511862.863 ns/op
# Warmup Iteration   3: 5963116.424 ns/op
Iteration   1: 5027915.836 ns/op
Iteration   2: 5716810.734 ns/op
Iteration   3: 6782983.392 ns/op
Iteration   4: 6467703.795 ns/op
Iteration   5: 6356774.635 ns/op

# Run progress: 89.09% complete, ETA 01:03:20
# Fork: 3 of 3
# Warmup Iteration   1: 5149920.297 ns/op
# Warmup Iteration   2: 5383330.234 ns/op
# Warmup Iteration   3: 6036576.593 ns/op
Iteration   1: 5168892.643 ns/op
Iteration   2: 4985523.010 ns/op
Iteration   3: 4981983.374 ns/op
Iteration   4: 4969932.064 ns/op
Iteration   5: 5124133.036 ns/op


Result "org.openjdk.bench.valhalla.array.sum.Inline64byte.Val_as_Ref_fields":
  5714214.928 ±(99.9%) 680266.539 ns/op [Average]
  (min, avg, max) = (4969932.064, 5714214.928, 6782983.392), stdev = 636321.743
  CI (99.9%): [5033948.389, 6394481.467] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.sum.Inline64byte.Val_as_Ref_sum
# Parameters: (size = 100)

# Run progress: 89.12% complete, ETA 01:03:11
# Fork: 1 of 3
# Warmup Iteration   1: 203.067 ns/op
# Warmup Iteration   2: 188.463 ns/op
# Warmup Iteration   3: 218.481 ns/op
Iteration   1: 264.155 ns/op
Iteration   2: 273.843 ns/op
Iteration   3: 226.570 ns/op
Iteration   4: 182.570 ns/op
Iteration   5: 213.936 ns/op

# Run progress: 89.14% complete, ETA 01:03:03
# Fork: 2 of 3
# Warmup Iteration   1: 212.588 ns/op
# Warmup Iteration   2: 187.262 ns/op
# Warmup Iteration   3: 188.653 ns/op
Iteration   1: 221.260 ns/op
Iteration   2: 238.103 ns/op
Iteration   3: 243.532 ns/op
Iteration   4: 264.452 ns/op
Iteration   5: 261.079 ns/op

# Run progress: 89.17% complete, ETA 01:02:54
# Fork: 3 of 3
# Warmup Iteration   1: 294.555 ns/op
# Warmup Iteration   2: 412.074 ns/op
# Warmup Iteration   3: 365.222 ns/op
Iteration   1: 365.275 ns/op
Iteration   2: 365.247 ns/op
Iteration   3: 364.927 ns/op
Iteration   4: 364.819 ns/op
Iteration   5: 365.425 ns/op


Result "org.openjdk.bench.valhalla.array.sum.Inline64byte.Val_as_Ref_sum":
  281.013 ±(99.9%) 70.198 ns/op [Average]
  (min, avg, max) = (182.570, 281.013, 365.425), stdev = 65.664
  CI (99.9%): [210.815, 351.211] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.sum.Inline64byte.Val_as_Ref_sum
# Parameters: (size = 1000000)

# Run progress: 89.19% complete, ETA 01:02:46
# Fork: 1 of 3
# Warmup Iteration   1: 3959024.835 ns/op
# Warmup Iteration   2: 3708954.491 ns/op
# Warmup Iteration   3: 3702055.351 ns/op
Iteration   1: 3656464.502 ns/op
Iteration   2: 3516878.059 ns/op
Iteration   3: 3514464.118 ns/op
Iteration   4: 3508031.538 ns/op
Iteration   5: 3654796.783 ns/op

# Run progress: 89.22% complete, ETA 01:02:37
# Fork: 2 of 3
# Warmup Iteration   1: 3729998.771 ns/op
# Warmup Iteration   2: 3629221.374 ns/op
# Warmup Iteration   3: 3633510.942 ns/op
Iteration   1: 2532001.578 ns/op
Iteration   2: 1966152.076 ns/op
Iteration   3: 2153056.736 ns/op
Iteration   4: 2775790.179 ns/op
Iteration   5: 1953382.767 ns/op

# Run progress: 89.24% complete, ETA 01:02:29
# Fork: 3 of 3
# Warmup Iteration   1: 1862923.880 ns/op
# Warmup Iteration   2: 1860326.273 ns/op
# Warmup Iteration   3: 1862941.974 ns/op
Iteration   1: 1854929.635 ns/op
Iteration   2: 1715331.915 ns/op
Iteration   3: 1806441.397 ns/op
Iteration   4: 1863865.389 ns/op
Iteration   5: 1908578.333 ns/op


Result "org.openjdk.bench.valhalla.array.sum.Inline64byte.Val_as_Ref_sum":
  2558677.667 ±(99.9%) 845029.190 ns/op [Average]
  (min, avg, max) = (1715331.915, 2558677.667, 3656464.502), stdev = 790440.828
  CI (99.9%): [1713648.477, 3403706.857] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.sum.Inline64byte.Val_as_Val_fields
# Parameters: (size = 100)

# Run progress: 89.26% complete, ETA 01:02:20
# Fork: 1 of 3
# Warmup Iteration   1: 456.365 ns/op
# Warmup Iteration   2: 457.130 ns/op
# Warmup Iteration   3: 459.588 ns/op
Iteration   1: 451.977 ns/op
Iteration   2: 452.008 ns/op
Iteration   3: 452.051 ns/op
Iteration   4: 452.946 ns/op
Iteration   5: 454.961 ns/op

# Run progress: 89.29% complete, ETA 01:02:11
# Fork: 2 of 3
# Warmup Iteration   1: 457.131 ns/op
# Warmup Iteration   2: 452.151 ns/op
# Warmup Iteration   3: 450.673 ns/op
Iteration   1: 450.220 ns/op
Iteration   2: 453.440 ns/op
Iteration   3: 451.659 ns/op
Iteration   4: 451.813 ns/op
Iteration   5: 452.048 ns/op

# Run progress: 89.31% complete, ETA 01:02:03
# Fork: 3 of 3
# Warmup Iteration   1: 456.698 ns/op
# Warmup Iteration   2: 452.094 ns/op
# Warmup Iteration   3: 451.198 ns/op
Iteration   1: 451.803 ns/op
Iteration   2: 454.119 ns/op
Iteration   3: 455.206 ns/op
Iteration   4: 451.841 ns/op
Iteration   5: 453.508 ns/op


Result "org.openjdk.bench.valhalla.array.sum.Inline64byte.Val_as_Val_fields":
  452.640 ±(99.9%) 1.458 ns/op [Average]
  (min, avg, max) = (450.220, 452.640, 455.206), stdev = 1.363
  CI (99.9%): [451.182, 454.098] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.sum.Inline64byte.Val_as_Val_fields
# Parameters: (size = 1000000)

# Run progress: 89.34% complete, ETA 01:01:54
# Fork: 1 of 3
# Warmup Iteration   1: 5078294.181 ns/op
# Warmup Iteration   2: 4973158.251 ns/op
# Warmup Iteration   3: 5151711.503 ns/op
Iteration   1: 5212104.593 ns/op
Iteration   2: 5058807.995 ns/op
Iteration   3: 4977513.547 ns/op
Iteration   4: 5000753.713 ns/op
Iteration   5: 4992710.612 ns/op

# Run progress: 89.36% complete, ETA 01:01:46
# Fork: 2 of 3
# Warmup Iteration   1: 5158149.359 ns/op
# Warmup Iteration   2: 4973230.609 ns/op
# Warmup Iteration   3: 4992971.877 ns/op
Iteration   1: 4988562.708 ns/op
Iteration   2: 5039466.286 ns/op
Iteration   3: 4921792.683 ns/op
Iteration   4: 4716070.153 ns/op
Iteration   5: 4960224.676 ns/op

# Run progress: 89.39% complete, ETA 01:01:37
# Fork: 3 of 3
# Warmup Iteration   1: 5030397.705 ns/op
# Warmup Iteration   2: 4968131.599 ns/op
# Warmup Iteration   3: 4923161.204 ns/op
Iteration   1: 4727476.636 ns/op
Iteration   2: 4787813.481 ns/op
Iteration   3: 4966675.535 ns/op
Iteration   4: 4966266.137 ns/op
Iteration   5: 4740518.192 ns/op


Result "org.openjdk.bench.valhalla.array.sum.Inline64byte.Val_as_Val_fields":
  4937117.130 ±(99.9%) 148069.084 ns/op [Average]
  (min, avg, max) = (4716070.153, 4937117.130, 5212104.593), stdev = 138503.913
  CI (99.9%): [4789048.046, 5085186.214] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.sum.Inline64byte.Val_as_Val_sum
# Parameters: (size = 100)

# Run progress: 89.41% complete, ETA 01:01:29
# Fork: 1 of 3
# Warmup Iteration   1: 204.341 ns/op
# Warmup Iteration   2: 186.661 ns/op
# Warmup Iteration   3: 175.043 ns/op
Iteration   1: 174.985 ns/op
Iteration   2: 179.564 ns/op
Iteration   3: 174.659 ns/op
Iteration   4: 178.389 ns/op
Iteration   5: 176.911 ns/op

# Run progress: 89.44% complete, ETA 01:01:20
# Fork: 2 of 3
# Warmup Iteration   1: 195.221 ns/op
# Warmup Iteration   2: 186.517 ns/op
# Warmup Iteration   3: 178.260 ns/op
Iteration   1: 175.132 ns/op
Iteration   2: 175.417 ns/op
Iteration   3: 176.834 ns/op
Iteration   4: 175.370 ns/op
Iteration   5: 175.164 ns/op

# Run progress: 89.46% complete, ETA 01:01:12
# Fork: 3 of 3
# Warmup Iteration   1: 190.817 ns/op
# Warmup Iteration   2: 187.377 ns/op
# Warmup Iteration   3: 174.875 ns/op
Iteration   1: 176.564 ns/op
Iteration   2: 174.642 ns/op
Iteration   3: 174.683 ns/op
Iteration   4: 174.742 ns/op
Iteration   5: 177.210 ns/op


Result "org.openjdk.bench.valhalla.array.sum.Inline64byte.Val_as_Val_sum":
  176.018 ±(99.9%) 1.614 ns/op [Average]
  (min, avg, max) = (174.642, 176.018, 179.564), stdev = 1.509
  CI (99.9%): [174.404, 177.631] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.sum.Inline64byte.Val_as_Val_sum
# Parameters: (size = 1000000)

# Run progress: 89.49% complete, ETA 01:01:03
# Fork: 1 of 3
# Warmup Iteration   1: 1905246.212 ns/op
# Warmup Iteration   2: 1867147.874 ns/op
# Warmup Iteration   3: 1872931.791 ns/op
Iteration   1: 1865328.712 ns/op
Iteration   2: 1844283.911 ns/op
Iteration   3: 1856965.741 ns/op
Iteration   4: 1879697.295 ns/op
Iteration   5: 2245162.313 ns/op

# Run progress: 89.51% complete, ETA 01:00:55
# Fork: 2 of 3
# Warmup Iteration   1: 1869703.600 ns/op
# Warmup Iteration   2: 1901155.403 ns/op
# Warmup Iteration   3: 1884481.203 ns/op
Iteration   1: 1865895.446 ns/op
Iteration   2: 1807082.513 ns/op
Iteration   3: 1959253.149 ns/op
Iteration   4: 1836476.330 ns/op
Iteration   5: 1837411.020 ns/op

# Run progress: 89.53% complete, ETA 01:00:46
# Fork: 3 of 3
# Warmup Iteration   1: 1889411.370 ns/op
# Warmup Iteration   2: 1858124.846 ns/op
# Warmup Iteration   3: 1834847.147 ns/op
Iteration   1: 1814824.133 ns/op
Iteration   2: 1845362.919 ns/op
Iteration   3: 2205708.242 ns/op
Iteration   4: 1846625.152 ns/op
Iteration   5: 1824943.841 ns/op


Result "org.openjdk.bench.valhalla.array.sum.Inline64byte.Val_as_Val_sum":
  1902334.715 ±(99.9%) 145426.526 ns/op [Average]
  (min, avg, max) = (1807082.513, 1902334.715, 2245162.313), stdev = 136032.063
  CI (99.9%): [1756908.188, 2047761.241] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.sum.Inline64int.Int_as_Int_sum
# Parameters: (size = 100)

# Run progress: 89.56% complete, ETA 01:00:38
# Fork: 1 of 3
# Warmup Iteration   1: 88.321 ns/op
# Warmup Iteration   2: 87.689 ns/op
# Warmup Iteration   3: 87.289 ns/op
Iteration   1: 87.278 ns/op
Iteration   2: 87.210 ns/op
Iteration   3: 87.169 ns/op
Iteration   4: 87.258 ns/op
Iteration   5: 87.314 ns/op

# Run progress: 89.58% complete, ETA 01:00:29
# Fork: 2 of 3
# Warmup Iteration   1: 88.686 ns/op
# Warmup Iteration   2: 87.833 ns/op
# Warmup Iteration   3: 87.277 ns/op
Iteration   1: 88.374 ns/op
Iteration   2: 87.227 ns/op
Iteration   3: 92.441 ns/op
Iteration   4: 87.516 ns/op
Iteration   5: 87.425 ns/op

# Run progress: 89.61% complete, ETA 01:00:20
# Fork: 3 of 3
# Warmup Iteration   1: 92.026 ns/op
# Warmup Iteration   2: 92.975 ns/op
# Warmup Iteration   3: 90.063 ns/op
Iteration   1: 90.119 ns/op
Iteration   2: 90.050 ns/op
Iteration   3: 90.093 ns/op
Iteration   4: 90.088 ns/op
Iteration   5: 91.369 ns/op


Result "org.openjdk.bench.valhalla.array.sum.Inline64int.Int_as_Int_sum":
  88.729 ±(99.9%) 1.910 ns/op [Average]
  (min, avg, max) = (87.169, 88.729, 92.441), stdev = 1.787
  CI (99.9%): [86.819, 90.639] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.sum.Inline64int.Int_as_Int_sum
# Parameters: (size = 1000000)

# Run progress: 89.63% complete, ETA 01:00:12
# Fork: 1 of 3
# Warmup Iteration   1: 1346164.611 ns/op
# Warmup Iteration   2: 1285357.983 ns/op
# Warmup Iteration   3: 1284379.422 ns/op
Iteration   1: 1319932.708 ns/op
Iteration   2: 1312180.303 ns/op
Iteration   3: 1327844.025 ns/op
Iteration   4: 1245293.162 ns/op
Iteration   5: 1251856.326 ns/op

# Run progress: 89.66% complete, ETA 01:00:03
# Fork: 2 of 3
# Warmup Iteration   1: 1328791.995 ns/op
# Warmup Iteration   2: 1268290.359 ns/op
# Warmup Iteration   3: 1329259.539 ns/op
Iteration   1: 1378330.583 ns/op
Iteration   2: 1384928.589 ns/op
Iteration   3: 1471761.347 ns/op
Iteration   4: 1371496.156 ns/op
Iteration   5: 1430177.628 ns/op

# Run progress: 89.68% complete, ETA 00:59:55
# Fork: 3 of 3
# Warmup Iteration   1: 1418480.997 ns/op
# Warmup Iteration   2: 1446940.296 ns/op
# Warmup Iteration   3: 1302472.168 ns/op
Iteration   1: 1333254.034 ns/op
Iteration   2: 1352850.704 ns/op
Iteration   3: 1431231.941 ns/op
Iteration   4: 1294461.662 ns/op
Iteration   5: 1436091.549 ns/op


Result "org.openjdk.bench.valhalla.array.sum.Inline64int.Int_as_Int_sum":
  1356112.714 ±(99.9%) 72272.045 ns/op [Average]
  (min, avg, max) = (1245293.162, 1356112.714, 1471761.347), stdev = 67603.316
  CI (99.9%): [1283840.669, 1428384.760] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.sum.Inline64int.Ref_as_Int_sum
# Parameters: (size = 100)

# Run progress: 89.71% complete, ETA 00:59:47
# Fork: 1 of 3
# Warmup Iteration   1: 75.613 ns/op
# Warmup Iteration   2: 75.699 ns/op
# Warmup Iteration   3: 76.348 ns/op
Iteration   1: 75.314 ns/op
Iteration   2: 75.987 ns/op
Iteration   3: 75.451 ns/op
Iteration   4: 74.930 ns/op
Iteration   5: 74.872 ns/op

# Run progress: 89.73% complete, ETA 00:59:38
# Fork: 2 of 3
# Warmup Iteration   1: 75.559 ns/op
# Warmup Iteration   2: 75.104 ns/op
# Warmup Iteration   3: 75.383 ns/op
Iteration   1: 75.292 ns/op
Iteration   2: 74.792 ns/op
Iteration   3: 74.815 ns/op
Iteration   4: 74.844 ns/op
Iteration   5: 74.815 ns/op

# Run progress: 89.75% complete, ETA 00:59:29
# Fork: 3 of 3
# Warmup Iteration   1: 75.131 ns/op
# Warmup Iteration   2: 74.578 ns/op
# Warmup Iteration   3: 80.645 ns/op
Iteration   1: 74.269 ns/op
Iteration   2: 74.394 ns/op
Iteration   3: 74.326 ns/op
Iteration   4: 77.558 ns/op
Iteration   5: 76.190 ns/op


Result "org.openjdk.bench.valhalla.array.sum.Inline64int.Ref_as_Int_sum":
  75.190 ±(99.9%) 0.917 ns/op [Average]
  (min, avg, max) = (74.269, 75.190, 77.558), stdev = 0.858
  CI (99.9%): [74.273, 76.107] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.sum.Inline64int.Ref_as_Int_sum
# Parameters: (size = 1000000)

# Run progress: 89.78% complete, ETA 00:59:21
# Fork: 1 of 3
# Warmup Iteration   1: 1379737.210 ns/op
# Warmup Iteration   2: 1311567.850 ns/op
# Warmup Iteration   3: 1337753.091 ns/op
Iteration   1: 1443588.714 ns/op
Iteration   2: 1295165.754 ns/op
Iteration   3: 1319966.972 ns/op
Iteration   4: 1319716.406 ns/op
Iteration   5: 1366386.824 ns/op

# Run progress: 89.80% complete, ETA 00:59:12
# Fork: 2 of 3
# Warmup Iteration   1: 1421673.875 ns/op
# Warmup Iteration   2: 1378624.544 ns/op
# Warmup Iteration   3: 1388904.459 ns/op
Iteration   1: 1297734.692 ns/op
Iteration   2: 1302939.946 ns/op
Iteration   3: 1330456.959 ns/op
Iteration   4: 1709256.601 ns/op
Iteration   5: 1225060.022 ns/op

# Run progress: 89.83% complete, ETA 00:59:04
# Fork: 3 of 3
# Warmup Iteration   1: 1304169.847 ns/op
# Warmup Iteration   2: 1300755.470 ns/op
# Warmup Iteration   3: 1285754.327 ns/op
Iteration   1: 1255683.851 ns/op
Iteration   2: 1256793.636 ns/op
Iteration   3: 1245468.442 ns/op
Iteration   4: 1266545.739 ns/op
Iteration   5: 1279466.825 ns/op


Result "org.openjdk.bench.valhalla.array.sum.Inline64int.Ref_as_Int_sum":
  1327615.426 ±(99.9%) 126747.663 ns/op [Average]
  (min, avg, max) = (1225060.022, 1327615.426, 1709256.601), stdev = 118559.843
  CI (99.9%): [1200867.763, 1454363.089] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.sum.Inline64int.Ref_as_Ref_fields
# Parameters: (size = 100)

# Run progress: 89.85% complete, ETA 00:58:55
# Fork: 1 of 3
# Warmup Iteration   1: 60.686 ns/op
# Warmup Iteration   2: 60.200 ns/op
# Warmup Iteration   3: 61.905 ns/op
Iteration   1: 61.747 ns/op
Iteration   2: 60.313 ns/op
Iteration   3: 60.394 ns/op
Iteration   4: 60.368 ns/op
Iteration   5: 69.166 ns/op

# Run progress: 89.88% complete, ETA 00:58:47
# Fork: 2 of 3
# Warmup Iteration   1: 61.150 ns/op
# Warmup Iteration   2: 62.084 ns/op
# Warmup Iteration   3: 60.486 ns/op
Iteration   1: 60.153 ns/op
Iteration   2: 60.208 ns/op
Iteration   3: 60.120 ns/op
Iteration   4: 60.251 ns/op
Iteration   5: 60.171 ns/op

# Run progress: 89.90% complete, ETA 00:58:38
# Fork: 3 of 3
# Warmup Iteration   1: 61.087 ns/op
# Warmup Iteration   2: 60.433 ns/op
# Warmup Iteration   3: 60.343 ns/op
Iteration   1: 60.545 ns/op
Iteration   2: 60.454 ns/op
Iteration   3: 60.429 ns/op
Iteration   4: 60.394 ns/op
Iteration   5: 61.003 ns/op


Result "org.openjdk.bench.valhalla.array.sum.Inline64int.Ref_as_Ref_fields":
  61.048 ±(99.9%) 2.441 ns/op [Average]
  (min, avg, max) = (60.120, 61.048, 69.166), stdev = 2.284
  CI (99.9%): [58.606, 63.489] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.sum.Inline64int.Ref_as_Ref_fields
# Parameters: (size = 1000000)

# Run progress: 89.93% complete, ETA 00:58:30
# Fork: 1 of 3
# Warmup Iteration   1: 1290921.171 ns/op
# Warmup Iteration   2: 1274036.779 ns/op
# Warmup Iteration   3: 1225272.576 ns/op
Iteration   1: 1167824.326 ns/op
Iteration   2: 1266553.832 ns/op
Iteration   3: 1275203.434 ns/op
Iteration   4: 1308293.283 ns/op
Iteration   5: 1301335.586 ns/op

# Run progress: 89.95% complete, ETA 00:58:21
# Fork: 2 of 3
# Warmup Iteration   1: 1407848.559 ns/op
# Warmup Iteration   2: 1360086.374 ns/op
# Warmup Iteration   3: 1560660.318 ns/op
Iteration   1: 1551203.221 ns/op
Iteration   2: 1322463.575 ns/op
Iteration   3: 1368159.712 ns/op
Iteration   4: 1343748.889 ns/op
Iteration   5: 1309139.518 ns/op

# Run progress: 89.98% complete, ETA 00:58:12
# Fork: 3 of 3
# Warmup Iteration   1: 1287767.781 ns/op
# Warmup Iteration   2: 1257767.092 ns/op
# Warmup Iteration   3: 1184610.835 ns/op
Iteration   1: 1241090.200 ns/op
Iteration   2: 1318759.717 ns/op
Iteration   3: 1261088.803 ns/op
Iteration   4: 1252983.478 ns/op
Iteration   5: 1176218.494 ns/op


Result "org.openjdk.bench.valhalla.array.sum.Inline64int.Ref_as_Ref_fields":
  1297604.405 ±(99.9%) 95751.123 ns/op [Average]
  (min, avg, max) = (1167824.326, 1297604.405, 1551203.221), stdev = 89565.660
  CI (99.9%): [1201853.282, 1393355.528] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.sum.Inline64int.Ref_as_Ref_sum
# Parameters: (size = 100)

# Run progress: 90.00% complete, ETA 00:58:04
# Fork: 1 of 3
# Warmup Iteration   1: 74.758 ns/op
# Warmup Iteration   2: 74.273 ns/op
# Warmup Iteration   3: 74.397 ns/op
Iteration   1: 74.505 ns/op
Iteration   2: 74.285 ns/op
Iteration   3: 74.367 ns/op
Iteration   4: 74.460 ns/op
Iteration   5: 74.193 ns/op

# Run progress: 90.02% complete, ETA 00:57:55
# Fork: 2 of 3
# Warmup Iteration   1: 74.505 ns/op
# Warmup Iteration   2: 74.234 ns/op
# Warmup Iteration   3: 74.321 ns/op
Iteration   1: 74.268 ns/op
Iteration   2: 75.955 ns/op
Iteration   3: 74.352 ns/op
Iteration   4: 79.543 ns/op
Iteration   5: 78.077 ns/op

# Run progress: 90.05% complete, ETA 00:57:47
# Fork: 3 of 3
# Warmup Iteration   1: 74.860 ns/op
# Warmup Iteration   2: 74.430 ns/op
# Warmup Iteration   3: 74.599 ns/op
Iteration   1: 74.827 ns/op
Iteration   2: 74.415 ns/op
Iteration   3: 74.503 ns/op
Iteration   4: 74.381 ns/op
Iteration   5: 74.488 ns/op


Result "org.openjdk.bench.valhalla.array.sum.Inline64int.Ref_as_Ref_sum":
  75.108 ±(99.9%) 1.694 ns/op [Average]
  (min, avg, max) = (74.193, 75.108, 79.543), stdev = 1.585
  CI (99.9%): [73.414, 76.802] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.sum.Inline64int.Ref_as_Ref_sum
# Parameters: (size = 1000000)

# Run progress: 90.07% complete, ETA 00:57:38
# Fork: 1 of 3
# Warmup Iteration   1: 1304453.105 ns/op
# Warmup Iteration   2: 1270701.530 ns/op
# Warmup Iteration   3: 1281303.390 ns/op
Iteration   1: 1260988.970 ns/op
Iteration   2: 1182623.035 ns/op
Iteration   3: 1246371.351 ns/op
Iteration   4: 1263981.383 ns/op
Iteration   5: 1271700.681 ns/op

# Run progress: 90.10% complete, ETA 00:57:30
# Fork: 2 of 3
# Warmup Iteration   1: 1250525.352 ns/op
# Warmup Iteration   2: 1252442.793 ns/op
# Warmup Iteration   3: 1285524.120 ns/op
Iteration   1: 1273570.770 ns/op
Iteration   2: 1282565.407 ns/op
Iteration   3: 1220072.414 ns/op
Iteration   4: 1249929.440 ns/op
Iteration   5: 1341827.689 ns/op

# Run progress: 90.12% complete, ETA 00:57:21
# Fork: 3 of 3
# Warmup Iteration   1: 1420628.160 ns/op
# Warmup Iteration   2: 1269404.905 ns/op
# Warmup Iteration   3: 1360768.050 ns/op
Iteration   1: 1421889.494 ns/op
Iteration   2: 1337790.053 ns/op
Iteration   3: 1352435.296 ns/op
Iteration   4: 1386847.624 ns/op
Iteration   5: 1297706.515 ns/op


Result "org.openjdk.bench.valhalla.array.sum.Inline64int.Ref_as_Ref_sum":
  1292686.675 ±(99.9%) 68632.551 ns/op [Average]
  (min, avg, max) = (1182623.035, 1292686.675, 1421889.494), stdev = 64198.931
  CI (99.9%): [1224054.124, 1361319.226] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.sum.Inline64int.Val_as_Int_sum
# Parameters: (size = 100)

# Run progress: 90.15% complete, ETA 00:57:13
# Fork: 1 of 3
# Warmup Iteration   1: 75.463 ns/op
# Warmup Iteration   2: 74.556 ns/op
# Warmup Iteration   3: 74.286 ns/op
Iteration   1: 74.440 ns/op
Iteration   2: 75.789 ns/op
Iteration   3: 74.294 ns/op
Iteration   4: 74.636 ns/op
Iteration   5: 74.787 ns/op

# Run progress: 90.17% complete, ETA 00:57:04
# Fork: 2 of 3
# Warmup Iteration   1: 75.829 ns/op
# Warmup Iteration   2: 75.033 ns/op
# Warmup Iteration   3: 74.797 ns/op
Iteration   1: 74.762 ns/op
Iteration   2: 75.158 ns/op
Iteration   3: 74.838 ns/op
Iteration   4: 74.809 ns/op
Iteration   5: 74.728 ns/op

# Run progress: 90.20% complete, ETA 00:56:55
# Fork: 3 of 3
# Warmup Iteration   1: 75.599 ns/op
# Warmup Iteration   2: 75.091 ns/op
# Warmup Iteration   3: 74.849 ns/op
Iteration   1: 76.310 ns/op
Iteration   2: 74.849 ns/op
Iteration   3: 76.595 ns/op
Iteration   4: 74.826 ns/op
Iteration   5: 74.795 ns/op


Result "org.openjdk.bench.valhalla.array.sum.Inline64int.Val_as_Int_sum":
  75.041 ±(99.9%) 0.709 ns/op [Average]
  (min, avg, max) = (74.294, 75.041, 76.595), stdev = 0.663
  CI (99.9%): [74.332, 75.750] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.sum.Inline64int.Val_as_Int_sum
# Parameters: (size = 1000000)

# Run progress: 90.22% complete, ETA 00:56:47
# Fork: 1 of 3
# Warmup Iteration   1: 1323690.008 ns/op
# Warmup Iteration   2: 1437213.201 ns/op
# Warmup Iteration   3: 1241813.328 ns/op
Iteration   1: 1258636.690 ns/op
Iteration   2: 1299420.314 ns/op
Iteration   3: 1293502.027 ns/op
Iteration   4: 1296685.695 ns/op
Iteration   5: 1252930.969 ns/op

# Run progress: 90.25% complete, ETA 00:56:38
# Fork: 2 of 3
# Warmup Iteration   1: 1289950.555 ns/op
# Warmup Iteration   2: 1292367.157 ns/op
# Warmup Iteration   3: 1306579.767 ns/op
Iteration   1: 1212784.639 ns/op
Iteration   2: 1212872.400 ns/op
Iteration   3: 1276555.503 ns/op
Iteration   4: 1264733.104 ns/op
Iteration   5: 1320662.692 ns/op

# Run progress: 90.27% complete, ETA 00:56:30
# Fork: 3 of 3
# Warmup Iteration   1: 1275620.971 ns/op
# Warmup Iteration   2: 1276716.067 ns/op
# Warmup Iteration   3: 1282785.069 ns/op
Iteration   1: 1293918.274 ns/op
Iteration   2: 1267240.758 ns/op
Iteration   3: 1280890.156 ns/op
Iteration   4: 1306119.684 ns/op
Iteration   5: 1345511.651 ns/op


Result "org.openjdk.bench.valhalla.array.sum.Inline64int.Val_as_Int_sum":
  1278830.970 ±(99.9%) 38609.257 ns/op [Average]
  (min, avg, max) = (1212784.639, 1278830.970, 1345511.651), stdev = 36115.123
  CI (99.9%): [1240221.713, 1317440.227] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.sum.Inline64int.Val_as_Ref_fields
# Parameters: (size = 100)

# Run progress: 90.29% complete, ETA 00:56:21
# Fork: 1 of 3
# Warmup Iteration   1: 61.849 ns/op
# Warmup Iteration   2: 61.592 ns/op
# Warmup Iteration   3: 62.413 ns/op
Iteration   1: 60.158 ns/op
Iteration   2: 60.146 ns/op
Iteration   3: 60.296 ns/op
Iteration   4: 60.489 ns/op
Iteration   5: 60.147 ns/op

# Run progress: 90.32% complete, ETA 00:56:13
# Fork: 2 of 3
# Warmup Iteration   1: 60.530 ns/op
# Warmup Iteration   2: 60.506 ns/op
# Warmup Iteration   3: 60.164 ns/op
Iteration   1: 60.560 ns/op
Iteration   2: 60.567 ns/op
Iteration   3: 61.026 ns/op
Iteration   4: 60.191 ns/op
Iteration   5: 60.901 ns/op

# Run progress: 90.34% complete, ETA 00:56:04
# Fork: 3 of 3
# Warmup Iteration   1: 61.067 ns/op
# Warmup Iteration   2: 60.962 ns/op
# Warmup Iteration   3: 60.164 ns/op
Iteration   1: 60.347 ns/op
Iteration   2: 67.182 ns/op
Iteration   3: 76.669 ns/op
Iteration   4: 63.127 ns/op
Iteration   5: 60.411 ns/op


Result "org.openjdk.bench.valhalla.array.sum.Inline64int.Val_as_Ref_fields":
  62.148 ±(99.9%) 4.723 ns/op [Average]
  (min, avg, max) = (60.146, 62.148, 76.669), stdev = 4.418
  CI (99.9%): [57.425, 66.871] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.sum.Inline64int.Val_as_Ref_fields
# Parameters: (size = 1000000)

# Run progress: 90.37% complete, ETA 00:55:56
# Fork: 1 of 3
# Warmup Iteration   1: 1280640.335 ns/op
# Warmup Iteration   2: 1275722.222 ns/op
# Warmup Iteration   3: 1230175.741 ns/op
Iteration   1: 1174176.585 ns/op
Iteration   2: 1238145.165 ns/op
Iteration   3: 1270204.130 ns/op
Iteration   4: 1357653.282 ns/op
Iteration   5: 1407859.601 ns/op

# Run progress: 90.39% complete, ETA 00:55:47
# Fork: 2 of 3
# Warmup Iteration   1: 1273703.809 ns/op
# Warmup Iteration   2: 1313865.893 ns/op
# Warmup Iteration   3: 1371004.410 ns/op
Iteration   1: 1299282.365 ns/op
Iteration   2: 1390276.535 ns/op
Iteration   3: 1356338.366 ns/op
Iteration   4: 1432541.785 ns/op
Iteration   5: 1373838.833 ns/op

# Run progress: 90.42% complete, ETA 00:55:38
# Fork: 3 of 3
# Warmup Iteration   1: 1346606.581 ns/op
# Warmup Iteration   2: 1317728.977 ns/op
# Warmup Iteration   3: 1226829.513 ns/op
Iteration   1: 1279126.798 ns/op
Iteration   2: 1280843.314 ns/op
Iteration   3: 1298679.752 ns/op
Iteration   4: 1300347.060 ns/op
Iteration   5: 1414584.034 ns/op


Result "org.openjdk.bench.valhalla.array.sum.Inline64int.Val_as_Ref_fields":
  1324926.507 ±(99.9%) 77965.495 ns/op [Average]
  (min, avg, max) = (1174176.585, 1324926.507, 1432541.785), stdev = 72928.972
  CI (99.9%): [1246961.012, 1402892.002] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.sum.Inline64int.Val_as_Ref_sum
# Parameters: (size = 100)

# Run progress: 90.44% complete, ETA 00:55:30
# Fork: 1 of 3
# Warmup Iteration   1: 75.318 ns/op
# Warmup Iteration   2: 79.871 ns/op
# Warmup Iteration   3: 80.179 ns/op
Iteration   1: 76.656 ns/op
Iteration   2: 74.942 ns/op
Iteration   3: 74.533 ns/op
Iteration   4: 81.948 ns/op
Iteration   5: 88.098 ns/op

# Run progress: 90.47% complete, ETA 00:55:21
# Fork: 2 of 3
# Warmup Iteration   1: 74.883 ns/op
# Warmup Iteration   2: 78.855 ns/op
# Warmup Iteration   3: 93.029 ns/op
Iteration   1: 100.483 ns/op
Iteration   2: 88.679 ns/op
Iteration   3: 74.305 ns/op
Iteration   4: 74.742 ns/op
Iteration   5: 84.830 ns/op

# Run progress: 90.49% complete, ETA 00:55:13
# Fork: 3 of 3
# Warmup Iteration   1: 99.669 ns/op
# Warmup Iteration   2: 80.343 ns/op
# Warmup Iteration   3: 92.357 ns/op
Iteration   1: 97.100 ns/op
Iteration   2: 96.252 ns/op
Iteration   3: 83.654 ns/op
Iteration   4: 87.687 ns/op
Iteration   5: 74.395 ns/op


Result "org.openjdk.bench.valhalla.array.sum.Inline64int.Val_as_Ref_sum":
  83.887 ±(99.9%) 9.681 ns/op [Average]
  (min, avg, max) = (74.305, 83.887, 100.483), stdev = 9.056
  CI (99.9%): [74.206, 93.568] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.sum.Inline64int.Val_as_Ref_sum
# Parameters: (size = 1000000)

# Run progress: 90.51% complete, ETA 00:55:04
# Fork: 1 of 3
# Warmup Iteration   1: 1322751.254 ns/op
# Warmup Iteration   2: 1304333.065 ns/op
# Warmup Iteration   3: 1381401.263 ns/op
Iteration   1: 1316382.432 ns/op
Iteration   2: 1278894.567 ns/op
Iteration   3: 1254881.728 ns/op
Iteration   4: 1313222.730 ns/op
Iteration   5: 1366418.131 ns/op

# Run progress: 90.54% complete, ETA 00:54:56
# Fork: 2 of 3
# Warmup Iteration   1: 1402509.674 ns/op
# Warmup Iteration   2: 1232699.695 ns/op
# Warmup Iteration   3: 1219410.461 ns/op
Iteration   1: 1337503.914 ns/op
Iteration   2: 1417178.704 ns/op
Iteration   3: 1430963.453 ns/op
Iteration   4: 1652065.213 ns/op
Iteration   5: 1901350.647 ns/op

# Run progress: 90.56% complete, ETA 00:54:47
# Fork: 3 of 3
# Warmup Iteration   1: 1998347.004 ns/op
# Warmup Iteration   2: 2013607.847 ns/op
# Warmup Iteration   3: 1981599.474 ns/op
Iteration   1: 2043429.376 ns/op
Iteration   2: 2091784.161 ns/op
Iteration   3: 2069223.563 ns/op
Iteration   4: 2013936.090 ns/op
Iteration   5: 1985822.528 ns/op


Result "org.openjdk.bench.valhalla.array.sum.Inline64int.Val_as_Ref_sum":
  1631537.149 ±(99.9%) 364536.400 ns/op [Average]
  (min, avg, max) = (1254881.728, 1631537.149, 2091784.161), stdev = 340987.575
  CI (99.9%): [1267000.749, 1996073.550] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.sum.Inline64int.Val_as_Val_fields
# Parameters: (size = 100)

# Run progress: 90.59% complete, ETA 00:54:39
# Fork: 1 of 3
# Warmup Iteration   1: 127.953 ns/op
# Warmup Iteration   2: 126.251 ns/op
# Warmup Iteration   3: 125.629 ns/op
Iteration   1: 128.875 ns/op
Iteration   2: 125.611 ns/op
Iteration   3: 129.226 ns/op
Iteration   4: 141.365 ns/op
Iteration   5: 146.712 ns/op

# Run progress: 90.61% complete, ETA 00:54:30
# Fork: 2 of 3
# Warmup Iteration   1: 95.428 ns/op
# Warmup Iteration   2: 102.267 ns/op
# Warmup Iteration   3: 70.828 ns/op
Iteration   1: 60.107 ns/op
Iteration   2: 59.986 ns/op
Iteration   3: 60.089 ns/op
Iteration   4: 60.135 ns/op
Iteration   5: 60.117 ns/op

# Run progress: 90.64% complete, ETA 00:54:22
# Fork: 3 of 3
# Warmup Iteration   1: 60.766 ns/op
# Warmup Iteration   2: 60.284 ns/op
# Warmup Iteration   3: 60.286 ns/op
Iteration   1: 60.163 ns/op
Iteration   2: 60.401 ns/op
Iteration   3: 60.314 ns/op
Iteration   4: 60.302 ns/op
Iteration   5: 60.434 ns/op


Result "org.openjdk.bench.valhalla.array.sum.Inline64int.Val_as_Val_fields":
  84.922 ±(99.9%) 39.033 ns/op [Average]
  (min, avg, max) = (59.986, 84.922, 146.712), stdev = 36.512
  CI (99.9%): [45.889, 123.956] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.sum.Inline64int.Val_as_Val_fields
# Parameters: (size = 1000000)

# Run progress: 90.66% complete, ETA 00:54:13
# Fork: 1 of 3
# Warmup Iteration   1: 1184121.181 ns/op
# Warmup Iteration   2: 1273472.029 ns/op
# Warmup Iteration   3: 1266772.138 ns/op
Iteration   1: 1303922.003 ns/op
Iteration   2: 1228055.437 ns/op
Iteration   3: 1367058.525 ns/op
Iteration   4: 1340847.833 ns/op
Iteration   5: 1295833.708 ns/op

# Run progress: 90.69% complete, ETA 00:54:05
# Fork: 2 of 3
# Warmup Iteration   1: 1344661.625 ns/op
# Warmup Iteration   2: 1241994.157 ns/op
# Warmup Iteration   3: 1372827.955 ns/op
Iteration   1: 1330419.860 ns/op
Iteration   2: 1248850.483 ns/op
Iteration   3: 1270082.234 ns/op
Iteration   4: 1260760.339 ns/op
Iteration   5: 1230124.592 ns/op

# Run progress: 90.71% complete, ETA 00:53:56
# Fork: 3 of 3
# Warmup Iteration   1: 1204663.335 ns/op
# Warmup Iteration   2: 1287373.028 ns/op
# Warmup Iteration   3: 1289551.364 ns/op
Iteration   1: 1280781.739 ns/op
Iteration   2: 1183783.909 ns/op
Iteration   3: 1225939.523 ns/op
Iteration   4: 1277583.865 ns/op
Iteration   5: 1295611.129 ns/op


Result "org.openjdk.bench.valhalla.array.sum.Inline64int.Val_as_Val_fields":
  1275977.012 ±(99.9%) 52262.940 ns/op [Average]
  (min, avg, max) = (1183783.909, 1275977.012, 1367058.525), stdev = 48886.786
  CI (99.9%): [1223714.072, 1328239.952] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.sum.Inline64int.Val_as_Val_sum
# Parameters: (size = 100)

# Run progress: 90.74% complete, ETA 00:53:48
# Fork: 1 of 3
# Warmup Iteration   1: 74.931 ns/op
# Warmup Iteration   2: 74.137 ns/op
# Warmup Iteration   3: 74.397 ns/op
Iteration   1: 74.315 ns/op
Iteration   2: 74.334 ns/op
Iteration   3: 74.289 ns/op
Iteration   4: 74.322 ns/op
Iteration   5: 74.385 ns/op

# Run progress: 90.76% complete, ETA 00:53:39
# Fork: 2 of 3
# Warmup Iteration   1: 74.984 ns/op
# Warmup Iteration   2: 75.212 ns/op
# Warmup Iteration   3: 74.421 ns/op
Iteration   1: 75.137 ns/op
Iteration   2: 76.007 ns/op
Iteration   3: 75.808 ns/op
Iteration   4: 75.938 ns/op
Iteration   5: 74.912 ns/op

# Run progress: 90.78% complete, ETA 00:53:30
# Fork: 3 of 3
# Warmup Iteration   1: 75.068 ns/op
# Warmup Iteration   2: 74.277 ns/op
# Warmup Iteration   3: 74.157 ns/op
Iteration   1: 74.138 ns/op
Iteration   2: 74.130 ns/op
Iteration   3: 74.497 ns/op
Iteration   4: 75.105 ns/op
Iteration   5: 74.133 ns/op


Result "org.openjdk.bench.valhalla.array.sum.Inline64int.Val_as_Val_sum":
  74.763 ±(99.9%) 0.729 ns/op [Average]
  (min, avg, max) = (74.130, 74.763, 76.007), stdev = 0.682
  CI (99.9%): [74.035, 75.492] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.sum.Inline64int.Val_as_Val_sum
# Parameters: (size = 1000000)

# Run progress: 90.81% complete, ETA 00:53:22
# Fork: 1 of 3
# Warmup Iteration   1: 1282384.005 ns/op
# Warmup Iteration   2: 1288866.922 ns/op
# Warmup Iteration   3: 1274867.119 ns/op
Iteration   1: 1251210.620 ns/op
Iteration   2: 1183871.287 ns/op
Iteration   3: 1275180.063 ns/op
Iteration   4: 1263179.156 ns/op
Iteration   5: 1316751.632 ns/op

# Run progress: 90.83% complete, ETA 00:53:13
# Fork: 2 of 3
# Warmup Iteration   1: 1250603.933 ns/op
# Warmup Iteration   2: 1264542.240 ns/op
# Warmup Iteration   3: 1293663.925 ns/op
Iteration   1: 1300116.741 ns/op
Iteration   2: 1337250.777 ns/op
Iteration   3: 1426980.959 ns/op
Iteration   4: 1261876.877 ns/op
Iteration   5: 1328852.122 ns/op

# Run progress: 90.86% complete, ETA 00:53:05
# Fork: 3 of 3
# Warmup Iteration   1: 1361150.023 ns/op
# Warmup Iteration   2: 1338975.939 ns/op
# Warmup Iteration   3: 1358615.446 ns/op
Iteration   1: 1361891.485 ns/op
Iteration   2: 1283024.429 ns/op
Iteration   3: 1297849.441 ns/op
Iteration   4: 1279533.322 ns/op
Iteration   5: 1195085.254 ns/op


Result "org.openjdk.bench.valhalla.array.sum.Inline64int.Val_as_Val_sum":
  1290843.611 ±(99.9%) 65284.056 ns/op [Average]
  (min, avg, max) = (1183871.287, 1290843.611, 1426980.959), stdev = 61066.747
  CI (99.9%): [1225559.555, 1356127.667] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.sum.InlineOpt.Int_as_Int_sum
# Parameters: (size = 100)

# Run progress: 90.88% complete, ETA 00:52:56
# Fork: 1 of 3
# Warmup Iteration   1: 65.771 ns/op
# Warmup Iteration   2: 64.673 ns/op
# Warmup Iteration   3: 73.439 ns/op
Iteration   1: 73.106 ns/op
Iteration   2: 73.047 ns/op
Iteration   3: 73.105 ns/op
Iteration   4: 73.120 ns/op
Iteration   5: 73.137 ns/op

# Run progress: 90.91% complete, ETA 00:52:48
# Fork: 2 of 3
# Warmup Iteration   1: 65.881 ns/op
# Warmup Iteration   2: 64.168 ns/op
# Warmup Iteration   3: 73.110 ns/op
Iteration   1: 73.111 ns/op
Iteration   2: 73.076 ns/op
Iteration   3: 73.162 ns/op
Iteration   4: 73.131 ns/op
Iteration   5: 73.125 ns/op

# Run progress: 90.93% complete, ETA 00:52:39
# Fork: 3 of 3
# Warmup Iteration   1: 65.766 ns/op
# Warmup Iteration   2: 64.099 ns/op
# Warmup Iteration   3: 77.718 ns/op
Iteration   1: 74.399 ns/op
Iteration   2: 73.162 ns/op
Iteration   3: 73.494 ns/op
Iteration   4: 73.097 ns/op
Iteration   5: 73.258 ns/op


Result "org.openjdk.bench.valhalla.array.sum.InlineOpt.Int_as_Int_sum":
  73.235 ±(99.9%) 0.362 ns/op [Average]
  (min, avg, max) = (73.047, 73.235, 74.399), stdev = 0.339
  CI (99.9%): [72.873, 73.598] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.sum.InlineOpt.Int_as_Int_sum
# Parameters: (size = 1000000)

# Run progress: 90.96% complete, ETA 00:52:31
# Fork: 1 of 3
# Warmup Iteration   1: 898070.815 ns/op
# Warmup Iteration   2: 794959.874 ns/op
# Warmup Iteration   3: 775874.104 ns/op
Iteration   1: 852286.573 ns/op
Iteration   2: 903204.091 ns/op
Iteration   3: 918419.515 ns/op
Iteration   4: 781958.462 ns/op
Iteration   5: 829531.897 ns/op

# Run progress: 90.98% complete, ETA 00:52:22
# Fork: 2 of 3
# Warmup Iteration   1: 831716.687 ns/op
# Warmup Iteration   2: 827017.287 ns/op
# Warmup Iteration   3: 821679.811 ns/op
Iteration   1: 801395.218 ns/op
Iteration   2: 825156.870 ns/op
Iteration   3: 827728.706 ns/op
Iteration   4: 806158.688 ns/op
Iteration   5: 815204.735 ns/op

# Run progress: 91.00% complete, ETA 00:52:13
# Fork: 3 of 3
# Warmup Iteration   1: 782056.405 ns/op
# Warmup Iteration   2: 824645.851 ns/op
# Warmup Iteration   3: 833887.067 ns/op
Iteration   1: 863566.488 ns/op
Iteration   2: 832630.182 ns/op
Iteration   3: 911879.743 ns/op
Iteration   4: 909482.598 ns/op
Iteration   5: 990753.922 ns/op


Result "org.openjdk.bench.valhalla.array.sum.InlineOpt.Int_as_Int_sum":
  857957.179 ±(99.9%) 61205.856 ns/op [Average]
  (min, avg, max) = (781958.462, 857957.179, 990753.922), stdev = 57251.995
  CI (99.9%): [796751.324, 919163.035] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.sum.InlineOpt.Ref_as_Ref_fields
# Parameters: (size = 100)

# Run progress: 91.03% complete, ETA 00:52:05
# Fork: 1 of 3
# Warmup Iteration   1: 76.156 ns/op
# Warmup Iteration   2: 70.293 ns/op
# Warmup Iteration   3: 62.638 ns/op
Iteration   1: 61.116 ns/op
Iteration   2: 53.676 ns/op
Iteration   3: 51.680 ns/op
Iteration   4: 51.171 ns/op
Iteration   5: 51.324 ns/op

# Run progress: 91.05% complete, ETA 00:51:56
# Fork: 2 of 3
# Warmup Iteration   1: 51.008 ns/op
# Warmup Iteration   2: 51.411 ns/op
# Warmup Iteration   3: 54.144 ns/op
Iteration   1: 59.875 ns/op
Iteration   2: 60.555 ns/op
Iteration   3: 50.964 ns/op
Iteration   4: 50.675 ns/op
Iteration   5: 58.360 ns/op

# Run progress: 91.08% complete, ETA 00:51:48
# Fork: 3 of 3
# Warmup Iteration   1: 64.997 ns/op
# Warmup Iteration   2: 63.838 ns/op
# Warmup Iteration   3: 51.171 ns/op
Iteration   1: 50.965 ns/op
Iteration   2: 50.804 ns/op
Iteration   3: 50.888 ns/op
Iteration   4: 53.685 ns/op
Iteration   5: 50.766 ns/op


Result "org.openjdk.bench.valhalla.array.sum.InlineOpt.Ref_as_Ref_fields":
  53.767 ±(99.9%) 4.304 ns/op [Average]
  (min, avg, max) = (50.675, 53.767, 61.116), stdev = 4.026
  CI (99.9%): [49.463, 58.071] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.sum.InlineOpt.Ref_as_Ref_fields
# Parameters: (size = 1000000)

# Run progress: 91.10% complete, ETA 00:51:39
# Fork: 1 of 3
# Warmup Iteration   1: 841948.333 ns/op
# Warmup Iteration   2: 1007565.411 ns/op
# Warmup Iteration   3: 1002430.250 ns/op
Iteration   1: 888201.290 ns/op
Iteration   2: 898358.926 ns/op
Iteration   3: 883652.116 ns/op
Iteration   4: 892083.370 ns/op
Iteration   5: 829989.874 ns/op

# Run progress: 91.13% complete, ETA 00:51:31
# Fork: 2 of 3
# Warmup Iteration   1: 888104.718 ns/op
# Warmup Iteration   2: 706340.501 ns/op
# Warmup Iteration   3: 797930.279 ns/op
Iteration   1: 813193.705 ns/op
Iteration   2: 843510.017 ns/op
Iteration   3: 778471.553 ns/op
Iteration   4: 731319.858 ns/op
Iteration   5: 792868.879 ns/op

# Run progress: 91.15% complete, ETA 00:51:22
# Fork: 3 of 3
# Warmup Iteration   1: 839308.728 ns/op
# Warmup Iteration   2: 859171.715 ns/op
# Warmup Iteration   3: 721175.707 ns/op
Iteration   1: 719713.947 ns/op
Iteration   2: 805647.761 ns/op
Iteration   3: 854223.728 ns/op
Iteration   4: 907472.360 ns/op
Iteration   5: 1596330.678 ns/op


Result "org.openjdk.bench.valhalla.array.sum.InlineOpt.Ref_as_Ref_fields":
  882335.871 ±(99.9%) 220309.463 ns/op [Average]
  (min, avg, max) = (719713.947, 882335.871, 1596330.678), stdev = 206077.608
  CI (99.9%): [662026.408, 1102645.334] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.sum.InlineOpt.Ref_as_Ref_sum
# Parameters: (size = 100)

# Run progress: 91.18% complete, ETA 00:51:14
# Fork: 1 of 3
# Warmup Iteration   1: 107.290 ns/op
# Warmup Iteration   2: 105.709 ns/op
# Warmup Iteration   3: 105.610 ns/op
Iteration   1: 105.630 ns/op
Iteration   2: 105.636 ns/op
Iteration   3: 105.639 ns/op
Iteration   4: 105.645 ns/op
Iteration   5: 105.658 ns/op

# Run progress: 91.20% complete, ETA 00:51:05
# Fork: 2 of 3
# Warmup Iteration   1: 106.997 ns/op
# Warmup Iteration   2: 105.746 ns/op
# Warmup Iteration   3: 105.694 ns/op
Iteration   1: 106.179 ns/op
Iteration   2: 105.684 ns/op
Iteration   3: 105.634 ns/op
Iteration   4: 106.468 ns/op
Iteration   5: 105.715 ns/op

# Run progress: 91.23% complete, ETA 00:50:57
# Fork: 3 of 3
# Warmup Iteration   1: 113.946 ns/op
# Warmup Iteration   2: 105.891 ns/op
# Warmup Iteration   3: 106.579 ns/op
Iteration   1: 67.894 ns/op
Iteration   2: 53.434 ns/op
Iteration   3: 58.662 ns/op
Iteration   4: 66.105 ns/op
Iteration   5: 52.862 ns/op


Result "org.openjdk.bench.valhalla.array.sum.InlineOpt.Ref_as_Ref_sum":
  90.456 ±(99.9%) 24.325 ns/op [Average]
  (min, avg, max) = (52.862, 90.456, 106.468), stdev = 22.754
  CI (99.9%): [66.131, 114.782] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.sum.InlineOpt.Ref_as_Ref_sum
# Parameters: (size = 1000000)

# Run progress: 91.25% complete, ETA 00:50:48
# Fork: 1 of 3
# Warmup Iteration   1: 732657.572 ns/op
# Warmup Iteration   2: 721778.503 ns/op
# Warmup Iteration   3: 766806.778 ns/op
Iteration   1: 794983.321 ns/op
Iteration   2: 783073.902 ns/op
Iteration   3: 741504.524 ns/op
Iteration   4: 745323.562 ns/op
Iteration   5: 794201.218 ns/op

# Run progress: 91.27% complete, ETA 00:50:39
# Fork: 2 of 3
# Warmup Iteration   1: 799848.695 ns/op
# Warmup Iteration   2: 778723.773 ns/op
# Warmup Iteration   3: 748586.914 ns/op
Iteration   1: 765291.035 ns/op
Iteration   2: 794175.118 ns/op
Iteration   3: 808022.752 ns/op
Iteration   4: 764482.591 ns/op
Iteration   5: 737623.540 ns/op

# Run progress: 91.30% complete, ETA 00:50:31
# Fork: 3 of 3
# Warmup Iteration   1: 781460.055 ns/op
# Warmup Iteration   2: 808470.643 ns/op
# Warmup Iteration   3: 806546.966 ns/op
Iteration   1: 857994.199 ns/op
Iteration   2: 762960.861 ns/op
Iteration   3: 808844.909 ns/op
Iteration   4: 801221.319 ns/op
Iteration   5: 849660.447 ns/op


Result "org.openjdk.bench.valhalla.array.sum.InlineOpt.Ref_as_Ref_sum":
  787290.886 ±(99.9%) 38407.748 ns/op [Average]
  (min, avg, max) = (737623.540, 787290.886, 857994.199), stdev = 35926.631
  CI (99.9%): [748883.138, 825698.635] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.sum.InlineOpt.Val_as_Int_sum
# Parameters: (size = 100)

# Run progress: 91.32% complete, ETA 00:50:22
# Fork: 1 of 3
# Warmup Iteration   1: 51.319 ns/op
# Warmup Iteration   2: 51.395 ns/op
# Warmup Iteration   3: 51.324 ns/op
Iteration   1: 50.671 ns/op
Iteration   2: 50.762 ns/op
Iteration   3: 50.758 ns/op
Iteration   4: 50.830 ns/op
Iteration   5: 50.791 ns/op

# Run progress: 91.35% complete, ETA 00:50:14
# Fork: 2 of 3
# Warmup Iteration   1: 52.076 ns/op
# Warmup Iteration   2: 50.726 ns/op
# Warmup Iteration   3: 50.665 ns/op
Iteration   1: 50.718 ns/op
Iteration   2: 50.738 ns/op
Iteration   3: 50.835 ns/op
Iteration   4: 50.960 ns/op
Iteration   5: 50.881 ns/op

# Run progress: 91.37% complete, ETA 00:50:05
# Fork: 3 of 3
# Warmup Iteration   1: 51.418 ns/op
# Warmup Iteration   2: 50.791 ns/op
# Warmup Iteration   3: 50.684 ns/op
Iteration   1: 50.737 ns/op
Iteration   2: 50.697 ns/op
Iteration   3: 51.001 ns/op
Iteration   4: 51.062 ns/op
Iteration   5: 51.647 ns/op


Result "org.openjdk.bench.valhalla.array.sum.InlineOpt.Val_as_Int_sum":
  50.872 ±(99.9%) 0.260 ns/op [Average]
  (min, avg, max) = (50.671, 50.872, 51.647), stdev = 0.243
  CI (99.9%): [50.613, 51.132] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.sum.InlineOpt.Val_as_Int_sum
# Parameters: (size = 1000000)

# Run progress: 91.40% complete, ETA 00:49:57
# Fork: 1 of 3
# Warmup Iteration   1: 805992.938 ns/op
# Warmup Iteration   2: 921076.254 ns/op
# Warmup Iteration   3: 835249.380 ns/op
Iteration   1: 852431.590 ns/op
Iteration   2: 831575.062 ns/op
Iteration   3: 799015.025 ns/op
Iteration   4: 791673.130 ns/op
Iteration   5: 759699.095 ns/op

# Run progress: 91.42% complete, ETA 00:49:48
# Fork: 2 of 3
# Warmup Iteration   1: 784884.677 ns/op
# Warmup Iteration   2: 783748.222 ns/op
# Warmup Iteration   3: 801154.309 ns/op
Iteration   1: 747943.653 ns/op
Iteration   2: 728678.503 ns/op
Iteration   3: 754540.547 ns/op
Iteration   4: 803637.690 ns/op
Iteration   5: 778932.280 ns/op

# Run progress: 91.45% complete, ETA 00:49:40
# Fork: 3 of 3
# Warmup Iteration   1: 719787.037 ns/op
# Warmup Iteration   2: 737053.780 ns/op
# Warmup Iteration   3: 777261.892 ns/op
Iteration   1: 786873.864 ns/op
Iteration   2: 799463.809 ns/op
Iteration   3: 698380.673 ns/op
Iteration   4: 701548.813 ns/op
Iteration   5: 861119.482 ns/op


Result "org.openjdk.bench.valhalla.array.sum.InlineOpt.Val_as_Int_sum":
  779700.881 ±(99.9%) 52300.745 ns/op [Average]
  (min, avg, max) = (698380.673, 779700.881, 861119.482), stdev = 48922.149
  CI (99.9%): [727400.136, 832001.626] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.sum.InlineOpt.Val_as_Ref_fields
# Parameters: (size = 100)

# Run progress: 91.47% complete, ETA 00:49:31
# Fork: 1 of 3
# Warmup Iteration   1: 50.998 ns/op
# Warmup Iteration   2: 50.889 ns/op
# Warmup Iteration   3: 50.710 ns/op
Iteration   1: 50.738 ns/op
Iteration   2: 50.794 ns/op
Iteration   3: 50.890 ns/op
Iteration   4: 53.952 ns/op
Iteration   5: 50.964 ns/op

# Run progress: 91.50% complete, ETA 00:49:23
# Fork: 2 of 3
# Warmup Iteration   1: 51.774 ns/op
# Warmup Iteration   2: 51.264 ns/op
# Warmup Iteration   3: 51.068 ns/op
Iteration   1: 50.758 ns/op
Iteration   2: 50.787 ns/op
Iteration   3: 50.696 ns/op
Iteration   4: 50.960 ns/op
Iteration   5: 50.714 ns/op

# Run progress: 91.52% complete, ETA 00:49:14
# Fork: 3 of 3
# Warmup Iteration   1: 51.275 ns/op
# Warmup Iteration   2: 50.737 ns/op
# Warmup Iteration   3: 50.714 ns/op
Iteration   1: 50.646 ns/op
Iteration   2: 50.817 ns/op
Iteration   3: 51.046 ns/op
Iteration   4: 50.768 ns/op
Iteration   5: 50.656 ns/op


Result "org.openjdk.bench.valhalla.array.sum.InlineOpt.Val_as_Ref_fields":
  51.012 ±(99.9%) 0.878 ns/op [Average]
  (min, avg, max) = (50.646, 51.012, 53.952), stdev = 0.821
  CI (99.9%): [50.134, 51.891] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.sum.InlineOpt.Val_as_Ref_fields
# Parameters: (size = 1000000)

# Run progress: 91.54% complete, ETA 00:49:06
# Fork: 1 of 3
# Warmup Iteration   1: 811061.864 ns/op
# Warmup Iteration   2: 779060.900 ns/op
# Warmup Iteration   3: 772419.470 ns/op
Iteration   1: 756193.027 ns/op
Iteration   2: 793052.100 ns/op
Iteration   3: 813867.098 ns/op
Iteration   4: 852616.907 ns/op
Iteration   5: 831629.325 ns/op

# Run progress: 91.57% complete, ETA 00:48:57
# Fork: 2 of 3
# Warmup Iteration   1: 796996.515 ns/op
# Warmup Iteration   2: 822288.548 ns/op
# Warmup Iteration   3: 825258.682 ns/op
Iteration   1: 802957.605 ns/op
Iteration   2: 830884.663 ns/op
Iteration   3: 765568.430 ns/op
Iteration   4: 781172.416 ns/op
Iteration   5: 781249.514 ns/op

# Run progress: 91.59% complete, ETA 00:48:49
# Fork: 3 of 3
# Warmup Iteration   1: 691361.112 ns/op
# Warmup Iteration   2: 732888.768 ns/op
# Warmup Iteration   3: 780335.650 ns/op
Iteration   1: 799831.875 ns/op
Iteration   2: 777574.288 ns/op
Iteration   3: 729402.677 ns/op
Iteration   4: 774853.144 ns/op
Iteration   5: 792700.980 ns/op


Result "org.openjdk.bench.valhalla.array.sum.InlineOpt.Val_as_Ref_fields":
  792236.937 ±(99.9%) 33868.621 ns/op [Average]
  (min, avg, max) = (729402.677, 792236.937, 852616.907), stdev = 31680.729
  CI (99.9%): [758368.315, 826105.558] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.sum.InlineOpt.Val_as_Ref_sum
# Parameters: (size = 100)

# Run progress: 91.62% complete, ETA 00:48:40
# Fork: 1 of 3
# Warmup Iteration   1: 51.297 ns/op
# Warmup Iteration   2: 50.831 ns/op
# Warmup Iteration   3: 50.912 ns/op
Iteration   1: 50.789 ns/op
Iteration   2: 50.868 ns/op
Iteration   3: 51.560 ns/op
Iteration   4: 50.778 ns/op
Iteration   5: 50.688 ns/op

# Run progress: 91.64% complete, ETA 00:48:31
# Fork: 2 of 3
# Warmup Iteration   1: 51.842 ns/op
# Warmup Iteration   2: 50.894 ns/op
# Warmup Iteration   3: 50.831 ns/op
Iteration   1: 58.191 ns/op
Iteration   2: 52.565 ns/op
Iteration   3: 51.947 ns/op
Iteration   4: 52.245 ns/op
Iteration   5: 53.225 ns/op

# Run progress: 91.67% complete, ETA 00:48:23
# Fork: 3 of 3
# Warmup Iteration   1: 51.208 ns/op
# Warmup Iteration   2: 51.409 ns/op
# Warmup Iteration   3: 51.957 ns/op
Iteration   1: 50.820 ns/op
Iteration   2: 50.800 ns/op
Iteration   3: 50.705 ns/op
Iteration   4: 50.989 ns/op
Iteration   5: 50.796 ns/op


Result "org.openjdk.bench.valhalla.array.sum.InlineOpt.Val_as_Ref_sum":
  51.798 ±(99.9%) 2.075 ns/op [Average]
  (min, avg, max) = (50.688, 51.798, 58.191), stdev = 1.941
  CI (99.9%): [49.723, 53.873] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.sum.InlineOpt.Val_as_Ref_sum
# Parameters: (size = 1000000)

# Run progress: 91.69% complete, ETA 00:48:14
# Fork: 1 of 3
# Warmup Iteration   1: 825751.973 ns/op
# Warmup Iteration   2: 735937.500 ns/op
# Warmup Iteration   3: 841116.424 ns/op
Iteration   1: 777193.652 ns/op
Iteration   2: 776441.776 ns/op
Iteration   3: 777822.205 ns/op
Iteration   4: 796123.550 ns/op
Iteration   5: 725522.230 ns/op

# Run progress: 91.72% complete, ETA 00:48:06
# Fork: 2 of 3
# Warmup Iteration   1: 682504.711 ns/op
# Warmup Iteration   2: 762028.977 ns/op
# Warmup Iteration   3: 781535.958 ns/op
Iteration   1: 788678.441 ns/op
Iteration   2: 732222.283 ns/op
Iteration   3: 742134.811 ns/op
Iteration   4: 772581.995 ns/op
Iteration   5: 766526.699 ns/op

# Run progress: 91.74% complete, ETA 00:47:57
# Fork: 3 of 3
# Warmup Iteration   1: 788037.247 ns/op
# Warmup Iteration   2: 734879.839 ns/op
# Warmup Iteration   3: 823731.324 ns/op
Iteration   1: 842840.301 ns/op
Iteration   2: 788112.992 ns/op
Iteration   3: 839160.783 ns/op
Iteration   4: 822017.155 ns/op
Iteration   5: 810261.804 ns/op


Result "org.openjdk.bench.valhalla.array.sum.InlineOpt.Val_as_Ref_sum":
  783842.712 ±(99.9%) 37532.441 ns/op [Average]
  (min, avg, max) = (725522.230, 783842.712, 842840.301), stdev = 35107.869
  CI (99.9%): [746310.271, 821375.153] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.sum.InlineOpt.Val_as_Val_fields
# Parameters: (size = 100)

# Run progress: 91.76% complete, ETA 00:47:49
# Fork: 1 of 3
# Warmup Iteration   1: 51.088 ns/op
# Warmup Iteration   2: 51.407 ns/op
# Warmup Iteration   3: 50.805 ns/op
Iteration   1: 51.319 ns/op
Iteration   2: 51.698 ns/op
Iteration   3: 50.668 ns/op
Iteration   4: 50.683 ns/op
Iteration   5: 50.856 ns/op

# Run progress: 91.79% complete, ETA 00:47:40
# Fork: 2 of 3
# Warmup Iteration   1: 51.110 ns/op
# Warmup Iteration   2: 50.890 ns/op
# Warmup Iteration   3: 50.683 ns/op
Iteration   1: 50.683 ns/op
Iteration   2: 50.785 ns/op
Iteration   3: 51.028 ns/op
Iteration   4: 50.835 ns/op
Iteration   5: 50.698 ns/op

# Run progress: 91.81% complete, ETA 00:47:32
# Fork: 3 of 3
# Warmup Iteration   1: 51.040 ns/op
# Warmup Iteration   2: 50.935 ns/op
# Warmup Iteration   3: 50.718 ns/op
Iteration   1: 50.725 ns/op
Iteration   2: 51.021 ns/op
Iteration   3: 50.673 ns/op
Iteration   4: 51.822 ns/op
Iteration   5: 54.033 ns/op


Result "org.openjdk.bench.valhalla.array.sum.InlineOpt.Val_as_Val_fields":
  51.169 ±(99.9%) 0.935 ns/op [Average]
  (min, avg, max) = (50.668, 51.169, 54.033), stdev = 0.875
  CI (99.9%): [50.233, 52.104] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.sum.InlineOpt.Val_as_Val_fields
# Parameters: (size = 1000000)

# Run progress: 91.84% complete, ETA 00:47:23
# Fork: 1 of 3
# Warmup Iteration   1: 810501.848 ns/op
# Warmup Iteration   2: 810770.464 ns/op
# Warmup Iteration   3: 852362.218 ns/op
Iteration   1: 812403.805 ns/op
Iteration   2: 802611.034 ns/op
Iteration   3: 802918.067 ns/op
Iteration   4: 751295.167 ns/op
Iteration   5: 752960.456 ns/op

# Run progress: 91.86% complete, ETA 00:47:15
# Fork: 2 of 3
# Warmup Iteration   1: 788936.304 ns/op
# Warmup Iteration   2: 789922.971 ns/op
# Warmup Iteration   3: 789170.150 ns/op
Iteration   1: 723710.524 ns/op
Iteration   2: 745013.807 ns/op
Iteration   3: 794603.162 ns/op
Iteration   4: 794489.724 ns/op
Iteration   5: 798267.476 ns/op

# Run progress: 91.89% complete, ETA 00:47:06
# Fork: 3 of 3
# Warmup Iteration   1: 710434.284 ns/op
# Warmup Iteration   2: 729528.159 ns/op
# Warmup Iteration   3: 788755.888 ns/op
Iteration   1: 790021.978 ns/op
Iteration   2: 791921.699 ns/op
Iteration   3: 731062.637 ns/op
Iteration   4: 755250.437 ns/op
Iteration   5: 799276.536 ns/op


Result "org.openjdk.bench.valhalla.array.sum.InlineOpt.Val_as_Val_fields":
  776387.101 ±(99.9%) 31580.377 ns/op [Average]
  (min, avg, max) = (723710.524, 776387.101, 812403.805), stdev = 29540.304
  CI (99.9%): [744806.724, 807967.478] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.sum.InlineOpt.Val_as_Val_sum
# Parameters: (size = 100)

# Run progress: 91.91% complete, ETA 00:46:58
# Fork: 1 of 3
# Warmup Iteration   1: 51.327 ns/op
# Warmup Iteration   2: 50.708 ns/op
# Warmup Iteration   3: 50.675 ns/op
Iteration   1: 58.854 ns/op
Iteration   2: 50.833 ns/op
Iteration   3: 54.855 ns/op
Iteration   4: 52.474 ns/op
Iteration   5: 51.490 ns/op

# Run progress: 91.94% complete, ETA 00:46:49
# Fork: 2 of 3
# Warmup Iteration   1: 51.267 ns/op
# Warmup Iteration   2: 50.791 ns/op
# Warmup Iteration   3: 50.809 ns/op
Iteration   1: 50.730 ns/op
Iteration   2: 50.704 ns/op
Iteration   3: 50.810 ns/op
Iteration   4: 51.064 ns/op
Iteration   5: 51.037 ns/op

# Run progress: 91.96% complete, ETA 00:46:40
# Fork: 3 of 3
# Warmup Iteration   1: 51.175 ns/op
# Warmup Iteration   2: 50.768 ns/op
# Warmup Iteration   3: 50.734 ns/op
Iteration   1: 50.788 ns/op
Iteration   2: 50.743 ns/op
Iteration   3: 51.947 ns/op
Iteration   4: 50.706 ns/op
Iteration   5: 50.736 ns/op


Result "org.openjdk.bench.valhalla.array.sum.InlineOpt.Val_as_Val_sum":
  51.851 ±(99.9%) 2.382 ns/op [Average]
  (min, avg, max) = (50.704, 51.851, 58.854), stdev = 2.228
  CI (99.9%): [49.470, 54.233] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.sum.InlineOpt.Val_as_Val_sum
# Parameters: (size = 1000000)

# Run progress: 91.99% complete, ETA 00:46:32
# Fork: 1 of 3
# Warmup Iteration   1: 761254.956 ns/op
# Warmup Iteration   2: 775184.867 ns/op
# Warmup Iteration   3: 715543.205 ns/op
Iteration   1: 677572.973 ns/op
Iteration   2: 764186.694 ns/op
Iteration   3: 801424.894 ns/op
Iteration   4: 807680.823 ns/op
Iteration   5: 767833.620 ns/op

# Run progress: 92.01% complete, ETA 00:46:23
# Fork: 2 of 3
# Warmup Iteration   1: 776620.965 ns/op
# Warmup Iteration   2: 839111.030 ns/op
# Warmup Iteration   3: 839382.223 ns/op
Iteration   1: 810273.695 ns/op
Iteration   2: 810223.061 ns/op
Iteration   3: 760975.465 ns/op
Iteration   4: 772953.647 ns/op
Iteration   5: 849445.992 ns/op

# Run progress: 92.03% complete, ETA 00:46:15
# Fork: 3 of 3
# Warmup Iteration   1: 717919.685 ns/op
# Warmup Iteration   2: 747473.827 ns/op
# Warmup Iteration   3: 763294.341 ns/op
Iteration   1: 778036.002 ns/op
Iteration   2: 748894.344 ns/op
Iteration   3: 726309.541 ns/op
Iteration   4: 740386.344 ns/op
Iteration   5: 777832.082 ns/op


Result "org.openjdk.bench.valhalla.array.sum.InlineOpt.Val_as_Val_sum":
  772935.278 ±(99.9%) 44132.420 ns/op [Average]
  (min, avg, max) = (677572.973, 772935.278, 849445.992), stdev = 41281.493
  CI (99.9%): [728802.859, 817067.698] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.sum.Primitive128int.sum
# Parameters: (size = 100)

# Run progress: 92.06% complete, ETA 00:46:06
# Fork: 1 of 3
# Warmup Iteration   1: 103.635 ns/op
# Warmup Iteration   2: 102.858 ns/op
# Warmup Iteration   3: 102.858 ns/op
Iteration   1: 102.823 ns/op
Iteration   2: 102.684 ns/op
Iteration   3: 102.741 ns/op
Iteration   4: 102.691 ns/op
Iteration   5: 102.799 ns/op

# Run progress: 92.08% complete, ETA 00:45:58
# Fork: 2 of 3
# Warmup Iteration   1: 103.217 ns/op
# Warmup Iteration   2: 102.686 ns/op
# Warmup Iteration   3: 102.718 ns/op
Iteration   1: 102.952 ns/op
Iteration   2: 102.684 ns/op
Iteration   3: 102.810 ns/op
Iteration   4: 104.090 ns/op
Iteration   5: 107.046 ns/op

# Run progress: 92.11% complete, ETA 00:45:49
# Fork: 3 of 3
# Warmup Iteration   1: 105.527 ns/op
# Warmup Iteration   2: 104.281 ns/op
# Warmup Iteration   3: 102.704 ns/op
Iteration   1: 102.787 ns/op
Iteration   2: 102.777 ns/op
Iteration   3: 102.667 ns/op
Iteration   4: 102.790 ns/op
Iteration   5: 102.848 ns/op


Result "org.openjdk.bench.valhalla.array.sum.Primitive128int.sum":
  103.146 ±(99.9%) 1.212 ns/op [Average]
  (min, avg, max) = (102.667, 103.146, 107.046), stdev = 1.133
  CI (99.9%): [101.935, 104.358] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.sum.Primitive128int.sum
# Parameters: (size = 1000000)

# Run progress: 92.13% complete, ETA 00:45:41
# Fork: 1 of 3
# Warmup Iteration   1: 1249790.122 ns/op
# Warmup Iteration   2: 1241974.908 ns/op
# Warmup Iteration   3: 1243378.383 ns/op
Iteration   1: 1225726.604 ns/op
Iteration   2: 1244327.498 ns/op
Iteration   3: 1237242.559 ns/op
Iteration   4: 1234755.266 ns/op
Iteration   5: 1246043.721 ns/op

# Run progress: 92.16% complete, ETA 00:45:32
# Fork: 2 of 3
# Warmup Iteration   1: 1251690.800 ns/op
# Warmup Iteration   2: 1244039.557 ns/op
# Warmup Iteration   3: 1241636.926 ns/op
Iteration   1: 1249247.785 ns/op
Iteration   2: 1247045.062 ns/op
Iteration   3: 1242535.107 ns/op
Iteration   4: 1246984.646 ns/op
Iteration   5: 1243695.031 ns/op

# Run progress: 92.18% complete, ETA 00:45:23
# Fork: 3 of 3
# Warmup Iteration   1: 1245624.384 ns/op
# Warmup Iteration   2: 1244050.389 ns/op
# Warmup Iteration   3: 1251581.211 ns/op
Iteration   1: 1247252.932 ns/op
Iteration   2: 1250443.566 ns/op
Iteration   3: 1242091.677 ns/op
Iteration   4: 1243151.510 ns/op
Iteration   5: 1243683.848 ns/op


Result "org.openjdk.bench.valhalla.array.sum.Primitive128int.sum":
  1242948.454 ±(99.9%) 6744.798 ns/op [Average]
  (min, avg, max) = (1225726.604, 1242948.454, 1250443.566), stdev = 6309.088
  CI (99.9%): [1236203.656, 1249693.252] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.sum.Primitive32int.sum
# Parameters: (size = 100)

# Run progress: 92.21% complete, ETA 00:45:15
# Fork: 1 of 3
# Warmup Iteration   1: 16.995 ns/op
# Warmup Iteration   2: 17.092 ns/op
# Warmup Iteration   3: 16.845 ns/op
Iteration   1: 16.849 ns/op
Iteration   2: 16.852 ns/op
Iteration   3: 16.885 ns/op
Iteration   4: 16.874 ns/op
Iteration   5: 16.882 ns/op

# Run progress: 92.23% complete, ETA 00:45:06
# Fork: 2 of 3
# Warmup Iteration   1: 16.987 ns/op
# Warmup Iteration   2: 16.849 ns/op
# Warmup Iteration   3: 16.877 ns/op
Iteration   1: 16.984 ns/op
Iteration   2: 16.842 ns/op
Iteration   3: 16.896 ns/op
Iteration   4: 16.942 ns/op
Iteration   5: 16.866 ns/op

# Run progress: 92.25% complete, ETA 00:44:58
# Fork: 3 of 3
# Warmup Iteration   1: 16.980 ns/op
# Warmup Iteration   2: 16.869 ns/op
# Warmup Iteration   3: 17.054 ns/op
Iteration   1: 16.875 ns/op
Iteration   2: 17.321 ns/op
Iteration   3: 16.855 ns/op
Iteration   4: 16.842 ns/op
Iteration   5: 17.012 ns/op


Result "org.openjdk.bench.valhalla.array.sum.Primitive32int.sum":
  16.918 ±(99.9%) 0.131 ns/op [Average]
  (min, avg, max) = (16.842, 16.918, 17.321), stdev = 0.122
  CI (99.9%): [16.788, 17.049] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.sum.Primitive32int.sum
# Parameters: (size = 1000000)

# Run progress: 92.28% complete, ETA 00:44:49
# Fork: 1 of 3
# Warmup Iteration   1: 314763.976 ns/op
# Warmup Iteration   2: 310326.907 ns/op
# Warmup Iteration   3: 312190.882 ns/op
Iteration   1: 310243.542 ns/op
Iteration   2: 310319.073 ns/op
Iteration   3: 310290.677 ns/op
Iteration   4: 310324.077 ns/op
Iteration   5: 310672.824 ns/op

# Run progress: 92.30% complete, ETA 00:44:41
# Fork: 2 of 3
# Warmup Iteration   1: 311703.816 ns/op
# Warmup Iteration   2: 310595.092 ns/op
# Warmup Iteration   3: 311657.092 ns/op
Iteration   1: 310451.969 ns/op
Iteration   2: 311823.589 ns/op
Iteration   3: 310893.205 ns/op
Iteration   4: 310336.267 ns/op
Iteration   5: 311535.183 ns/op

# Run progress: 92.33% complete, ETA 00:44:32
# Fork: 3 of 3
# Warmup Iteration   1: 312162.689 ns/op
# Warmup Iteration   2: 312790.132 ns/op
# Warmup Iteration   3: 310489.835 ns/op
Iteration   1: 310525.033 ns/op
Iteration   2: 310235.949 ns/op
Iteration   3: 310734.186 ns/op
Iteration   4: 311935.480 ns/op
Iteration   5: 311806.214 ns/op


Result "org.openjdk.bench.valhalla.array.sum.Primitive32int.sum":
  310808.484 ±(99.9%) 680.640 ns/op [Average]
  (min, avg, max) = (310235.949, 310808.484, 311935.480), stdev = 636.671
  CI (99.9%): [310127.844, 311489.125] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.sum.Primitive64byte.sum
# Parameters: (size = 100)

# Run progress: 92.35% complete, ETA 00:44:24
# Fork: 1 of 3
# Warmup Iteration   1: 455.278 ns/op
# Warmup Iteration   2: 452.112 ns/op
# Warmup Iteration   3: 452.028 ns/op
Iteration   1: 471.063 ns/op
Iteration   2: 453.215 ns/op
Iteration   3: 458.928 ns/op
Iteration   4: 502.993 ns/op
Iteration   5: 478.434 ns/op

# Run progress: 92.38% complete, ETA 00:44:15
# Fork: 2 of 3
# Warmup Iteration   1: 507.566 ns/op
# Warmup Iteration   2: 553.486 ns/op
# Warmup Iteration   3: 550.039 ns/op
Iteration   1: 508.068 ns/op
Iteration   2: 509.525 ns/op
Iteration   3: 485.656 ns/op
Iteration   4: 483.584 ns/op
Iteration   5: 453.676 ns/op

# Run progress: 92.40% complete, ETA 00:44:06
# Fork: 3 of 3
# Warmup Iteration   1: 483.953 ns/op
# Warmup Iteration   2: 477.761 ns/op
# Warmup Iteration   3: 517.762 ns/op
Iteration   1: 491.561 ns/op
Iteration   2: 500.540 ns/op
Iteration   3: 544.595 ns/op
Iteration   4: 503.831 ns/op
Iteration   5: 495.304 ns/op


Result "org.openjdk.bench.valhalla.array.sum.Primitive64byte.sum":
  489.398 ±(99.9%) 26.148 ns/op [Average]
  (min, avg, max) = (453.215, 489.398, 544.595), stdev = 24.459
  CI (99.9%): [463.250, 515.546] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.sum.Primitive64byte.sum
# Parameters: (size = 1000000)

# Run progress: 92.43% complete, ETA 00:43:58
# Fork: 1 of 3
# Warmup Iteration   1: 5662243.715 ns/op
# Warmup Iteration   2: 5756760.892 ns/op
# Warmup Iteration   3: 5522616.574 ns/op
Iteration   1: 5516835.383 ns/op
Iteration   2: 5925382.112 ns/op
Iteration   3: 5193069.799 ns/op
Iteration   4: 5205619.872 ns/op
Iteration   5: 5353294.766 ns/op

# Run progress: 92.45% complete, ETA 00:43:49
# Fork: 2 of 3
# Warmup Iteration   1: 4981422.207 ns/op
# Warmup Iteration   2: 4977315.478 ns/op
# Warmup Iteration   3: 5052151.875 ns/op
Iteration   1: 4954337.232 ns/op
Iteration   2: 4959795.173 ns/op
Iteration   3: 5081752.930 ns/op
Iteration   4: 4972896.240 ns/op
Iteration   5: 4952365.809 ns/op

# Run progress: 92.48% complete, ETA 00:43:41
# Fork: 3 of 3
# Warmup Iteration   1: 4968036.765 ns/op
# Warmup Iteration   2: 5334779.605 ns/op
# Warmup Iteration   3: 5334037.681 ns/op
Iteration   1: 5550832.874 ns/op
Iteration   2: 6110964.939 ns/op
Iteration   3: 5050507.085 ns/op
Iteration   4: 5733873.108 ns/op
Iteration   5: 6195067.233 ns/op


Result "org.openjdk.bench.valhalla.array.sum.Primitive64byte.sum":
  5383772.970 ±(99.9%) 464145.529 ns/op [Average]
  (min, avg, max) = (4952365.809, 5383772.970, 6195067.233), stdev = 434162.016
  CI (99.9%): [4919627.442, 5847918.499] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.sum.Primitive64int.sum
# Parameters: (size = 100)

# Run progress: 92.50% complete, ETA 00:43:32
# Fork: 1 of 3
# Warmup Iteration   1: 55.134 ns/op
# Warmup Iteration   2: 54.716 ns/op
# Warmup Iteration   3: 54.665 ns/op
Iteration   1: 49.262 ns/op
Iteration   2: 50.150 ns/op
Iteration   3: 49.336 ns/op
Iteration   4: 50.555 ns/op
Iteration   5: 50.639 ns/op

# Run progress: 92.52% complete, ETA 00:43:24
# Fork: 2 of 3
# Warmup Iteration   1: 44.594 ns/op
# Warmup Iteration   2: 49.917 ns/op
# Warmup Iteration   3: 48.952 ns/op
Iteration   1: 45.060 ns/op
Iteration   2: 41.652 ns/op
Iteration   3: 41.673 ns/op
Iteration   4: 41.651 ns/op
Iteration   5: 43.755 ns/op

# Run progress: 92.55% complete, ETA 00:43:15
# Fork: 3 of 3
# Warmup Iteration   1: 45.142 ns/op
# Warmup Iteration   2: 41.942 ns/op
# Warmup Iteration   3: 43.026 ns/op
Iteration   1: 48.917 ns/op
Iteration   2: 49.915 ns/op
Iteration   3: 45.102 ns/op
Iteration   4: 41.765 ns/op
Iteration   5: 41.681 ns/op


Result "org.openjdk.bench.valhalla.array.sum.Primitive64int.sum":
  46.074 ±(99.9%) 4.090 ns/op [Average]
  (min, avg, max) = (41.651, 46.074, 50.639), stdev = 3.825
  CI (99.9%): [41.984, 50.164] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.sum.Primitive64int.sum
# Parameters: (size = 1000000)

# Run progress: 92.57% complete, ETA 00:43:07
# Fork: 1 of 3
# Warmup Iteration   1: 663632.058 ns/op
# Warmup Iteration   2: 727070.354 ns/op
# Warmup Iteration   3: 676591.851 ns/op
Iteration   1: 726913.040 ns/op
Iteration   2: 806639.845 ns/op
Iteration   3: 659567.256 ns/op
Iteration   4: 747031.724 ns/op
Iteration   5: 812570.083 ns/op

# Run progress: 92.60% complete, ETA 00:42:58
# Fork: 2 of 3
# Warmup Iteration   1: 892188.667 ns/op
# Warmup Iteration   2: 1480865.993 ns/op
# Warmup Iteration   3: 1323601.299 ns/op
Iteration   1: 1293984.448 ns/op
Iteration   2: 1293057.145 ns/op
Iteration   3: 1294135.042 ns/op
Iteration   4: 1306966.558 ns/op
Iteration   5: 1297099.153 ns/op

# Run progress: 92.62% complete, ETA 00:42:49
# Fork: 3 of 3
# Warmup Iteration   1: 1307506.406 ns/op
# Warmup Iteration   2: 1276968.855 ns/op
# Warmup Iteration   3: 1270321.345 ns/op
Iteration   1: 1250425.539 ns/op
Iteration   2: 1292688.725 ns/op
Iteration   3: 1290699.595 ns/op
Iteration   4: 1292458.655 ns/op
Iteration   5: 1293613.226 ns/op


Result "org.openjdk.bench.valhalla.array.sum.Primitive64int.sum":
  1110523.336 ±(99.9%) 284243.037 ns/op [Average]
  (min, avg, max) = (659567.256, 1110523.336, 1306966.558), stdev = 265881.113
  CI (99.9%): [826280.299, 1394766.372] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.sum.Primitive64long.sum0
# Parameters: (size = 100)

# Run progress: 92.65% complete, ETA 00:42:41
# Fork: 1 of 3
# Warmup Iteration   1: 35.684 ns/op
# Warmup Iteration   2: 35.235 ns/op
# Warmup Iteration   3: 35.246 ns/op
Iteration   1: 35.202 ns/op
Iteration   2: 35.225 ns/op
Iteration   3: 35.222 ns/op
Iteration   4: 35.190 ns/op
Iteration   5: 35.250 ns/op

# Run progress: 92.67% complete, ETA 00:42:32
# Fork: 2 of 3
# Warmup Iteration   1: 18.744 ns/op
# Warmup Iteration   2: 21.584 ns/op
# Warmup Iteration   3: 19.025 ns/op
Iteration   1: 16.864 ns/op
Iteration   2: 16.855 ns/op
Iteration   3: 16.962 ns/op
Iteration   4: 16.865 ns/op
Iteration   5: 16.894 ns/op

# Run progress: 92.70% complete, ETA 00:42:24
# Fork: 3 of 3
# Warmup Iteration   1: 17.077 ns/op
# Warmup Iteration   2: 17.206 ns/op
# Warmup Iteration   3: 17.108 ns/op
Iteration   1: 17.009 ns/op
Iteration   2: 17.709 ns/op
Iteration   3: 17.601 ns/op
Iteration   4: 17.048 ns/op
Iteration   5: 17.005 ns/op


Result "org.openjdk.bench.valhalla.array.sum.Primitive64long.sum0":
  23.127 ±(99.9%) 9.465 ns/op [Average]
  (min, avg, max) = (16.855, 23.127, 35.250), stdev = 8.853
  CI (99.9%): [13.662, 32.591] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.sum.Primitive64long.sum0
# Parameters: (size = 1000000)

# Run progress: 92.72% complete, ETA 00:42:15
# Fork: 1 of 3
# Warmup Iteration   1: 311546.835 ns/op
# Warmup Iteration   2: 310540.995 ns/op
# Warmup Iteration   3: 310697.196 ns/op
Iteration   1: 312164.037 ns/op
Iteration   2: 310980.948 ns/op
Iteration   3: 310833.410 ns/op
Iteration   4: 325878.987 ns/op
Iteration   5: 310473.739 ns/op

# Run progress: 92.75% complete, ETA 00:42:07
# Fork: 2 of 3
# Warmup Iteration   1: 312394.905 ns/op
# Warmup Iteration   2: 314997.207 ns/op
# Warmup Iteration   3: 310927.503 ns/op
Iteration   1: 312121.162 ns/op
Iteration   2: 310902.726 ns/op
Iteration   3: 310521.567 ns/op
Iteration   4: 310339.678 ns/op
Iteration   5: 310858.788 ns/op

# Run progress: 92.77% complete, ETA 00:41:58
# Fork: 3 of 3
# Warmup Iteration   1: 312116.466 ns/op
# Warmup Iteration   2: 310184.884 ns/op
# Warmup Iteration   3: 312250.880 ns/op
Iteration   1: 310814.115 ns/op
Iteration   2: 310608.292 ns/op
Iteration   3: 310615.467 ns/op
Iteration   4: 314899.860 ns/op
Iteration   5: 310642.105 ns/op


Result "org.openjdk.bench.valhalla.array.sum.Primitive64long.sum0":
  312176.992 ±(99.9%) 4236.819 ns/op [Average]
  (min, avg, max) = (310339.678, 312176.992, 325878.987), stdev = 3963.123
  CI (99.9%): [307940.173, 316413.811] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.sum.Primitive64long.sum1
# Parameters: (size = 100)

# Run progress: 92.79% complete, ETA 00:41:50
# Fork: 1 of 3
# Warmup Iteration   1: 16.964 ns/op
# Warmup Iteration   2: 16.871 ns/op
# Warmup Iteration   3: 16.937 ns/op
Iteration   1: 16.892 ns/op
Iteration   2: 16.869 ns/op
Iteration   3: 16.869 ns/op
Iteration   4: 16.914 ns/op
Iteration   5: 16.876 ns/op

# Run progress: 92.82% complete, ETA 00:41:41
# Fork: 2 of 3
# Warmup Iteration   1: 17.026 ns/op
# Warmup Iteration   2: 16.890 ns/op
# Warmup Iteration   3: 16.953 ns/op
Iteration   1: 16.890 ns/op
Iteration   2: 16.907 ns/op
Iteration   3: 16.921 ns/op
Iteration   4: 16.971 ns/op
Iteration   5: 16.890 ns/op

# Run progress: 92.84% complete, ETA 00:41:33
# Fork: 3 of 3
# Warmup Iteration   1: 16.930 ns/op
# Warmup Iteration   2: 16.876 ns/op
# Warmup Iteration   3: 16.874 ns/op
Iteration   1: 16.877 ns/op
Iteration   2: 16.966 ns/op
Iteration   3: 17.050 ns/op
Iteration   4: 16.900 ns/op
Iteration   5: 16.869 ns/op


Result "org.openjdk.bench.valhalla.array.sum.Primitive64long.sum1":
  16.911 ±(99.9%) 0.054 ns/op [Average]
  (min, avg, max) = (16.869, 16.911, 17.050), stdev = 0.050
  CI (99.9%): [16.857, 16.964] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.array.sum.Primitive64long.sum1
# Parameters: (size = 1000000)

# Run progress: 92.87% complete, ETA 00:41:24
# Fork: 1 of 3
# Warmup Iteration   1: 311741.812 ns/op
# Warmup Iteration   2: 310574.007 ns/op
# Warmup Iteration   3: 311214.310 ns/op
Iteration   1: 310545.881 ns/op
Iteration   2: 312846.139 ns/op
Iteration   3: 311422.125 ns/op
Iteration   4: 311183.814 ns/op
Iteration   5: 318332.449 ns/op

# Run progress: 92.89% complete, ETA 00:41:16
# Fork: 2 of 3
# Warmup Iteration   1: 315027.271 ns/op
# Warmup Iteration   2: 311751.672 ns/op
# Warmup Iteration   3: 310490.365 ns/op
Iteration   1: 310479.057 ns/op
Iteration   2: 310690.516 ns/op
Iteration   3: 310505.380 ns/op
Iteration   4: 310835.913 ns/op
Iteration   5: 312635.872 ns/op

# Run progress: 92.92% complete, ETA 00:41:07
# Fork: 3 of 3
# Warmup Iteration   1: 314016.860 ns/op
# Warmup Iteration   2: 311954.897 ns/op
# Warmup Iteration   3: 311396.059 ns/op
Iteration   1: 311777.649 ns/op
Iteration   2: 311104.045 ns/op
Iteration   3: 310332.706 ns/op
Iteration   4: 312311.669 ns/op
Iteration   5: 311015.130 ns/op


Result "org.openjdk.bench.valhalla.array.sum.Primitive64long.sum1":
  311734.556 ±(99.9%) 2130.357 ns/op [Average]
  (min, avg, max) = (310332.706, 311734.556, 318332.449), stdev = 1992.737
  CI (99.9%): [309604.200, 313864.913] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.callconv.Inline64byte.Q64byte_args1_targets0

# Run progress: 92.94% complete, ETA 00:40:58
# Fork: 1 of 3
# Warmup Iteration   1: 0.199 ns/op
# Warmup Iteration   2: 0.197 ns/op
# Warmup Iteration   3: 0.197 ns/op
Iteration   1: 0.197 ns/op
Iteration   2: 0.197 ns/op
Iteration   3: 0.197 ns/op
Iteration   4: 0.197 ns/op
Iteration   5: 0.197 ns/op

# Run progress: 92.97% complete, ETA 00:40:50
# Fork: 2 of 3
# Warmup Iteration   1: 0.199 ns/op
# Warmup Iteration   2: 0.204 ns/op
# Warmup Iteration   3: 0.197 ns/op
Iteration   1: 0.197 ns/op
Iteration   2: 0.202 ns/op
Iteration   3: 0.197 ns/op
Iteration   4: 0.198 ns/op
Iteration   5: 0.198 ns/op

# Run progress: 92.99% complete, ETA 00:40:41
# Fork: 3 of 3
# Warmup Iteration   1: 0.198 ns/op
# Warmup Iteration   2: 0.197 ns/op
# Warmup Iteration   3: 0.197 ns/op
Iteration   1: 0.197 ns/op
Iteration   2: 0.197 ns/op
Iteration   3: 0.197 ns/op
Iteration   4: 0.198 ns/op
Iteration   5: 0.197 ns/op


Result "org.openjdk.bench.valhalla.callconv.Inline64byte.Q64byte_args1_targets0":
  0.197 ±(99.9%) 0.001 ns/op [Average]
  (min, avg, max) = (0.197, 0.197, 0.202), stdev = 0.001
  CI (99.9%): [0.196, 0.199] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.callconv.Inline64byte.Q64byte_args1_targets1

# Run progress: 93.01% complete, ETA 00:40:33
# Fork: 1 of 3
# Warmup Iteration   1: 0.286 ns/op
# Warmup Iteration   2: 0.280 ns/op
# Warmup Iteration   3: 0.284 ns/op
Iteration   1: 0.284 ns/op
Iteration   2: 0.284 ns/op
Iteration   3: 0.285 ns/op
Iteration   4: 0.285 ns/op
Iteration   5: 0.285 ns/op

# Run progress: 93.04% complete, ETA 00:40:24
# Fork: 2 of 3
# Warmup Iteration   1: 0.285 ns/op
# Warmup Iteration   2: 0.280 ns/op
# Warmup Iteration   3: 0.283 ns/op
Iteration   1: 0.282 ns/op
Iteration   2: 0.283 ns/op
Iteration   3: 0.286 ns/op
Iteration   4: 0.284 ns/op
Iteration   5: 0.285 ns/op

# Run progress: 93.06% complete, ETA 00:40:16
# Fork: 3 of 3
# Warmup Iteration   1: 0.361 ns/op
# Warmup Iteration   2: 0.421 ns/op
# Warmup Iteration   3: 0.448 ns/op
Iteration   1: 0.398 ns/op
Iteration   2: 0.346 ns/op
Iteration   3: 0.293 ns/op
Iteration   4: 0.284 ns/op
Iteration   5: 0.289 ns/op


Result "org.openjdk.bench.valhalla.callconv.Inline64byte.Q64byte_args1_targets1":
  0.297 ±(99.9%) 0.034 ns/op [Average]
  (min, avg, max) = (0.282, 0.297, 0.398), stdev = 0.032
  CI (99.9%): [0.263, 0.331] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.callconv.Inline64byte.Q64byte_args1_targets2

# Run progress: 93.09% complete, ETA 00:40:07
# Fork: 1 of 3
# Warmup Iteration   1: 0.354 ns/op
# Warmup Iteration   2: 0.350 ns/op
# Warmup Iteration   3: 0.351 ns/op
Iteration   1: 0.365 ns/op
Iteration   2: 0.349 ns/op
Iteration   3: 0.355 ns/op
Iteration   4: 0.352 ns/op
Iteration   5: 0.348 ns/op

# Run progress: 93.11% complete, ETA 00:39:59
# Fork: 2 of 3
# Warmup Iteration   1: 0.353 ns/op
# Warmup Iteration   2: 0.349 ns/op
# Warmup Iteration   3: 0.364 ns/op
Iteration   1: 0.417 ns/op
Iteration   2: 0.453 ns/op
Iteration   3: 0.423 ns/op
Iteration   4: 0.350 ns/op
Iteration   5: 0.361 ns/op

# Run progress: 93.14% complete, ETA 00:39:50
# Fork: 3 of 3
# Warmup Iteration   1: 0.388 ns/op
# Warmup Iteration   2: 0.384 ns/op
# Warmup Iteration   3: 0.368 ns/op
Iteration   1: 0.429 ns/op
Iteration   2: 0.366 ns/op
Iteration   3: 0.405 ns/op
Iteration   4: 0.432 ns/op
Iteration   5: 0.459 ns/op


Result "org.openjdk.bench.valhalla.callconv.Inline64byte.Q64byte_args1_targets2":
  0.391 ±(99.9%) 0.044 ns/op [Average]
  (min, avg, max) = (0.348, 0.391, 0.459), stdev = 0.041
  CI (99.9%): [0.347, 0.435] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.callconv.Inline64byte.Q64byte_args1_targets3

# Run progress: 93.16% complete, ETA 00:39:41
# Fork: 1 of 3
# Warmup Iteration   1: 100.166 ns/op
# Warmup Iteration   2: 95.585 ns/op
# Warmup Iteration   3: 91.168 ns/op
Iteration   1: 88.441 ns/op
Iteration   2: 86.363 ns/op
Iteration   3: 79.488 ns/op
Iteration   4: 79.606 ns/op
Iteration   5: 80.189 ns/op

# Run progress: 93.19% complete, ETA 00:39:33
# Fork: 2 of 3
# Warmup Iteration   1: 79.306 ns/op
# Warmup Iteration   2: 84.110 ns/op
# Warmup Iteration   3: 79.832 ns/op
Iteration   1: 79.899 ns/op
Iteration   2: 83.028 ns/op
Iteration   3: 90.833 ns/op
Iteration   4: 93.750 ns/op
Iteration   5: 79.959 ns/op

# Run progress: 93.21% complete, ETA 00:39:24
# Fork: 3 of 3
# Warmup Iteration   1: 79.748 ns/op
# Warmup Iteration   2: 92.366 ns/op
# Warmup Iteration   3: 94.517 ns/op
Iteration   1: 84.180 ns/op
Iteration   2: 79.618 ns/op
Iteration   3: 80.219 ns/op
Iteration   4: 85.397 ns/op
Iteration   5: 89.679 ns/op


Result "org.openjdk.bench.valhalla.callconv.Inline64byte.Q64byte_args1_targets3":
  84.043 ±(99.9%) 5.135 ns/op [Average]
  (min, avg, max) = (79.488, 84.043, 93.750), stdev = 4.804
  CI (99.9%): [78.908, 89.178] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.callconv.Inline64byte.Q64byte_args2_targets0

# Run progress: 93.24% complete, ETA 00:39:16
# Fork: 1 of 3
# Warmup Iteration   1: 0.222 ns/op
# Warmup Iteration   2: 0.269 ns/op
# Warmup Iteration   3: 0.230 ns/op
Iteration   1: 0.222 ns/op
Iteration   2: 0.250 ns/op
Iteration   3: 0.242 ns/op
Iteration   4: 0.263 ns/op
Iteration   5: 0.251 ns/op

# Run progress: 93.26% complete, ETA 00:39:07
# Fork: 2 of 3
# Warmup Iteration   1: 0.250 ns/op
# Warmup Iteration   2: 0.256 ns/op
# Warmup Iteration   3: 0.262 ns/op
Iteration   1: 0.251 ns/op
Iteration   2: 0.342 ns/op
Iteration   3: 0.420 ns/op
Iteration   4: 0.413 ns/op
Iteration   5: 0.410 ns/op

# Run progress: 93.28% complete, ETA 00:38:59
# Fork: 3 of 3
# Warmup Iteration   1: 0.422 ns/op
# Warmup Iteration   2: 0.411 ns/op
# Warmup Iteration   3: 0.410 ns/op
Iteration   1: 0.410 ns/op
Iteration   2: 0.411 ns/op
Iteration   3: 0.414 ns/op
Iteration   4: 0.411 ns/op
Iteration   5: 0.411 ns/op


Result "org.openjdk.bench.valhalla.callconv.Inline64byte.Q64byte_args2_targets0":
  0.341 ±(99.9%) 0.088 ns/op [Average]
  (min, avg, max) = (0.222, 0.341, 0.420), stdev = 0.083
  CI (99.9%): [0.253, 0.430] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.callconv.Inline64byte.Q64byte_args2_targets1

# Run progress: 93.31% complete, ETA 00:38:50
# Fork: 1 of 3
# Warmup Iteration   1: 0.606 ns/op
# Warmup Iteration   2: 0.589 ns/op
# Warmup Iteration   3: 0.591 ns/op
Iteration   1: 0.591 ns/op
Iteration   2: 0.591 ns/op
Iteration   3: 0.594 ns/op
Iteration   4: 0.591 ns/op
Iteration   5: 0.592 ns/op

# Run progress: 93.33% complete, ETA 00:38:42
# Fork: 2 of 3
# Warmup Iteration   1: 0.310 ns/op
# Warmup Iteration   2: 0.283 ns/op
# Warmup Iteration   3: 0.285 ns/op
Iteration   1: 0.285 ns/op
Iteration   2: 0.285 ns/op
Iteration   3: 0.287 ns/op
Iteration   4: 0.285 ns/op
Iteration   5: 0.292 ns/op

# Run progress: 93.36% complete, ETA 00:38:33
# Fork: 3 of 3
# Warmup Iteration   1: 0.296 ns/op
# Warmup Iteration   2: 0.288 ns/op
# Warmup Iteration   3: 0.283 ns/op
Iteration   1: 0.284 ns/op
Iteration   2: 0.283 ns/op
Iteration   3: 0.283 ns/op
Iteration   4: 0.283 ns/op
Iteration   5: 0.285 ns/op


Result "org.openjdk.bench.valhalla.callconv.Inline64byte.Q64byte_args2_targets1":
  0.387 ±(99.9%) 0.160 ns/op [Average]
  (min, avg, max) = (0.283, 0.387, 0.594), stdev = 0.150
  CI (99.9%): [0.227, 0.547] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.callconv.Inline64byte.Q64byte_args2_targets2

# Run progress: 93.38% complete, ETA 00:38:25
# Fork: 1 of 3
# Warmup Iteration   1: 0.353 ns/op
# Warmup Iteration   2: 0.350 ns/op
# Warmup Iteration   3: 0.351 ns/op
Iteration   1: 0.347 ns/op
Iteration   2: 0.347 ns/op
Iteration   3: 0.350 ns/op
Iteration   4: 0.349 ns/op
Iteration   5: 0.349 ns/op

# Run progress: 93.41% complete, ETA 00:38:16
# Fork: 2 of 3
# Warmup Iteration   1: 0.355 ns/op
# Warmup Iteration   2: 0.349 ns/op
# Warmup Iteration   3: 0.349 ns/op
Iteration   1: 0.348 ns/op
Iteration   2: 0.348 ns/op
Iteration   3: 0.350 ns/op
Iteration   4: 0.348 ns/op
Iteration   5: 0.349 ns/op

# Run progress: 93.43% complete, ETA 00:38:08
# Fork: 3 of 3
# Warmup Iteration   1: 0.354 ns/op
# Warmup Iteration   2: 0.349 ns/op
# Warmup Iteration   3: 0.348 ns/op
Iteration   1: 0.349 ns/op
Iteration   2: 0.349 ns/op
Iteration   3: 0.349 ns/op
Iteration   4: 0.361 ns/op
Iteration   5: 0.353 ns/op


Result "org.openjdk.bench.valhalla.callconv.Inline64byte.Q64byte_args2_targets2":
  0.350 ±(99.9%) 0.004 ns/op [Average]
  (min, avg, max) = (0.347, 0.350, 0.361), stdev = 0.004
  CI (99.9%): [0.346, 0.353] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.callconv.Inline64byte.Q64byte_args2_targets3

# Run progress: 93.46% complete, ETA 00:37:59
# Fork: 1 of 3
# Warmup Iteration   1: 82.132 ns/op
# Warmup Iteration   2: 80.310 ns/op
# Warmup Iteration   3: 78.993 ns/op
Iteration   1: 81.565 ns/op
Iteration   2: 78.432 ns/op
Iteration   3: 79.125 ns/op
Iteration   4: 79.096 ns/op
Iteration   5: 78.904 ns/op

# Run progress: 93.48% complete, ETA 00:37:51
# Fork: 2 of 3
# Warmup Iteration   1: 76.294 ns/op
# Warmup Iteration   2: 80.403 ns/op
# Warmup Iteration   3: 79.192 ns/op
Iteration   1: 79.243 ns/op
Iteration   2: 79.743 ns/op
Iteration   3: 79.684 ns/op
Iteration   4: 79.414 ns/op
Iteration   5: 79.192 ns/op

# Run progress: 93.50% complete, ETA 00:37:42
# Fork: 3 of 3
# Warmup Iteration   1: 79.656 ns/op
# Warmup Iteration   2: 79.413 ns/op
# Warmup Iteration   3: 79.360 ns/op
Iteration   1: 79.257 ns/op
Iteration   2: 79.105 ns/op
Iteration   3: 78.982 ns/op
Iteration   4: 79.195 ns/op
Iteration   5: 80.589 ns/op


Result "org.openjdk.bench.valhalla.callconv.Inline64byte.Q64byte_args2_targets3":
  79.435 ±(99.9%) 0.809 ns/op [Average]
  (min, avg, max) = (78.432, 79.435, 81.565), stdev = 0.757
  CI (99.9%): [78.626, 80.244] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.callconv.Inline64byte.Q64byte_args4_targets0

# Run progress: 93.53% complete, ETA 00:37:33
# Fork: 1 of 3
# Warmup Iteration   1: 0.199 ns/op
# Warmup Iteration   2: 0.198 ns/op
# Warmup Iteration   3: 0.198 ns/op
Iteration   1: 0.207 ns/op
Iteration   2: 0.203 ns/op
Iteration   3: 0.203 ns/op
Iteration   4: 0.210 ns/op
Iteration   5: 0.202 ns/op

# Run progress: 93.55% complete, ETA 00:37:25
# Fork: 2 of 3
# Warmup Iteration   1: 0.200 ns/op
# Warmup Iteration   2: 0.197 ns/op
# Warmup Iteration   3: 0.197 ns/op
Iteration   1: 0.197 ns/op
Iteration   2: 0.197 ns/op
Iteration   3: 0.197 ns/op
Iteration   4: 0.197 ns/op
Iteration   5: 0.198 ns/op

# Run progress: 93.58% complete, ETA 00:37:16
# Fork: 3 of 3
# Warmup Iteration   1: 0.200 ns/op
# Warmup Iteration   2: 0.197 ns/op
# Warmup Iteration   3: 0.197 ns/op
Iteration   1: 0.196 ns/op
Iteration   2: 0.198 ns/op
Iteration   3: 0.197 ns/op
Iteration   4: 0.197 ns/op
Iteration   5: 0.197 ns/op


Result "org.openjdk.bench.valhalla.callconv.Inline64byte.Q64byte_args4_targets0":
  0.200 ±(99.9%) 0.005 ns/op [Average]
  (min, avg, max) = (0.196, 0.200, 0.210), stdev = 0.004
  CI (99.9%): [0.195, 0.204] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.callconv.Inline64byte.Q64byte_args4_targets1

# Run progress: 93.60% complete, ETA 00:37:08
# Fork: 1 of 3
# Warmup Iteration   1: 0.287 ns/op
# Warmup Iteration   2: 0.284 ns/op
# Warmup Iteration   3: 0.284 ns/op
Iteration   1: 0.283 ns/op
Iteration   2: 0.285 ns/op
Iteration   3: 0.284 ns/op
Iteration   4: 0.284 ns/op
Iteration   5: 0.284 ns/op

# Run progress: 93.63% complete, ETA 00:36:59
# Fork: 2 of 3
# Warmup Iteration   1: 0.287 ns/op
# Warmup Iteration   2: 0.290 ns/op
# Warmup Iteration   3: 0.285 ns/op
Iteration   1: 0.293 ns/op
Iteration   2: 0.286 ns/op
Iteration   3: 0.286 ns/op
Iteration   4: 0.285 ns/op
Iteration   5: 0.286 ns/op

# Run progress: 93.65% complete, ETA 00:36:51
# Fork: 3 of 3
# Warmup Iteration   1: 0.289 ns/op
# Warmup Iteration   2: 0.284 ns/op
# Warmup Iteration   3: 0.284 ns/op
Iteration   1: 0.283 ns/op
Iteration   2: 0.287 ns/op
Iteration   3: 0.284 ns/op
Iteration   4: 0.284 ns/op
Iteration   5: 0.284 ns/op


Result "org.openjdk.bench.valhalla.callconv.Inline64byte.Q64byte_args4_targets1":
  0.285 ±(99.9%) 0.002 ns/op [Average]
  (min, avg, max) = (0.283, 0.285, 0.293), stdev = 0.002
  CI (99.9%): [0.283, 0.288] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.callconv.Inline64byte.Q64byte_args4_targets2

# Run progress: 93.68% complete, ETA 00:36:42
# Fork: 1 of 3
# Warmup Iteration   1: 0.356 ns/op
# Warmup Iteration   2: 0.352 ns/op
# Warmup Iteration   3: 0.349 ns/op
Iteration   1: 0.348 ns/op
Iteration   2: 0.355 ns/op
Iteration   3: 0.363 ns/op
Iteration   4: 0.348 ns/op
Iteration   5: 0.349 ns/op

# Run progress: 93.70% complete, ETA 00:36:34
# Fork: 2 of 3
# Warmup Iteration   1: 0.360 ns/op
# Warmup Iteration   2: 0.353 ns/op
# Warmup Iteration   3: 0.348 ns/op
Iteration   1: 0.349 ns/op
Iteration   2: 0.349 ns/op
Iteration   3: 0.349 ns/op
Iteration   4: 0.352 ns/op
Iteration   5: 0.352 ns/op

# Run progress: 93.73% complete, ETA 00:36:25
# Fork: 3 of 3
# Warmup Iteration   1: 0.357 ns/op
# Warmup Iteration   2: 0.354 ns/op
# Warmup Iteration   3: 0.349 ns/op
Iteration   1: 0.372 ns/op
Iteration   2: 0.375 ns/op
Iteration   3: 0.404 ns/op
Iteration   4: 0.719 ns/op
Iteration   5: 0.736 ns/op


Result "org.openjdk.bench.valhalla.callconv.Inline64byte.Q64byte_args4_targets2":
  0.408 ±(99.9%) 0.140 ns/op [Average]
  (min, avg, max) = (0.348, 0.408, 0.736), stdev = 0.131
  CI (99.9%): [0.268, 0.548] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.callconv.Inline64byte.Q64byte_args4_targets3

# Run progress: 93.75% complete, ETA 00:36:16
# Fork: 1 of 3
# Warmup Iteration   1: 118.584 ns/op
# Warmup Iteration   2: 80.066 ns/op
# Warmup Iteration   3: 80.591 ns/op
Iteration   1: 80.608 ns/op
Iteration   2: 80.440 ns/op
Iteration   3: 80.045 ns/op
Iteration   4: 80.176 ns/op
Iteration   5: 80.305 ns/op

# Run progress: 93.77% complete, ETA 00:36:08
# Fork: 2 of 3
# Warmup Iteration   1: 77.366 ns/op
# Warmup Iteration   2: 80.463 ns/op
# Warmup Iteration   3: 80.819 ns/op
Iteration   1: 80.782 ns/op
Iteration   2: 80.667 ns/op
Iteration   3: 80.433 ns/op
Iteration   4: 80.095 ns/op
Iteration   5: 80.696 ns/op

# Run progress: 93.80% complete, ETA 00:35:59
# Fork: 3 of 3
# Warmup Iteration   1: 80.968 ns/op
# Warmup Iteration   2: 81.274 ns/op
# Warmup Iteration   3: 80.733 ns/op
Iteration   1: 80.664 ns/op
Iteration   2: 81.347 ns/op
Iteration   3: 81.249 ns/op
Iteration   4: 81.435 ns/op
Iteration   5: 100.931 ns/op


Result "org.openjdk.bench.valhalla.callconv.Inline64byte.Q64byte_args4_targets3":
  81.992 ±(99.9%) 5.620 ns/op [Average]
  (min, avg, max) = (80.045, 81.992, 100.931), stdev = 5.257
  CI (99.9%): [76.371, 87.612] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.callconv.Inline64byte.Q64byte_args8_targets0

# Run progress: 93.82% complete, ETA 00:35:51
# Fork: 1 of 3
# Warmup Iteration   1: 0.479 ns/op
# Warmup Iteration   2: 0.423 ns/op
# Warmup Iteration   3: 0.420 ns/op
Iteration   1: 0.288 ns/op
Iteration   2: 0.199 ns/op
Iteration   3: 0.198 ns/op
Iteration   4: 0.198 ns/op
Iteration   5: 0.199 ns/op

# Run progress: 93.85% complete, ETA 00:35:42
# Fork: 2 of 3
# Warmup Iteration   1: 0.199 ns/op
# Warmup Iteration   2: 0.197 ns/op
# Warmup Iteration   3: 0.197 ns/op
Iteration   1: 0.197 ns/op
Iteration   2: 0.197 ns/op
Iteration   3: 0.197 ns/op
Iteration   4: 0.199 ns/op
Iteration   5: 0.196 ns/op

# Run progress: 93.87% complete, ETA 00:35:34
# Fork: 3 of 3
# Warmup Iteration   1: 0.199 ns/op
# Warmup Iteration   2: 0.197 ns/op
# Warmup Iteration   3: 0.197 ns/op
Iteration   1: 0.197 ns/op
Iteration   2: 0.197 ns/op
Iteration   3: 0.197 ns/op
Iteration   4: 0.197 ns/op
Iteration   5: 0.197 ns/op


Result "org.openjdk.bench.valhalla.callconv.Inline64byte.Q64byte_args8_targets0":
  0.204 ±(99.9%) 0.025 ns/op [Average]
  (min, avg, max) = (0.196, 0.204, 0.288), stdev = 0.024
  CI (99.9%): [0.178, 0.229] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.callconv.Inline64byte.Q64byte_args8_targets1

# Run progress: 93.90% complete, ETA 00:35:25
# Fork: 1 of 3
# Warmup Iteration   1: 0.295 ns/op
# Warmup Iteration   2: 0.291 ns/op
# Warmup Iteration   3: 0.285 ns/op
Iteration   1: 0.302 ns/op
Iteration   2: 0.288 ns/op
Iteration   3: 0.287 ns/op
Iteration   4: 0.285 ns/op
Iteration   5: 0.285 ns/op

# Run progress: 93.92% complete, ETA 00:35:17
# Fork: 2 of 3
# Warmup Iteration   1: 0.292 ns/op
# Warmup Iteration   2: 0.297 ns/op
# Warmup Iteration   3: 0.289 ns/op
Iteration   1: 0.286 ns/op
Iteration   2: 0.286 ns/op
Iteration   3: 0.289 ns/op
Iteration   4: 0.286 ns/op
Iteration   5: 0.289 ns/op

# Run progress: 93.95% complete, ETA 00:35:08
# Fork: 3 of 3
# Warmup Iteration   1: 0.293 ns/op
# Warmup Iteration   2: 0.289 ns/op
# Warmup Iteration   3: 0.287 ns/op
Iteration   1: 0.290 ns/op
Iteration   2: 0.287 ns/op
Iteration   3: 0.285 ns/op
Iteration   4: 0.285 ns/op
Iteration   5: 0.292 ns/op


Result "org.openjdk.bench.valhalla.callconv.Inline64byte.Q64byte_args8_targets1":
  0.288 ±(99.9%) 0.005 ns/op [Average]
  (min, avg, max) = (0.285, 0.288, 0.302), stdev = 0.004
  CI (99.9%): [0.284, 0.293] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.callconv.Inline64byte.Q64byte_args8_targets2

# Run progress: 93.97% complete, ETA 00:35:00
# Fork: 1 of 3
# Warmup Iteration   1: 0.360 ns/op
# Warmup Iteration   2: 0.356 ns/op
# Warmup Iteration   3: 0.358 ns/op
Iteration   1: 0.352 ns/op
Iteration   2: 0.352 ns/op
Iteration   3: 0.358 ns/op
Iteration   4: 0.352 ns/op
Iteration   5: 0.353 ns/op

# Run progress: 94.00% complete, ETA 00:34:51
# Fork: 2 of 3
# Warmup Iteration   1: 0.363 ns/op
# Warmup Iteration   2: 0.356 ns/op
# Warmup Iteration   3: 0.353 ns/op
Iteration   1: 0.351 ns/op
Iteration   2: 0.351 ns/op
Iteration   3: 0.352 ns/op
Iteration   4: 0.356 ns/op
Iteration   5: 0.588 ns/op

# Run progress: 94.02% complete, ETA 00:34:42
# Fork: 3 of 3
# Warmup Iteration   1: 0.377 ns/op
# Warmup Iteration   2: 0.371 ns/op
# Warmup Iteration   3: 0.355 ns/op
Iteration   1: 0.353 ns/op
Iteration   2: 0.360 ns/op
Iteration   3: 0.357 ns/op
Iteration   4: 0.353 ns/op
Iteration   5: 0.353 ns/op


Result "org.openjdk.bench.valhalla.callconv.Inline64byte.Q64byte_args8_targets2":
  0.369 ±(99.9%) 0.065 ns/op [Average]
  (min, avg, max) = (0.351, 0.369, 0.588), stdev = 0.061
  CI (99.9%): [0.305, 0.434] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.callconv.Inline64byte.Q64byte_args8_targets3

# Run progress: 94.04% complete, ETA 00:34:34
# Fork: 1 of 3
# Warmup Iteration   1: 83.867 ns/op
# Warmup Iteration   2: 84.130 ns/op
# Warmup Iteration   3: 85.510 ns/op
Iteration   1: 84.150 ns/op
Iteration   2: 85.240 ns/op
Iteration   3: 96.210 ns/op
Iteration   4: 87.751 ns/op
Iteration   5: 85.936 ns/op

# Run progress: 94.07% complete, ETA 00:34:25
# Fork: 2 of 3
# Warmup Iteration   1: 84.414 ns/op
# Warmup Iteration   2: 83.624 ns/op
# Warmup Iteration   3: 83.741 ns/op
Iteration   1: 104.246 ns/op
Iteration   2: 85.362 ns/op
Iteration   3: 85.999 ns/op
Iteration   4: 90.328 ns/op
Iteration   5: 87.484 ns/op

# Run progress: 94.09% complete, ETA 00:34:17
# Fork: 3 of 3
# Warmup Iteration   1: 89.698 ns/op
# Warmup Iteration   2: 85.998 ns/op
# Warmup Iteration   3: 88.952 ns/op
Iteration   1: 111.018 ns/op
Iteration   2: 96.941 ns/op
Iteration   3: 111.455 ns/op
Iteration   4: 128.139 ns/op
Iteration   5: 140.443 ns/op


Result "org.openjdk.bench.valhalla.callconv.Inline64byte.Q64byte_args8_targets3":
  98.714 ±(99.9%) 18.460 ns/op [Average]
  (min, avg, max) = (84.150, 98.714, 140.443), stdev = 17.268
  CI (99.9%): [80.253, 117.174] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.callconv.Inline64int.Q64int_args1_targets0

# Run progress: 94.12% complete, ETA 00:34:08
# Fork: 1 of 3
# Warmup Iteration   1: 0.226 ns/op
# Warmup Iteration   2: 0.299 ns/op
# Warmup Iteration   3: 0.247 ns/op
Iteration   1: 0.264 ns/op
Iteration   2: 0.247 ns/op
Iteration   3: 0.228 ns/op
Iteration   4: 0.207 ns/op
Iteration   5: 0.222 ns/op

# Run progress: 94.14% complete, ETA 00:34:00
# Fork: 2 of 3
# Warmup Iteration   1: 0.198 ns/op
# Warmup Iteration   2: 0.198 ns/op
# Warmup Iteration   3: 0.197 ns/op
Iteration   1: 0.198 ns/op
Iteration   2: 0.198 ns/op
Iteration   3: 0.199 ns/op
Iteration   4: 0.212 ns/op
Iteration   5: 0.207 ns/op

# Run progress: 94.17% complete, ETA 00:33:51
# Fork: 3 of 3
# Warmup Iteration   1: 0.200 ns/op
# Warmup Iteration   2: 0.196 ns/op
# Warmup Iteration   3: 0.196 ns/op
Iteration   1: 0.198 ns/op
Iteration   2: 0.198 ns/op
Iteration   3: 0.197 ns/op
Iteration   4: 0.198 ns/op
Iteration   5: 0.197 ns/op


Result "org.openjdk.bench.valhalla.callconv.Inline64int.Q64int_args1_targets0":
  0.211 ±(99.9%) 0.022 ns/op [Average]
  (min, avg, max) = (0.197, 0.211, 0.264), stdev = 0.021
  CI (99.9%): [0.189, 0.233] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.callconv.Inline64int.Q64int_args1_targets1

# Run progress: 94.19% complete, ETA 00:33:43
# Fork: 1 of 3
# Warmup Iteration   1: 0.285 ns/op
# Warmup Iteration   2: 0.337 ns/op
# Warmup Iteration   3: 0.270 ns/op
Iteration   1: 0.287 ns/op
Iteration   2: 0.285 ns/op
Iteration   3: 0.268 ns/op
Iteration   4: 0.267 ns/op
Iteration   5: 0.268 ns/op

# Run progress: 94.22% complete, ETA 00:33:34
# Fork: 2 of 3
# Warmup Iteration   1: 0.271 ns/op
# Warmup Iteration   2: 0.268 ns/op
# Warmup Iteration   3: 0.267 ns/op
Iteration   1: 0.269 ns/op
Iteration   2: 0.268 ns/op
Iteration   3: 0.269 ns/op
Iteration   4: 0.267 ns/op
Iteration   5: 0.269 ns/op

# Run progress: 94.24% complete, ETA 00:33:26
# Fork: 3 of 3
# Warmup Iteration   1: 0.272 ns/op
# Warmup Iteration   2: 0.272 ns/op
# Warmup Iteration   3: 0.269 ns/op
Iteration   1: 0.270 ns/op
Iteration   2: 0.268 ns/op
Iteration   3: 0.266 ns/op
Iteration   4: 0.267 ns/op
Iteration   5: 0.268 ns/op


Result "org.openjdk.bench.valhalla.callconv.Inline64int.Q64int_args1_targets1":
  0.270 ±(99.9%) 0.007 ns/op [Average]
  (min, avg, max) = (0.266, 0.270, 0.287), stdev = 0.006
  CI (99.9%): [0.264, 0.277] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.callconv.Inline64int.Q64int_args1_targets2

# Run progress: 94.26% complete, ETA 00:33:18
# Fork: 1 of 3
# Warmup Iteration   1: 0.355 ns/op
# Warmup Iteration   2: 0.350 ns/op
# Warmup Iteration   3: 0.346 ns/op
Iteration   1: 0.347 ns/op
Iteration   2: 0.349 ns/op
Iteration   3: 0.349 ns/op
Iteration   4: 0.350 ns/op
Iteration   5: 0.347 ns/op

# Run progress: 94.29% complete, ETA 00:33:09
# Fork: 2 of 3
# Warmup Iteration   1: 0.352 ns/op
# Warmup Iteration   2: 0.349 ns/op
# Warmup Iteration   3: 0.348 ns/op
Iteration   1: 0.347 ns/op
Iteration   2: 0.347 ns/op
Iteration   3: 0.348 ns/op
Iteration   4: 0.345 ns/op
Iteration   5: 0.345 ns/op

# Run progress: 94.31% complete, ETA 00:33:00
# Fork: 3 of 3
# Warmup Iteration   1: 0.352 ns/op
# Warmup Iteration   2: 0.346 ns/op
# Warmup Iteration   3: 0.344 ns/op
Iteration   1: 0.344 ns/op
Iteration   2: 0.346 ns/op
Iteration   3: 0.342 ns/op
Iteration   4: 0.340 ns/op
Iteration   5: 0.341 ns/op


Result "org.openjdk.bench.valhalla.callconv.Inline64int.Q64int_args1_targets2":
  0.346 ±(99.9%) 0.003 ns/op [Average]
  (min, avg, max) = (0.340, 0.346, 0.350), stdev = 0.003
  CI (99.9%): [0.342, 0.349] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.callconv.Inline64int.Q64int_args1_targets3

# Run progress: 94.34% complete, ETA 00:32:52
# Fork: 1 of 3
# Warmup Iteration   1: 77.669 ns/op
# Warmup Iteration   2: 77.566 ns/op
# Warmup Iteration   3: 77.447 ns/op
Iteration   1: 77.064 ns/op
Iteration   2: 77.092 ns/op
Iteration   3: 76.518 ns/op
Iteration   4: 77.119 ns/op
Iteration   5: 76.686 ns/op

# Run progress: 94.36% complete, ETA 00:32:43
# Fork: 2 of 3
# Warmup Iteration   1: 76.909 ns/op
# Warmup Iteration   2: 76.935 ns/op
# Warmup Iteration   3: 75.819 ns/op
Iteration   1: 75.642 ns/op
Iteration   2: 75.113 ns/op
Iteration   3: 76.224 ns/op
Iteration   4: 75.722 ns/op
Iteration   5: 76.373 ns/op

# Run progress: 94.39% complete, ETA 00:32:35
# Fork: 3 of 3
# Warmup Iteration   1: 76.847 ns/op
# Warmup Iteration   2: 76.804 ns/op
# Warmup Iteration   3: 76.555 ns/op
Iteration   1: 76.395 ns/op
Iteration   2: 76.516 ns/op
Iteration   3: 76.746 ns/op
Iteration   4: 76.240 ns/op
Iteration   5: 76.740 ns/op


Result "org.openjdk.bench.valhalla.callconv.Inline64int.Q64int_args1_targets3":
  76.413 ±(99.9%) 0.608 ns/op [Average]
  (min, avg, max) = (75.113, 76.413, 77.119), stdev = 0.568
  CI (99.9%): [75.805, 77.021] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.callconv.Inline64int.Q64int_args2_targets0

# Run progress: 94.41% complete, ETA 00:32:26
# Fork: 1 of 3
# Warmup Iteration   1: 0.198 ns/op
# Warmup Iteration   2: 0.196 ns/op
# Warmup Iteration   3: 0.192 ns/op
Iteration   1: 0.192 ns/op
Iteration   2: 0.192 ns/op
Iteration   3: 0.192 ns/op
Iteration   4: 0.192 ns/op
Iteration   5: 0.193 ns/op

# Run progress: 94.44% complete, ETA 00:32:18
# Fork: 2 of 3
# Warmup Iteration   1: 0.194 ns/op
# Warmup Iteration   2: 0.193 ns/op
# Warmup Iteration   3: 0.192 ns/op
Iteration   1: 0.191 ns/op
Iteration   2: 0.192 ns/op
Iteration   3: 0.196 ns/op
Iteration   4: 0.196 ns/op
Iteration   5: 0.196 ns/op

# Run progress: 94.46% complete, ETA 00:32:09
# Fork: 3 of 3
# Warmup Iteration   1: 0.195 ns/op
# Warmup Iteration   2: 0.193 ns/op
# Warmup Iteration   3: 0.193 ns/op
Iteration   1: 0.194 ns/op
Iteration   2: 0.193 ns/op
Iteration   3: 0.193 ns/op
Iteration   4: 0.192 ns/op
Iteration   5: 0.192 ns/op


Result "org.openjdk.bench.valhalla.callconv.Inline64int.Q64int_args2_targets0":
  0.193 ±(99.9%) 0.002 ns/op [Average]
  (min, avg, max) = (0.191, 0.193, 0.196), stdev = 0.002
  CI (99.9%): [0.191, 0.195] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.callconv.Inline64int.Q64int_args2_targets1

# Run progress: 94.49% complete, ETA 00:32:01
# Fork: 1 of 3
# Warmup Iteration   1: 0.269 ns/op
# Warmup Iteration   2: 0.266 ns/op
# Warmup Iteration   3: 0.262 ns/op
Iteration   1: 0.264 ns/op
Iteration   2: 0.260 ns/op
Iteration   3: 0.264 ns/op
Iteration   4: 0.261 ns/op
Iteration   5: 0.261 ns/op

# Run progress: 94.51% complete, ETA 00:31:52
# Fork: 2 of 3
# Warmup Iteration   1: 0.266 ns/op
# Warmup Iteration   2: 0.265 ns/op
# Warmup Iteration   3: 0.262 ns/op
Iteration   1: 0.263 ns/op
Iteration   2: 0.263 ns/op
Iteration   3: 0.263 ns/op
Iteration   4: 0.261 ns/op
Iteration   5: 0.261 ns/op

# Run progress: 94.53% complete, ETA 00:31:43
# Fork: 3 of 3
# Warmup Iteration   1: 0.265 ns/op
# Warmup Iteration   2: 0.264 ns/op
# Warmup Iteration   3: 0.263 ns/op
Iteration   1: 0.261 ns/op
Iteration   2: 0.263 ns/op
Iteration   3: 0.263 ns/op
Iteration   4: 0.263 ns/op
Iteration   5: 0.263 ns/op


Result "org.openjdk.bench.valhalla.callconv.Inline64int.Q64int_args2_targets1":
  0.262 ±(99.9%) 0.001 ns/op [Average]
  (min, avg, max) = (0.260, 0.262, 0.264), stdev = 0.001
  CI (99.9%): [0.261, 0.264] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.callconv.Inline64int.Q64int_args2_targets2

# Run progress: 94.56% complete, ETA 00:31:35
# Fork: 1 of 3
# Warmup Iteration   1: 0.343 ns/op
# Warmup Iteration   2: 0.342 ns/op
# Warmup Iteration   3: 0.339 ns/op
Iteration   1: 0.339 ns/op
Iteration   2: 0.335 ns/op
Iteration   3: 0.339 ns/op
Iteration   4: 0.339 ns/op
Iteration   5: 0.339 ns/op

# Run progress: 94.58% complete, ETA 00:31:26
# Fork: 2 of 3
# Warmup Iteration   1: 0.341 ns/op
# Warmup Iteration   2: 0.338 ns/op
# Warmup Iteration   3: 0.335 ns/op
Iteration   1: 0.337 ns/op
Iteration   2: 0.342 ns/op
Iteration   3: 0.344 ns/op
Iteration   4: 0.344 ns/op
Iteration   5: 0.339 ns/op

# Run progress: 94.61% complete, ETA 00:31:18
# Fork: 3 of 3
# Warmup Iteration   1: 0.343 ns/op
# Warmup Iteration   2: 0.339 ns/op
# Warmup Iteration   3: 0.338 ns/op
Iteration   1: 0.339 ns/op
Iteration   2: 0.340 ns/op
Iteration   3: 0.339 ns/op
Iteration   4: 0.338 ns/op
Iteration   5: 0.337 ns/op


Result "org.openjdk.bench.valhalla.callconv.Inline64int.Q64int_args2_targets2":
  0.339 ±(99.9%) 0.003 ns/op [Average]
  (min, avg, max) = (0.335, 0.339, 0.344), stdev = 0.003
  CI (99.9%): [0.337, 0.342] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.callconv.Inline64int.Q64int_args2_targets3

# Run progress: 94.63% complete, ETA 00:31:09
# Fork: 1 of 3
# Warmup Iteration   1: 73.077 ns/op
# Warmup Iteration   2: 76.970 ns/op
# Warmup Iteration   3: 76.207 ns/op
Iteration   1: 76.385 ns/op
Iteration   2: 75.563 ns/op
Iteration   3: 76.549 ns/op
Iteration   4: 76.096 ns/op
Iteration   5: 76.143 ns/op

# Run progress: 94.66% complete, ETA 00:31:01
# Fork: 2 of 3
# Warmup Iteration   1: 76.448 ns/op
# Warmup Iteration   2: 77.044 ns/op
# Warmup Iteration   3: 76.396 ns/op
Iteration   1: 76.236 ns/op
Iteration   2: 76.388 ns/op
Iteration   3: 76.662 ns/op
Iteration   4: 76.231 ns/op
Iteration   5: 76.565 ns/op

# Run progress: 94.68% complete, ETA 00:30:52
# Fork: 3 of 3
# Warmup Iteration   1: 76.329 ns/op
# Warmup Iteration   2: 76.223 ns/op
# Warmup Iteration   3: 75.126 ns/op
Iteration   1: 76.421 ns/op
Iteration   2: 75.669 ns/op
Iteration   3: 76.229 ns/op
Iteration   4: 76.402 ns/op
Iteration   5: 75.900 ns/op


Result "org.openjdk.bench.valhalla.callconv.Inline64int.Q64int_args2_targets3":
  76.229 ±(99.9%) 0.339 ns/op [Average]
  (min, avg, max) = (75.563, 76.229, 76.662), stdev = 0.317
  CI (99.9%): [75.890, 76.569] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.callconv.Inline64int.Q64int_args4_targets0

# Run progress: 94.71% complete, ETA 00:30:44
# Fork: 1 of 3
# Warmup Iteration   1: 0.193 ns/op
# Warmup Iteration   2: 0.191 ns/op
# Warmup Iteration   3: 0.191 ns/op
Iteration   1: 0.192 ns/op
Iteration   2: 0.193 ns/op
Iteration   3: 0.193 ns/op
Iteration   4: 0.192 ns/op
Iteration   5: 0.193 ns/op

# Run progress: 94.73% complete, ETA 00:30:35
# Fork: 2 of 3
# Warmup Iteration   1: 0.194 ns/op
# Warmup Iteration   2: 0.191 ns/op
# Warmup Iteration   3: 0.193 ns/op
Iteration   1: 0.192 ns/op
Iteration   2: 0.192 ns/op
Iteration   3: 0.196 ns/op
Iteration   4: 0.196 ns/op
Iteration   5: 0.196 ns/op

# Run progress: 94.75% complete, ETA 00:30:26
# Fork: 3 of 3
# Warmup Iteration   1: 0.195 ns/op
# Warmup Iteration   2: 0.193 ns/op
# Warmup Iteration   3: 0.193 ns/op
Iteration   1: 0.192 ns/op
Iteration   2: 0.192 ns/op
Iteration   3: 0.193 ns/op
Iteration   4: 0.192 ns/op
Iteration   5: 0.189 ns/op


Result "org.openjdk.bench.valhalla.callconv.Inline64int.Q64int_args4_targets0":
  0.193 ±(99.9%) 0.002 ns/op [Average]
  (min, avg, max) = (0.189, 0.193, 0.196), stdev = 0.002
  CI (99.9%): [0.191, 0.195] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.callconv.Inline64int.Q64int_args4_targets1

# Run progress: 94.78% complete, ETA 00:30:18
# Fork: 1 of 3
# Warmup Iteration   1: 0.268 ns/op
# Warmup Iteration   2: 0.265 ns/op
# Warmup Iteration   3: 0.265 ns/op
Iteration   1: 0.266 ns/op
Iteration   2: 0.268 ns/op
Iteration   3: 0.268 ns/op
Iteration   4: 0.267 ns/op
Iteration   5: 0.265 ns/op

# Run progress: 94.80% complete, ETA 00:30:09
# Fork: 2 of 3
# Warmup Iteration   1: 0.269 ns/op
# Warmup Iteration   2: 0.267 ns/op
# Warmup Iteration   3: 0.268 ns/op
Iteration   1: 0.265 ns/op
Iteration   2: 0.266 ns/op
Iteration   3: 0.269 ns/op
Iteration   4: 0.270 ns/op
Iteration   5: 0.267 ns/op

# Run progress: 94.83% complete, ETA 00:30:01
# Fork: 3 of 3
# Warmup Iteration   1: 0.271 ns/op
# Warmup Iteration   2: 0.267 ns/op
# Warmup Iteration   3: 0.266 ns/op
Iteration   1: 0.269 ns/op
Iteration   2: 0.268 ns/op
Iteration   3: 0.268 ns/op
Iteration   4: 0.266 ns/op
Iteration   5: 0.266 ns/op


Result "org.openjdk.bench.valhalla.callconv.Inline64int.Q64int_args4_targets1":
  0.267 ±(99.9%) 0.002 ns/op [Average]
  (min, avg, max) = (0.265, 0.267, 0.270), stdev = 0.001
  CI (99.9%): [0.266, 0.269] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.callconv.Inline64int.Q64int_args4_targets2

# Run progress: 94.85% complete, ETA 00:29:52
# Fork: 1 of 3
# Warmup Iteration   1: 0.345 ns/op
# Warmup Iteration   2: 0.346 ns/op
# Warmup Iteration   3: 0.337 ns/op
Iteration   1: 0.337 ns/op
Iteration   2: 0.335 ns/op
Iteration   3: 0.338 ns/op
Iteration   4: 0.340 ns/op
Iteration   5: 0.338 ns/op

# Run progress: 94.88% complete, ETA 00:29:44
# Fork: 2 of 3
# Warmup Iteration   1: 0.346 ns/op
# Warmup Iteration   2: 0.341 ns/op
# Warmup Iteration   3: 0.343 ns/op
Iteration   1: 0.346 ns/op
Iteration   2: 0.343 ns/op
Iteration   3: 0.335 ns/op
Iteration   4: 0.335 ns/op
Iteration   5: 0.341 ns/op

# Run progress: 94.90% complete, ETA 00:29:35
# Fork: 3 of 3
# Warmup Iteration   1: 0.345 ns/op
# Warmup Iteration   2: 0.345 ns/op
# Warmup Iteration   3: 0.340 ns/op
Iteration   1: 0.339 ns/op
Iteration   2: 0.335 ns/op
Iteration   3: 0.336 ns/op
Iteration   4: 0.338 ns/op
Iteration   5: 0.342 ns/op


Result "org.openjdk.bench.valhalla.callconv.Inline64int.Q64int_args4_targets2":
  0.338 ±(99.9%) 0.004 ns/op [Average]
  (min, avg, max) = (0.335, 0.338, 0.346), stdev = 0.003
  CI (99.9%): [0.335, 0.342] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.callconv.Inline64int.Q64int_args4_targets3

# Run progress: 94.93% complete, ETA 00:29:27
# Fork: 1 of 3
# Warmup Iteration   1: 73.767 ns/op
# Warmup Iteration   2: 77.776 ns/op
# Warmup Iteration   3: 78.947 ns/op
Iteration   1: 78.365 ns/op
Iteration   2: 78.257 ns/op
Iteration   3: 77.714 ns/op
Iteration   4: 78.087 ns/op
Iteration   5: 78.026 ns/op

# Run progress: 94.95% complete, ETA 00:29:18
# Fork: 2 of 3
# Warmup Iteration   1: 73.418 ns/op
# Warmup Iteration   2: 77.282 ns/op
# Warmup Iteration   3: 78.009 ns/op
Iteration   1: 79.579 ns/op
Iteration   2: 78.619 ns/op
Iteration   3: 77.443 ns/op
Iteration   4: 77.237 ns/op
Iteration   5: 78.250 ns/op

# Run progress: 94.98% complete, ETA 00:29:09
# Fork: 3 of 3
# Warmup Iteration   1: 75.850 ns/op
# Warmup Iteration   2: 79.663 ns/op
# Warmup Iteration   3: 80.342 ns/op
Iteration   1: 79.566 ns/op
Iteration   2: 78.389 ns/op
Iteration   3: 78.166 ns/op
Iteration   4: 77.151 ns/op
Iteration   5: 77.417 ns/op


Result "org.openjdk.bench.valhalla.callconv.Inline64int.Q64int_args4_targets3":
  78.151 ±(99.9%) 0.781 ns/op [Average]
  (min, avg, max) = (77.151, 78.151, 79.579), stdev = 0.731
  CI (99.9%): [77.370, 78.932] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.callconv.Inline64int.Q64int_args8_targets0

# Run progress: 95.00% complete, ETA 00:29:01
# Fork: 1 of 3
# Warmup Iteration   1: 0.192 ns/op
# Warmup Iteration   2: 0.193 ns/op
# Warmup Iteration   3: 0.192 ns/op
Iteration   1: 0.191 ns/op
Iteration   2: 0.193 ns/op
Iteration   3: 0.196 ns/op
Iteration   4: 0.195 ns/op
Iteration   5: 0.197 ns/op

# Run progress: 95.02% complete, ETA 00:28:52
# Fork: 2 of 3
# Warmup Iteration   1: 0.192 ns/op
# Warmup Iteration   2: 0.190 ns/op
# Warmup Iteration   3: 0.190 ns/op
Iteration   1: 0.190 ns/op
Iteration   2: 0.190 ns/op
Iteration   3: 0.190 ns/op
Iteration   4: 0.190 ns/op
Iteration   5: 0.190 ns/op

# Run progress: 95.05% complete, ETA 00:28:44
# Fork: 3 of 3
# Warmup Iteration   1: 0.192 ns/op
# Warmup Iteration   2: 0.190 ns/op
# Warmup Iteration   3: 0.189 ns/op
Iteration   1: 0.190 ns/op
Iteration   2: 0.190 ns/op
Iteration   3: 0.190 ns/op
Iteration   4: 0.190 ns/op
Iteration   5: 0.190 ns/op


Result "org.openjdk.bench.valhalla.callconv.Inline64int.Q64int_args8_targets0":
  0.191 ±(99.9%) 0.003 ns/op [Average]
  (min, avg, max) = (0.190, 0.191, 0.197), stdev = 0.003
  CI (99.9%): [0.189, 0.194] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.callconv.Inline64int.Q64int_args8_targets1

# Run progress: 95.07% complete, ETA 00:28:35
# Fork: 1 of 3
# Warmup Iteration   1: 0.272 ns/op
# Warmup Iteration   2: 0.269 ns/op
# Warmup Iteration   3: 0.269 ns/op
Iteration   1: 0.268 ns/op
Iteration   2: 0.269 ns/op
Iteration   3: 0.268 ns/op
Iteration   4: 0.269 ns/op
Iteration   5: 0.269 ns/op

# Run progress: 95.10% complete, ETA 00:28:27
# Fork: 2 of 3
# Warmup Iteration   1: 0.275 ns/op
# Warmup Iteration   2: 0.268 ns/op
# Warmup Iteration   3: 0.269 ns/op
Iteration   1: 0.268 ns/op
Iteration   2: 0.272 ns/op
Iteration   3: 0.276 ns/op
Iteration   4: 0.276 ns/op
Iteration   5: 0.271 ns/op

# Run progress: 95.12% complete, ETA 00:28:18
# Fork: 3 of 3
# Warmup Iteration   1: 0.272 ns/op
# Warmup Iteration   2: 0.268 ns/op
# Warmup Iteration   3: 0.269 ns/op
Iteration   1: 0.268 ns/op
Iteration   2: 0.269 ns/op
Iteration   3: 0.269 ns/op
Iteration   4: 0.269 ns/op
Iteration   5: 0.269 ns/op


Result "org.openjdk.bench.valhalla.callconv.Inline64int.Q64int_args8_targets1":
  0.270 ±(99.9%) 0.003 ns/op [Average]
  (min, avg, max) = (0.268, 0.270, 0.276), stdev = 0.003
  CI (99.9%): [0.267, 0.273] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.callconv.Inline64int.Q64int_args8_targets2

# Run progress: 95.15% complete, ETA 00:28:10
# Fork: 1 of 3
# Warmup Iteration   1: 0.346 ns/op
# Warmup Iteration   2: 0.340 ns/op
# Warmup Iteration   3: 0.336 ns/op
Iteration   1: 0.337 ns/op
Iteration   2: 0.336 ns/op
Iteration   3: 0.337 ns/op
Iteration   4: 0.336 ns/op
Iteration   5: 0.337 ns/op

# Run progress: 95.17% complete, ETA 00:28:01
# Fork: 2 of 3
# Warmup Iteration   1: 0.341 ns/op
# Warmup Iteration   2: 0.343 ns/op
# Warmup Iteration   3: 0.344 ns/op
Iteration   1: 0.340 ns/op
Iteration   2: 0.342 ns/op
Iteration   3: 0.342 ns/op
Iteration   4: 0.344 ns/op
Iteration   5: 0.341 ns/op

# Run progress: 95.20% complete, ETA 00:27:53
# Fork: 3 of 3
# Warmup Iteration   1: 0.351 ns/op
# Warmup Iteration   2: 0.342 ns/op
# Warmup Iteration   3: 0.337 ns/op
Iteration   1: 0.337 ns/op
Iteration   2: 0.336 ns/op
Iteration   3: 0.336 ns/op
Iteration   4: 0.337 ns/op
Iteration   5: 0.336 ns/op


Result "org.openjdk.bench.valhalla.callconv.Inline64int.Q64int_args8_targets2":
  0.338 ±(99.9%) 0.003 ns/op [Average]
  (min, avg, max) = (0.336, 0.338, 0.344), stdev = 0.003
  CI (99.9%): [0.335, 0.341] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.callconv.Inline64int.Q64int_args8_targets3

# Run progress: 95.22% complete, ETA 00:27:44
# Fork: 1 of 3
# Warmup Iteration   1: 73.953 ns/op
# Warmup Iteration   2: 78.424 ns/op
# Warmup Iteration   3: 81.829 ns/op
Iteration   1: 82.406 ns/op
Iteration   2: 81.911 ns/op
Iteration   3: 79.341 ns/op
Iteration   4: 79.281 ns/op
Iteration   5: 79.089 ns/op

# Run progress: 95.25% complete, ETA 00:27:35
# Fork: 2 of 3
# Warmup Iteration   1: 72.947 ns/op
# Warmup Iteration   2: 78.488 ns/op
# Warmup Iteration   3: 79.187 ns/op
Iteration   1: 80.170 ns/op
Iteration   2: 79.055 ns/op
Iteration   3: 79.683 ns/op
Iteration   4: 79.181 ns/op
Iteration   5: 78.899 ns/op

# Run progress: 95.27% complete, ETA 00:27:27
# Fork: 3 of 3
# Warmup Iteration   1: 73.896 ns/op
# Warmup Iteration   2: 78.818 ns/op
# Warmup Iteration   3: 78.804 ns/op
Iteration   1: 79.215 ns/op
Iteration   2: 78.709 ns/op
Iteration   3: 78.993 ns/op
Iteration   4: 78.764 ns/op
Iteration   5: 79.948 ns/op


Result "org.openjdk.bench.valhalla.callconv.Inline64int.Q64int_args8_targets3":
  79.643 ±(99.9%) 1.180 ns/op [Average]
  (min, avg, max) = (78.709, 79.643, 82.406), stdev = 1.103
  CI (99.9%): [78.464, 80.823] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.callconv.Inline64long.Q64long_args1_targets0

# Run progress: 95.29% complete, ETA 00:27:18
# Fork: 1 of 3
# Warmup Iteration   1: 0.190 ns/op
# Warmup Iteration   2: 0.188 ns/op
# Warmup Iteration   3: 0.187 ns/op
Iteration   1: 0.188 ns/op
Iteration   2: 0.187 ns/op
Iteration   3: 0.190 ns/op
Iteration   4: 0.194 ns/op
Iteration   5: 0.194 ns/op

# Run progress: 95.32% complete, ETA 00:27:10
# Fork: 2 of 3
# Warmup Iteration   1: 0.191 ns/op
# Warmup Iteration   2: 0.188 ns/op
# Warmup Iteration   3: 0.187 ns/op
Iteration   1: 0.188 ns/op
Iteration   2: 0.187 ns/op
Iteration   3: 0.187 ns/op
Iteration   4: 0.188 ns/op
Iteration   5: 0.188 ns/op

# Run progress: 95.34% complete, ETA 00:27:01
# Fork: 3 of 3
# Warmup Iteration   1: 0.196 ns/op
# Warmup Iteration   2: 0.194 ns/op
# Warmup Iteration   3: 0.194 ns/op
Iteration   1: 0.192 ns/op
Iteration   2: 0.195 ns/op
Iteration   3: 0.194 ns/op
Iteration   4: 0.193 ns/op
Iteration   5: 0.194 ns/op


Result "org.openjdk.bench.valhalla.callconv.Inline64long.Q64long_args1_targets0":
  0.191 ±(99.9%) 0.003 ns/op [Average]
  (min, avg, max) = (0.187, 0.191, 0.195), stdev = 0.003
  CI (99.9%): [0.187, 0.194] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.callconv.Inline64long.Q64long_args1_targets1

# Run progress: 95.37% complete, ETA 00:26:53
# Fork: 1 of 3
# Warmup Iteration   1: 0.266 ns/op
# Warmup Iteration   2: 0.263 ns/op
# Warmup Iteration   3: 0.255 ns/op
Iteration   1: 0.254 ns/op
Iteration   2: 0.254 ns/op
Iteration   3: 0.253 ns/op
Iteration   4: 0.254 ns/op
Iteration   5: 0.254 ns/op

# Run progress: 95.39% complete, ETA 00:26:44
# Fork: 2 of 3
# Warmup Iteration   1: 0.259 ns/op
# Warmup Iteration   2: 0.255 ns/op
# Warmup Iteration   3: 0.253 ns/op
Iteration   1: 0.255 ns/op
Iteration   2: 0.253 ns/op
Iteration   3: 0.253 ns/op
Iteration   4: 0.254 ns/op
Iteration   5: 0.253 ns/op

# Run progress: 95.42% complete, ETA 00:26:36
# Fork: 3 of 3
# Warmup Iteration   1: 0.259 ns/op
# Warmup Iteration   2: 0.255 ns/op
# Warmup Iteration   3: 0.253 ns/op
Iteration   1: 0.253 ns/op
Iteration   2: 0.253 ns/op
Iteration   3: 0.253 ns/op
Iteration   4: 0.253 ns/op
Iteration   5: 0.253 ns/op


Result "org.openjdk.bench.valhalla.callconv.Inline64long.Q64long_args1_targets1":
  0.254 ±(99.9%) 0.001 ns/op [Average]
  (min, avg, max) = (0.253, 0.254, 0.255), stdev = 0.001
  CI (99.9%): [0.253, 0.254] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.callconv.Inline64long.Q64long_args1_targets2

# Run progress: 95.44% complete, ETA 00:26:27
# Fork: 1 of 3
# Warmup Iteration   1: 0.333 ns/op
# Warmup Iteration   2: 0.329 ns/op
# Warmup Iteration   3: 0.331 ns/op
Iteration   1: 0.333 ns/op
Iteration   2: 0.329 ns/op
Iteration   3: 0.330 ns/op
Iteration   4: 0.329 ns/op
Iteration   5: 0.329 ns/op

# Run progress: 95.47% complete, ETA 00:26:19
# Fork: 2 of 3
# Warmup Iteration   1: 0.336 ns/op
# Warmup Iteration   2: 0.330 ns/op
# Warmup Iteration   3: 0.329 ns/op
Iteration   1: 0.328 ns/op
Iteration   2: 0.328 ns/op
Iteration   3: 0.329 ns/op
Iteration   4: 0.329 ns/op
Iteration   5: 0.329 ns/op

# Run progress: 95.49% complete, ETA 00:26:10
# Fork: 3 of 3
# Warmup Iteration   1: 0.332 ns/op
# Warmup Iteration   2: 0.329 ns/op
# Warmup Iteration   3: 0.329 ns/op
Iteration   1: 0.329 ns/op
Iteration   2: 0.328 ns/op
Iteration   3: 0.328 ns/op
Iteration   4: 0.328 ns/op
Iteration   5: 0.328 ns/op


Result "org.openjdk.bench.valhalla.callconv.Inline64long.Q64long_args1_targets2":
  0.329 ±(99.9%) 0.001 ns/op [Average]
  (min, avg, max) = (0.328, 0.329, 0.333), stdev = 0.001
  CI (99.9%): [0.328, 0.330] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.callconv.Inline64long.Q64long_args1_targets3

# Run progress: 95.51% complete, ETA 00:26:01
# Fork: 1 of 3
# Warmup Iteration   1: 70.568 ns/op
# Warmup Iteration   2: 74.679 ns/op
# Warmup Iteration   3: 74.206 ns/op
Iteration   1: 74.422 ns/op
Iteration   2: 74.212 ns/op
Iteration   3: 74.456 ns/op
Iteration   4: 74.260 ns/op
Iteration   5: 74.256 ns/op

# Run progress: 95.54% complete, ETA 00:25:53
# Fork: 2 of 3
# Warmup Iteration   1: 69.634 ns/op
# Warmup Iteration   2: 72.884 ns/op
# Warmup Iteration   3: 72.665 ns/op
Iteration   1: 72.501 ns/op
Iteration   2: 72.412 ns/op
Iteration   3: 72.502 ns/op
Iteration   4: 72.677 ns/op
Iteration   5: 72.481 ns/op

# Run progress: 95.56% complete, ETA 00:25:44
# Fork: 3 of 3
# Warmup Iteration   1: 69.034 ns/op
# Warmup Iteration   2: 72.896 ns/op
# Warmup Iteration   3: 72.958 ns/op
Iteration   1: 73.064 ns/op
Iteration   2: 73.059 ns/op
Iteration   3: 73.030 ns/op
Iteration   4: 72.937 ns/op
Iteration   5: 73.312 ns/op


Result "org.openjdk.bench.valhalla.callconv.Inline64long.Q64long_args1_targets3":
  73.305 ±(99.9%) 0.843 ns/op [Average]
  (min, avg, max) = (72.412, 73.305, 74.456), stdev = 0.788
  CI (99.9%): [72.463, 74.148] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.callconv.Inline64long.Q64long_args2_targets0

# Run progress: 95.59% complete, ETA 00:25:36
# Fork: 1 of 3
# Warmup Iteration   1: 0.187 ns/op
# Warmup Iteration   2: 0.184 ns/op
# Warmup Iteration   3: 0.184 ns/op
Iteration   1: 0.184 ns/op
Iteration   2: 0.184 ns/op
Iteration   3: 0.183 ns/op
Iteration   4: 0.184 ns/op
Iteration   5: 0.188 ns/op

# Run progress: 95.61% complete, ETA 00:25:27
# Fork: 2 of 3
# Warmup Iteration   1: 0.187 ns/op
# Warmup Iteration   2: 0.185 ns/op
# Warmup Iteration   3: 0.185 ns/op
Iteration   1: 0.185 ns/op
Iteration   2: 0.184 ns/op
Iteration   3: 0.184 ns/op
Iteration   4: 0.184 ns/op
Iteration   5: 0.184 ns/op

# Run progress: 95.64% complete, ETA 00:25:19
# Fork: 3 of 3
# Warmup Iteration   1: 0.185 ns/op
# Warmup Iteration   2: 0.183 ns/op
# Warmup Iteration   3: 0.183 ns/op
Iteration   1: 0.183 ns/op
Iteration   2: 0.184 ns/op
Iteration   3: 0.184 ns/op
Iteration   4: 0.183 ns/op
Iteration   5: 0.186 ns/op


Result "org.openjdk.bench.valhalla.callconv.Inline64long.Q64long_args2_targets0":
  0.184 ±(99.9%) 0.001 ns/op [Average]
  (min, avg, max) = (0.183, 0.184, 0.188), stdev = 0.001
  CI (99.9%): [0.183, 0.185] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.callconv.Inline64long.Q64long_args2_targets1

# Run progress: 95.66% complete, ETA 00:25:10
# Fork: 1 of 3
# Warmup Iteration   1: 0.259 ns/op
# Warmup Iteration   2: 0.256 ns/op
# Warmup Iteration   3: 0.253 ns/op
Iteration   1: 0.254 ns/op
Iteration   2: 0.254 ns/op
Iteration   3: 0.254 ns/op
Iteration   4: 0.254 ns/op
Iteration   5: 0.253 ns/op

# Run progress: 95.69% complete, ETA 00:25:02
# Fork: 2 of 3
# Warmup Iteration   1: 0.258 ns/op
# Warmup Iteration   2: 0.256 ns/op
# Warmup Iteration   3: 0.256 ns/op
Iteration   1: 0.254 ns/op
Iteration   2: 0.256 ns/op
Iteration   3: 0.255 ns/op
Iteration   4: 0.254 ns/op
Iteration   5: 0.258 ns/op

# Run progress: 95.71% complete, ETA 00:24:53
# Fork: 3 of 3
# Warmup Iteration   1: 0.259 ns/op
# Warmup Iteration   2: 0.256 ns/op
# Warmup Iteration   3: 0.254 ns/op
Iteration   1: 0.254 ns/op
Iteration   2: 0.253 ns/op
Iteration   3: 0.254 ns/op
Iteration   4: 0.254 ns/op
Iteration   5: 0.254 ns/op


Result "org.openjdk.bench.valhalla.callconv.Inline64long.Q64long_args2_targets1":
  0.254 ±(99.9%) 0.001 ns/op [Average]
  (min, avg, max) = (0.253, 0.254, 0.258), stdev = 0.001
  CI (99.9%): [0.253, 0.256] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.callconv.Inline64long.Q64long_args2_targets2

# Run progress: 95.74% complete, ETA 00:24:44
# Fork: 1 of 3
# Warmup Iteration   1: 0.334 ns/op
# Warmup Iteration   2: 0.332 ns/op
# Warmup Iteration   3: 0.327 ns/op
Iteration   1: 0.327 ns/op
Iteration   2: 0.327 ns/op
Iteration   3: 0.327 ns/op
Iteration   4: 0.328 ns/op
Iteration   5: 0.329 ns/op

# Run progress: 95.76% complete, ETA 00:24:36
# Fork: 2 of 3
# Warmup Iteration   1: 0.402 ns/op
# Warmup Iteration   2: 0.398 ns/op
# Warmup Iteration   3: 0.327 ns/op
Iteration   1: 0.328 ns/op
Iteration   2: 0.328 ns/op
Iteration   3: 0.328 ns/op
Iteration   4: 0.327 ns/op
Iteration   5: 0.330 ns/op

# Run progress: 95.78% complete, ETA 00:24:27
# Fork: 3 of 3
# Warmup Iteration   1: 0.336 ns/op
# Warmup Iteration   2: 0.332 ns/op
# Warmup Iteration   3: 0.399 ns/op
Iteration   1: 0.399 ns/op
Iteration   2: 0.398 ns/op
Iteration   3: 0.399 ns/op
Iteration   4: 0.398 ns/op
Iteration   5: 0.398 ns/op


Result "org.openjdk.bench.valhalla.callconv.Inline64long.Q64long_args2_targets2":
  0.351 ±(99.9%) 0.037 ns/op [Average]
  (min, avg, max) = (0.327, 0.351, 0.399), stdev = 0.034
  CI (99.9%): [0.315, 0.388] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.callconv.Inline64long.Q64long_args2_targets3

# Run progress: 95.81% complete, ETA 00:24:19
# Fork: 1 of 3
# Warmup Iteration   1: 69.555 ns/op
# Warmup Iteration   2: 73.927 ns/op
# Warmup Iteration   3: 72.506 ns/op
Iteration   1: 72.513 ns/op
Iteration   2: 72.675 ns/op
Iteration   3: 72.872 ns/op
Iteration   4: 72.711 ns/op
Iteration   5: 72.667 ns/op

# Run progress: 95.83% complete, ETA 00:24:10
# Fork: 2 of 3
# Warmup Iteration   1: 69.511 ns/op
# Warmup Iteration   2: 75.986 ns/op
# Warmup Iteration   3: 72.235 ns/op
Iteration   1: 72.516 ns/op
Iteration   2: 72.511 ns/op
Iteration   3: 72.461 ns/op
Iteration   4: 72.257 ns/op
Iteration   5: 72.217 ns/op

# Run progress: 95.86% complete, ETA 00:24:02
# Fork: 3 of 3
# Warmup Iteration   1: 69.792 ns/op
# Warmup Iteration   2: 74.879 ns/op
# Warmup Iteration   3: 77.588 ns/op
Iteration   1: 77.511 ns/op
Iteration   2: 78.113 ns/op
Iteration   3: 76.467 ns/op
Iteration   4: 74.825 ns/op
Iteration   5: 75.347 ns/op


Result "org.openjdk.bench.valhalla.callconv.Inline64long.Q64long_args2_targets3":
  73.844 ±(99.9%) 2.197 ns/op [Average]
  (min, avg, max) = (72.217, 73.844, 78.113), stdev = 2.055
  CI (99.9%): [71.647, 76.041] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.callconv.Inline64long.Q64long_args4_targets0

# Run progress: 95.88% complete, ETA 00:23:53
# Fork: 1 of 3
# Warmup Iteration   1: 0.189 ns/op
# Warmup Iteration   2: 0.187 ns/op
# Warmup Iteration   3: 0.185 ns/op
Iteration   1: 0.187 ns/op
Iteration   2: 0.187 ns/op
Iteration   3: 0.186 ns/op
Iteration   4: 0.190 ns/op
Iteration   5: 0.187 ns/op

# Run progress: 95.91% complete, ETA 00:23:45
# Fork: 2 of 3
# Warmup Iteration   1: 0.188 ns/op
# Warmup Iteration   2: 0.187 ns/op
# Warmup Iteration   3: 0.186 ns/op
Iteration   1: 0.187 ns/op
Iteration   2: 0.187 ns/op
Iteration   3: 0.187 ns/op
Iteration   4: 0.185 ns/op
Iteration   5: 0.187 ns/op

# Run progress: 95.93% complete, ETA 00:23:36
# Fork: 3 of 3
# Warmup Iteration   1: 0.187 ns/op
# Warmup Iteration   2: 0.185 ns/op
# Warmup Iteration   3: 0.186 ns/op
Iteration   1: 0.187 ns/op
Iteration   2: 0.187 ns/op
Iteration   3: 0.187 ns/op
Iteration   4: 0.187 ns/op
Iteration   5: 0.186 ns/op


Result "org.openjdk.bench.valhalla.callconv.Inline64long.Q64long_args4_targets0":
  0.187 ±(99.9%) 0.001 ns/op [Average]
  (min, avg, max) = (0.185, 0.187, 0.190), stdev = 0.001
  CI (99.9%): [0.186, 0.188] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.callconv.Inline64long.Q64long_args4_targets1

# Run progress: 95.96% complete, ETA 00:23:28
# Fork: 1 of 3
# Warmup Iteration   1: 0.265 ns/op
# Warmup Iteration   2: 0.262 ns/op
# Warmup Iteration   3: 0.262 ns/op
Iteration   1: 0.261 ns/op
Iteration   2: 0.270 ns/op
Iteration   3: 0.269 ns/op
Iteration   4: 0.267 ns/op
Iteration   5: 0.264 ns/op

# Run progress: 95.98% complete, ETA 00:23:19
# Fork: 2 of 3
# Warmup Iteration   1: 0.266 ns/op
# Warmup Iteration   2: 0.262 ns/op
# Warmup Iteration   3: 0.262 ns/op
Iteration   1: 0.263 ns/op
Iteration   2: 0.262 ns/op
Iteration   3: 0.264 ns/op
Iteration   4: 0.262 ns/op
Iteration   5: 0.264 ns/op

# Run progress: 96.00% complete, ETA 00:23:10
# Fork: 3 of 3
# Warmup Iteration   1: 0.268 ns/op
# Warmup Iteration   2: 0.264 ns/op
# Warmup Iteration   3: 0.263 ns/op
Iteration   1: 0.263 ns/op
Iteration   2: 0.262 ns/op
Iteration   3: 0.262 ns/op
Iteration   4: 0.261 ns/op
Iteration   5: 0.261 ns/op


Result "org.openjdk.bench.valhalla.callconv.Inline64long.Q64long_args4_targets1":
  0.264 ±(99.9%) 0.003 ns/op [Average]
  (min, avg, max) = (0.261, 0.264, 0.270), stdev = 0.003
  CI (99.9%): [0.261, 0.267] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.callconv.Inline64long.Q64long_args4_targets2

# Run progress: 96.03% complete, ETA 00:23:02
# Fork: 1 of 3
# Warmup Iteration   1: 0.340 ns/op
# Warmup Iteration   2: 0.337 ns/op
# Warmup Iteration   3: 0.338 ns/op
Iteration   1: 0.339 ns/op
Iteration   2: 0.338 ns/op
Iteration   3: 0.339 ns/op
Iteration   4: 0.340 ns/op
Iteration   5: 0.339 ns/op

# Run progress: 96.05% complete, ETA 00:22:53
# Fork: 2 of 3
# Warmup Iteration   1: 0.343 ns/op
# Warmup Iteration   2: 0.336 ns/op
# Warmup Iteration   3: 0.337 ns/op
Iteration   1: 0.336 ns/op
Iteration   2: 0.334 ns/op
Iteration   3: 0.334 ns/op
Iteration   4: 0.333 ns/op
Iteration   5: 0.336 ns/op

# Run progress: 96.08% complete, ETA 00:22:45
# Fork: 3 of 3
# Warmup Iteration   1: 0.347 ns/op
# Warmup Iteration   2: 0.334 ns/op
# Warmup Iteration   3: 0.337 ns/op
Iteration   1: 0.337 ns/op
Iteration   2: 0.335 ns/op
Iteration   3: 0.337 ns/op
Iteration   4: 0.339 ns/op
Iteration   5: 0.335 ns/op


Result "org.openjdk.bench.valhalla.callconv.Inline64long.Q64long_args4_targets2":
  0.337 ±(99.9%) 0.002 ns/op [Average]
  (min, avg, max) = (0.333, 0.337, 0.340), stdev = 0.002
  CI (99.9%): [0.334, 0.339] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.callconv.Inline64long.Q64long_args4_targets3

# Run progress: 96.10% complete, ETA 00:22:36
# Fork: 1 of 3
# Warmup Iteration   1: 70.904 ns/op
# Warmup Iteration   2: 75.110 ns/op
# Warmup Iteration   3: 74.381 ns/op
Iteration   1: 73.924 ns/op
Iteration   2: 73.942 ns/op
Iteration   3: 74.445 ns/op
Iteration   4: 75.111 ns/op
Iteration   5: 74.963 ns/op

# Run progress: 96.13% complete, ETA 00:22:28
# Fork: 2 of 3
# Warmup Iteration   1: 70.930 ns/op
# Warmup Iteration   2: 75.374 ns/op
# Warmup Iteration   3: 73.661 ns/op
Iteration   1: 73.955 ns/op
Iteration   2: 74.792 ns/op
Iteration   3: 74.490 ns/op
Iteration   4: 74.524 ns/op
Iteration   5: 74.779 ns/op

# Run progress: 96.15% complete, ETA 00:22:19
# Fork: 3 of 3
# Warmup Iteration   1: 70.115 ns/op
# Warmup Iteration   2: 75.462 ns/op
# Warmup Iteration   3: 76.256 ns/op
Iteration   1: 75.840 ns/op
Iteration   2: 75.268 ns/op
Iteration   3: 75.669 ns/op
Iteration   4: 76.139 ns/op
Iteration   5: 75.829 ns/op


Result "org.openjdk.bench.valhalla.callconv.Inline64long.Q64long_args4_targets3":
  74.911 ±(99.9%) 0.775 ns/op [Average]
  (min, avg, max) = (73.924, 74.911, 76.139), stdev = 0.725
  CI (99.9%): [74.136, 75.687] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.callconv.Inline64long.Q64long_args8_targets0

# Run progress: 96.18% complete, ETA 00:22:11
# Fork: 1 of 3
# Warmup Iteration   1: 0.189 ns/op
# Warmup Iteration   2: 0.187 ns/op
# Warmup Iteration   3: 0.186 ns/op
Iteration   1: 0.185 ns/op
Iteration   2: 0.186 ns/op
Iteration   3: 0.189 ns/op
Iteration   4: 0.189 ns/op
Iteration   5: 0.187 ns/op

# Run progress: 96.20% complete, ETA 00:22:02
# Fork: 2 of 3
# Warmup Iteration   1: 0.187 ns/op
# Warmup Iteration   2: 0.184 ns/op
# Warmup Iteration   3: 0.186 ns/op
Iteration   1: 0.188 ns/op
Iteration   2: 0.185 ns/op
Iteration   3: 0.186 ns/op
Iteration   4: 0.184 ns/op
Iteration   5: 0.187 ns/op

# Run progress: 96.23% complete, ETA 00:21:54
# Fork: 3 of 3
# Warmup Iteration   1: 0.188 ns/op
# Warmup Iteration   2: 0.186 ns/op
# Warmup Iteration   3: 0.187 ns/op
Iteration   1: 0.187 ns/op
Iteration   2: 0.187 ns/op
Iteration   3: 0.186 ns/op
Iteration   4: 0.184 ns/op
Iteration   5: 0.184 ns/op


Result "org.openjdk.bench.valhalla.callconv.Inline64long.Q64long_args8_targets0":
  0.186 ±(99.9%) 0.002 ns/op [Average]
  (min, avg, max) = (0.184, 0.186, 0.189), stdev = 0.002
  CI (99.9%): [0.185, 0.188] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.callconv.Inline64long.Q64long_args8_targets1

# Run progress: 96.25% complete, ETA 00:21:45
# Fork: 1 of 3
# Warmup Iteration   1: 0.268 ns/op
# Warmup Iteration   2: 0.267 ns/op
# Warmup Iteration   3: 0.266 ns/op
Iteration   1: 0.265 ns/op
Iteration   2: 0.266 ns/op
Iteration   3: 0.265 ns/op
Iteration   4: 0.266 ns/op
Iteration   5: 0.265 ns/op

# Run progress: 96.27% complete, ETA 00:21:37
# Fork: 2 of 3
# Warmup Iteration   1: 0.271 ns/op
# Warmup Iteration   2: 0.266 ns/op
# Warmup Iteration   3: 0.266 ns/op
Iteration   1: 0.264 ns/op
Iteration   2: 0.265 ns/op
Iteration   3: 0.266 ns/op
Iteration   4: 0.263 ns/op
Iteration   5: 0.264 ns/op

# Run progress: 96.30% complete, ETA 00:21:28
# Fork: 3 of 3
# Warmup Iteration   1: 0.270 ns/op
# Warmup Iteration   2: 0.268 ns/op
# Warmup Iteration   3: 0.264 ns/op
Iteration   1: 0.266 ns/op
Iteration   2: 0.267 ns/op
Iteration   3: 0.264 ns/op
Iteration   4: 0.261 ns/op
Iteration   5: 0.262 ns/op


Result "org.openjdk.bench.valhalla.callconv.Inline64long.Q64long_args8_targets1":
  0.265 ±(99.9%) 0.002 ns/op [Average]
  (min, avg, max) = (0.261, 0.265, 0.267), stdev = 0.002
  CI (99.9%): [0.263, 0.266] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.callconv.Inline64long.Q64long_args8_targets2

# Run progress: 96.32% complete, ETA 00:21:19
# Fork: 1 of 3
# Warmup Iteration   1: 0.343 ns/op
# Warmup Iteration   2: 0.407 ns/op
# Warmup Iteration   3: 0.338 ns/op
Iteration   1: 0.340 ns/op
Iteration   2: 0.341 ns/op
Iteration   3: 0.342 ns/op
Iteration   4: 0.342 ns/op
Iteration   5: 0.338 ns/op

# Run progress: 96.35% complete, ETA 00:21:11
# Fork: 2 of 3
# Warmup Iteration   1: 0.344 ns/op
# Warmup Iteration   2: 0.338 ns/op
# Warmup Iteration   3: 0.339 ns/op
Iteration   1: 0.338 ns/op
Iteration   2: 0.335 ns/op
Iteration   3: 0.339 ns/op
Iteration   4: 0.338 ns/op
Iteration   5: 0.337 ns/op

# Run progress: 96.37% complete, ETA 00:21:02
# Fork: 3 of 3
# Warmup Iteration   1: 0.342 ns/op
# Warmup Iteration   2: 0.405 ns/op
# Warmup Iteration   3: 0.336 ns/op
Iteration   1: 0.334 ns/op
Iteration   2: 0.336 ns/op
Iteration   3: 0.335 ns/op
Iteration   4: 0.338 ns/op
Iteration   5: 0.339 ns/op


Result "org.openjdk.bench.valhalla.callconv.Inline64long.Q64long_args8_targets2":
  0.338 ±(99.9%) 0.003 ns/op [Average]
  (min, avg, max) = (0.334, 0.338, 0.342), stdev = 0.002
  CI (99.9%): [0.336, 0.341] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.callconv.Inline64long.Q64long_args8_targets3

# Run progress: 96.40% complete, ETA 00:20:54
# Fork: 1 of 3
# Warmup Iteration   1: 73.314 ns/op
# Warmup Iteration   2: 77.601 ns/op
# Warmup Iteration   3: 78.636 ns/op
Iteration   1: 78.510 ns/op
Iteration   2: 78.047 ns/op
Iteration   3: 78.484 ns/op
Iteration   4: 78.421 ns/op
Iteration   5: 78.751 ns/op

# Run progress: 96.42% complete, ETA 00:20:45
# Fork: 2 of 3
# Warmup Iteration   1: 72.545 ns/op
# Warmup Iteration   2: 77.148 ns/op
# Warmup Iteration   3: 77.570 ns/op
Iteration   1: 77.777 ns/op
Iteration   2: 77.512 ns/op
Iteration   3: 77.475 ns/op
Iteration   4: 77.568 ns/op
Iteration   5: 77.517 ns/op

# Run progress: 96.45% complete, ETA 00:20:37
# Fork: 3 of 3
# Warmup Iteration   1: 72.844 ns/op
# Warmup Iteration   2: 77.186 ns/op
# Warmup Iteration   3: 77.436 ns/op
Iteration   1: 77.424 ns/op
Iteration   2: 77.327 ns/op
Iteration   3: 77.448 ns/op
Iteration   4: 77.248 ns/op
Iteration   5: 77.118 ns/op


Result "org.openjdk.bench.valhalla.callconv.Inline64long.Q64long_args8_targets3":
  77.775 ±(99.9%) 0.564 ns/op [Average]
  (min, avg, max) = (77.118, 77.775, 78.751), stdev = 0.527
  CI (99.9%): [77.211, 78.339] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.callconv.PrimitiveByte.byte_args1_targets0

# Run progress: 96.47% complete, ETA 00:20:28
# Fork: 1 of 3
# Warmup Iteration   1: 0.346 ns/op
# Warmup Iteration   2: 0.344 ns/op
# Warmup Iteration   3: 0.352 ns/op
Iteration   1: 0.355 ns/op
Iteration   2: 0.354 ns/op
Iteration   3: 0.354 ns/op
Iteration   4: 0.354 ns/op
Iteration   5: 0.351 ns/op

# Run progress: 96.50% complete, ETA 00:20:20
# Fork: 2 of 3
# Warmup Iteration   1: 0.347 ns/op
# Warmup Iteration   2: 0.353 ns/op
# Warmup Iteration   3: 0.354 ns/op
Iteration   1: 0.354 ns/op
Iteration   2: 0.355 ns/op
Iteration   3: 0.354 ns/op
Iteration   4: 0.355 ns/op
Iteration   5: 0.354 ns/op

# Run progress: 96.52% complete, ETA 00:20:11
# Fork: 3 of 3
# Warmup Iteration   1: 0.348 ns/op
# Warmup Iteration   2: 0.349 ns/op
# Warmup Iteration   3: 0.352 ns/op
Iteration   1: 0.353 ns/op
Iteration   2: 0.353 ns/op
Iteration   3: 0.353 ns/op
Iteration   4: 0.353 ns/op
Iteration   5: 0.352 ns/op


Result "org.openjdk.bench.valhalla.callconv.PrimitiveByte.byte_args1_targets0":
  0.354 ±(99.9%) 0.001 ns/op [Average]
  (min, avg, max) = (0.351, 0.354, 0.355), stdev = 0.001
  CI (99.9%): [0.352, 0.355] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.callconv.PrimitiveByte.byte_args1_targets1

# Run progress: 96.54% complete, ETA 00:20:03
# Fork: 1 of 3
# Warmup Iteration   1: 0.469 ns/op
# Warmup Iteration   2: 0.463 ns/op
# Warmup Iteration   3: 0.473 ns/op
Iteration   1: 0.470 ns/op
Iteration   2: 0.468 ns/op
Iteration   3: 0.469 ns/op
Iteration   4: 0.469 ns/op
Iteration   5: 0.472 ns/op

# Run progress: 96.57% complete, ETA 00:19:54
# Fork: 2 of 3
# Warmup Iteration   1: 0.468 ns/op
# Warmup Iteration   2: 0.462 ns/op
# Warmup Iteration   3: 0.473 ns/op
Iteration   1: 0.470 ns/op
Iteration   2: 0.470 ns/op
Iteration   3: 0.476 ns/op
Iteration   4: 0.474 ns/op
Iteration   5: 0.474 ns/op

# Run progress: 96.59% complete, ETA 00:19:45
# Fork: 3 of 3
# Warmup Iteration   1: 0.467 ns/op
# Warmup Iteration   2: 0.462 ns/op
# Warmup Iteration   3: 0.480 ns/op
Iteration   1: 0.473 ns/op
Iteration   2: 0.474 ns/op
Iteration   3: 0.472 ns/op
Iteration   4: 0.474 ns/op
Iteration   5: 0.475 ns/op


Result "org.openjdk.bench.valhalla.callconv.PrimitiveByte.byte_args1_targets1":
  0.472 ±(99.9%) 0.003 ns/op [Average]
  (min, avg, max) = (0.468, 0.472, 0.476), stdev = 0.003
  CI (99.9%): [0.469, 0.475] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.callconv.PrimitiveByte.byte_args1_targets2

# Run progress: 96.62% complete, ETA 00:19:37
# Fork: 1 of 3
# Warmup Iteration   1: 0.545 ns/op
# Warmup Iteration   2: 0.525 ns/op
# Warmup Iteration   3: 0.722 ns/op
Iteration   1: 0.725 ns/op
Iteration   2: 0.724 ns/op
Iteration   3: 0.733 ns/op
Iteration   4: 0.717 ns/op
Iteration   5: 0.725 ns/op

# Run progress: 96.64% complete, ETA 00:19:28
# Fork: 2 of 3
# Warmup Iteration   1: 0.524 ns/op
# Warmup Iteration   2: 0.537 ns/op
# Warmup Iteration   3: 0.723 ns/op
Iteration   1: 0.727 ns/op
Iteration   2: 0.722 ns/op
Iteration   3: 0.731 ns/op
Iteration   4: 0.720 ns/op
Iteration   5: 0.730 ns/op

# Run progress: 96.67% complete, ETA 00:19:20
# Fork: 3 of 3
# Warmup Iteration   1: 0.543 ns/op
# Warmup Iteration   2: 0.524 ns/op
# Warmup Iteration   3: 0.720 ns/op
Iteration   1: 0.714 ns/op
Iteration   2: 0.720 ns/op
Iteration   3: 0.725 ns/op
Iteration   4: 0.720 ns/op
Iteration   5: 0.728 ns/op


Result "org.openjdk.bench.valhalla.callconv.PrimitiveByte.byte_args1_targets2":
  0.724 ±(99.9%) 0.006 ns/op [Average]
  (min, avg, max) = (0.714, 0.724, 0.733), stdev = 0.006
  CI (99.9%): [0.718, 0.730] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.callconv.PrimitiveByte.byte_args1_targets3

# Run progress: 96.69% complete, ETA 00:19:11
# Fork: 1 of 3
# Warmup Iteration   1: 2.733 ns/op
# Warmup Iteration   2: 2.725 ns/op
# Warmup Iteration   3: 2.694 ns/op
Iteration   1: 2.723 ns/op
Iteration   2: 2.693 ns/op
Iteration   3: 2.701 ns/op
Iteration   4: 2.698 ns/op
Iteration   5: 2.682 ns/op

# Run progress: 96.72% complete, ETA 00:19:03
# Fork: 2 of 3
# Warmup Iteration   1: 2.761 ns/op
# Warmup Iteration   2: 2.732 ns/op
# Warmup Iteration   3: 2.732 ns/op
Iteration   1: 2.728 ns/op
Iteration   2: 2.735 ns/op
Iteration   3: 2.746 ns/op
Iteration   4: 2.715 ns/op
Iteration   5: 2.705 ns/op

# Run progress: 96.74% complete, ETA 00:18:54
# Fork: 3 of 3
# Warmup Iteration   1: 2.690 ns/op
# Warmup Iteration   2: 2.725 ns/op
# Warmup Iteration   3: 2.705 ns/op
Iteration   1: 2.714 ns/op
Iteration   2: 2.780 ns/op
Iteration   3: 2.786 ns/op
Iteration   4: 2.796 ns/op
Iteration   5: 2.797 ns/op


Result "org.openjdk.bench.valhalla.callconv.PrimitiveByte.byte_args1_targets3":
  2.733 ±(99.9%) 0.042 ns/op [Average]
  (min, avg, max) = (2.682, 2.733, 2.797), stdev = 0.039
  CI (99.9%): [2.692, 2.775] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.callconv.PrimitiveByte.byte_args2_targets0

# Run progress: 96.76% complete, ETA 00:18:46
# Fork: 1 of 3
# Warmup Iteration   1: 0.353 ns/op
# Warmup Iteration   2: 0.346 ns/op
# Warmup Iteration   3: 0.345 ns/op
Iteration   1: 0.344 ns/op
Iteration   2: 0.347 ns/op
Iteration   3: 0.347 ns/op
Iteration   4: 0.346 ns/op
Iteration   5: 0.345 ns/op

# Run progress: 96.79% complete, ETA 00:18:37
# Fork: 2 of 3
# Warmup Iteration   1: 0.352 ns/op
# Warmup Iteration   2: 0.358 ns/op
# Warmup Iteration   3: 0.361 ns/op
Iteration   1: 0.360 ns/op
Iteration   2: 0.349 ns/op
Iteration   3: 0.344 ns/op
Iteration   4: 0.347 ns/op
Iteration   5: 0.347 ns/op

# Run progress: 96.81% complete, ETA 00:18:29
# Fork: 3 of 3
# Warmup Iteration   1: 0.350 ns/op
# Warmup Iteration   2: 0.345 ns/op
# Warmup Iteration   3: 0.342 ns/op
Iteration   1: 0.346 ns/op
Iteration   2: 0.350 ns/op
Iteration   3: 0.343 ns/op
Iteration   4: 0.344 ns/op
Iteration   5: 0.346 ns/op


Result "org.openjdk.bench.valhalla.callconv.PrimitiveByte.byte_args2_targets0":
  0.347 ±(99.9%) 0.004 ns/op [Average]
  (min, avg, max) = (0.343, 0.347, 0.360), stdev = 0.004
  CI (99.9%): [0.343, 0.351] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.callconv.PrimitiveByte.byte_args2_targets1

# Run progress: 96.84% complete, ETA 00:18:20
# Fork: 1 of 3
# Warmup Iteration   1: 0.476 ns/op
# Warmup Iteration   2: 0.464 ns/op
# Warmup Iteration   3: 0.463 ns/op
Iteration   1: 0.465 ns/op
Iteration   2: 0.461 ns/op
Iteration   3: 0.466 ns/op
Iteration   4: 0.464 ns/op
Iteration   5: 0.465 ns/op

# Run progress: 96.86% complete, ETA 00:18:11
# Fork: 2 of 3
# Warmup Iteration   1: 0.466 ns/op
# Warmup Iteration   2: 0.464 ns/op
# Warmup Iteration   3: 0.465 ns/op
Iteration   1: 0.464 ns/op
Iteration   2: 0.468 ns/op
Iteration   3: 0.464 ns/op
Iteration   4: 0.464 ns/op
Iteration   5: 0.465 ns/op

# Run progress: 96.89% complete, ETA 00:18:03
# Fork: 3 of 3
# Warmup Iteration   1: 0.470 ns/op
# Warmup Iteration   2: 0.464 ns/op
# Warmup Iteration   3: 0.465 ns/op
Iteration   1: 0.461 ns/op
Iteration   2: 0.465 ns/op
Iteration   3: 0.459 ns/op
Iteration   4: 0.463 ns/op
Iteration   5: 0.464 ns/op


Result "org.openjdk.bench.valhalla.callconv.PrimitiveByte.byte_args2_targets1":
  0.464 ±(99.9%) 0.002 ns/op [Average]
  (min, avg, max) = (0.459, 0.464, 0.468), stdev = 0.002
  CI (99.9%): [0.462, 0.466] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.callconv.PrimitiveByte.byte_args2_targets2

# Run progress: 96.91% complete, ETA 00:17:54
# Fork: 1 of 3
# Warmup Iteration   1: 0.527 ns/op
# Warmup Iteration   2: 0.524 ns/op
# Warmup Iteration   3: 0.553 ns/op
Iteration   1: 0.553 ns/op
Iteration   2: 0.558 ns/op
Iteration   3: 0.554 ns/op
Iteration   4: 0.554 ns/op
Iteration   5: 0.556 ns/op

# Run progress: 96.94% complete, ETA 00:17:46
# Fork: 2 of 3
# Warmup Iteration   1: 0.526 ns/op
# Warmup Iteration   2: 0.525 ns/op
# Warmup Iteration   3: 0.558 ns/op
Iteration   1: 0.553 ns/op
Iteration   2: 0.555 ns/op
Iteration   3: 0.554 ns/op
Iteration   4: 0.554 ns/op
Iteration   5: 0.555 ns/op

# Run progress: 96.96% complete, ETA 00:17:37
# Fork: 3 of 3
# Warmup Iteration   1: 0.522 ns/op
# Warmup Iteration   2: 0.527 ns/op
# Warmup Iteration   3: 0.528 ns/op
Iteration   1: 0.526 ns/op
Iteration   2: 0.527 ns/op
Iteration   3: 0.519 ns/op
Iteration   4: 0.527 ns/op
Iteration   5: 0.526 ns/op


Result "org.openjdk.bench.valhalla.callconv.PrimitiveByte.byte_args2_targets2":
  0.545 ±(99.9%) 0.016 ns/op [Average]
  (min, avg, max) = (0.519, 0.545, 0.558), stdev = 0.015
  CI (99.9%): [0.529, 0.560] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.callconv.PrimitiveByte.byte_args2_targets3

# Run progress: 96.99% complete, ETA 00:17:29
# Fork: 1 of 3
# Warmup Iteration   1: 2.753 ns/op
# Warmup Iteration   2: 2.737 ns/op
# Warmup Iteration   3: 2.739 ns/op
Iteration   1: 2.745 ns/op
Iteration   2: 2.732 ns/op
Iteration   3: 2.737 ns/op
Iteration   4: 2.710 ns/op
Iteration   5: 2.712 ns/op

# Run progress: 97.01% complete, ETA 00:17:20
# Fork: 2 of 3
# Warmup Iteration   1: 2.755 ns/op
# Warmup Iteration   2: 2.737 ns/op
# Warmup Iteration   3: 2.744 ns/op
Iteration   1: 2.732 ns/op
Iteration   2: 2.717 ns/op
Iteration   3: 2.695 ns/op
Iteration   4: 2.733 ns/op
Iteration   5: 2.716 ns/op

# Run progress: 97.03% complete, ETA 00:17:12
# Fork: 3 of 3
# Warmup Iteration   1: 2.756 ns/op
# Warmup Iteration   2: 2.738 ns/op
# Warmup Iteration   3: 2.750 ns/op
Iteration   1: 2.738 ns/op
Iteration   2: 2.728 ns/op
Iteration   3: 2.737 ns/op
Iteration   4: 2.711 ns/op
Iteration   5: 2.740 ns/op


Result "org.openjdk.bench.valhalla.callconv.PrimitiveByte.byte_args2_targets3":
  2.726 ±(99.9%) 0.015 ns/op [Average]
  (min, avg, max) = (2.695, 2.726, 2.745), stdev = 0.014
  CI (99.9%): [2.710, 2.741] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.callconv.PrimitiveByte.byte_args4_targets0

# Run progress: 97.06% complete, ETA 00:17:03
# Fork: 1 of 3
# Warmup Iteration   1: 0.351 ns/op
# Warmup Iteration   2: 0.348 ns/op
# Warmup Iteration   3: 0.348 ns/op
Iteration   1: 0.348 ns/op
Iteration   2: 0.349 ns/op
Iteration   3: 0.348 ns/op
Iteration   4: 0.348 ns/op
Iteration   5: 0.344 ns/op

# Run progress: 97.08% complete, ETA 00:16:55
# Fork: 2 of 3
# Warmup Iteration   1: 0.349 ns/op
# Warmup Iteration   2: 0.348 ns/op
# Warmup Iteration   3: 0.347 ns/op
Iteration   1: 0.344 ns/op
Iteration   2: 0.341 ns/op
Iteration   3: 0.343 ns/op
Iteration   4: 0.346 ns/op
Iteration   5: 0.346 ns/op

# Run progress: 97.11% complete, ETA 00:16:46
# Fork: 3 of 3
# Warmup Iteration   1: 0.352 ns/op
# Warmup Iteration   2: 0.347 ns/op
# Warmup Iteration   3: 0.346 ns/op
Iteration   1: 0.348 ns/op
Iteration   2: 0.346 ns/op
Iteration   3: 0.346 ns/op
Iteration   4: 0.347 ns/op
Iteration   5: 0.347 ns/op


Result "org.openjdk.bench.valhalla.callconv.PrimitiveByte.byte_args4_targets0":
  0.346 ±(99.9%) 0.002 ns/op [Average]
  (min, avg, max) = (0.341, 0.346, 0.349), stdev = 0.002
  CI (99.9%): [0.344, 0.348] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.callconv.PrimitiveByte.byte_args4_targets1

# Run progress: 97.13% complete, ETA 00:16:38
# Fork: 1 of 3
# Warmup Iteration   1: 0.469 ns/op
# Warmup Iteration   2: 0.465 ns/op
# Warmup Iteration   3: 0.462 ns/op
Iteration   1: 0.462 ns/op
Iteration   2: 0.462 ns/op
Iteration   3: 0.461 ns/op
Iteration   4: 0.466 ns/op
Iteration   5: 0.464 ns/op

# Run progress: 97.16% complete, ETA 00:16:29
# Fork: 2 of 3
# Warmup Iteration   1: 0.469 ns/op
# Warmup Iteration   2: 0.464 ns/op
# Warmup Iteration   3: 0.463 ns/op
Iteration   1: 0.463 ns/op
Iteration   2: 0.462 ns/op
Iteration   3: 0.463 ns/op
Iteration   4: 0.464 ns/op
Iteration   5: 0.462 ns/op

# Run progress: 97.18% complete, ETA 00:16:20
# Fork: 3 of 3
# Warmup Iteration   1: 0.468 ns/op
# Warmup Iteration   2: 0.461 ns/op
# Warmup Iteration   3: 0.460 ns/op
Iteration   1: 0.465 ns/op
Iteration   2: 0.465 ns/op
Iteration   3: 0.464 ns/op
Iteration   4: 0.464 ns/op
Iteration   5: 0.463 ns/op


Result "org.openjdk.bench.valhalla.callconv.PrimitiveByte.byte_args4_targets1":
  0.463 ±(99.9%) 0.002 ns/op [Average]
  (min, avg, max) = (0.461, 0.463, 0.466), stdev = 0.001
  CI (99.9%): [0.462, 0.465] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.callconv.PrimitiveByte.byte_args4_targets2

# Run progress: 97.21% complete, ETA 00:16:12
# Fork: 1 of 3
# Warmup Iteration   1: 0.528 ns/op
# Warmup Iteration   2: 0.525 ns/op
# Warmup Iteration   3: 0.525 ns/op
Iteration   1: 0.526 ns/op
Iteration   2: 0.524 ns/op
Iteration   3: 0.526 ns/op
Iteration   4: 0.526 ns/op
Iteration   5: 0.533 ns/op

# Run progress: 97.23% complete, ETA 00:16:03
# Fork: 2 of 3
# Warmup Iteration   1: 0.543 ns/op
# Warmup Iteration   2: 0.538 ns/op
# Warmup Iteration   3: 0.534 ns/op
Iteration   1: 0.534 ns/op
Iteration   2: 0.538 ns/op
Iteration   3: 0.535 ns/op
Iteration   4: 0.534 ns/op
Iteration   5: 0.535 ns/op

# Run progress: 97.25% complete, ETA 00:15:55
# Fork: 3 of 3
# Warmup Iteration   1: 0.559 ns/op
# Warmup Iteration   2: 0.557 ns/op
# Warmup Iteration   3: 0.568 ns/op
Iteration   1: 0.575 ns/op
Iteration   2: 0.566 ns/op
Iteration   3: 0.553 ns/op
Iteration   4: 0.551 ns/op
Iteration   5: 0.543 ns/op


Result "org.openjdk.bench.valhalla.callconv.PrimitiveByte.byte_args4_targets2":
  0.540 ±(99.9%) 0.016 ns/op [Average]
  (min, avg, max) = (0.524, 0.540, 0.575), stdev = 0.015
  CI (99.9%): [0.524, 0.556] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.callconv.PrimitiveByte.byte_args4_targets3

# Run progress: 97.28% complete, ETA 00:15:46
# Fork: 1 of 3
# Warmup Iteration   1: 2.774 ns/op
# Warmup Iteration   2: 2.796 ns/op
# Warmup Iteration   3: 2.749 ns/op
Iteration   1: 2.765 ns/op
Iteration   2: 2.772 ns/op
Iteration   3: 2.765 ns/op
Iteration   4: 2.789 ns/op
Iteration   5: 2.793 ns/op

# Run progress: 97.30% complete, ETA 00:15:38
# Fork: 2 of 3
# Warmup Iteration   1: 2.795 ns/op
# Warmup Iteration   2: 2.776 ns/op
# Warmup Iteration   3: 2.771 ns/op
Iteration   1: 2.754 ns/op
Iteration   2: 2.744 ns/op
Iteration   3: 2.782 ns/op
Iteration   4: 2.772 ns/op
Iteration   5: 2.785 ns/op

# Run progress: 97.33% complete, ETA 00:15:29
# Fork: 3 of 3
# Warmup Iteration   1: 2.792 ns/op
# Warmup Iteration   2: 2.746 ns/op
# Warmup Iteration   3: 2.769 ns/op
Iteration   1: 2.768 ns/op
Iteration   2: 2.771 ns/op
Iteration   3: 2.778 ns/op
Iteration   4: 2.814 ns/op
Iteration   5: 2.803 ns/op


Result "org.openjdk.bench.valhalla.callconv.PrimitiveByte.byte_args4_targets3":
  2.777 ±(99.9%) 0.020 ns/op [Average]
  (min, avg, max) = (2.744, 2.777, 2.814), stdev = 0.018
  CI (99.9%): [2.758, 2.797] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.callconv.PrimitiveByte.byte_args8_targets0

# Run progress: 97.35% complete, ETA 00:15:21
# Fork: 1 of 3
# Warmup Iteration   1: 0.360 ns/op
# Warmup Iteration   2: 0.351 ns/op
# Warmup Iteration   3: 0.351 ns/op
Iteration   1: 0.349 ns/op
Iteration   2: 0.348 ns/op
Iteration   3: 0.348 ns/op
Iteration   4: 0.352 ns/op
Iteration   5: 0.350 ns/op

# Run progress: 97.38% complete, ETA 00:15:12
# Fork: 2 of 3
# Warmup Iteration   1: 0.354 ns/op
# Warmup Iteration   2: 0.350 ns/op
# Warmup Iteration   3: 0.349 ns/op
Iteration   1: 0.347 ns/op
Iteration   2: 0.355 ns/op
Iteration   3: 0.349 ns/op
Iteration   4: 0.350 ns/op
Iteration   5: 0.348 ns/op

# Run progress: 97.40% complete, ETA 00:15:04
# Fork: 3 of 3
# Warmup Iteration   1: 0.352 ns/op
# Warmup Iteration   2: 0.349 ns/op
# Warmup Iteration   3: 0.350 ns/op
Iteration   1: 0.348 ns/op
Iteration   2: 0.349 ns/op
Iteration   3: 0.351 ns/op
Iteration   4: 0.353 ns/op
Iteration   5: 0.350 ns/op


Result "org.openjdk.bench.valhalla.callconv.PrimitiveByte.byte_args8_targets0":
  0.350 ±(99.9%) 0.002 ns/op [Average]
  (min, avg, max) = (0.347, 0.350, 0.355), stdev = 0.002
  CI (99.9%): [0.347, 0.352] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.callconv.PrimitiveByte.byte_args8_targets1

# Run progress: 97.43% complete, ETA 00:14:55
# Fork: 1 of 3
# Warmup Iteration   1: 0.475 ns/op
# Warmup Iteration   2: 0.474 ns/op
# Warmup Iteration   3: 0.472 ns/op
Iteration   1: 0.473 ns/op
Iteration   2: 0.469 ns/op
Iteration   3: 0.475 ns/op
Iteration   4: 0.471 ns/op
Iteration   5: 0.472 ns/op

# Run progress: 97.45% complete, ETA 00:14:47
# Fork: 2 of 3
# Warmup Iteration   1: 0.478 ns/op
# Warmup Iteration   2: 0.468 ns/op
# Warmup Iteration   3: 0.473 ns/op
Iteration   1: 0.473 ns/op
Iteration   2: 0.471 ns/op
Iteration   3: 0.471 ns/op
Iteration   4: 0.472 ns/op
Iteration   5: 0.474 ns/op

# Run progress: 97.48% complete, ETA 00:14:38
# Fork: 3 of 3
# Warmup Iteration   1: 0.481 ns/op
# Warmup Iteration   2: 0.471 ns/op
# Warmup Iteration   3: 0.469 ns/op
Iteration   1: 0.468 ns/op
Iteration   2: 0.468 ns/op
Iteration   3: 0.485 ns/op
Iteration   4: 0.487 ns/op
Iteration   5: 0.486 ns/op


Result "org.openjdk.bench.valhalla.callconv.PrimitiveByte.byte_args8_targets1":
  0.474 ±(99.9%) 0.007 ns/op [Average]
  (min, avg, max) = (0.468, 0.474, 0.487), stdev = 0.006
  CI (99.9%): [0.468, 0.481] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.callconv.PrimitiveByte.byte_args8_targets2

# Run progress: 97.50% complete, ETA 00:14:29
# Fork: 1 of 3
# Warmup Iteration   1: 0.539 ns/op
# Warmup Iteration   2: 0.527 ns/op
# Warmup Iteration   3: 0.536 ns/op
Iteration   1: 0.537 ns/op
Iteration   2: 0.537 ns/op
Iteration   3: 0.535 ns/op
Iteration   4: 0.536 ns/op
Iteration   5: 0.534 ns/op

# Run progress: 97.52% complete, ETA 00:14:21
# Fork: 2 of 3
# Warmup Iteration   1: 0.537 ns/op
# Warmup Iteration   2: 0.531 ns/op
# Warmup Iteration   3: 0.537 ns/op
Iteration   1: 0.537 ns/op
Iteration   2: 0.535 ns/op
Iteration   3: 0.536 ns/op
Iteration   4: 0.531 ns/op
Iteration   5: 0.530 ns/op

# Run progress: 97.55% complete, ETA 00:14:12
# Fork: 3 of 3
# Warmup Iteration   1: 0.538 ns/op
# Warmup Iteration   2: 0.525 ns/op
# Warmup Iteration   3: 0.531 ns/op
Iteration   1: 0.531 ns/op
Iteration   2: 0.532 ns/op
Iteration   3: 0.543 ns/op
Iteration   4: 0.527 ns/op
Iteration   5: 0.528 ns/op


Result "org.openjdk.bench.valhalla.callconv.PrimitiveByte.byte_args8_targets2":
  0.534 ±(99.9%) 0.005 ns/op [Average]
  (min, avg, max) = (0.527, 0.534, 0.543), stdev = 0.004
  CI (99.9%): [0.529, 0.538] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.callconv.PrimitiveByte.byte_args8_targets3

# Run progress: 97.57% complete, ETA 00:14:04
# Fork: 1 of 3
# Warmup Iteration   1: 3.069 ns/op
# Warmup Iteration   2: 3.080 ns/op
# Warmup Iteration   3: 3.057 ns/op
Iteration   1: 3.084 ns/op
Iteration   2: 3.066 ns/op
Iteration   3: 3.052 ns/op
Iteration   4: 3.068 ns/op
Iteration   5: 3.057 ns/op

# Run progress: 97.60% complete, ETA 00:13:55
# Fork: 2 of 3
# Warmup Iteration   1: 3.084 ns/op
# Warmup Iteration   2: 3.067 ns/op
# Warmup Iteration   3: 3.066 ns/op
Iteration   1: 3.078 ns/op
Iteration   2: 3.066 ns/op
Iteration   3: 3.065 ns/op
Iteration   4: 3.052 ns/op
Iteration   5: 3.064 ns/op

# Run progress: 97.62% complete, ETA 00:13:47
# Fork: 3 of 3
# Warmup Iteration   1: 3.083 ns/op
# Warmup Iteration   2: 3.075 ns/op
# Warmup Iteration   3: 3.057 ns/op
Iteration   1: 3.036 ns/op
Iteration   2: 3.041 ns/op
Iteration   3: 3.072 ns/op
Iteration   4: 3.074 ns/op
Iteration   5: 3.125 ns/op


Result "org.openjdk.bench.valhalla.callconv.PrimitiveByte.byte_args8_targets3":
  3.067 ±(99.9%) 0.022 ns/op [Average]
  (min, avg, max) = (3.036, 3.067, 3.125), stdev = 0.021
  CI (99.9%): [3.044, 3.089] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.callconv.PrimitiveInt.int_args1_targets0

# Run progress: 97.65% complete, ETA 00:13:38
# Fork: 1 of 3
# Warmup Iteration   1: 0.198 ns/op
# Warmup Iteration   2: 0.194 ns/op
# Warmup Iteration   3: 0.196 ns/op
Iteration   1: 0.195 ns/op
Iteration   2: 0.194 ns/op
Iteration   3: 0.191 ns/op
Iteration   4: 0.189 ns/op
Iteration   5: 0.189 ns/op

# Run progress: 97.67% complete, ETA 00:13:30
# Fork: 2 of 3
# Warmup Iteration   1: 0.192 ns/op
# Warmup Iteration   2: 0.189 ns/op
# Warmup Iteration   3: 0.190 ns/op
Iteration   1: 0.190 ns/op
Iteration   2: 0.193 ns/op
Iteration   3: 0.195 ns/op
Iteration   4: 0.194 ns/op
Iteration   5: 0.192 ns/op

# Run progress: 97.70% complete, ETA 00:13:21
# Fork: 3 of 3
# Warmup Iteration   1: 0.191 ns/op
# Warmup Iteration   2: 0.190 ns/op
# Warmup Iteration   3: 0.190 ns/op
Iteration   1: 0.189 ns/op
Iteration   2: 0.191 ns/op
Iteration   3: 0.189 ns/op
Iteration   4: 0.188 ns/op
Iteration   5: 0.189 ns/op


Result "org.openjdk.bench.valhalla.callconv.PrimitiveInt.int_args1_targets0":
  0.191 ±(99.9%) 0.003 ns/op [Average]
  (min, avg, max) = (0.188, 0.191, 0.195), stdev = 0.002
  CI (99.9%): [0.189, 0.194] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.callconv.PrimitiveInt.int_args1_targets1

# Run progress: 97.72% complete, ETA 00:13:13
# Fork: 1 of 3
# Warmup Iteration   1: 0.261 ns/op
# Warmup Iteration   2: 0.256 ns/op
# Warmup Iteration   3: 0.258 ns/op
Iteration   1: 0.260 ns/op
Iteration   2: 0.259 ns/op
Iteration   3: 0.259 ns/op
Iteration   4: 0.257 ns/op
Iteration   5: 0.257 ns/op

# Run progress: 97.75% complete, ETA 00:13:04
# Fork: 2 of 3
# Warmup Iteration   1: 0.260 ns/op
# Warmup Iteration   2: 0.258 ns/op
# Warmup Iteration   3: 0.260 ns/op
Iteration   1: 0.257 ns/op
Iteration   2: 0.259 ns/op
Iteration   3: 0.259 ns/op
Iteration   4: 0.259 ns/op
Iteration   5: 0.258 ns/op

# Run progress: 97.77% complete, ETA 00:12:56
# Fork: 3 of 3
# Warmup Iteration   1: 0.262 ns/op
# Warmup Iteration   2: 0.257 ns/op
# Warmup Iteration   3: 0.259 ns/op
Iteration   1: 0.258 ns/op
Iteration   2: 0.259 ns/op
Iteration   3: 0.259 ns/op
Iteration   4: 0.260 ns/op
Iteration   5: 0.256 ns/op


Result "org.openjdk.bench.valhalla.callconv.PrimitiveInt.int_args1_targets1":
  0.259 ±(99.9%) 0.001 ns/op [Average]
  (min, avg, max) = (0.256, 0.259, 0.260), stdev = 0.001
  CI (99.9%): [0.257, 0.260] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.callconv.PrimitiveInt.int_args1_targets2

# Run progress: 97.79% complete, ETA 00:12:47
# Fork: 1 of 3
# Warmup Iteration   1: 0.340 ns/op
# Warmup Iteration   2: 0.348 ns/op
# Warmup Iteration   3: 0.341 ns/op
Iteration   1: 0.338 ns/op
Iteration   2: 0.337 ns/op
Iteration   3: 0.335 ns/op
Iteration   4: 0.333 ns/op
Iteration   5: 0.334 ns/op

# Run progress: 97.82% complete, ETA 00:12:39
# Fork: 2 of 3
# Warmup Iteration   1: 0.340 ns/op
# Warmup Iteration   2: 0.335 ns/op
# Warmup Iteration   3: 0.335 ns/op
Iteration   1: 0.334 ns/op
Iteration   2: 0.336 ns/op
Iteration   3: 0.335 ns/op
Iteration   4: 0.336 ns/op
Iteration   5: 0.334 ns/op

# Run progress: 97.84% complete, ETA 00:12:30
# Fork: 3 of 3
# Warmup Iteration   1: 0.338 ns/op
# Warmup Iteration   2: 0.334 ns/op
# Warmup Iteration   3: 0.338 ns/op
Iteration   1: 0.338 ns/op
Iteration   2: 0.338 ns/op
Iteration   3: 0.339 ns/op
Iteration   4: 0.336 ns/op
Iteration   5: 0.338 ns/op


Result "org.openjdk.bench.valhalla.callconv.PrimitiveInt.int_args1_targets2":
  0.336 ±(99.9%) 0.002 ns/op [Average]
  (min, avg, max) = (0.333, 0.336, 0.339), stdev = 0.002
  CI (99.9%): [0.334, 0.338] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.callconv.PrimitiveInt.int_args1_targets3

# Run progress: 97.87% complete, ETA 00:12:21
# Fork: 1 of 3
# Warmup Iteration   1: 2.777 ns/op
# Warmup Iteration   2: 2.764 ns/op
# Warmup Iteration   3: 2.761 ns/op
Iteration   1: 2.751 ns/op
Iteration   2: 2.763 ns/op
Iteration   3: 2.742 ns/op
Iteration   4: 2.764 ns/op
Iteration   5: 2.762 ns/op

# Run progress: 97.89% complete, ETA 00:12:13
# Fork: 2 of 3
# Warmup Iteration   1: 2.782 ns/op
# Warmup Iteration   2: 2.777 ns/op
# Warmup Iteration   3: 2.745 ns/op
Iteration   1: 2.742 ns/op
Iteration   2: 2.752 ns/op
Iteration   3: 2.738 ns/op
Iteration   4: 2.748 ns/op
Iteration   5: 2.763 ns/op

# Run progress: 97.92% complete, ETA 00:12:04
# Fork: 3 of 3
# Warmup Iteration   1: 2.753 ns/op
# Warmup Iteration   2: 2.756 ns/op
# Warmup Iteration   3: 2.748 ns/op
Iteration   1: 2.760 ns/op
Iteration   2: 2.769 ns/op
Iteration   3: 2.762 ns/op
Iteration   4: 2.787 ns/op
Iteration   5: 2.802 ns/op


Result "org.openjdk.bench.valhalla.callconv.PrimitiveInt.int_args1_targets3":
  2.760 ±(99.9%) 0.018 ns/op [Average]
  (min, avg, max) = (2.738, 2.760, 2.802), stdev = 0.017
  CI (99.9%): [2.742, 2.779] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.callconv.PrimitiveInt.int_args2_targets0

# Run progress: 97.94% complete, ETA 00:11:56
# Fork: 1 of 3
# Warmup Iteration   1: 0.197 ns/op
# Warmup Iteration   2: 0.189 ns/op
# Warmup Iteration   3: 0.189 ns/op
Iteration   1: 0.188 ns/op
Iteration   2: 0.189 ns/op
Iteration   3: 0.189 ns/op
Iteration   4: 0.189 ns/op
Iteration   5: 0.189 ns/op

# Run progress: 97.97% complete, ETA 00:11:47
# Fork: 2 of 3
# Warmup Iteration   1: 0.192 ns/op
# Warmup Iteration   2: 0.188 ns/op
# Warmup Iteration   3: 0.189 ns/op
Iteration   1: 0.188 ns/op
Iteration   2: 0.190 ns/op
Iteration   3: 0.188 ns/op
Iteration   4: 0.190 ns/op
Iteration   5: 0.189 ns/op

# Run progress: 97.99% complete, ETA 00:11:39
# Fork: 3 of 3
# Warmup Iteration   1: 0.189 ns/op
# Warmup Iteration   2: 0.187 ns/op
# Warmup Iteration   3: 0.187 ns/op
Iteration   1: 0.189 ns/op
Iteration   2: 0.188 ns/op
Iteration   3: 0.187 ns/op
Iteration   4: 0.188 ns/op
Iteration   5: 0.189 ns/op


Result "org.openjdk.bench.valhalla.callconv.PrimitiveInt.int_args2_targets0":
  0.189 ±(99.9%) 0.001 ns/op [Average]
  (min, avg, max) = (0.187, 0.189, 0.190), stdev = 0.001
  CI (99.9%): [0.188, 0.190] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.callconv.PrimitiveInt.int_args2_targets1

# Run progress: 98.01% complete, ETA 00:11:30
# Fork: 1 of 3
# Warmup Iteration   1: 0.262 ns/op
# Warmup Iteration   2: 0.258 ns/op
# Warmup Iteration   3: 0.258 ns/op
Iteration   1: 0.260 ns/op
Iteration   2: 0.258 ns/op
Iteration   3: 0.259 ns/op
Iteration   4: 0.260 ns/op
Iteration   5: 0.259 ns/op

# Run progress: 98.04% complete, ETA 00:11:22
# Fork: 2 of 3
# Warmup Iteration   1: 0.262 ns/op
# Warmup Iteration   2: 0.261 ns/op
# Warmup Iteration   3: 0.259 ns/op
Iteration   1: 0.260 ns/op
Iteration   2: 0.260 ns/op
Iteration   3: 0.260 ns/op
Iteration   4: 0.258 ns/op
Iteration   5: 0.259 ns/op

# Run progress: 98.06% complete, ETA 00:11:13
# Fork: 3 of 3
# Warmup Iteration   1: 0.263 ns/op
# Warmup Iteration   2: 0.260 ns/op
# Warmup Iteration   3: 0.258 ns/op
Iteration   1: 0.260 ns/op
Iteration   2: 0.260 ns/op
Iteration   3: 0.259 ns/op
Iteration   4: 0.263 ns/op
Iteration   5: 0.263 ns/op


Result "org.openjdk.bench.valhalla.callconv.PrimitiveInt.int_args2_targets1":
  0.260 ±(99.9%) 0.002 ns/op [Average]
  (min, avg, max) = (0.258, 0.260, 0.263), stdev = 0.002
  CI (99.9%): [0.258, 0.261] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.callconv.PrimitiveInt.int_args2_targets2

# Run progress: 98.09% complete, ETA 00:11:05
# Fork: 1 of 3
# Warmup Iteration   1: 0.342 ns/op
# Warmup Iteration   2: 0.405 ns/op
# Warmup Iteration   3: 0.332 ns/op
Iteration   1: 0.335 ns/op
Iteration   2: 0.335 ns/op
Iteration   3: 0.335 ns/op
Iteration   4: 0.336 ns/op
Iteration   5: 0.334 ns/op

# Run progress: 98.11% complete, ETA 00:10:56
# Fork: 2 of 3
# Warmup Iteration   1: 0.339 ns/op
# Warmup Iteration   2: 0.335 ns/op
# Warmup Iteration   3: 0.335 ns/op
Iteration   1: 0.337 ns/op
Iteration   2: 0.336 ns/op
Iteration   3: 0.335 ns/op
Iteration   4: 0.335 ns/op
Iteration   5: 0.336 ns/op

# Run progress: 98.14% complete, ETA 00:10:48
# Fork: 3 of 3
# Warmup Iteration   1: 0.341 ns/op
# Warmup Iteration   2: 0.336 ns/op
# Warmup Iteration   3: 0.335 ns/op
Iteration   1: 0.336 ns/op
Iteration   2: 0.335 ns/op
Iteration   3: 0.335 ns/op
Iteration   4: 0.336 ns/op
Iteration   5: 0.335 ns/op


Result "org.openjdk.bench.valhalla.callconv.PrimitiveInt.int_args2_targets2":
  0.335 ±(99.9%) 0.001 ns/op [Average]
  (min, avg, max) = (0.334, 0.335, 0.337), stdev = 0.001
  CI (99.9%): [0.335, 0.336] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.callconv.PrimitiveInt.int_args2_targets3

# Run progress: 98.16% complete, ETA 00:10:39
# Fork: 1 of 3
# Warmup Iteration   1: 2.781 ns/op
# Warmup Iteration   2: 2.770 ns/op
# Warmup Iteration   3: 2.731 ns/op
Iteration   1: 2.728 ns/op
Iteration   2: 2.763 ns/op
Iteration   3: 2.764 ns/op
Iteration   4: 2.750 ns/op
Iteration   5: 2.756 ns/op

# Run progress: 98.19% complete, ETA 00:10:31
# Fork: 2 of 3
# Warmup Iteration   1: 2.788 ns/op
# Warmup Iteration   2: 2.766 ns/op
# Warmup Iteration   3: 2.727 ns/op
Iteration   1: 2.700 ns/op
Iteration   2: 2.717 ns/op
Iteration   3: 2.717 ns/op
Iteration   4: 2.711 ns/op
Iteration   5: 2.712 ns/op

# Run progress: 98.21% complete, ETA 00:10:22
# Fork: 3 of 3
# Warmup Iteration   1: 2.749 ns/op
# Warmup Iteration   2: 2.808 ns/op
# Warmup Iteration   3: 2.798 ns/op
Iteration   1: 2.754 ns/op
Iteration   2: 2.729 ns/op
Iteration   3: 2.717 ns/op
Iteration   4: 2.725 ns/op
Iteration   5: 2.721 ns/op


Result "org.openjdk.bench.valhalla.callconv.PrimitiveInt.int_args2_targets3":
  2.731 ±(99.9%) 0.022 ns/op [Average]
  (min, avg, max) = (2.700, 2.731, 2.764), stdev = 0.021
  CI (99.9%): [2.709, 2.753] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.callconv.PrimitiveInt.int_args4_targets0

# Run progress: 98.24% complete, ETA 00:10:13
# Fork: 1 of 3
# Warmup Iteration   1: 0.188 ns/op
# Warmup Iteration   2: 0.188 ns/op
# Warmup Iteration   3: 0.189 ns/op
Iteration   1: 0.187 ns/op
Iteration   2: 0.189 ns/op
Iteration   3: 0.188 ns/op
Iteration   4: 0.188 ns/op
Iteration   5: 0.187 ns/op

# Run progress: 98.26% complete, ETA 00:10:05
# Fork: 2 of 3
# Warmup Iteration   1: 0.189 ns/op
# Warmup Iteration   2: 0.188 ns/op
# Warmup Iteration   3: 0.188 ns/op
Iteration   1: 0.188 ns/op
Iteration   2: 0.188 ns/op
Iteration   3: 0.188 ns/op
Iteration   4: 0.188 ns/op
Iteration   5: 0.190 ns/op

# Run progress: 98.28% complete, ETA 00:09:56
# Fork: 3 of 3
# Warmup Iteration   1: 0.190 ns/op
# Warmup Iteration   2: 0.189 ns/op
# Warmup Iteration   3: 0.188 ns/op
Iteration   1: 0.188 ns/op
Iteration   2: 0.185 ns/op
Iteration   3: 0.188 ns/op
Iteration   4: 0.187 ns/op
Iteration   5: 0.188 ns/op


Result "org.openjdk.bench.valhalla.callconv.PrimitiveInt.int_args4_targets0":
  0.188 ±(99.9%) 0.001 ns/op [Average]
  (min, avg, max) = (0.185, 0.188, 0.190), stdev = 0.001
  CI (99.9%): [0.187, 0.189] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.callconv.PrimitiveInt.int_args4_targets1

# Run progress: 98.31% complete, ETA 00:09:48
# Fork: 1 of 3
# Warmup Iteration   1: 0.264 ns/op
# Warmup Iteration   2: 0.261 ns/op
# Warmup Iteration   3: 0.258 ns/op
Iteration   1: 0.258 ns/op
Iteration   2: 0.257 ns/op
Iteration   3: 0.256 ns/op
Iteration   4: 0.257 ns/op
Iteration   5: 0.262 ns/op

# Run progress: 98.33% complete, ETA 00:09:39
# Fork: 2 of 3
# Warmup Iteration   1: 0.265 ns/op
# Warmup Iteration   2: 0.261 ns/op
# Warmup Iteration   3: 0.261 ns/op
Iteration   1: 0.262 ns/op
Iteration   2: 0.262 ns/op
Iteration   3: 0.262 ns/op
Iteration   4: 0.258 ns/op
Iteration   5: 0.255 ns/op

# Run progress: 98.36% complete, ETA 00:09:31
# Fork: 3 of 3
# Warmup Iteration   1: 0.263 ns/op
# Warmup Iteration   2: 0.259 ns/op
# Warmup Iteration   3: 0.255 ns/op
Iteration   1: 0.255 ns/op
Iteration   2: 0.256 ns/op
Iteration   3: 0.256 ns/op
Iteration   4: 0.254 ns/op
Iteration   5: 0.256 ns/op


Result "org.openjdk.bench.valhalla.callconv.PrimitiveInt.int_args4_targets1":
  0.258 ±(99.9%) 0.003 ns/op [Average]
  (min, avg, max) = (0.254, 0.258, 0.262), stdev = 0.003
  CI (99.9%): [0.255, 0.261] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.callconv.PrimitiveInt.int_args4_targets2

# Run progress: 98.38% complete, ETA 00:09:22
# Fork: 1 of 3
# Warmup Iteration   1: 0.337 ns/op
# Warmup Iteration   2: 0.338 ns/op
# Warmup Iteration   3: 0.334 ns/op
Iteration   1: 0.336 ns/op
Iteration   2: 0.333 ns/op
Iteration   3: 0.333 ns/op
Iteration   4: 0.333 ns/op
Iteration   5: 0.335 ns/op

# Run progress: 98.41% complete, ETA 00:09:14
# Fork: 2 of 3
# Warmup Iteration   1: 0.337 ns/op
# Warmup Iteration   2: 0.334 ns/op
# Warmup Iteration   3: 0.334 ns/op
Iteration   1: 0.334 ns/op
Iteration   2: 0.333 ns/op
Iteration   3: 0.333 ns/op
Iteration   4: 0.333 ns/op
Iteration   5: 0.334 ns/op

# Run progress: 98.43% complete, ETA 00:09:05
# Fork: 3 of 3
# Warmup Iteration   1: 0.338 ns/op
# Warmup Iteration   2: 0.335 ns/op
# Warmup Iteration   3: 0.333 ns/op
Iteration   1: 0.333 ns/op
Iteration   2: 0.333 ns/op
Iteration   3: 0.334 ns/op
Iteration   4: 0.333 ns/op
Iteration   5: 0.338 ns/op


Result "org.openjdk.bench.valhalla.callconv.PrimitiveInt.int_args4_targets2":
  0.334 ±(99.9%) 0.002 ns/op [Average]
  (min, avg, max) = (0.333, 0.334, 0.338), stdev = 0.002
  CI (99.9%): [0.332, 0.336] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.callconv.PrimitiveInt.int_args4_targets3

# Run progress: 98.46% complete, ETA 00:08:57
# Fork: 1 of 3
# Warmup Iteration   1: 2.755 ns/op
# Warmup Iteration   2: 2.729 ns/op
# Warmup Iteration   3: 2.819 ns/op
Iteration   1: 2.814 ns/op
Iteration   2: 2.777 ns/op
Iteration   3: 2.726 ns/op
Iteration   4: 2.726 ns/op
Iteration   5: 2.728 ns/op

# Run progress: 98.48% complete, ETA 00:08:48
# Fork: 2 of 3
# Warmup Iteration   1: 2.749 ns/op
# Warmup Iteration   2: 2.723 ns/op
# Warmup Iteration   3: 2.738 ns/op
Iteration   1: 2.717 ns/op
Iteration   2: 2.748 ns/op
Iteration   3: 2.732 ns/op
Iteration   4: 2.731 ns/op
Iteration   5: 2.723 ns/op

# Run progress: 98.50% complete, ETA 00:08:40
# Fork: 3 of 3
# Warmup Iteration   1: 2.750 ns/op
# Warmup Iteration   2: 2.731 ns/op
# Warmup Iteration   3: 2.726 ns/op
Iteration   1: 2.725 ns/op
Iteration   2: 2.734 ns/op
Iteration   3: 2.762 ns/op
Iteration   4: 2.803 ns/op
Iteration   5: 2.756 ns/op


Result "org.openjdk.bench.valhalla.callconv.PrimitiveInt.int_args4_targets3":
  2.747 ±(99.9%) 0.032 ns/op [Average]
  (min, avg, max) = (2.717, 2.747, 2.814), stdev = 0.030
  CI (99.9%): [2.715, 2.779] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.callconv.PrimitiveInt.int_args8_targets0

# Run progress: 98.53% complete, ETA 00:08:31
# Fork: 1 of 3
# Warmup Iteration   1: 0.197 ns/op
# Warmup Iteration   2: 0.198 ns/op
# Warmup Iteration   3: 0.197 ns/op
Iteration   1: 0.198 ns/op
Iteration   2: 0.197 ns/op
Iteration   3: 0.194 ns/op
Iteration   4: 0.193 ns/op
Iteration   5: 0.195 ns/op

# Run progress: 98.55% complete, ETA 00:08:23
# Fork: 2 of 3
# Warmup Iteration   1: 0.198 ns/op
# Warmup Iteration   2: 0.191 ns/op
# Warmup Iteration   3: 0.189 ns/op
Iteration   1: 0.191 ns/op
Iteration   2: 0.190 ns/op
Iteration   3: 0.189 ns/op
Iteration   4: 0.190 ns/op
Iteration   5: 0.194 ns/op

# Run progress: 98.58% complete, ETA 00:08:14
# Fork: 3 of 3
# Warmup Iteration   1: 0.196 ns/op
# Warmup Iteration   2: 0.191 ns/op
# Warmup Iteration   3: 0.188 ns/op
Iteration   1: 0.188 ns/op
Iteration   2: 0.195 ns/op
Iteration   3: 0.191 ns/op
Iteration   4: 0.188 ns/op
Iteration   5: 0.187 ns/op


Result "org.openjdk.bench.valhalla.callconv.PrimitiveInt.int_args8_targets0":
  0.192 ±(99.9%) 0.003 ns/op [Average]
  (min, avg, max) = (0.187, 0.192, 0.198), stdev = 0.003
  CI (99.9%): [0.189, 0.196] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.callconv.PrimitiveInt.int_args8_targets1

# Run progress: 98.60% complete, ETA 00:08:06
# Fork: 1 of 3
# Warmup Iteration   1: 0.263 ns/op
# Warmup Iteration   2: 0.261 ns/op
# Warmup Iteration   3: 0.264 ns/op
Iteration   1: 0.264 ns/op
Iteration   2: 0.264 ns/op
Iteration   3: 0.263 ns/op
Iteration   4: 0.265 ns/op
Iteration   5: 0.275 ns/op

# Run progress: 98.63% complete, ETA 00:07:57
# Fork: 2 of 3
# Warmup Iteration   1: 0.275 ns/op
# Warmup Iteration   2: 0.271 ns/op
# Warmup Iteration   3: 0.277 ns/op
Iteration   1: 0.271 ns/op
Iteration   2: 0.275 ns/op
Iteration   3: 0.265 ns/op
Iteration   4: 0.263 ns/op
Iteration   5: 0.264 ns/op

# Run progress: 98.65% complete, ETA 00:07:48
# Fork: 3 of 3
# Warmup Iteration   1: 0.263 ns/op
# Warmup Iteration   2: 0.263 ns/op
# Warmup Iteration   3: 0.264 ns/op
Iteration   1: 0.264 ns/op
Iteration   2: 0.264 ns/op
Iteration   3: 0.269 ns/op
Iteration   4: 0.271 ns/op
Iteration   5: 0.266 ns/op


Result "org.openjdk.bench.valhalla.callconv.PrimitiveInt.int_args8_targets1":
  0.267 ±(99.9%) 0.004 ns/op [Average]
  (min, avg, max) = (0.263, 0.267, 0.275), stdev = 0.004
  CI (99.9%): [0.262, 0.271] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.callconv.PrimitiveInt.int_args8_targets2

# Run progress: 98.68% complete, ETA 00:07:40
# Fork: 1 of 3
# Warmup Iteration   1: 0.337 ns/op
# Warmup Iteration   2: 0.333 ns/op
# Warmup Iteration   3: 0.333 ns/op
Iteration   1: 0.333 ns/op
Iteration   2: 0.333 ns/op
Iteration   3: 0.333 ns/op
Iteration   4: 0.333 ns/op
Iteration   5: 0.332 ns/op

# Run progress: 98.70% complete, ETA 00:07:31
# Fork: 2 of 3
# Warmup Iteration   1: 0.336 ns/op
# Warmup Iteration   2: 0.343 ns/op
# Warmup Iteration   3: 0.340 ns/op
Iteration   1: 0.340 ns/op
Iteration   2: 0.341 ns/op
Iteration   3: 0.340 ns/op
Iteration   4: 0.339 ns/op
Iteration   5: 0.333 ns/op

# Run progress: 98.73% complete, ETA 00:07:23
# Fork: 3 of 3
# Warmup Iteration   1: 0.337 ns/op
# Warmup Iteration   2: 0.334 ns/op
# Warmup Iteration   3: 0.334 ns/op
Iteration   1: 0.333 ns/op
Iteration   2: 0.333 ns/op
Iteration   3: 0.333 ns/op
Iteration   4: 0.333 ns/op
Iteration   5: 0.341 ns/op


Result "org.openjdk.bench.valhalla.callconv.PrimitiveInt.int_args8_targets2":
  0.335 ±(99.9%) 0.004 ns/op [Average]
  (min, avg, max) = (0.332, 0.335, 0.341), stdev = 0.004
  CI (99.9%): [0.331, 0.339] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.callconv.PrimitiveInt.int_args8_targets3

# Run progress: 98.75% complete, ETA 00:07:14
# Fork: 1 of 3
# Warmup Iteration   1: 3.041 ns/op
# Warmup Iteration   2: 3.000 ns/op
# Warmup Iteration   3: 3.018 ns/op
Iteration   1: 3.019 ns/op
Iteration   2: 3.018 ns/op
Iteration   3: 3.021 ns/op
Iteration   4: 3.016 ns/op
Iteration   5: 3.016 ns/op

# Run progress: 98.77% complete, ETA 00:07:06
# Fork: 2 of 3
# Warmup Iteration   1: 3.011 ns/op
# Warmup Iteration   2: 3.001 ns/op
# Warmup Iteration   3: 3.010 ns/op
Iteration   1: 3.003 ns/op
Iteration   2: 3.054 ns/op
Iteration   3: 3.070 ns/op
Iteration   4: 3.057 ns/op
Iteration   5: 3.083 ns/op

# Run progress: 98.80% complete, ETA 00:06:57
# Fork: 3 of 3
# Warmup Iteration   1: 3.043 ns/op
# Warmup Iteration   2: 3.039 ns/op
# Warmup Iteration   3: 3.014 ns/op
Iteration   1: 3.011 ns/op
Iteration   2: 3.017 ns/op
Iteration   3: 3.011 ns/op
Iteration   4: 3.003 ns/op
Iteration   5: 3.014 ns/op


Result "org.openjdk.bench.valhalla.callconv.PrimitiveInt.int_args8_targets3":
  3.028 ±(99.9%) 0.027 ns/op [Average]
  (min, avg, max) = (3.003, 3.028, 3.083), stdev = 0.025
  CI (99.9%): [3.001, 3.055] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.callconv.PrimitiveLong.long_args1_targets0

# Run progress: 98.82% complete, ETA 00:06:49
# Fork: 1 of 3
# Warmup Iteration   1: 0.189 ns/op
# Warmup Iteration   2: 0.187 ns/op
# Warmup Iteration   3: 0.187 ns/op
Iteration   1: 0.186 ns/op
Iteration   2: 0.187 ns/op
Iteration   3: 0.187 ns/op
Iteration   4: 0.187 ns/op
Iteration   5: 0.186 ns/op

# Run progress: 98.85% complete, ETA 00:06:40
# Fork: 2 of 3
# Warmup Iteration   1: 0.188 ns/op
# Warmup Iteration   2: 0.188 ns/op
# Warmup Iteration   3: 0.185 ns/op
Iteration   1: 0.186 ns/op
Iteration   2: 0.194 ns/op
Iteration   3: 0.190 ns/op
Iteration   4: 0.186 ns/op
Iteration   5: 0.185 ns/op

# Run progress: 98.87% complete, ETA 00:06:32
# Fork: 3 of 3
# Warmup Iteration   1: 0.189 ns/op
# Warmup Iteration   2: 0.186 ns/op
# Warmup Iteration   3: 0.185 ns/op
Iteration   1: 0.186 ns/op
Iteration   2: 0.185 ns/op
Iteration   3: 0.185 ns/op
Iteration   4: 0.185 ns/op
Iteration   5: 0.185 ns/op


Result "org.openjdk.bench.valhalla.callconv.PrimitiveLong.long_args1_targets0":
  0.187 ±(99.9%) 0.003 ns/op [Average]
  (min, avg, max) = (0.185, 0.187, 0.194), stdev = 0.002
  CI (99.9%): [0.184, 0.189] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.callconv.PrimitiveLong.long_args1_targets1

# Run progress: 98.90% complete, ETA 00:06:23
# Fork: 1 of 3
# Warmup Iteration   1: 0.257 ns/op
# Warmup Iteration   2: 0.252 ns/op
# Warmup Iteration   3: 0.253 ns/op
Iteration   1: 0.253 ns/op
Iteration   2: 0.253 ns/op
Iteration   3: 0.254 ns/op
Iteration   4: 0.253 ns/op
Iteration   5: 0.253 ns/op

# Run progress: 98.92% complete, ETA 00:06:15
# Fork: 2 of 3
# Warmup Iteration   1: 0.256 ns/op
# Warmup Iteration   2: 0.253 ns/op
# Warmup Iteration   3: 0.253 ns/op
Iteration   1: 0.253 ns/op
Iteration   2: 0.257 ns/op
Iteration   3: 0.257 ns/op
Iteration   4: 0.264 ns/op
Iteration   5: 0.262 ns/op

# Run progress: 98.95% complete, ETA 00:06:06
# Fork: 3 of 3
# Warmup Iteration   1: 0.264 ns/op
# Warmup Iteration   2: 0.261 ns/op
# Warmup Iteration   3: 0.254 ns/op
Iteration   1: 0.253 ns/op
Iteration   2: 0.253 ns/op
Iteration   3: 0.253 ns/op
Iteration   4: 0.253 ns/op
Iteration   5: 0.253 ns/op


Result "org.openjdk.bench.valhalla.callconv.PrimitiveLong.long_args1_targets1":
  0.255 ±(99.9%) 0.004 ns/op [Average]
  (min, avg, max) = (0.253, 0.255, 0.264), stdev = 0.004
  CI (99.9%): [0.251, 0.259] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.callconv.PrimitiveLong.long_args1_targets2

# Run progress: 98.97% complete, ETA 00:05:58
# Fork: 1 of 3
# Warmup Iteration   1: 0.342 ns/op
# Warmup Iteration   2: 0.345 ns/op
# Warmup Iteration   3: 0.399 ns/op
Iteration   1: 0.342 ns/op
Iteration   2: 0.334 ns/op
Iteration   3: 0.333 ns/op
Iteration   4: 0.333 ns/op
Iteration   5: 0.334 ns/op

# Run progress: 99.00% complete, ETA 00:05:49
# Fork: 2 of 3
# Warmup Iteration   1: 0.336 ns/op
# Warmup Iteration   2: 0.332 ns/op
# Warmup Iteration   3: 0.329 ns/op
Iteration   1: 0.329 ns/op
Iteration   2: 0.329 ns/op
Iteration   3: 0.331 ns/op
Iteration   4: 0.330 ns/op
Iteration   5: 0.329 ns/op

# Run progress: 99.02% complete, ETA 00:05:41
# Fork: 3 of 3
# Warmup Iteration   1: 0.333 ns/op
# Warmup Iteration   2: 0.399 ns/op
# Warmup Iteration   3: 0.329 ns/op
Iteration   1: 0.329 ns/op
Iteration   2: 0.329 ns/op
Iteration   3: 0.328 ns/op
Iteration   4: 0.329 ns/op
Iteration   5: 0.328 ns/op


Result "org.openjdk.bench.valhalla.callconv.PrimitiveLong.long_args1_targets2":
  0.331 ±(99.9%) 0.004 ns/op [Average]
  (min, avg, max) = (0.328, 0.331, 0.342), stdev = 0.004
  CI (99.9%): [0.327, 0.335] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.callconv.PrimitiveLong.long_args1_targets3

# Run progress: 99.04% complete, ETA 00:05:32
# Fork: 1 of 3
# Warmup Iteration   1: 2.722 ns/op
# Warmup Iteration   2: 2.704 ns/op
# Warmup Iteration   3: 2.716 ns/op
Iteration   1: 2.707 ns/op
Iteration   2: 2.706 ns/op
Iteration   3: 2.766 ns/op
Iteration   4: 2.733 ns/op
Iteration   5: 2.753 ns/op

# Run progress: 99.07% complete, ETA 00:05:23
# Fork: 2 of 3
# Warmup Iteration   1: 2.794 ns/op
# Warmup Iteration   2: 2.771 ns/op
# Warmup Iteration   3: 2.766 ns/op
Iteration   1: 2.734 ns/op
Iteration   2: 2.711 ns/op
Iteration   3: 2.705 ns/op
Iteration   4: 2.645 ns/op
Iteration   5: 2.656 ns/op

# Run progress: 99.09% complete, ETA 00:05:15
# Fork: 3 of 3
# Warmup Iteration   1: 2.722 ns/op
# Warmup Iteration   2: 2.708 ns/op
# Warmup Iteration   3: 2.703 ns/op
Iteration   1: 2.707 ns/op
Iteration   2: 2.717 ns/op
Iteration   3: 2.713 ns/op
Iteration   4: 2.713 ns/op
Iteration   5: 2.734 ns/op


Result "org.openjdk.bench.valhalla.callconv.PrimitiveLong.long_args1_targets3":
  2.713 ±(99.9%) 0.034 ns/op [Average]
  (min, avg, max) = (2.645, 2.713, 2.766), stdev = 0.031
  CI (99.9%): [2.680, 2.747] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.callconv.PrimitiveLong.long_args2_targets0

# Run progress: 99.12% complete, ETA 00:05:06
# Fork: 1 of 3
# Warmup Iteration   1: 0.190 ns/op
# Warmup Iteration   2: 0.189 ns/op
# Warmup Iteration   3: 0.189 ns/op
Iteration   1: 0.188 ns/op
Iteration   2: 0.188 ns/op
Iteration   3: 0.188 ns/op
Iteration   4: 0.189 ns/op
Iteration   5: 0.188 ns/op

# Run progress: 99.14% complete, ETA 00:04:58
# Fork: 2 of 3
# Warmup Iteration   1: 0.190 ns/op
# Warmup Iteration   2: 0.188 ns/op
# Warmup Iteration   3: 0.188 ns/op
Iteration   1: 0.187 ns/op
Iteration   2: 0.188 ns/op
Iteration   3: 0.188 ns/op
Iteration   4: 0.189 ns/op
Iteration   5: 0.188 ns/op

# Run progress: 99.17% complete, ETA 00:04:49
# Fork: 3 of 3
# Warmup Iteration   1: 0.191 ns/op
# Warmup Iteration   2: 0.192 ns/op
# Warmup Iteration   3: 0.187 ns/op
Iteration   1: 0.188 ns/op
Iteration   2: 0.187 ns/op
Iteration   3: 0.187 ns/op
Iteration   4: 0.186 ns/op
Iteration   5: 0.187 ns/op


Result "org.openjdk.bench.valhalla.callconv.PrimitiveLong.long_args2_targets0":
  0.188 ±(99.9%) 0.001 ns/op [Average]
  (min, avg, max) = (0.186, 0.188, 0.189), stdev = 0.001
  CI (99.9%): [0.187, 0.189] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.callconv.PrimitiveLong.long_args2_targets1

# Run progress: 99.19% complete, ETA 00:04:41
# Fork: 1 of 3
# Warmup Iteration   1: 0.261 ns/op
# Warmup Iteration   2: 0.259 ns/op
# Warmup Iteration   3: 0.256 ns/op
Iteration   1: 0.256 ns/op
Iteration   2: 0.257 ns/op
Iteration   3: 0.256 ns/op
Iteration   4: 0.257 ns/op
Iteration   5: 0.256 ns/op

# Run progress: 99.22% complete, ETA 00:04:32
# Fork: 2 of 3
# Warmup Iteration   1: 0.260 ns/op
# Warmup Iteration   2: 0.258 ns/op
# Warmup Iteration   3: 0.254 ns/op
Iteration   1: 0.255 ns/op
Iteration   2: 0.255 ns/op
Iteration   3: 0.254 ns/op
Iteration   4: 0.254 ns/op
Iteration   5: 0.256 ns/op

# Run progress: 99.24% complete, ETA 00:04:24
# Fork: 3 of 3
# Warmup Iteration   1: 0.260 ns/op
# Warmup Iteration   2: 0.257 ns/op
# Warmup Iteration   3: 0.255 ns/op
Iteration   1: 0.256 ns/op
Iteration   2: 0.257 ns/op
Iteration   3: 0.254 ns/op
Iteration   4: 0.258 ns/op
Iteration   5: 0.253 ns/op


Result "org.openjdk.bench.valhalla.callconv.PrimitiveLong.long_args2_targets1":
  0.256 ±(99.9%) 0.001 ns/op [Average]
  (min, avg, max) = (0.253, 0.256, 0.258), stdev = 0.001
  CI (99.9%): [0.254, 0.257] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.callconv.PrimitiveLong.long_args2_targets2

# Run progress: 99.26% complete, ETA 00:04:15
# Fork: 1 of 3
# Warmup Iteration   1: 0.339 ns/op
# Warmup Iteration   2: 0.334 ns/op
# Warmup Iteration   3: 0.334 ns/op
Iteration   1: 0.331 ns/op
Iteration   2: 0.333 ns/op
Iteration   3: 0.333 ns/op
Iteration   4: 0.330 ns/op
Iteration   5: 0.333 ns/op

# Run progress: 99.29% complete, ETA 00:04:07
# Fork: 2 of 3
# Warmup Iteration   1: 0.338 ns/op
# Warmup Iteration   2: 0.334 ns/op
# Warmup Iteration   3: 0.335 ns/op
Iteration   1: 0.333 ns/op
Iteration   2: 0.334 ns/op
Iteration   3: 0.331 ns/op
Iteration   4: 0.333 ns/op
Iteration   5: 0.333 ns/op

# Run progress: 99.31% complete, ETA 00:03:58
# Fork: 3 of 3
# Warmup Iteration   1: 0.336 ns/op
# Warmup Iteration   2: 0.333 ns/op
# Warmup Iteration   3: 0.335 ns/op
Iteration   1: 0.334 ns/op
Iteration   2: 0.332 ns/op
Iteration   3: 0.330 ns/op
Iteration   4: 0.329 ns/op
Iteration   5: 0.330 ns/op


Result "org.openjdk.bench.valhalla.callconv.PrimitiveLong.long_args2_targets2":
  0.332 ±(99.9%) 0.002 ns/op [Average]
  (min, avg, max) = (0.329, 0.332, 0.334), stdev = 0.002
  CI (99.9%): [0.330, 0.334] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.callconv.PrimitiveLong.long_args2_targets3

# Run progress: 99.34% complete, ETA 00:03:50
# Fork: 1 of 3
# Warmup Iteration   1: 2.750 ns/op
# Warmup Iteration   2: 2.732 ns/op
# Warmup Iteration   3: 2.759 ns/op
Iteration   1: 2.735 ns/op
Iteration   2: 2.720 ns/op
Iteration   3: 2.702 ns/op
Iteration   4: 2.709 ns/op
Iteration   5: 2.753 ns/op

# Run progress: 99.36% complete, ETA 00:03:41
# Fork: 2 of 3
# Warmup Iteration   1: 2.740 ns/op
# Warmup Iteration   2: 2.732 ns/op
# Warmup Iteration   3: 2.746 ns/op
Iteration   1: 2.750 ns/op
Iteration   2: 2.750 ns/op
Iteration   3: 2.726 ns/op
Iteration   4: 2.744 ns/op
Iteration   5: 2.736 ns/op

# Run progress: 99.39% complete, ETA 00:03:33
# Fork: 3 of 3
# Warmup Iteration   1: 2.753 ns/op
# Warmup Iteration   2: 2.743 ns/op
# Warmup Iteration   3: 2.746 ns/op
Iteration   1: 2.758 ns/op
Iteration   2: 2.752 ns/op
Iteration   3: 2.754 ns/op
Iteration   4: 2.750 ns/op
Iteration   5: 2.750 ns/op


Result "org.openjdk.bench.valhalla.callconv.PrimitiveLong.long_args2_targets3":
  2.739 ±(99.9%) 0.019 ns/op [Average]
  (min, avg, max) = (2.702, 2.739, 2.758), stdev = 0.018
  CI (99.9%): [2.721, 2.758] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.callconv.PrimitiveLong.long_args4_targets0

# Run progress: 99.41% complete, ETA 00:03:24
# Fork: 1 of 3
# Warmup Iteration   1: 0.187 ns/op
# Warmup Iteration   2: 0.186 ns/op
# Warmup Iteration   3: 0.185 ns/op
Iteration   1: 0.185 ns/op
Iteration   2: 0.194 ns/op
Iteration   3: 0.194 ns/op
Iteration   4: 0.196 ns/op
Iteration   5: 0.194 ns/op

# Run progress: 99.44% complete, ETA 00:03:16
# Fork: 2 of 3
# Warmup Iteration   1: 0.190 ns/op
# Warmup Iteration   2: 0.189 ns/op
# Warmup Iteration   3: 0.187 ns/op
Iteration   1: 0.188 ns/op
Iteration   2: 0.189 ns/op
Iteration   3: 0.189 ns/op
Iteration   4: 0.188 ns/op
Iteration   5: 0.187 ns/op

# Run progress: 99.46% complete, ETA 00:03:07
# Fork: 3 of 3
# Warmup Iteration   1: 0.192 ns/op
# Warmup Iteration   2: 0.190 ns/op
# Warmup Iteration   3: 0.186 ns/op
Iteration   1: 0.187 ns/op
Iteration   2: 0.189 ns/op
Iteration   3: 0.187 ns/op
Iteration   4: 0.187 ns/op
Iteration   5: 0.187 ns/op


Result "org.openjdk.bench.valhalla.callconv.PrimitiveLong.long_args4_targets0":
  0.189 ±(99.9%) 0.004 ns/op [Average]
  (min, avg, max) = (0.185, 0.189, 0.196), stdev = 0.003
  CI (99.9%): [0.186, 0.193] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.callconv.PrimitiveLong.long_args4_targets1

# Run progress: 99.49% complete, ETA 00:02:59
# Fork: 1 of 3
# Warmup Iteration   1: 0.268 ns/op
# Warmup Iteration   2: 0.266 ns/op
# Warmup Iteration   3: 0.262 ns/op
Iteration   1: 0.257 ns/op
Iteration   2: 0.257 ns/op
Iteration   3: 0.258 ns/op
Iteration   4: 0.256 ns/op
Iteration   5: 0.255 ns/op

# Run progress: 99.51% complete, ETA 00:02:50
# Fork: 2 of 3
# Warmup Iteration   1: 0.261 ns/op
# Warmup Iteration   2: 0.261 ns/op
# Warmup Iteration   3: 0.258 ns/op
Iteration   1: 0.255 ns/op
Iteration   2: 0.255 ns/op
Iteration   3: 0.259 ns/op
Iteration   4: 0.258 ns/op
Iteration   5: 0.256 ns/op

# Run progress: 99.53% complete, ETA 00:02:41
# Fork: 3 of 3
# Warmup Iteration   1: 0.261 ns/op
# Warmup Iteration   2: 0.262 ns/op
# Warmup Iteration   3: 0.255 ns/op
Iteration   1: 0.257 ns/op
Iteration   2: 0.257 ns/op
Iteration   3: 0.257 ns/op
Iteration   4: 0.266 ns/op
Iteration   5: 0.257 ns/op


Result "org.openjdk.bench.valhalla.callconv.PrimitiveLong.long_args4_targets1":
  0.257 ±(99.9%) 0.003 ns/op [Average]
  (min, avg, max) = (0.255, 0.257, 0.266), stdev = 0.003
  CI (99.9%): [0.255, 0.260] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.callconv.PrimitiveLong.long_args4_targets2

# Run progress: 99.56% complete, ETA 00:02:33
# Fork: 1 of 3
# Warmup Iteration   1: 0.338 ns/op
# Warmup Iteration   2: 0.337 ns/op
# Warmup Iteration   3: 0.337 ns/op
Iteration   1: 0.337 ns/op
Iteration   2: 0.335 ns/op
Iteration   3: 0.336 ns/op
Iteration   4: 0.336 ns/op
Iteration   5: 0.337 ns/op

# Run progress: 99.58% complete, ETA 00:02:24
# Fork: 2 of 3
# Warmup Iteration   1: 0.339 ns/op
# Warmup Iteration   2: 0.338 ns/op
# Warmup Iteration   3: 0.335 ns/op
Iteration   1: 0.336 ns/op
Iteration   2: 0.334 ns/op
Iteration   3: 0.334 ns/op
Iteration   4: 0.333 ns/op
Iteration   5: 0.336 ns/op

# Run progress: 99.61% complete, ETA 00:02:16
# Fork: 3 of 3
# Warmup Iteration   1: 0.337 ns/op
# Warmup Iteration   2: 0.337 ns/op
# Warmup Iteration   3: 0.336 ns/op
Iteration   1: 0.337 ns/op
Iteration   2: 0.336 ns/op
Iteration   3: 0.335 ns/op
Iteration   4: 0.338 ns/op
Iteration   5: 0.338 ns/op


Result "org.openjdk.bench.valhalla.callconv.PrimitiveLong.long_args4_targets2":
  0.336 ±(99.9%) 0.001 ns/op [Average]
  (min, avg, max) = (0.333, 0.336, 0.338), stdev = 0.001
  CI (99.9%): [0.334, 0.337] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.callconv.PrimitiveLong.long_args4_targets3

# Run progress: 99.63% complete, ETA 00:02:07
# Fork: 1 of 3
# Warmup Iteration   1: 2.770 ns/op
# Warmup Iteration   2: 2.740 ns/op
# Warmup Iteration   3: 2.887 ns/op
Iteration   1: 2.740 ns/op
Iteration   2: 2.752 ns/op
Iteration   3: 2.757 ns/op
Iteration   4: 2.750 ns/op
Iteration   5: 2.757 ns/op

# Run progress: 99.66% complete, ETA 00:01:59
# Fork: 2 of 3
# Warmup Iteration   1: 2.771 ns/op
# Warmup Iteration   2: 2.761 ns/op
# Warmup Iteration   3: 2.738 ns/op
Iteration   1: 2.727 ns/op
Iteration   2: 2.738 ns/op
Iteration   3: 2.760 ns/op
Iteration   4: 2.757 ns/op
Iteration   5: 2.737 ns/op

# Run progress: 99.68% complete, ETA 00:01:50
# Fork: 3 of 3
# Warmup Iteration   1: 2.767 ns/op
# Warmup Iteration   2: 2.773 ns/op
# Warmup Iteration   3: 2.761 ns/op
Iteration   1: 2.741 ns/op
Iteration   2: 2.721 ns/op
Iteration   3: 2.750 ns/op
Iteration   4: 2.743 ns/op
Iteration   5: 2.747 ns/op


Result "org.openjdk.bench.valhalla.callconv.PrimitiveLong.long_args4_targets3":
  2.745 ±(99.9%) 0.012 ns/op [Average]
  (min, avg, max) = (2.721, 2.745, 2.760), stdev = 0.011
  CI (99.9%): [2.733, 2.757] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.callconv.PrimitiveLong.long_args8_targets0

# Run progress: 99.71% complete, ETA 00:01:42
# Fork: 1 of 3
# Warmup Iteration   1: 0.189 ns/op
# Warmup Iteration   2: 0.186 ns/op
# Warmup Iteration   3: 0.188 ns/op
Iteration   1: 0.187 ns/op
Iteration   2: 0.186 ns/op
Iteration   3: 0.187 ns/op
Iteration   4: 0.186 ns/op
Iteration   5: 0.186 ns/op

# Run progress: 99.73% complete, ETA 00:01:33
# Fork: 2 of 3
# Warmup Iteration   1: 0.188 ns/op
# Warmup Iteration   2: 0.187 ns/op
# Warmup Iteration   3: 0.187 ns/op
Iteration   1: 0.186 ns/op
Iteration   2: 0.186 ns/op
Iteration   3: 0.187 ns/op
Iteration   4: 0.186 ns/op
Iteration   5: 0.186 ns/op

# Run progress: 99.75% complete, ETA 00:01:25
# Fork: 3 of 3
# Warmup Iteration   1: 0.190 ns/op
# Warmup Iteration   2: 0.189 ns/op
# Warmup Iteration   3: 0.186 ns/op
Iteration   1: 0.191 ns/op
Iteration   2: 0.187 ns/op
Iteration   3: 0.187 ns/op
Iteration   4: 0.186 ns/op
Iteration   5: 0.185 ns/op


Result "org.openjdk.bench.valhalla.callconv.PrimitiveLong.long_args8_targets0":
  0.187 ±(99.9%) 0.002 ns/op [Average]
  (min, avg, max) = (0.185, 0.187, 0.191), stdev = 0.001
  CI (99.9%): [0.185, 0.188] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.callconv.PrimitiveLong.long_args8_targets1

# Run progress: 99.78% complete, ETA 00:01:16
# Fork: 1 of 3
# Warmup Iteration   1: 0.265 ns/op
# Warmup Iteration   2: 0.264 ns/op
# Warmup Iteration   3: 0.266 ns/op
Iteration   1: 0.265 ns/op
Iteration   2: 0.265 ns/op
Iteration   3: 0.269 ns/op
Iteration   4: 0.264 ns/op
Iteration   5: 0.266 ns/op

# Run progress: 99.80% complete, ETA 00:01:08
# Fork: 2 of 3
# Warmup Iteration   1: 0.267 ns/op
# Warmup Iteration   2: 0.263 ns/op
# Warmup Iteration   3: 0.263 ns/op
Iteration   1: 0.264 ns/op
Iteration   2: 0.265 ns/op
Iteration   3: 0.264 ns/op
Iteration   4: 0.264 ns/op
Iteration   5: 0.265 ns/op

# Run progress: 99.83% complete, ETA 00:00:59
# Fork: 3 of 3
# Warmup Iteration   1: 0.267 ns/op
# Warmup Iteration   2: 0.264 ns/op
# Warmup Iteration   3: 0.265 ns/op
Iteration   1: 0.265 ns/op
Iteration   2: 0.266 ns/op
Iteration   3: 0.268 ns/op
Iteration   4: 0.263 ns/op
Iteration   5: 0.266 ns/op


Result "org.openjdk.bench.valhalla.callconv.PrimitiveLong.long_args8_targets1":
  0.265 ±(99.9%) 0.001 ns/op [Average]
  (min, avg, max) = (0.263, 0.265, 0.269), stdev = 0.001
  CI (99.9%): [0.264, 0.267] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.callconv.PrimitiveLong.long_args8_targets2

# Run progress: 99.85% complete, ETA 00:00:51
# Fork: 1 of 3
# Warmup Iteration   1: 0.340 ns/op
# Warmup Iteration   2: 0.339 ns/op
# Warmup Iteration   3: 0.335 ns/op
Iteration   1: 0.337 ns/op
Iteration   2: 0.334 ns/op
Iteration   3: 0.334 ns/op
Iteration   4: 0.336 ns/op
Iteration   5: 0.335 ns/op

# Run progress: 99.88% complete, ETA 00:00:42
# Fork: 2 of 3
# Warmup Iteration   1: 0.339 ns/op
# Warmup Iteration   2: 0.336 ns/op
# Warmup Iteration   3: 0.337 ns/op
Iteration   1: 0.335 ns/op
Iteration   2: 0.336 ns/op
Iteration   3: 0.336 ns/op
Iteration   4: 0.337 ns/op
Iteration   5: 0.337 ns/op

# Run progress: 99.90% complete, ETA 00:00:34
# Fork: 3 of 3
# Warmup Iteration   1: 0.341 ns/op
# Warmup Iteration   2: 0.337 ns/op
# Warmup Iteration   3: 0.337 ns/op
Iteration   1: 0.337 ns/op
Iteration   2: 0.335 ns/op
Iteration   3: 0.333 ns/op
Iteration   4: 0.337 ns/op
Iteration   5: 0.336 ns/op


Result "org.openjdk.bench.valhalla.callconv.PrimitiveLong.long_args8_targets2":
  0.336 ±(99.9%) 0.002 ns/op [Average]
  (min, avg, max) = (0.333, 0.336, 0.337), stdev = 0.001
  CI (99.9%): [0.334, 0.337] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 23-valhalla, OpenJDK 64-Bit Server VM, 23-valhalla+1-90
# VM invoker: /Users/Evgeniy.Zhelenskiy/Downloads/jdk-23.jdk/Contents/Home/bin/java
# VM options: --enable-preview -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/build/tmp/jmh -Duser.country=US -Duser.language=en -Duser.variant
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.bench.valhalla.callconv.PrimitiveLong.long_args8_targets3

# Run progress: 99.93% complete, ETA 00:00:25
# Fork: 1 of 3
# Warmup Iteration   1: 3.047 ns/op
# Warmup Iteration   2: 3.045 ns/op
# Warmup Iteration   3: 3.039 ns/op
Iteration   1: 3.081 ns/op
Iteration   2: 3.039 ns/op
Iteration   3: 3.034 ns/op
Iteration   4: 3.044 ns/op
Iteration   5: 3.036 ns/op

# Run progress: 99.95% complete, ETA 00:00:17
# Fork: 2 of 3
# Warmup Iteration   1: 3.064 ns/op
# Warmup Iteration   2: 3.004 ns/op
# Warmup Iteration   3: 3.015 ns/op
Iteration   1: 3.046 ns/op
Iteration   2: 3.025 ns/op
Iteration   3: 3.044 ns/op
Iteration   4: 3.052 ns/op
Iteration   5: 3.040 ns/op

# Run progress: 99.98% complete, ETA 00:00:08
# Fork: 3 of 3
# Warmup Iteration   1: 3.068 ns/op
# Warmup Iteration   2: 3.013 ns/op
# Warmup Iteration   3: 3.062 ns/op
Iteration   1: 3.029 ns/op
Iteration   2: 3.017 ns/op
Iteration   3: 3.054 ns/op
Iteration   4: 3.062 ns/op
Iteration   5: 3.053 ns/op


Result "org.openjdk.bench.valhalla.callconv.PrimitiveLong.long_args8_targets3":
  3.044 ±(99.9%) 0.017 ns/op [Average]
  (min, avg, max) = (3.017, 3.044, 3.081), stdev = 0.016
  CI (99.9%): [3.027, 3.061] (assumes normal distribution)


# Run complete. Total time: 09:39:32

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                                                             (size)  Mode  Cnt         Score          Error  Units
kotlin_benchmarks.array.copy.Identity32int.ref_arraycopy                                 100  avgt   15         9.503 ±        0.102  ns/op
kotlin_benchmarks.array.copy.Identity32int.ref_arraycopy                             1000000  avgt   15     75935.712 ±     2828.835  ns/op
kotlin_benchmarks.array.copy.Identity32int.ref_copy                                      100  avgt   15        76.378 ±        2.393  ns/op
kotlin_benchmarks.array.copy.Identity32int.ref_copy                                  1000000  avgt   15  39222433.040 ± 11875068.777  ns/op
kotlin_benchmarks.array.copy.Inline128int.Ref_to_Val_arraycopy                           100  avgt   15         9.498 ±        0.131  ns/op
kotlin_benchmarks.array.copy.Inline128int.Ref_to_Val_arraycopy                       1000000  avgt   15     72904.251 ±     1612.787  ns/op
kotlin_benchmarks.array.copy.Inline128int.Ref_to_Val_copy                                100  avgt   15       173.084 ±        0.857  ns/op
kotlin_benchmarks.array.copy.Inline128int.Ref_to_Val_copy                            1000000  avgt   15  40415357.530 ±  9078575.541  ns/op
kotlin_benchmarks.array.copy.Inline128int.Val_to_Ref_arraycopy                           100  avgt   15         9.407 ±        0.041  ns/op
kotlin_benchmarks.array.copy.Inline128int.Val_to_Ref_arraycopy                       1000000  avgt   15     72006.475 ±     1307.688  ns/op
kotlin_benchmarks.array.copy.Inline128int.Val_to_Ref_copy                                100  avgt   15       173.167 ±        0.628  ns/op
kotlin_benchmarks.array.copy.Inline128int.Val_to_Ref_copy                            1000000  avgt   15  40885643.780 ±  9742212.449  ns/op
kotlin_benchmarks.array.copy.Inline128int.Val_to_Val_arraycopy                           100  avgt   15         9.418 ±        0.101  ns/op
kotlin_benchmarks.array.copy.Inline128int.Val_to_Val_arraycopy                       1000000  avgt   15     73227.636 ±     3401.119  ns/op
kotlin_benchmarks.array.copy.Inline128int.Val_to_Val_copy                                100  avgt   15       176.291 ±        5.671  ns/op
kotlin_benchmarks.array.copy.Inline128int.Val_to_Val_copy                            1000000  avgt   15  32703808.563 ± 12755154.839  ns/op
kotlin_benchmarks.array.copy.Inline32int.Ref_to_Val_arraycopy                            100  avgt   15         9.914 ±        0.159  ns/op
kotlin_benchmarks.array.copy.Inline32int.Ref_to_Val_arraycopy                        1000000  avgt   15     68865.199 ±     1262.594  ns/op
kotlin_benchmarks.array.copy.Inline32int.Ref_to_Val_copy                                 100  avgt   15        76.251 ±        0.999  ns/op
kotlin_benchmarks.array.copy.Inline32int.Ref_to_Val_copy                             1000000  avgt   15  46728684.784 ±  8316565.697  ns/op
kotlin_benchmarks.array.copy.Inline32int.Val_to_Ref_arraycopy                            100  avgt   15        16.608 ±        5.496  ns/op
kotlin_benchmarks.array.copy.Inline32int.Val_to_Ref_arraycopy                        1000000  avgt   15     71136.189 ±     2656.599  ns/op
kotlin_benchmarks.array.copy.Inline32int.Val_to_Ref_copy                                 100  avgt   15        75.556 ±        0.690  ns/op
kotlin_benchmarks.array.copy.Inline32int.Val_to_Ref_copy                             1000000  avgt   15  40793266.709 ± 17240957.375  ns/op
kotlin_benchmarks.array.copy.Inline32int.Val_to_Val_arraycopy                            100  avgt   15         9.963 ±        0.425  ns/op
kotlin_benchmarks.array.copy.Inline32int.Val_to_Val_arraycopy                        1000000  avgt   15     72026.863 ±     4064.362  ns/op
kotlin_benchmarks.array.copy.Inline32int.Val_to_Val_copy                                 100  avgt   15        77.550 ±        2.211  ns/op
kotlin_benchmarks.array.copy.Inline32int.Val_to_Val_copy                             1000000  avgt   15  20406750.738 ±  5666466.115  ns/op
kotlin_benchmarks.array.copy.Inline64byte.Ref_to_Val_arraycopy                           100  avgt   15         9.669 ±        0.115  ns/op
kotlin_benchmarks.array.copy.Inline64byte.Ref_to_Val_arraycopy                       1000000  avgt   15     77250.454 ±     6115.950  ns/op
kotlin_benchmarks.array.copy.Inline64byte.Ref_to_Val_copy                                100  avgt   15       176.598 ±        2.548  ns/op
kotlin_benchmarks.array.copy.Inline64byte.Ref_to_Val_copy                            1000000  avgt   15  24987847.300 ± 13420079.403  ns/op
kotlin_benchmarks.array.copy.Inline64byte.Val_to_Ref_arraycopy                           100  avgt   15         9.772 ±        0.393  ns/op
kotlin_benchmarks.array.copy.Inline64byte.Val_to_Ref_arraycopy                       1000000  avgt   15     72446.934 ±     5144.211  ns/op
kotlin_benchmarks.array.copy.Inline64byte.Val_to_Ref_copy                                100  avgt   15       177.401 ±        2.761  ns/op
kotlin_benchmarks.array.copy.Inline64byte.Val_to_Ref_copy                            1000000  avgt   15  17106532.857 ±  5452373.200  ns/op
kotlin_benchmarks.array.copy.Inline64byte.Val_to_Val_arraycopy                           100  avgt   15         9.889 ±        0.255  ns/op
kotlin_benchmarks.array.copy.Inline64byte.Val_to_Val_arraycopy                       1000000  avgt   15     75709.045 ±     6548.275  ns/op
kotlin_benchmarks.array.copy.Inline64byte.Val_to_Val_copy                                100  avgt   15       177.072 ±        3.536  ns/op
kotlin_benchmarks.array.copy.Inline64byte.Val_to_Val_copy                            1000000  avgt   15  24453920.070 ±  4967008.097  ns/op
kotlin_benchmarks.array.copy.Inline64int.Ref_to_Val_arraycopy                            100  avgt   15         9.619 ±        0.058  ns/op
kotlin_benchmarks.array.copy.Inline64int.Ref_to_Val_arraycopy                        1000000  avgt   15     75684.415 ±     5548.439  ns/op
kotlin_benchmarks.array.copy.Inline64int.Ref_to_Val_copy                                 100  avgt   15       177.233 ±        1.309  ns/op
kotlin_benchmarks.array.copy.Inline64int.Ref_to_Val_copy                             1000000  avgt   15  20126002.461 ±  5670434.414  ns/op
kotlin_benchmarks.array.copy.Inline64int.Val_to_Ref_arraycopy                            100  avgt   15         9.754 ±        0.379  ns/op
kotlin_benchmarks.array.copy.Inline64int.Val_to_Ref_arraycopy                        1000000  avgt   15     74112.769 ±     6607.381  ns/op
kotlin_benchmarks.array.copy.Inline64int.Val_to_Ref_copy                                 100  avgt   15       178.359 ±        5.225  ns/op
kotlin_benchmarks.array.copy.Inline64int.Val_to_Ref_copy                             1000000  avgt   15  21554874.703 ±  8146245.954  ns/op
kotlin_benchmarks.array.copy.Inline64int.Val_to_Val_arraycopy                            100  avgt   15         9.602 ±        0.076  ns/op
kotlin_benchmarks.array.copy.Inline64int.Val_to_Val_arraycopy                        1000000  avgt   15     73524.210 ±     6026.084  ns/op
kotlin_benchmarks.array.copy.Inline64int.Val_to_Val_copy                                 100  avgt   15       176.508 ±        1.700  ns/op
kotlin_benchmarks.array.copy.Inline64int.Val_to_Val_copy                             1000000  avgt   15  21678619.846 ±  5550024.142  ns/op
kotlin_benchmarks.array.copy.InlineOpt.Ref_to_Val_arraycopy                              100  avgt   15         9.888 ±        0.180  ns/op
kotlin_benchmarks.array.copy.InlineOpt.Ref_to_Val_arraycopy                          1000000  avgt   15     77821.994 ±     5771.034  ns/op
kotlin_benchmarks.array.copy.InlineOpt.Ref_to_Val_copy                                   100  avgt   15        78.131 ±        0.758  ns/op
kotlin_benchmarks.array.copy.InlineOpt.Ref_to_Val_copy                               1000000  avgt   15  23601695.250 ±  8821939.975  ns/op
kotlin_benchmarks.array.copy.InlineOpt.Val_to_Ref_arraycopy                              100  avgt   15         9.902 ±        0.158  ns/op
kotlin_benchmarks.array.copy.InlineOpt.Val_to_Ref_arraycopy                          1000000  avgt   15     72363.912 ±     2979.080  ns/op
kotlin_benchmarks.array.copy.InlineOpt.Val_to_Ref_copy                                   100  avgt   15        77.314 ±        0.567  ns/op
kotlin_benchmarks.array.copy.InlineOpt.Val_to_Ref_copy                               1000000  avgt   15  27222912.734 ±  5012617.296  ns/op
kotlin_benchmarks.array.copy.InlineOpt.Val_to_Val_arraycopy                              100  avgt   15         9.977 ±        0.140  ns/op
kotlin_benchmarks.array.copy.InlineOpt.Val_to_Val_arraycopy                          1000000  avgt   15     72660.640 ±     5389.468  ns/op
kotlin_benchmarks.array.copy.InlineOpt.Val_to_Val_copy                                   100  avgt   15        77.674 ±        0.550  ns/op
kotlin_benchmarks.array.copy.InlineOpt.Val_to_Val_copy                               1000000  avgt   15  30448397.752 ±  4898884.078  ns/op
kotlin_benchmarks.array.copy.Primitive128.p128int_arraycopy                              100  avgt   15        28.684 ±        0.092  ns/op
kotlin_benchmarks.array.copy.Primitive128.p128int_arraycopy                          1000000  avgt   15    440839.240 ±   178171.683  ns/op
kotlin_benchmarks.array.copy.Primitive128.p128int_copy                                   100  avgt   15        55.256 ±       18.054  ns/op
kotlin_benchmarks.array.copy.Primitive128.p128int_copy                               1000000  avgt   15   1608435.768 ±   331220.736  ns/op
kotlin_benchmarks.array.copy.Primitive32.p32int_arraycopy                                100  avgt   15        30.487 ±        4.225  ns/op
kotlin_benchmarks.array.copy.Primitive32.p32int_arraycopy                            1000000  avgt   15    445775.636 ±    67537.793  ns/op
kotlin_benchmarks.array.copy.Primitive32.p32int_copy                                     100  avgt   15        47.021 ±        5.989  ns/op
kotlin_benchmarks.array.copy.Primitive32.p32int_copy                                 1000000  avgt   15    443057.932 ±   115365.911  ns/op
kotlin_benchmarks.array.copy.Primitive64.p64byte_arraycopy                               100  avgt   15        36.344 ±        7.156  ns/op
kotlin_benchmarks.array.copy.Primitive64.p64byte_arraycopy                           1000000  avgt   15    391769.274 ±   116242.832  ns/op
kotlin_benchmarks.array.copy.Primitive64.p64byte_copy                                    100  avgt   15        29.657 ±        9.597  ns/op
kotlin_benchmarks.array.copy.Primitive64.p64byte_copy                                1000000  avgt   15    381003.761 ±    85192.980  ns/op
kotlin_benchmarks.array.copy.Primitive64.p64int_arraycopy                                100  avgt   15        17.797 ±        4.206  ns/op
kotlin_benchmarks.array.copy.Primitive64.p64int_arraycopy                            1000000  avgt   15    214628.487 ±    94728.267  ns/op
kotlin_benchmarks.array.copy.Primitive64.p64int_copy                                     100  avgt   15        13.794 ±        1.720  ns/op
kotlin_benchmarks.array.copy.Primitive64.p64int_copy                                 1000000  avgt   15    265937.397 ±    41880.301  ns/op
kotlin_benchmarks.array.copy.Primitive64.p64long_arraycopy                               100  avgt   15        27.842 ±       10.626  ns/op
kotlin_benchmarks.array.copy.Primitive64.p64long_arraycopy                           1000000  avgt   15    282369.924 ±   115351.468  ns/op
kotlin_benchmarks.array.copy.Primitive64.p64long_copy                                    100  avgt   15        34.674 ±        9.792  ns/op
kotlin_benchmarks.array.copy.Primitive64.p64long_copy                                1000000  avgt   15    545272.954 ±   257386.393  ns/op
kotlin_benchmarks.array.fill.Identity32int.Def_to_Ref_as_Ref_arrayfill                   100  avgt   15       271.457 ±       57.026  ns/op
kotlin_benchmarks.array.fill.Identity32int.Def_to_Ref_as_Ref_arrayfill               1000000  avgt   15  33262191.069 ± 21516805.075  ns/op
kotlin_benchmarks.array.fill.Identity32int.Def_to_Ref_as_Ref_fill                        100  avgt   15       656.517 ±      335.483  ns/op
kotlin_benchmarks.array.fill.Identity32int.Def_to_Ref_as_Ref_fill                    1000000  avgt   15  10188425.763 ±  4775841.280  ns/op
kotlin_benchmarks.array.fill.Identity32int.New_to_Ref_as_Ref_arrayfill                   100  avgt   15       208.122 ±       52.545  ns/op
kotlin_benchmarks.array.fill.Identity32int.New_to_Ref_as_Ref_arrayfill               1000000  avgt   15  22136824.111 ± 17209870.881  ns/op
kotlin_benchmarks.array.fill.Identity32int.New_to_Ref_as_Ref_fill                        100  avgt   15       179.053 ±       39.298  ns/op
kotlin_benchmarks.array.fill.Identity32int.New_to_Ref_as_Ref_fill                    1000000  avgt   15  20830791.801 ± 10153639.807  ns/op
kotlin_benchmarks.array.fill.Identity32int.Ref_to_Ref_as_Ref_arrayfillinst               100  avgt   15       140.803 ±       42.241  ns/op
kotlin_benchmarks.array.fill.Identity32int.Ref_to_Ref_as_Ref_arrayfillinst           1000000  avgt   15  17850159.444 ± 12697918.944  ns/op
kotlin_benchmarks.array.fill.Identity32int.Ref_to_Ref_as_Ref_arrayfillstat               100  avgt   15       161.701 ±       43.301  ns/op
kotlin_benchmarks.array.fill.Identity32int.Ref_to_Ref_as_Ref_arrayfillstat           1000000  avgt   15  25127453.768 ± 11565867.985  ns/op
kotlin_benchmarks.array.fill.Identity32int.Ref_to_Ref_as_Ref_fill_fillstat               100  avgt   15       170.941 ±       50.493  ns/op
kotlin_benchmarks.array.fill.Identity32int.Ref_to_Ref_as_Ref_fill_fillstat           1000000  avgt   15  20893206.007 ± 11116617.335  ns/op
kotlin_benchmarks.array.fill.Identity32int.Ref_to_Ref_as_Ref_fillinst                    100  avgt   15       157.987 ±       26.893  ns/op
kotlin_benchmarks.array.fill.Identity32int.Ref_to_Ref_as_Ref_fillinst                1000000  avgt   15  15367115.033 ± 10420921.555  ns/op
kotlin_benchmarks.array.fill.IdentityOpt.Def_to_Ref_as_Ref_arrayfill                     100  avgt   15       182.038 ±       51.454  ns/op
kotlin_benchmarks.array.fill.IdentityOpt.Def_to_Ref_as_Ref_arrayfill                 1000000  avgt   15  12808723.917 ± 11457586.505  ns/op
kotlin_benchmarks.array.fill.IdentityOpt.Def_to_Ref_as_Ref_fill                          100  avgt   15       468.604 ±      141.127  ns/op
kotlin_benchmarks.array.fill.IdentityOpt.Def_to_Ref_as_Ref_fill                      1000000  avgt   15  10350215.920 ±  7735514.932  ns/op
kotlin_benchmarks.array.fill.IdentityOpt.New_to_Ref_as_Ref_arrayfill                     100  avgt   15       201.962 ±       59.328  ns/op
kotlin_benchmarks.array.fill.IdentityOpt.New_to_Ref_as_Ref_arrayfill                 1000000  avgt   15  23204672.940 ± 17462357.026  ns/op
kotlin_benchmarks.array.fill.IdentityOpt.New_to_Ref_as_Ref_fill                          100  avgt   15       217.537 ±       64.643  ns/op
kotlin_benchmarks.array.fill.IdentityOpt.New_to_Ref_as_Ref_fill                      1000000  avgt   15  28362654.108 ± 14015239.691  ns/op
kotlin_benchmarks.array.fill.IdentityOpt.Ref_to_Ref_as_Ref_arrayfillinst                 100  avgt   15       171.504 ±       33.740  ns/op
kotlin_benchmarks.array.fill.IdentityOpt.Ref_to_Ref_as_Ref_arrayfillinst             1000000  avgt   15  24997403.361 ± 16079766.989  ns/op
kotlin_benchmarks.array.fill.IdentityOpt.Ref_to_Ref_as_Ref_arrayfillstat                 100  avgt   15       149.670 ±       50.602  ns/op
kotlin_benchmarks.array.fill.IdentityOpt.Ref_to_Ref_as_Ref_arrayfillstat             1000000  avgt   15  29511169.986 ± 10203663.466  ns/op
kotlin_benchmarks.array.fill.IdentityOpt.Ref_to_Ref_as_Ref_fill_fillstat                 100  avgt   15       144.527 ±       54.432  ns/op
kotlin_benchmarks.array.fill.IdentityOpt.Ref_to_Ref_as_Ref_fill_fillstat             1000000  avgt   15  26989752.904 ± 17525323.550  ns/op
kotlin_benchmarks.array.fill.IdentityOpt.Ref_to_Ref_as_Ref_fillinst                      100  avgt   15       153.164 ±       34.378  ns/op
kotlin_benchmarks.array.fill.IdentityOpt.Ref_to_Ref_as_Ref_fillinst                  1000000  avgt   15  42605716.502 ± 16458289.079  ns/op
kotlin_benchmarks.array.fill.Inline128int.Def_to_Ref_as_Ref_arrayfill                    100  avgt   15       326.057 ±       55.482  ns/op
kotlin_benchmarks.array.fill.Inline128int.Def_to_Ref_as_Ref_arrayfill                1000000  avgt   15  29226726.348 ± 14643734.046  ns/op
kotlin_benchmarks.array.fill.Inline128int.Def_to_Ref_as_Ref_fill                         100  avgt   15      1380.771 ±      426.508  ns/op
kotlin_benchmarks.array.fill.Inline128int.Def_to_Ref_as_Ref_fill                     1000000  avgt   15  14014974.751 ±  9131617.910  ns/op
kotlin_benchmarks.array.fill.Inline128int.Def_to_Val_as_Val_arrayfill                    100  avgt   15       369.204 ±       80.884  ns/op
kotlin_benchmarks.array.fill.Inline128int.Def_to_Val_as_Val_arrayfill                1000000  avgt   15  29204390.850 ±  7682504.989  ns/op
kotlin_benchmarks.array.fill.Inline128int.Def_to_Val_as_Val_fill                         100  avgt   15      1109.867 ±      309.330  ns/op
kotlin_benchmarks.array.fill.Inline128int.Def_to_Val_as_Val_fill                     1000000  avgt   15  11915877.706 ±  5266946.586  ns/op
kotlin_benchmarks.array.fill.Inline128int.New_to_Ref_as_Ref_arrayfill                    100  avgt   15       269.883 ±       72.065  ns/op
kotlin_benchmarks.array.fill.Inline128int.New_to_Ref_as_Ref_arrayfill                1000000  avgt   15  26497466.623 ± 20297040.557  ns/op
kotlin_benchmarks.array.fill.Inline128int.New_to_Ref_as_Ref_fill                         100  avgt   15       624.082 ±      137.313  ns/op
kotlin_benchmarks.array.fill.Inline128int.New_to_Ref_as_Ref_fill                     1000000  avgt   15  11501474.879 ±  6323788.584  ns/op
kotlin_benchmarks.array.fill.Inline128int.New_to_Val_as_Val_arrayfill                    100  avgt   15       280.585 ±       61.303  ns/op
kotlin_benchmarks.array.fill.Inline128int.New_to_Val_as_Val_arrayfill                1000000  avgt   15  23107716.960 ± 16226621.640  ns/op
kotlin_benchmarks.array.fill.Inline128int.New_to_Val_as_Val_fill                         100  avgt   15       722.810 ±      164.340  ns/op
kotlin_benchmarks.array.fill.Inline128int.New_to_Val_as_Val_fill                     1000000  avgt   15  16189325.222 ±  9425074.098  ns/op
kotlin_benchmarks.array.fill.Inline128int.Ref_to_Ref_as_Ref_arrayfillinst                100  avgt   15       275.613 ±       51.733  ns/op
kotlin_benchmarks.array.fill.Inline128int.Ref_to_Ref_as_Ref_arrayfillinst            1000000  avgt   15  25002664.370 ± 22362834.334  ns/op
kotlin_benchmarks.array.fill.Inline128int.Ref_to_Ref_as_Ref_arrayfillstat                100  avgt   15       257.639 ±       45.238  ns/op
kotlin_benchmarks.array.fill.Inline128int.Ref_to_Ref_as_Ref_arrayfillstat            1000000  avgt   15  29726557.413 ± 18641926.494  ns/op
kotlin_benchmarks.array.fill.Inline128int.Ref_to_Ref_as_Ref_fillinst                     100  avgt   15       304.317 ±       55.634  ns/op
kotlin_benchmarks.array.fill.Inline128int.Ref_to_Ref_as_Ref_fillinst                 1000000  avgt   15  28581882.552 ± 19213103.420  ns/op
kotlin_benchmarks.array.fill.Inline128int.Ref_to_Ref_as_Ref_fillstat                     100  avgt   15       259.724 ±       52.939  ns/op
kotlin_benchmarks.array.fill.Inline128int.Ref_to_Ref_as_Ref_fillstat                 1000000  avgt   15  25421836.039 ± 16578720.266  ns/op
kotlin_benchmarks.array.fill.Inline128int.Ref_to_Val_as_Val_arrayfillinst                100  avgt   15       259.597 ±       63.799  ns/op
kotlin_benchmarks.array.fill.Inline128int.Ref_to_Val_as_Val_arrayfillinst            1000000  avgt   15  22496113.839 ± 13468495.233  ns/op
kotlin_benchmarks.array.fill.Inline128int.Ref_to_Val_as_Val_arrayfillstat                100  avgt   15       283.228 ±       76.314  ns/op
kotlin_benchmarks.array.fill.Inline128int.Ref_to_Val_as_Val_arrayfillstat            1000000  avgt   15  29120101.495 ± 12668363.225  ns/op
kotlin_benchmarks.array.fill.Inline128int.Ref_to_Val_as_Val_fillinst                     100  avgt   15       279.814 ±       50.841  ns/op
kotlin_benchmarks.array.fill.Inline128int.Ref_to_Val_as_Val_fillinst                 1000000  avgt   15  25145999.781 ± 12069910.590  ns/op
kotlin_benchmarks.array.fill.Inline128int.Ref_to_Val_as_Val_fillstat                     100  avgt   15       270.873 ±       57.722  ns/op
kotlin_benchmarks.array.fill.Inline128int.Ref_to_Val_as_Val_fillstat                 1000000  avgt   15  25605753.234 ± 20438084.143  ns/op
kotlin_benchmarks.array.fill.Inline128int.Val_to_Ref_as_Ref_arrayfillinst                100  avgt   15       262.478 ±       44.885  ns/op
kotlin_benchmarks.array.fill.Inline128int.Val_to_Ref_as_Ref_arrayfillinst            1000000  avgt   15  42551552.334 ± 17107968.400  ns/op
kotlin_benchmarks.array.fill.Inline128int.Val_to_Ref_as_Ref_arrayfillstat                100  avgt   15       300.836 ±       42.232  ns/op
kotlin_benchmarks.array.fill.Inline128int.Val_to_Ref_as_Ref_arrayfillstat            1000000  avgt   15  24623536.371 ± 19114514.011  ns/op
kotlin_benchmarks.array.fill.Inline128int.Val_to_Ref_as_Ref_fillinst                     100  avgt   15       345.829 ±       34.192  ns/op
kotlin_benchmarks.array.fill.Inline128int.Val_to_Ref_as_Ref_fillinst                 1000000  avgt   15  19820674.294 ± 15831163.293  ns/op
kotlin_benchmarks.array.fill.Inline128int.Val_to_Ref_as_Ref_fillstat                     100  avgt   15       280.714 ±       49.331  ns/op
kotlin_benchmarks.array.fill.Inline128int.Val_to_Ref_as_Ref_fillstat                 1000000  avgt   15  24616661.477 ± 13082280.469  ns/op
kotlin_benchmarks.array.fill.Inline128int.Val_to_Val_as_Val_arrayfillinst                100  avgt   15       256.845 ±       37.481  ns/op
kotlin_benchmarks.array.fill.Inline128int.Val_to_Val_as_Val_arrayfillinst            1000000  avgt   15  24504948.271 ± 15064815.061  ns/op
kotlin_benchmarks.array.fill.Inline128int.Val_to_Val_as_Val_arrayfillstat                100  avgt   15       233.114 ±       63.139  ns/op
kotlin_benchmarks.array.fill.Inline128int.Val_to_Val_as_Val_arrayfillstat            1000000  avgt   15  22137782.272 ± 13601078.848  ns/op
kotlin_benchmarks.array.fill.Inline128int.Val_to_Val_as_Val_fillinst                     100  avgt   15       267.872 ±       55.618  ns/op
kotlin_benchmarks.array.fill.Inline128int.Val_to_Val_as_Val_fillinst                 1000000  avgt   15  23215886.838 ±  9873804.392  ns/op
kotlin_benchmarks.array.fill.Inline128int.Val_to_Val_as_Val_fillstat                     100  avgt   15       257.795 ±       58.628  ns/op
kotlin_benchmarks.array.fill.Inline128int.Val_to_Val_as_Val_fillstat                 1000000  avgt   15  23649919.886 ±  9814118.008  ns/op
kotlin_benchmarks.array.fill.Inline32int.Def_to_Ref_as_Ref_arrayfill                     100  avgt   15       205.306 ±       33.645  ns/op
kotlin_benchmarks.array.fill.Inline32int.Def_to_Ref_as_Ref_arrayfill                 1000000  avgt   15  15893850.332 ± 10803700.237  ns/op
kotlin_benchmarks.array.fill.Inline32int.Def_to_Ref_as_Ref_fill                          100  avgt   15       162.604 ±       31.055  ns/op
kotlin_benchmarks.array.fill.Inline32int.Def_to_Ref_as_Ref_fill                      1000000  avgt   15  14470046.717 ± 12169492.792  ns/op
kotlin_benchmarks.array.fill.Inline32int.Def_to_Val_as_Val_arrayfill                     100  avgt   15       170.668 ±       47.209  ns/op
kotlin_benchmarks.array.fill.Inline32int.Def_to_Val_as_Val_arrayfill                 1000000  avgt   15   9668117.878 ± 13664068.288  ns/op
kotlin_benchmarks.array.fill.Inline32int.Def_to_Val_as_Val_fill                          100  avgt   15       162.303 ±       29.973  ns/op
kotlin_benchmarks.array.fill.Inline32int.Def_to_Val_as_Val_fill                      1000000  avgt   15  24133772.127 ±  9898907.368  ns/op
kotlin_benchmarks.array.fill.Inline32int.New_to_Ref_as_Ref_arrayfill                     100  avgt   15       220.086 ±       58.136  ns/op
kotlin_benchmarks.array.fill.Inline32int.New_to_Ref_as_Ref_arrayfill                 1000000  avgt   15  28130074.879 ± 14518900.249  ns/op
kotlin_benchmarks.array.fill.Inline32int.New_to_Ref_as_Ref_fill                          100  avgt   15       681.625 ±      236.919  ns/op
kotlin_benchmarks.array.fill.Inline32int.New_to_Ref_as_Ref_fill                      1000000  avgt   15   4847954.778 ±  1708041.132  ns/op
kotlin_benchmarks.array.fill.Inline32int.New_to_Val_as_Val_arrayfill                     100  avgt   15       228.089 ±       51.909  ns/op
kotlin_benchmarks.array.fill.Inline32int.New_to_Val_as_Val_arrayfill                 1000000  avgt   15  34787943.330 ± 10254248.378  ns/op
kotlin_benchmarks.array.fill.Inline32int.New_to_Val_as_Val_fill                          100  avgt   15       522.334 ±      144.417  ns/op
kotlin_benchmarks.array.fill.Inline32int.New_to_Val_as_Val_fill                      1000000  avgt   15   5041107.108 ±  1876254.232  ns/op
kotlin_benchmarks.array.fill.Inline32int.Ref_to_Ref_as_Ref_arrayfillinst                 100  avgt   15       149.755 ±       42.190  ns/op
kotlin_benchmarks.array.fill.Inline32int.Ref_to_Ref_as_Ref_arrayfillinst             1000000  avgt   15  18635667.266 ± 15210901.382  ns/op
kotlin_benchmarks.array.fill.Inline32int.Ref_to_Ref_as_Ref_arrayfillstat                 100  avgt   15       166.108 ±       28.027  ns/op
kotlin_benchmarks.array.fill.Inline32int.Ref_to_Ref_as_Ref_arrayfillstat             1000000  avgt   15  26780278.061 ± 17494061.955  ns/op
kotlin_benchmarks.array.fill.Inline32int.Ref_to_Ref_as_Ref_fillinst                      100  avgt   15       202.743 ±       26.467  ns/op
kotlin_benchmarks.array.fill.Inline32int.Ref_to_Ref_as_Ref_fillinst                  1000000  avgt   15  18824679.014 ± 17213417.929  ns/op
kotlin_benchmarks.array.fill.Inline32int.Ref_to_Ref_as_Ref_fillstat                      100  avgt   15       114.346 ±       71.553  ns/op
kotlin_benchmarks.array.fill.Inline32int.Ref_to_Ref_as_Ref_fillstat                  1000000  avgt   15  35635470.885 ± 17230038.639  ns/op
kotlin_benchmarks.array.fill.Inline32int.Ref_to_Val_as_Val_arrayfillinst                 100  avgt   15        70.726 ±        2.603  ns/op
kotlin_benchmarks.array.fill.Inline32int.Ref_to_Val_as_Val_arrayfillinst             1000000  avgt   15  27019635.831 ± 12588511.414  ns/op
kotlin_benchmarks.array.fill.Inline32int.Ref_to_Val_as_Val_arrayfillstat                 100  avgt   15        70.283 ±        0.731  ns/op
kotlin_benchmarks.array.fill.Inline32int.Ref_to_Val_as_Val_arrayfillstat             1000000  avgt   15  40335086.285 ± 11750426.663  ns/op
kotlin_benchmarks.array.fill.Inline32int.Ref_to_Val_as_Val_fillinst                      100  avgt   15        73.683 ±        1.265  ns/op
kotlin_benchmarks.array.fill.Inline32int.Ref_to_Val_as_Val_fillinst                  1000000  avgt   15  18120012.968 ±  6774270.065  ns/op
kotlin_benchmarks.array.fill.Inline32int.Ref_to_Val_as_Val_fillstat                      100  avgt   15        71.008 ±        3.704  ns/op
kotlin_benchmarks.array.fill.Inline32int.Ref_to_Val_as_Val_fillstat                  1000000  avgt   15  38720014.493 ± 13698513.591  ns/op
kotlin_benchmarks.array.fill.Inline32int.Val_to_Ref_as_Ref_arrayfillinst                 100  avgt   15        67.090 ±        1.635  ns/op
kotlin_benchmarks.array.fill.Inline32int.Val_to_Ref_as_Ref_arrayfillinst             1000000  avgt   15  35246683.214 ± 16214673.313  ns/op
kotlin_benchmarks.array.fill.Inline32int.Val_to_Ref_as_Ref_arrayfillstat                 100  avgt   15        69.983 ±        0.561  ns/op
kotlin_benchmarks.array.fill.Inline32int.Val_to_Ref_as_Ref_arrayfillstat             1000000  avgt   15  28625459.964 ± 15187343.961  ns/op
kotlin_benchmarks.array.fill.Inline32int.Val_to_Ref_as_Ref_fillinst                      100  avgt   15        74.141 ±        0.856  ns/op
kotlin_benchmarks.array.fill.Inline32int.Val_to_Ref_as_Ref_fillinst                  1000000  avgt   15  29735365.606 ±  4553141.445  ns/op
kotlin_benchmarks.array.fill.Inline32int.Val_to_Ref_as_Ref_fillstat                      100  avgt   15        69.769 ±        0.357  ns/op
kotlin_benchmarks.array.fill.Inline32int.Val_to_Ref_as_Ref_fillstat                  1000000  avgt   15  32674259.091 ±  4121477.609  ns/op
kotlin_benchmarks.array.fill.Inline32int.Val_to_Val_as_Val_arrayfillinst                 100  avgt   15        70.247 ±        0.393  ns/op
kotlin_benchmarks.array.fill.Inline32int.Val_to_Val_as_Val_arrayfillinst             1000000  avgt   15  33554300.811 ±  4018342.653  ns/op
kotlin_benchmarks.array.fill.Inline32int.Val_to_Val_as_Val_arrayfillstat                 100  avgt   15        70.557 ±        1.200  ns/op
kotlin_benchmarks.array.fill.Inline32int.Val_to_Val_as_Val_arrayfillstat             1000000  avgt   15  32806339.043 ±  3550676.561  ns/op
kotlin_benchmarks.array.fill.Inline32int.Val_to_Val_as_Val_fillinst                      100  avgt   15        74.041 ±        0.698  ns/op
kotlin_benchmarks.array.fill.Inline32int.Val_to_Val_as_Val_fillinst                  1000000  avgt   15  29453564.750 ±  7951042.649  ns/op
kotlin_benchmarks.array.fill.Inline32int.Val_to_Val_as_Val_fillstat                      100  avgt   15        69.790 ±        0.447  ns/op
kotlin_benchmarks.array.fill.Inline32int.Val_to_Val_as_Val_fillstat                  1000000  avgt   15  27929182.511 ±  8293144.706  ns/op
kotlin_benchmarks.array.fill.Inline64byte.Def_to_Ref_as_Ref_arrayfill                    100  avgt   15       136.872 ±        1.370  ns/op
kotlin_benchmarks.array.fill.Inline64byte.Def_to_Ref_as_Ref_arrayfill                1000000  avgt   15  34230637.806 ±  2911407.872  ns/op
kotlin_benchmarks.array.fill.Inline64byte.Def_to_Ref_as_Ref_fill                         100  avgt   15       364.136 ±        4.520  ns/op
kotlin_benchmarks.array.fill.Inline64byte.Def_to_Ref_as_Ref_fill                     1000000  avgt   15   3750654.118 ±    79241.933  ns/op
kotlin_benchmarks.array.fill.Inline64byte.Def_to_Val_as_Val_arrayfill                    100  avgt   15       136.846 ±        1.265  ns/op
kotlin_benchmarks.array.fill.Inline64byte.Def_to_Val_as_Val_arrayfill                1000000  avgt   15  35437344.423 ±  3278371.956  ns/op
kotlin_benchmarks.array.fill.Inline64byte.Def_to_Val_as_Val_fill                         100  avgt   15       387.768 ±       30.388  ns/op
kotlin_benchmarks.array.fill.Inline64byte.Def_to_Val_as_Val_fill                     1000000  avgt   15   4851308.309 ±  1538701.428  ns/op
kotlin_benchmarks.array.fill.Inline64byte.New_to_Ref_as_Ref_arrayfill                    100  avgt   15       353.370 ±      156.387  ns/op
kotlin_benchmarks.array.fill.Inline64byte.New_to_Ref_as_Ref_arrayfill                1000000  avgt   15  50034311.073 ± 13084717.365  ns/op
kotlin_benchmarks.array.fill.Inline64byte.New_to_Ref_as_Ref_fill                         100  avgt   15      1051.567 ±      150.354  ns/op
kotlin_benchmarks.array.fill.Inline64byte.New_to_Ref_as_Ref_fill                     1000000  avgt   15  26762877.306 ± 16645736.560  ns/op
kotlin_benchmarks.array.fill.Inline64byte.New_to_Val_as_Val_arrayfill                    100  avgt   15       416.260 ±       74.507  ns/op
kotlin_benchmarks.array.fill.Inline64byte.New_to_Val_as_Val_arrayfill                1000000  avgt   15  10140193.680 ±  8144081.759  ns/op
kotlin_benchmarks.array.fill.Inline64byte.New_to_Val_as_Val_fill                         100  avgt   15       811.416 ±      140.046  ns/op
kotlin_benchmarks.array.fill.Inline64byte.New_to_Val_as_Val_fill                     1000000  avgt   15   9351667.516 ±  4159955.163  ns/op
kotlin_benchmarks.array.fill.Inline64byte.Ref_to_Ref_as_Ref_arrayfillinst                100  avgt   15       201.620 ±       74.096  ns/op
kotlin_benchmarks.array.fill.Inline64byte.Ref_to_Ref_as_Ref_arrayfillinst            1000000  avgt   15  38809587.311 ±  7727969.297  ns/op
kotlin_benchmarks.array.fill.Inline64byte.Ref_to_Ref_as_Ref_arrayfillstat                100  avgt   15       167.900 ±       58.298  ns/op
kotlin_benchmarks.array.fill.Inline64byte.Ref_to_Ref_as_Ref_arrayfillstat            1000000  avgt   15  37373810.403 ±  6779548.179  ns/op
kotlin_benchmarks.array.fill.Inline64byte.Ref_to_Ref_as_Ref_fillinst                     100  avgt   15       216.859 ±       79.138  ns/op
kotlin_benchmarks.array.fill.Inline64byte.Ref_to_Ref_as_Ref_fillinst                 1000000  avgt   15  33087017.646 ±  3773010.174  ns/op
kotlin_benchmarks.array.fill.Inline64byte.Ref_to_Ref_as_Ref_fillstat                     100  avgt   15       200.808 ±       58.074  ns/op
kotlin_benchmarks.array.fill.Inline64byte.Ref_to_Ref_as_Ref_fillstat                 1000000  avgt   15  34689806.800 ± 15373323.733  ns/op
kotlin_benchmarks.array.fill.Inline64byte.Ref_to_Val_as_Val_arrayfillinst                100  avgt   15       263.227 ±       62.422  ns/op
kotlin_benchmarks.array.fill.Inline64byte.Ref_to_Val_as_Val_arrayfillinst            1000000  avgt   15  23834440.776 ± 23110825.111  ns/op
kotlin_benchmarks.array.fill.Inline64byte.Ref_to_Val_as_Val_arrayfillstat                100  avgt   15       260.404 ±       50.401  ns/op
kotlin_benchmarks.array.fill.Inline64byte.Ref_to_Val_as_Val_arrayfillstat            1000000  avgt   15  38417394.298 ± 24542315.516  ns/op
kotlin_benchmarks.array.fill.Inline64byte.Ref_to_Val_as_Val_fillinst                     100  avgt   15       338.640 ±       37.604  ns/op
kotlin_benchmarks.array.fill.Inline64byte.Ref_to_Val_as_Val_fillinst                 1000000  avgt   15  32703074.921 ± 20149866.984  ns/op
kotlin_benchmarks.array.fill.Inline64byte.Ref_to_Val_as_Val_fillstat                     100  avgt   15       247.676 ±       68.741  ns/op
kotlin_benchmarks.array.fill.Inline64byte.Ref_to_Val_as_Val_fillstat                 1000000  avgt   15  26347662.288 ± 12993389.437  ns/op
kotlin_benchmarks.array.fill.Inline64byte.Val_to_Ref_as_Ref_arrayfillinst                100  avgt   15       208.676 ±       64.186  ns/op
kotlin_benchmarks.array.fill.Inline64byte.Val_to_Ref_as_Ref_arrayfillinst            1000000  avgt   15  42198129.165 ± 13094191.042  ns/op
kotlin_benchmarks.array.fill.Inline64byte.Val_to_Ref_as_Ref_arrayfillstat                100  avgt   15       240.957 ±       82.528  ns/op
kotlin_benchmarks.array.fill.Inline64byte.Val_to_Ref_as_Ref_arrayfillstat            1000000  avgt   15  32254504.876 ± 14241947.341  ns/op
kotlin_benchmarks.array.fill.Inline64byte.Val_to_Ref_as_Ref_fillinst                     100  avgt   15       276.494 ±       77.690  ns/op
kotlin_benchmarks.array.fill.Inline64byte.Val_to_Ref_as_Ref_fillinst                 1000000  avgt   15  38142216.611 ± 18413650.845  ns/op
kotlin_benchmarks.array.fill.Inline64byte.Val_to_Ref_as_Ref_fillstat                     100  avgt   15       229.087 ±       44.788  ns/op
kotlin_benchmarks.array.fill.Inline64byte.Val_to_Ref_as_Ref_fillstat                 1000000  avgt   15  28338068.668 ± 18962445.511  ns/op
kotlin_benchmarks.array.fill.Inline64byte.Val_to_Val_as_Val_arrayfillinst                100  avgt   15       299.498 ±       37.521  ns/op
kotlin_benchmarks.array.fill.Inline64byte.Val_to_Val_as_Val_arrayfillinst            1000000  avgt   15  25180707.053 ± 26606699.633  ns/op
kotlin_benchmarks.array.fill.Inline64byte.Val_to_Val_as_Val_arrayfillstat                100  avgt   15       319.500 ±       51.999  ns/op
kotlin_benchmarks.array.fill.Inline64byte.Val_to_Val_as_Val_arrayfillstat            1000000  avgt   15  29326945.633 ± 17520269.587  ns/op
kotlin_benchmarks.array.fill.Inline64byte.Val_to_Val_as_Val_fillinst                     100  avgt   15       321.824 ±       45.781  ns/op
kotlin_benchmarks.array.fill.Inline64byte.Val_to_Val_as_Val_fillinst                 1000000  avgt   15  29481421.314 ± 20358099.010  ns/op
kotlin_benchmarks.array.fill.Inline64byte.Val_to_Val_as_Val_fillstat                     100  avgt   15       306.060 ±       58.232  ns/op
kotlin_benchmarks.array.fill.Inline64byte.Val_to_Val_as_Val_fillstat                 1000000  avgt   15  40977921.637 ± 20590960.584  ns/op
kotlin_benchmarks.array.fill.Inline64int.Def_to_Ref_as_Ref_arrayfill                     100  avgt   15       322.774 ±       58.176  ns/op
kotlin_benchmarks.array.fill.Inline64int.Def_to_Ref_as_Ref_arrayfill                 1000000  avgt   15  31451496.210 ± 19513529.838  ns/op
kotlin_benchmarks.array.fill.Inline64int.Def_to_Ref_as_Ref_fill                          100  avgt   15       876.248 ±       97.131  ns/op
kotlin_benchmarks.array.fill.Inline64int.Def_to_Ref_as_Ref_fill                      1000000  avgt   15   8922491.071 ±  2247914.298  ns/op
kotlin_benchmarks.array.fill.Inline64int.Def_to_Val_as_Val_arrayfill                     100  avgt   15       309.455 ±       71.422  ns/op
kotlin_benchmarks.array.fill.Inline64int.Def_to_Val_as_Val_arrayfill                 1000000  avgt   15  35040324.710 ± 25722307.131  ns/op
kotlin_benchmarks.array.fill.Inline64int.Def_to_Val_as_Val_fill                          100  avgt   15       694.555 ±      156.209  ns/op
kotlin_benchmarks.array.fill.Inline64int.Def_to_Val_as_Val_fill                      1000000  avgt   15   8578702.557 ±  3662619.605  ns/op
kotlin_benchmarks.array.fill.Inline64int.New_to_Ref_as_Ref_arrayfill                     100  avgt   15       349.303 ±       65.804  ns/op
kotlin_benchmarks.array.fill.Inline64int.New_to_Ref_as_Ref_arrayfill                 1000000  avgt   15  29006912.878 ± 21608211.550  ns/op
kotlin_benchmarks.array.fill.Inline64int.New_to_Ref_as_Ref_fill                          100  avgt   15       835.218 ±      117.715  ns/op
kotlin_benchmarks.array.fill.Inline64int.New_to_Ref_as_Ref_fill                      1000000  avgt   15  15850000.827 ± 10829762.654  ns/op
kotlin_benchmarks.array.fill.Inline64int.New_to_Val_as_Val_arrayfill                     100  avgt   15       357.143 ±       23.917  ns/op
kotlin_benchmarks.array.fill.Inline64int.New_to_Val_as_Val_arrayfill                 1000000  avgt   15  43957186.739 ± 23048764.270  ns/op
kotlin_benchmarks.array.fill.Inline64int.New_to_Val_as_Val_fill                          100  avgt   15       850.903 ±       83.001  ns/op
kotlin_benchmarks.array.fill.Inline64int.New_to_Val_as_Val_fill                      1000000  avgt   15  11760680.446 ±  3843403.664  ns/op
kotlin_benchmarks.array.fill.Inline64int.Ref_to_Ref_as_Ref_arrayfillinst                 100  avgt   15       290.522 ±       22.191  ns/op
kotlin_benchmarks.array.fill.Inline64int.Ref_to_Ref_as_Ref_arrayfillinst             1000000  avgt   15  27058721.332 ± 21074217.180  ns/op
kotlin_benchmarks.array.fill.Inline64int.Ref_to_Ref_as_Ref_arrayfillstat                 100  avgt   15       283.083 ±       79.224  ns/op
kotlin_benchmarks.array.fill.Inline64int.Ref_to_Ref_as_Ref_arrayfillstat             1000000  avgt   15  36100730.396 ± 21337226.480  ns/op
kotlin_benchmarks.array.fill.Inline64int.Ref_to_Ref_as_Ref_fillinst                      100  avgt   15       294.970 ±       51.247  ns/op
kotlin_benchmarks.array.fill.Inline64int.Ref_to_Ref_as_Ref_fillinst                  1000000  avgt   15  32285509.033 ± 24779627.834  ns/op
kotlin_benchmarks.array.fill.Inline64int.Ref_to_Ref_as_Ref_fillstat                      100  avgt   15       265.035 ±       71.659  ns/op
kotlin_benchmarks.array.fill.Inline64int.Ref_to_Ref_as_Ref_fillstat                  1000000  avgt   15  35350818.247 ± 22022388.867  ns/op
kotlin_benchmarks.array.fill.Inline64int.Ref_to_Val_as_Val_arrayfillinst                 100  avgt   15       257.416 ±       56.801  ns/op
kotlin_benchmarks.array.fill.Inline64int.Ref_to_Val_as_Val_arrayfillinst             1000000  avgt   15  27493628.113 ± 26702805.298  ns/op
kotlin_benchmarks.array.fill.Inline64int.Ref_to_Val_as_Val_arrayfillstat                 100  avgt   15       307.273 ±       37.579  ns/op
kotlin_benchmarks.array.fill.Inline64int.Ref_to_Val_as_Val_arrayfillstat             1000000  avgt   15  29217791.947 ± 26016349.922  ns/op
kotlin_benchmarks.array.fill.Inline64int.Ref_to_Val_as_Val_fillinst                      100  avgt   15       330.875 ±       59.944  ns/op
kotlin_benchmarks.array.fill.Inline64int.Ref_to_Val_as_Val_fillinst                  1000000  avgt   15  29830665.716 ± 19344655.216  ns/op
kotlin_benchmarks.array.fill.Inline64int.Ref_to_Val_as_Val_fillstat                      100  avgt   15       279.317 ±       36.346  ns/op
kotlin_benchmarks.array.fill.Inline64int.Ref_to_Val_as_Val_fillstat                  1000000  avgt   15  21887179.232 ± 20677053.609  ns/op
kotlin_benchmarks.array.fill.Inline64int.Val_to_Ref_as_Ref_arrayfillinst                 100  avgt   15       300.887 ±       44.634  ns/op
kotlin_benchmarks.array.fill.Inline64int.Val_to_Ref_as_Ref_arrayfillinst             1000000  avgt   15  33689777.940 ± 21398034.398  ns/op
kotlin_benchmarks.array.fill.Inline64int.Val_to_Ref_as_Ref_arrayfillstat                 100  avgt   15       250.548 ±       50.831  ns/op
kotlin_benchmarks.array.fill.Inline64int.Val_to_Ref_as_Ref_arrayfillstat             1000000  avgt   15  36337433.954 ± 19619861.799  ns/op
kotlin_benchmarks.array.fill.Inline64int.Val_to_Ref_as_Ref_fillinst                      100  avgt   15       340.389 ±       43.913  ns/op
kotlin_benchmarks.array.fill.Inline64int.Val_to_Ref_as_Ref_fillinst                  1000000  avgt   15  22422135.886 ± 18709637.083  ns/op
kotlin_benchmarks.array.fill.Inline64int.Val_to_Ref_as_Ref_fillstat                      100  avgt   15       300.687 ±       23.626  ns/op
kotlin_benchmarks.array.fill.Inline64int.Val_to_Ref_as_Ref_fillstat                  1000000  avgt   15  28722928.861 ± 20421694.626  ns/op
kotlin_benchmarks.array.fill.Inline64int.Val_to_Val_as_Val_arrayfillinst                 100  avgt   15       293.059 ±       24.842  ns/op
kotlin_benchmarks.array.fill.Inline64int.Val_to_Val_as_Val_arrayfillinst             1000000  avgt   15  33903420.652 ± 23917868.253  ns/op
kotlin_benchmarks.array.fill.Inline64int.Val_to_Val_as_Val_arrayfillstat                 100  avgt   15       301.612 ±       33.704  ns/op
kotlin_benchmarks.array.fill.Inline64int.Val_to_Val_as_Val_arrayfillstat             1000000  avgt   15  17928440.744 ± 16975401.353  ns/op
kotlin_benchmarks.array.fill.Inline64int.Val_to_Val_as_Val_fillinst                      100  avgt   15       336.865 ±       34.629  ns/op
kotlin_benchmarks.array.fill.Inline64int.Val_to_Val_as_Val_fillinst                  1000000  avgt   15  36055224.725 ± 24277812.625  ns/op
kotlin_benchmarks.array.fill.Inline64int.Val_to_Val_as_Val_fillstat                      100  avgt   15       312.373 ±       35.858  ns/op
kotlin_benchmarks.array.fill.Inline64int.Val_to_Val_as_Val_fillstat                  1000000  avgt   15  24388059.869 ± 24243580.229  ns/op
kotlin_benchmarks.array.fill.InlineOpt.Def_to_Ref_as_Ref_arrayfill                       100  avgt   15       182.862 ±       13.689  ns/op
kotlin_benchmarks.array.fill.InlineOpt.Def_to_Ref_as_Ref_arrayfill                   1000000  avgt   15  28770020.767 ± 32721630.574  ns/op
kotlin_benchmarks.array.fill.InlineOpt.Def_to_Ref_as_Ref_fill                            100  avgt   15       166.298 ±       29.566  ns/op
kotlin_benchmarks.array.fill.InlineOpt.Def_to_Ref_as_Ref_fill                        1000000  avgt   15  23438505.599 ± 24934205.960  ns/op
kotlin_benchmarks.array.fill.InlineOpt.Def_to_Val_as_Val_arrayfill                       100  avgt   15       172.842 ±       21.454  ns/op
kotlin_benchmarks.array.fill.InlineOpt.Def_to_Val_as_Val_arrayfill                   1000000  avgt   15  30470880.414 ± 27092288.547  ns/op
kotlin_benchmarks.array.fill.InlineOpt.Def_to_Val_as_Val_fill                            100  avgt   15       173.171 ±       18.169  ns/op
kotlin_benchmarks.array.fill.InlineOpt.Def_to_Val_as_Val_fill                        1000000  avgt   15  34507927.373 ± 25520807.738  ns/op
kotlin_benchmarks.array.fill.InlineOpt.New_to_Ref_as_Ref_arrayfill                       100  avgt   15       424.219 ±       42.875  ns/op
kotlin_benchmarks.array.fill.InlineOpt.New_to_Ref_as_Ref_arrayfill                   1000000  avgt   15  29720516.964 ± 28174256.999  ns/op
kotlin_benchmarks.array.fill.InlineOpt.New_to_Ref_as_Ref_fill                            100  avgt   15       642.671 ±       70.932  ns/op
kotlin_benchmarks.array.fill.InlineOpt.New_to_Ref_as_Ref_fill                        1000000  avgt   15   8517868.140 ±  3277213.625  ns/op
kotlin_benchmarks.array.fill.InlineOpt.New_to_Val_as_Val_arrayfill                       100  avgt   15       396.687 ±       44.213  ns/op
kotlin_benchmarks.array.fill.InlineOpt.New_to_Val_as_Val_arrayfill                   1000000  avgt   15  30567022.578 ± 25719925.107  ns/op
kotlin_benchmarks.array.fill.InlineOpt.New_to_Val_as_Val_fill                            100  avgt   15       637.451 ±       95.512  ns/op
kotlin_benchmarks.array.fill.InlineOpt.New_to_Val_as_Val_fill                        1000000  avgt   15   9558509.964 ±  3336935.278  ns/op
kotlin_benchmarks.array.fill.InlineOpt.Ref_to_Ref_as_Ref_arrayfillinst                   100  avgt   15       180.864 ±       24.498  ns/op
kotlin_benchmarks.array.fill.InlineOpt.Ref_to_Ref_as_Ref_arrayfillinst               1000000  avgt   15  11388474.668 ± 15289467.053  ns/op
kotlin_benchmarks.array.fill.InlineOpt.Ref_to_Ref_as_Ref_arrayfillstat                   100  avgt   15       181.060 ±       21.442  ns/op
kotlin_benchmarks.array.fill.InlineOpt.Ref_to_Ref_as_Ref_arrayfillstat               1000000  avgt   15  37428466.770 ± 29410365.641  ns/op
kotlin_benchmarks.array.fill.InlineOpt.Ref_to_Ref_as_Ref_fillinst                        100  avgt   15       188.714 ±       14.888  ns/op
kotlin_benchmarks.array.fill.InlineOpt.Ref_to_Ref_as_Ref_fillinst                    1000000  avgt   15  36983272.660 ± 28835647.758  ns/op
kotlin_benchmarks.array.fill.InlineOpt.Ref_to_Ref_as_Ref_fillstat                        100  avgt   15       189.189 ±       32.152  ns/op
kotlin_benchmarks.array.fill.InlineOpt.Ref_to_Ref_as_Ref_fillstat                    1000000  avgt   15  31605785.932 ± 24225689.441  ns/op
kotlin_benchmarks.array.fill.InlineOpt.Ref_to_Val_as_Val_arrayfillinst                   100  avgt   15       175.726 ±       17.271  ns/op
kotlin_benchmarks.array.fill.InlineOpt.Ref_to_Val_as_Val_arrayfillinst               1000000  avgt   15  30325946.190 ± 30410371.987  ns/op
kotlin_benchmarks.array.fill.InlineOpt.Ref_to_Val_as_Val_arrayfillstat                   100  avgt   15       178.347 ±       13.861  ns/op
kotlin_benchmarks.array.fill.InlineOpt.Ref_to_Val_as_Val_arrayfillstat               1000000  avgt   15  25265424.201 ± 23622729.945  ns/op
kotlin_benchmarks.array.fill.InlineOpt.Ref_to_Val_as_Val_fillinst                        100  avgt   15       196.544 ±       24.094  ns/op
kotlin_benchmarks.array.fill.InlineOpt.Ref_to_Val_as_Val_fillinst                    1000000  avgt   15   8390701.190 ±  3691186.344  ns/op
kotlin_benchmarks.array.fill.InlineOpt.Ref_to_Val_as_Val_fillstat                        100  avgt   15       187.318 ±       29.208  ns/op
kotlin_benchmarks.array.fill.InlineOpt.Ref_to_Val_as_Val_fillstat                    1000000  avgt   15  36727103.214 ± 21367998.957  ns/op
kotlin_benchmarks.array.fill.InlineOpt.Val_to_Ref_as_Ref_arrayfillinst                   100  avgt   15        70.525 ±        0.732  ns/op
kotlin_benchmarks.array.fill.InlineOpt.Val_to_Ref_as_Ref_arrayfillinst               1000000  avgt   15  35145269.683 ± 11043226.081  ns/op
kotlin_benchmarks.array.fill.InlineOpt.Val_to_Ref_as_Ref_arrayfillstat                   100  avgt   15        70.130 ±        0.435  ns/op
kotlin_benchmarks.array.fill.InlineOpt.Val_to_Ref_as_Ref_arrayfillstat               1000000  avgt   15  29796060.545 ±  9302813.987  ns/op
kotlin_benchmarks.array.fill.InlineOpt.Val_to_Ref_as_Ref_fillinst                        100  avgt   15        74.176 ±        0.520  ns/op
kotlin_benchmarks.array.fill.InlineOpt.Val_to_Ref_as_Ref_fillinst                    1000000  avgt   15  35263373.407 ±  3156190.744  ns/op
kotlin_benchmarks.array.fill.InlineOpt.Val_to_Ref_as_Ref_fillstat                        100  avgt   15        69.844 ±        0.441  ns/op
kotlin_benchmarks.array.fill.InlineOpt.Val_to_Ref_as_Ref_fillstat                    1000000  avgt   15  37357444.740 ±  2990498.179  ns/op
kotlin_benchmarks.array.fill.InlineOpt.Val_to_Val_as_Val_arrayfillinst                   100  avgt   15        70.273 ±        0.598  ns/op
kotlin_benchmarks.array.fill.InlineOpt.Val_to_Val_as_Val_arrayfillinst               1000000  avgt   15  36176761.776 ±  1760100.182  ns/op
kotlin_benchmarks.array.fill.InlineOpt.Val_to_Val_as_Val_arrayfillstat                   100  avgt   15        70.068 ±        1.031  ns/op
kotlin_benchmarks.array.fill.InlineOpt.Val_to_Val_as_Val_arrayfillstat               1000000  avgt   15  35823478.969 ±  3383823.850  ns/op
kotlin_benchmarks.array.fill.InlineOpt.Val_to_Val_as_Val_fillinst                        100  avgt   15        82.275 ±       13.017  ns/op
kotlin_benchmarks.array.fill.InlineOpt.Val_to_Val_as_Val_fillinst                    1000000  avgt   15  32734404.068 ±  5827985.052  ns/op
kotlin_benchmarks.array.fill.InlineOpt.Val_to_Val_as_Val_fillstat                        100  avgt   15        70.117 ±        0.761  ns/op
kotlin_benchmarks.array.fill.InlineOpt.Val_to_Val_as_Val_fillstat                    1000000  avgt   15  43240354.157 ±  7873609.198  ns/op
kotlin_benchmarks.array.fill.Primitive64.arrayfill                                       100  avgt   15        24.444 ±        7.380  ns/op
kotlin_benchmarks.array.fill.Primitive64.arrayfill                                   1000000  avgt   15    594221.846 ±   111230.665  ns/op
kotlin_benchmarks.array.fill.Primitive64.fill0                                           100  avgt   15        34.522 ±        7.429  ns/op
kotlin_benchmarks.array.fill.Primitive64.fill0                                       1000000  avgt   15    659715.059 ±    63884.003  ns/op
kotlin_benchmarks.array.fill.Primitive64.fill1                                           100  avgt   15        41.767 ±        4.709  ns/op
kotlin_benchmarks.array.fill.Primitive64.fill1                                       1000000  avgt   15    621861.447 ±    72022.506  ns/op
kotlin_benchmarks.array.read.Inline128int.Val_as_Int_to_Int_read                         100  avgt   15         2.471 ±        0.360  ns/op
kotlin_benchmarks.array.read.Inline128int.Val_as_Int_to_Int_read                     1000000  avgt   15         2.246 ±        0.164  ns/op
kotlin_benchmarks.array.read.Inline128int.Val_as_Ref_to_Int_read                         100  avgt   15         2.077 ±        0.580  ns/op
kotlin_benchmarks.array.read.Inline128int.Val_as_Ref_to_Int_read                     1000000  avgt   15         1.309 ±        0.481  ns/op
kotlin_benchmarks.array.read.Inline128int.Val_as_Ref_to_Ref_read                         100  avgt   15         1.441 ±        0.460  ns/op
kotlin_benchmarks.array.read.Inline128int.Val_as_Ref_to_Ref_read                     1000000  avgt   15         1.395 ±        0.410  ns/op
kotlin_benchmarks.array.read.Inline128int.Val_as_Ref_to_Val_read                         100  avgt   15         1.516 ±        0.552  ns/op
kotlin_benchmarks.array.read.Inline128int.Val_as_Ref_to_Val_read                     1000000  avgt   15         1.924 ±        0.589  ns/op
kotlin_benchmarks.array.read.Inline128int.Val_as_Val_to_Int_read                         100  avgt   15         1.998 ±        0.448  ns/op
kotlin_benchmarks.array.read.Inline128int.Val_as_Val_to_Int_read                     1000000  avgt   15         2.444 ±        0.137  ns/op
kotlin_benchmarks.array.read.Inline128int.Val_as_Val_to_Ref_read                         100  avgt   15         2.566 ±        0.172  ns/op
kotlin_benchmarks.array.read.Inline128int.Val_as_Val_to_Ref_read                     1000000  avgt   15         2.772 ±        0.165  ns/op
kotlin_benchmarks.array.read.Inline128int.Val_as_Val_to_Val_read                         100  avgt   15         2.553 ±        0.198  ns/op
kotlin_benchmarks.array.read.Inline128int.Val_as_Val_to_Val_read                     1000000  avgt   15         2.665 ±        0.341  ns/op
kotlin_benchmarks.array.read.Inline32int.Val_as_Int_to_Int_read                          100  avgt   15         2.390 ±        0.272  ns/op
kotlin_benchmarks.array.read.Inline32int.Val_as_Int_to_Int_read                      1000000  avgt   15         2.353 ±        0.116  ns/op
kotlin_benchmarks.array.read.Inline32int.Val_as_Ref_to_Int_read                          100  avgt   15         2.207 ±        0.195  ns/op
kotlin_benchmarks.array.read.Inline32int.Val_as_Ref_to_Int_read                      1000000  avgt   15         2.217 ±        0.165  ns/op
kotlin_benchmarks.array.read.Inline32int.Val_as_Ref_to_Ref_read                          100  avgt   15         2.012 ±        0.288  ns/op
kotlin_benchmarks.array.read.Inline32int.Val_as_Ref_to_Ref_read                      1000000  avgt   15         1.813 ±        0.392  ns/op
kotlin_benchmarks.array.read.Inline32int.Val_as_Ref_to_Val_read                          100  avgt   15         1.962 ±        0.352  ns/op
kotlin_benchmarks.array.read.Inline32int.Val_as_Ref_to_Val_read                      1000000  avgt   15         2.153 ±        0.297  ns/op
kotlin_benchmarks.array.read.Inline32int.Val_as_Val_to_Int_read                          100  avgt   15         2.121 ±        0.283  ns/op
kotlin_benchmarks.array.read.Inline32int.Val_as_Val_to_Int_read                      1000000  avgt   15         2.398 ±        0.245  ns/op
kotlin_benchmarks.array.read.Inline32int.Val_as_Val_to_Ref_read                          100  avgt   15         2.291 ±        0.245  ns/op
kotlin_benchmarks.array.read.Inline32int.Val_as_Val_to_Ref_read                      1000000  avgt   15         2.299 ±        0.119  ns/op
kotlin_benchmarks.array.read.Inline32int.Val_as_Val_to_Val_read                          100  avgt   15         2.437 ±        0.279  ns/op
kotlin_benchmarks.array.read.Inline32int.Val_as_Val_to_Val_read                      1000000  avgt   15         2.378 ±        0.175  ns/op
kotlin_benchmarks.array.read.Inline64byte.Val_as_Int_to_Int_read                         100  avgt   15         2.374 ±        0.192  ns/op
kotlin_benchmarks.array.read.Inline64byte.Val_as_Int_to_Int_read                     1000000  avgt   15         2.390 ±        0.301  ns/op
kotlin_benchmarks.array.read.Inline64byte.Val_as_Ref_to_Int_read                         100  avgt   15         3.179 ±        0.697  ns/op
kotlin_benchmarks.array.read.Inline64byte.Val_as_Ref_to_Int_read                     1000000  avgt   15         2.424 ±        0.234  ns/op
kotlin_benchmarks.array.read.Inline64byte.Val_as_Ref_to_Ref_read                         100  avgt   15         2.485 ±        0.235  ns/op
kotlin_benchmarks.array.read.Inline64byte.Val_as_Ref_to_Ref_read                     1000000  avgt   15         2.543 ±        0.212  ns/op
kotlin_benchmarks.array.read.Inline64byte.Val_as_Ref_to_Val_read                         100  avgt   15         2.337 ±        0.299  ns/op
kotlin_benchmarks.array.read.Inline64byte.Val_as_Ref_to_Val_read                     1000000  avgt   15         2.363 ±        0.125  ns/op
kotlin_benchmarks.array.read.Inline64byte.Val_as_Val_to_Int_read                         100  avgt   15         2.366 ±        0.127  ns/op
kotlin_benchmarks.array.read.Inline64byte.Val_as_Val_to_Int_read                     1000000  avgt   15         2.619 ±        0.118  ns/op
kotlin_benchmarks.array.read.Inline64byte.Val_as_Val_to_Ref_read                         100  avgt   15         2.503 ±        0.189  ns/op
kotlin_benchmarks.array.read.Inline64byte.Val_as_Val_to_Ref_read                     1000000  avgt   15         2.592 ±        0.172  ns/op
kotlin_benchmarks.array.read.Inline64byte.Val_as_Val_to_Val_read                         100  avgt   15         2.684 ±        0.379  ns/op
kotlin_benchmarks.array.read.Inline64byte.Val_as_Val_to_Val_read                     1000000  avgt   15         2.509 ±        0.201  ns/op
kotlin_benchmarks.array.read.Inline64int.Val_as_Int_to_Int_read                          100  avgt   15         2.310 ±        0.216  ns/op
kotlin_benchmarks.array.read.Inline64int.Val_as_Int_to_Int_read                      1000000  avgt   15         2.333 ±        0.265  ns/op
kotlin_benchmarks.array.read.Inline64int.Val_as_Ref_to_Int_read                          100  avgt   15         2.410 ±        0.131  ns/op
kotlin_benchmarks.array.read.Inline64int.Val_as_Ref_to_Int_read                      1000000  avgt   15         2.528 ±        0.227  ns/op
kotlin_benchmarks.array.read.Inline64int.Val_as_Ref_to_Ref_read                          100  avgt   15         2.439 ±        0.335  ns/op
kotlin_benchmarks.array.read.Inline64int.Val_as_Ref_to_Ref_read                      1000000  avgt   15         2.521 ±        0.133  ns/op
kotlin_benchmarks.array.read.Inline64int.Val_as_Ref_to_Val_read                          100  avgt   15         2.666 ±        0.233  ns/op
kotlin_benchmarks.array.read.Inline64int.Val_as_Ref_to_Val_read                      1000000  avgt   15         2.411 ±        0.145  ns/op
kotlin_benchmarks.array.read.Inline64int.Val_as_Val_to_Int_read                          100  avgt   15         2.578 ±        0.074  ns/op
kotlin_benchmarks.array.read.Inline64int.Val_as_Val_to_Int_read                      1000000  avgt   15         2.617 ±        0.332  ns/op
kotlin_benchmarks.array.read.Inline64int.Val_as_Val_to_Ref_read                          100  avgt   15         2.472 ±        0.208  ns/op
kotlin_benchmarks.array.read.Inline64int.Val_as_Val_to_Ref_read                      1000000  avgt   15         2.506 ±        0.158  ns/op
kotlin_benchmarks.array.read.Inline64int.Val_as_Val_to_Val_read                          100  avgt   15         2.564 ±        0.297  ns/op
kotlin_benchmarks.array.read.Inline64int.Val_as_Val_to_Val_read                      1000000  avgt   15         2.595 ±        0.264  ns/op
kotlin_benchmarks.array.read.Primitive128int.p128int_read                                100  avgt   15         4.140 ±        0.166  ns/op
kotlin_benchmarks.array.read.Primitive128int.p128int_read                            1000000  avgt   15         4.216 ±        0.336  ns/op
kotlin_benchmarks.array.read.Primitive32int.p32int_read                                  100  avgt   15         1.566 ±        0.163  ns/op
kotlin_benchmarks.array.read.Primitive32int.p32int_read                              1000000  avgt   15         1.722 ±        0.264  ns/op
kotlin_benchmarks.array.read.Primitive64byte.p64byte_read                                100  avgt   15         7.008 ±        0.665  ns/op
kotlin_benchmarks.array.read.Primitive64byte.p64byte_read                            1000000  avgt   15         7.612 ±        1.039  ns/op
kotlin_benchmarks.array.read.Primitive64int.read                                         100  avgt   15         2.904 ±        0.606  ns/op
kotlin_benchmarks.array.read.Primitive64int.read                                     1000000  avgt   15         2.789 ±        0.176  ns/op
kotlin_benchmarks.array.read.Primitive64long.p64long_read                                100  avgt   15         1.666 ±        0.350  ns/op
kotlin_benchmarks.array.read.Primitive64long.p64long_read                            1000000  avgt   15         1.639 ±        0.218  ns/op
kotlin_benchmarks.array.set.Inline128int.New_to_Ref_as_Ref_set                           100  avgt   15      2391.914 ±      166.813  ns/op
kotlin_benchmarks.array.set.Inline128int.New_to_Ref_as_Ref_set                       1000000  avgt   15  25825481.205 ±  8700306.625  ns/op
kotlin_benchmarks.array.set.Inline128int.New_to_Val_as_Val_set                           100  avgt   15      2498.909 ±      128.964  ns/op
kotlin_benchmarks.array.set.Inline128int.New_to_Val_as_Val_set                       1000000  avgt   15  24604284.788 ±  5090273.112  ns/op
kotlin_benchmarks.array.set.Inline128int.Ref_to_Ref_as_Ref_set                           100  avgt   15      2594.474 ±      422.650  ns/op
kotlin_benchmarks.array.set.Inline128int.Ref_to_Ref_as_Ref_set                       1000000  avgt   15  26441037.682 ±  6397921.657  ns/op
kotlin_benchmarks.array.set.Inline128int.Ref_to_Val_as_Val_set                           100  avgt   15      2589.322 ±      293.356  ns/op
kotlin_benchmarks.array.set.Inline128int.Ref_to_Val_as_Val_set                       1000000  avgt   15  23964790.079 ±  3697415.251  ns/op
kotlin_benchmarks.array.set.Inline128int.Val_to_Ref_as_Ref_set                           100  avgt   15      2622.371 ±      453.546  ns/op
kotlin_benchmarks.array.set.Inline128int.Val_to_Ref_as_Ref_set                       1000000  avgt   15  22550383.294 ±  4381361.546  ns/op
kotlin_benchmarks.array.set.Inline128int.Val_to_Val_as_Val_set                           100  avgt   15      2469.763 ±      210.099  ns/op
kotlin_benchmarks.array.set.Inline128int.Val_to_Val_as_Val_set                       1000000  avgt   15  22624136.070 ±  4105292.882  ns/op
kotlin_benchmarks.array.set.Inline32int.New_to_Ref_as_Ref_set                            100  avgt   15       627.676 ±       56.617  ns/op
kotlin_benchmarks.array.set.Inline32int.New_to_Ref_as_Ref_set                        1000000  avgt   15   6606488.886 ±  1060062.356  ns/op
kotlin_benchmarks.array.set.Inline32int.New_to_Val_as_Val_set                            100  avgt   15       611.046 ±      101.087  ns/op
kotlin_benchmarks.array.set.Inline32int.New_to_Val_as_Val_set                        1000000  avgt   15   7058008.943 ±  1682972.667  ns/op
kotlin_benchmarks.array.set.Inline32int.Ref_to_Ref_as_Ref_set                            100  avgt   15       597.764 ±       75.640  ns/op
kotlin_benchmarks.array.set.Inline32int.Ref_to_Ref_as_Ref_set                        1000000  avgt   15   6489823.077 ±   798766.637  ns/op
kotlin_benchmarks.array.set.Inline32int.Ref_to_Val_as_Val_set                            100  avgt   15       607.378 ±       54.012  ns/op
kotlin_benchmarks.array.set.Inline32int.Ref_to_Val_as_Val_set                        1000000  avgt   15   6502446.885 ±   857244.657  ns/op
kotlin_benchmarks.array.set.Inline32int.Val_to_Ref_as_Ref_set                            100  avgt   15       626.390 ±       62.294  ns/op
kotlin_benchmarks.array.set.Inline32int.Val_to_Ref_as_Ref_set                        1000000  avgt   15   6445151.396 ±  1497432.851  ns/op
kotlin_benchmarks.array.set.Inline32int.Val_to_Val_as_Val_set                            100  avgt   15       636.655 ±       79.230  ns/op
kotlin_benchmarks.array.set.Inline32int.Val_to_Val_as_Val_set                        1000000  avgt   15   6785059.542 ±  1078226.203  ns/op
kotlin_benchmarks.array.set.Inline64byte.New_to_Ref_as_Ref_set                           100  avgt   15      1557.972 ±      851.730  ns/op
kotlin_benchmarks.array.set.Inline64byte.New_to_Ref_as_Ref_set                       1000000  avgt   15   3944142.695 ±   282104.519  ns/op
kotlin_benchmarks.array.set.Inline64byte.New_to_Val_as_Val_set                           100  avgt   15       570.983 ±        7.652  ns/op
kotlin_benchmarks.array.set.Inline64byte.New_to_Val_as_Val_set                       1000000  avgt   15   3865413.307 ±    87623.868  ns/op
kotlin_benchmarks.array.set.Inline64byte.Ref_to_Ref_as_Ref_set                           100  avgt   15       574.297 ±        4.821  ns/op
kotlin_benchmarks.array.set.Inline64byte.Ref_to_Ref_as_Ref_set                       1000000  avgt   15   3861353.885 ±    87597.598  ns/op
kotlin_benchmarks.array.set.Inline64byte.Ref_to_Val_as_Val_set                           100  avgt   15       595.056 ±       69.655  ns/op
kotlin_benchmarks.array.set.Inline64byte.Ref_to_Val_as_Val_set                       1000000  avgt   15   3914112.065 ±   261451.370  ns/op
kotlin_benchmarks.array.set.Inline64byte.Val_to_Ref_as_Ref_set                           100  avgt   15       575.396 ±        8.996  ns/op
kotlin_benchmarks.array.set.Inline64byte.Val_to_Ref_as_Ref_set                       1000000  avgt   15   3839652.595 ±    62247.276  ns/op
kotlin_benchmarks.array.set.Inline64byte.Val_to_Val_as_Val_set                           100  avgt   15       572.766 ±        4.625  ns/op
kotlin_benchmarks.array.set.Inline64byte.Val_to_Val_as_Val_set                       1000000  avgt   15   3812540.287 ±    88231.573  ns/op
kotlin_benchmarks.array.set.Inline64int.New_to_Ref_as_Ref_set                            100  avgt   15       308.569 ±        3.530  ns/op
kotlin_benchmarks.array.set.Inline64int.New_to_Ref_as_Ref_set                        1000000  avgt   15   3131532.239 ±    22078.583  ns/op
kotlin_benchmarks.array.set.Inline64int.New_to_Val_as_Val_set                            100  avgt   15       308.288 ±        2.708  ns/op
kotlin_benchmarks.array.set.Inline64int.New_to_Val_as_Val_set                        1000000  avgt   15   3136845.825 ±    45680.175  ns/op
kotlin_benchmarks.array.set.Inline64int.Ref_to_Ref_as_Ref_set                            100  avgt   15       304.019 ±        2.236  ns/op
kotlin_benchmarks.array.set.Inline64int.Ref_to_Ref_as_Ref_set                        1000000  avgt   15   3145623.118 ±    55549.917  ns/op
kotlin_benchmarks.array.set.Inline64int.Ref_to_Val_as_Val_set                            100  avgt   15       310.554 ±        2.756  ns/op
kotlin_benchmarks.array.set.Inline64int.Ref_to_Val_as_Val_set                        1000000  avgt   15   3149543.880 ±    75188.916  ns/op
kotlin_benchmarks.array.set.Inline64int.Val_to_Ref_as_Ref_set                            100  avgt   15       311.509 ±        3.542  ns/op
kotlin_benchmarks.array.set.Inline64int.Val_to_Ref_as_Ref_set                        1000000  avgt   15   3161724.188 ±    65649.343  ns/op
kotlin_benchmarks.array.set.Inline64int.Val_to_Val_as_Val_set                            100  avgt   15       312.187 ±        4.354  ns/op
kotlin_benchmarks.array.set.Inline64int.Val_to_Val_as_Val_set                        1000000  avgt   15   3142508.646 ±    89766.933  ns/op
kotlin_benchmarks.array.set.Primitive32.set                                              100  avgt   15        14.967 ±        0.105  ns/op
kotlin_benchmarks.array.set.Primitive32.set                                          1000000  avgt   15    147948.417 ±      462.371  ns/op
kotlin_benchmarks.array.set.Primitive64.set0                                             100  avgt   15        14.709 ±        0.034  ns/op
kotlin_benchmarks.array.set.Primitive64.set0                                         1000000  avgt   15    161849.125 ±     1571.095  ns/op
kotlin_benchmarks.array.set.Primitive64.set1                                             100  avgt   15        14.642 ±        0.038  ns/op
kotlin_benchmarks.array.set.Primitive64.set1                                         1000000  avgt   15    160203.638 ±      725.837  ns/op
kotlin_benchmarks.array.sum.IdentityOpt.Int_as_Int_sum                                   100  avgt   15        58.140 ±        0.355  ns/op
kotlin_benchmarks.array.sum.IdentityOpt.Int_as_Int_sum                               1000000  avgt   15    794518.499 ±    69330.391  ns/op
kotlin_benchmarks.array.sum.IdentityOpt.Ref_as_Ref_fields                                100  avgt   15        51.961 ±        0.340  ns/op
kotlin_benchmarks.array.sum.IdentityOpt.Ref_as_Ref_fields                            1000000  avgt   15    788342.496 ±    56424.242  ns/op
kotlin_benchmarks.array.sum.IdentityOpt.Ref_as_Ref_sum                                   100  avgt   15        51.919 ±        0.900  ns/op
kotlin_benchmarks.array.sum.IdentityOpt.Ref_as_Ref_sum                               1000000  avgt   15    810914.595 ±   103353.916  ns/op
kotlin_benchmarks.array.sum.Inline128int.Int_as_Int_sum                                  100  avgt   15       287.485 ±        3.121  ns/op
kotlin_benchmarks.array.sum.Inline128int.Int_as_Int_sum                              1000000  avgt   15   3318326.417 ±    44987.038  ns/op
kotlin_benchmarks.array.sum.Inline128int.Ref_as_Int_sum                                  100  avgt   15       269.145 ±        2.039  ns/op
kotlin_benchmarks.array.sum.Inline128int.Ref_as_Int_sum                              1000000  avgt   15   3184702.439 ±    28393.079  ns/op
kotlin_benchmarks.array.sum.Inline128int.Ref_as_Ref_fields                               100  avgt   15       143.416 ±        1.012  ns/op
kotlin_benchmarks.array.sum.Inline128int.Ref_as_Ref_fields                           1000000  avgt   15   2516395.819 ±    40959.627  ns/op
kotlin_benchmarks.array.sum.Inline128int.Ref_as_Ref_sum                                  100  avgt   15       261.051 ±        1.045  ns/op
kotlin_benchmarks.array.sum.Inline128int.Ref_as_Ref_sum                              1000000  avgt   15   3058226.347 ±    79044.194  ns/op
kotlin_benchmarks.array.sum.Inline128int.Val_as_Int_sum                                  100  avgt   15       261.081 ±        1.439  ns/op
kotlin_benchmarks.array.sum.Inline128int.Val_as_Int_sum                              1000000  avgt   15   3010530.943 ±    18859.542  ns/op
kotlin_benchmarks.array.sum.Inline128int.Val_as_Ref_fields                               100  avgt   15       144.876 ±        1.884  ns/op
kotlin_benchmarks.array.sum.Inline128int.Val_as_Ref_fields                           1000000  avgt   15   2461733.894 ±    18342.705  ns/op
kotlin_benchmarks.array.sum.Inline128int.Val_as_Ref_sum                                  100  avgt   15       258.611 ±        1.674  ns/op
kotlin_benchmarks.array.sum.Inline128int.Val_as_Ref_sum                              1000000  avgt   15   3011976.013 ±    26896.188  ns/op
kotlin_benchmarks.array.sum.Inline128int.Val_as_Val_fields                               100  avgt   15       141.941 ±        0.373  ns/op
kotlin_benchmarks.array.sum.Inline128int.Val_as_Val_fields                           1000000  avgt   15   2469324.133 ±    11722.532  ns/op
kotlin_benchmarks.array.sum.Inline128int.Val_as_Val_sum                                  100  avgt   15       255.804 ±        0.830  ns/op
kotlin_benchmarks.array.sum.Inline128int.Val_as_Val_sum                              1000000  avgt   15   2989274.612 ±    24546.712  ns/op
kotlin_benchmarks.array.sum.Inline32int.Int_as_Int_sum                                   100  avgt   15        39.589 ±        0.114  ns/op
kotlin_benchmarks.array.sum.Inline32int.Int_as_Int_sum                               1000000  avgt   15    429175.913 ±     3021.400  ns/op
kotlin_benchmarks.array.sum.Inline32int.Ref_as_Ref_fields                                100  avgt   15        25.711 ±        0.114  ns/op
kotlin_benchmarks.array.sum.Inline32int.Ref_as_Ref_fields                            1000000  avgt   15    348586.181 ±     8295.922  ns/op
kotlin_benchmarks.array.sum.Inline32int.Ref_as_Ref_sum                                   100  avgt   15        25.889 ±        0.360  ns/op
kotlin_benchmarks.array.sum.Inline32int.Ref_as_Ref_sum                               1000000  avgt   15    353582.976 ±    23188.169  ns/op
kotlin_benchmarks.array.sum.Inline32int.Val_as_Int_sum                                   100  avgt   15        26.890 ±        0.639  ns/op
kotlin_benchmarks.array.sum.Inline32int.Val_as_Int_sum                               1000000  avgt   15    367661.879 ±    16757.474  ns/op
kotlin_benchmarks.array.sum.Inline32int.Val_as_Ref_fields                                100  avgt   15        26.857 ±        0.298  ns/op
kotlin_benchmarks.array.sum.Inline32int.Val_as_Ref_fields                            1000000  avgt   15    377603.022 ±    15995.885  ns/op
kotlin_benchmarks.array.sum.Inline32int.Val_as_Ref_sum                                   100  avgt   15        26.852 ±        0.375  ns/op
kotlin_benchmarks.array.sum.Inline32int.Val_as_Ref_sum                               1000000  avgt   15    360643.466 ±    14826.463  ns/op
kotlin_benchmarks.array.sum.Inline32int.Val_as_Val_fields                                100  avgt   15        26.761 ±        0.189  ns/op
kotlin_benchmarks.array.sum.Inline32int.Val_as_Val_fields                            1000000  avgt   15    371315.859 ±    19421.163  ns/op
kotlin_benchmarks.array.sum.Inline32int.Val_as_Val_sum                                   100  avgt   15        26.774 ±        0.217  ns/op
kotlin_benchmarks.array.sum.Inline32int.Val_as_Val_sum                               1000000  avgt   15    366060.127 ±     8944.573  ns/op
kotlin_benchmarks.array.sum.Inline64byte.Int_as_Int_sum                                  100  avgt   15       184.037 ±        1.639  ns/op
kotlin_benchmarks.array.sum.Inline64byte.Int_as_Int_sum                              1000000  avgt   15   1878528.588 ±   139127.524  ns/op
kotlin_benchmarks.array.sum.Inline64byte.Ref_as_Ref_fields                               100  avgt   15       267.874 ±        2.012  ns/op
kotlin_benchmarks.array.sum.Inline64byte.Ref_as_Ref_fields                           1000000  avgt   15   2907863.888 ±    30116.512  ns/op
kotlin_benchmarks.array.sum.Inline64byte.Ref_as_Ref_sum                                  100  avgt   15       195.978 ±        1.311  ns/op
kotlin_benchmarks.array.sum.Inline64byte.Ref_as_Ref_sum                              1000000  avgt   15   1852286.363 ±    49525.332  ns/op
kotlin_benchmarks.array.sum.Inline64byte.Val_as_Int_sum                                  100  avgt   15       170.571 ±        1.142  ns/op
kotlin_benchmarks.array.sum.Inline64byte.Val_as_Int_sum                              1000000  avgt   15   1807380.044 ±    51359.741  ns/op
kotlin_benchmarks.array.sum.Inline64byte.Val_as_Ref_fields                               100  avgt   15       267.631 ±        1.594  ns/op
kotlin_benchmarks.array.sum.Inline64byte.Val_as_Ref_fields                           1000000  avgt   15   2907628.539 ±    21315.529  ns/op
kotlin_benchmarks.array.sum.Inline64byte.Val_as_Ref_sum                                  100  avgt   15       196.883 ±        5.011  ns/op
kotlin_benchmarks.array.sum.Inline64byte.Val_as_Ref_sum                              1000000  avgt   15   1995454.963 ±   216411.745  ns/op
kotlin_benchmarks.array.sum.Inline64byte.Val_as_Val_fields                               100  avgt   15       585.642 ±       48.725  ns/op
kotlin_benchmarks.array.sum.Inline64byte.Val_as_Val_fields                           1000000  avgt   15   3353137.757 ±   983101.468  ns/op
kotlin_benchmarks.array.sum.Inline64byte.Val_as_Val_sum                                  100  avgt   15       195.864 ±        1.374  ns/op
kotlin_benchmarks.array.sum.Inline64byte.Val_as_Val_sum                              1000000  avgt   15   1850564.477 ±    27170.420  ns/op
kotlin_benchmarks.array.sum.Inline64int.Int_as_Int_sum                                   100  avgt   15        96.434 ±        1.318  ns/op
kotlin_benchmarks.array.sum.Inline64int.Int_as_Int_sum                               1000000  avgt   15   1338707.989 ±    47463.231  ns/op
kotlin_benchmarks.array.sum.Inline64int.Ref_as_Int_sum                                   100  avgt   15        79.882 ±        0.631  ns/op
kotlin_benchmarks.array.sum.Inline64int.Ref_as_Int_sum                               1000000  avgt   15   1269105.084 ±    71115.113  ns/op
kotlin_benchmarks.array.sum.Inline64int.Ref_as_Ref_fields                                100  avgt   15        63.087 ±        4.721  ns/op
kotlin_benchmarks.array.sum.Inline64int.Ref_as_Ref_fields                            1000000  avgt   15   1236996.715 ±    47505.415  ns/op
kotlin_benchmarks.array.sum.Inline64int.Ref_as_Ref_sum                                   100  avgt   15       137.619 ±       45.031  ns/op
kotlin_benchmarks.array.sum.Inline64int.Ref_as_Ref_sum                               1000000  avgt   15   1530569.123 ±   379047.170  ns/op
kotlin_benchmarks.array.sum.Inline64int.Val_as_Int_sum                                   100  avgt   15        80.273 ±        1.567  ns/op
kotlin_benchmarks.array.sum.Inline64int.Val_as_Int_sum                               1000000  avgt   15   1294971.096 ±    41845.411  ns/op
kotlin_benchmarks.array.sum.Inline64int.Val_as_Ref_fields                                100  avgt   15        60.221 ±        0.340  ns/op
kotlin_benchmarks.array.sum.Inline64int.Val_as_Ref_fields                            1000000  avgt   15   1228044.088 ±    64238.086  ns/op
kotlin_benchmarks.array.sum.Inline64int.Val_as_Ref_sum                                   100  avgt   15        79.879 ±        0.860  ns/op
kotlin_benchmarks.array.sum.Inline64int.Val_as_Ref_sum                               1000000  avgt   15   1253649.958 ±    48067.718  ns/op
kotlin_benchmarks.array.sum.Inline64int.Val_as_Val_fields                                100  avgt   15        60.214 ±        0.373  ns/op
kotlin_benchmarks.array.sum.Inline64int.Val_as_Val_fields                            1000000  avgt   15   1709984.324 ±   349003.920  ns/op
kotlin_benchmarks.array.sum.Inline64int.Val_as_Val_sum                                   100  avgt   15       108.691 ±       44.848  ns/op
kotlin_benchmarks.array.sum.Inline64int.Val_as_Val_sum                               1000000  avgt   15   1271099.714 ±    35329.787  ns/op
kotlin_benchmarks.array.sum.InlineOpt.Int_as_Int_sum                                     100  avgt   15        61.332 ±        2.783  ns/op
kotlin_benchmarks.array.sum.InlineOpt.Int_as_Int_sum                                 1000000  avgt   15    794182.669 ±    25372.433  ns/op
kotlin_benchmarks.array.sum.InlineOpt.Ref_as_Ref_fields                                  100  avgt   15        51.950 ±        0.265  ns/op
kotlin_benchmarks.array.sum.InlineOpt.Ref_as_Ref_fields                              1000000  avgt   15    754096.284 ±    34028.264  ns/op
kotlin_benchmarks.array.sum.InlineOpt.Ref_as_Ref_sum                                     100  avgt   15        52.012 ±        0.404  ns/op
kotlin_benchmarks.array.sum.InlineOpt.Ref_as_Ref_sum                                 1000000  avgt   15    732366.958 ±    35994.254  ns/op
kotlin_benchmarks.array.sum.InlineOpt.Val_as_Int_sum                                     100  avgt   15        52.437 ±        2.039  ns/op
kotlin_benchmarks.array.sum.InlineOpt.Val_as_Int_sum                                 1000000  avgt   15    753450.888 ±    39248.801  ns/op
kotlin_benchmarks.array.sum.InlineOpt.Val_as_Ref_fields                                  100  avgt   15        52.035 ±        0.546  ns/op
kotlin_benchmarks.array.sum.InlineOpt.Val_as_Ref_fields                              1000000  avgt   15    774690.788 ±    36790.773  ns/op
kotlin_benchmarks.array.sum.InlineOpt.Val_as_Ref_sum                                     100  avgt   15        52.106 ±        0.400  ns/op
kotlin_benchmarks.array.sum.InlineOpt.Val_as_Ref_sum                                 1000000  avgt   15    752139.245 ±    38747.252  ns/op
kotlin_benchmarks.array.sum.InlineOpt.Val_as_Val_fields                                  100  avgt   15        52.121 ±        0.469  ns/op
kotlin_benchmarks.array.sum.InlineOpt.Val_as_Val_fields                              1000000  avgt   15    743723.533 ±    38179.167  ns/op
kotlin_benchmarks.array.sum.InlineOpt.Val_as_Val_sum                                     100  avgt   15        52.013 ±        0.385  ns/op
kotlin_benchmarks.array.sum.InlineOpt.Val_as_Val_sum                                 1000000  avgt   15    765206.962 ±    55261.603  ns/op
kotlin_benchmarks.array.sum.Primitive128int.sum                                          100  avgt   15       111.481 ±       30.749  ns/op
kotlin_benchmarks.array.sum.Primitive128int.sum                                      1000000  avgt   15   2579142.307 ±    34014.211  ns/op
kotlin_benchmarks.array.sum.Primitive32int.sum                                           100  avgt   15        19.755 ±        6.905  ns/op
kotlin_benchmarks.array.sum.Primitive32int.sum                                       1000000  avgt   15    311935.357 ±     2550.260  ns/op
kotlin_benchmarks.array.sum.Primitive64byte.sum                                          100  avgt   15       453.837 ±        6.050  ns/op
kotlin_benchmarks.array.sum.Primitive64byte.sum                                      1000000  avgt   15   4994354.606 ±    33995.873  ns/op
kotlin_benchmarks.array.sum.Primitive64int.sum                                           100  avgt   15        41.748 ±        0.241  ns/op
kotlin_benchmarks.array.sum.Primitive64int.sum                                       1000000  avgt   15    627745.764 ±     8305.980  ns/op
kotlin_benchmarks.array.sum.Primitive64long.sum0                                         100  avgt   15        16.951 ±        0.086  ns/op
kotlin_benchmarks.array.sum.Primitive64long.sum0                                     1000000  avgt   15    311849.029 ±     2080.156  ns/op
kotlin_benchmarks.array.sum.Primitive64long.sum1                                         100  avgt   15        16.929 ±        0.126  ns/op
kotlin_benchmarks.array.sum.Primitive64long.sum1                                     1000000  avgt   15    311134.177 ±     1492.147  ns/op
kotlin_benchmarks.callconv.Inline64byte.Q64byte_args1_targets0                           N/A  avgt   15         0.197 ±        0.001  ns/op
kotlin_benchmarks.callconv.Inline64byte.Q64byte_args1_targets1                           N/A  avgt   15         0.197 ±        0.001  ns/op
kotlin_benchmarks.callconv.Inline64byte.Q64byte_args1_targets2                           N/A  avgt   15         0.351 ±        0.002  ns/op
kotlin_benchmarks.callconv.Inline64byte.Q64byte_args1_targets3                           N/A  avgt   15       177.716 ±        4.403  ns/op
kotlin_benchmarks.callconv.Inline64byte.Q64byte_args2_targets0                           N/A  avgt   15         0.352 ±        0.184  ns/op
kotlin_benchmarks.callconv.Inline64byte.Q64byte_args2_targets1                           N/A  avgt   15         0.199 ±        0.001  ns/op
kotlin_benchmarks.callconv.Inline64byte.Q64byte_args2_targets2                           N/A  avgt   15         0.350 ±        0.002  ns/op
kotlin_benchmarks.callconv.Inline64byte.Q64byte_args2_targets3                           N/A  avgt   15        89.906 ±        2.659  ns/op
kotlin_benchmarks.callconv.Inline64byte.Q64byte_args4_targets0                           N/A  avgt   15         0.202 ±        0.001  ns/op
kotlin_benchmarks.callconv.Inline64byte.Q64byte_args4_targets1                           N/A  avgt   15         0.205 ±        0.003  ns/op
kotlin_benchmarks.callconv.Inline64byte.Q64byte_args4_targets2                           N/A  avgt   15         0.354 ±        0.004  ns/op
kotlin_benchmarks.callconv.Inline64byte.Q64byte_args4_targets3                           N/A  avgt   15        98.315 ±        0.990  ns/op
kotlin_benchmarks.callconv.Inline64byte.Q64byte_args8_targets0                           N/A  avgt   15         0.210 ±        0.002  ns/op
kotlin_benchmarks.callconv.Inline64byte.Q64byte_args8_targets1                           N/A  avgt   15         0.209 ±        0.001  ns/op
kotlin_benchmarks.callconv.Inline64byte.Q64byte_args8_targets2                           N/A  avgt   15         0.536 ±        0.212  ns/op
kotlin_benchmarks.callconv.Inline64byte.Q64byte_args8_targets3                           N/A  avgt   15       232.197 ±       46.738  ns/op
kotlin_benchmarks.callconv.Inline64int.Q64int_args1_targets0                             N/A  avgt   15         0.197 ±        0.001  ns/op
kotlin_benchmarks.callconv.Inline64int.Q64int_args1_targets1                             N/A  avgt   15         0.198 ±        0.002  ns/op
kotlin_benchmarks.callconv.Inline64int.Q64int_args1_targets2                             N/A  avgt   15         0.347 ±        0.002  ns/op
kotlin_benchmarks.callconv.Inline64int.Q64int_args1_targets3                             N/A  avgt   15        83.214 ±        0.509  ns/op
kotlin_benchmarks.callconv.Inline64int.Q64int_args2_targets0                             N/A  avgt   15         0.200 ±        0.002  ns/op
kotlin_benchmarks.callconv.Inline64int.Q64int_args2_targets1                             N/A  avgt   15         0.199 ±        0.001  ns/op
kotlin_benchmarks.callconv.Inline64int.Q64int_args2_targets2                             N/A  avgt   15         0.348 ±        0.002  ns/op
kotlin_benchmarks.callconv.Inline64int.Q64int_args2_targets3                             N/A  avgt   15        87.726 ±        1.370  ns/op
kotlin_benchmarks.callconv.Inline64int.Q64int_args4_targets0                             N/A  avgt   15         0.202 ±        0.001  ns/op
kotlin_benchmarks.callconv.Inline64int.Q64int_args4_targets1                             N/A  avgt   15         0.311 ±        0.116  ns/op
kotlin_benchmarks.callconv.Inline64int.Q64int_args4_targets2                             N/A  avgt   15         0.603 ±        0.198  ns/op
kotlin_benchmarks.callconv.Inline64int.Q64int_args4_targets3                             N/A  avgt   15        97.103 ±        1.257  ns/op
kotlin_benchmarks.callconv.Inline64int.Q64int_args8_targets0                             N/A  avgt   15         0.208 ±        0.001  ns/op
kotlin_benchmarks.callconv.Inline64int.Q64int_args8_targets1                             N/A  avgt   15         0.208 ±        0.001  ns/op
kotlin_benchmarks.callconv.Inline64int.Q64int_args8_targets2                             N/A  avgt   15         0.350 ±        0.004  ns/op
kotlin_benchmarks.callconv.Inline64int.Q64int_args8_targets3                             N/A  avgt   15       116.720 ±        0.701  ns/op
kotlin_benchmarks.callconv.Inline64long.Q64long_args1_targets0                           N/A  avgt   15         0.196 ±        0.002  ns/op
kotlin_benchmarks.callconv.Inline64long.Q64long_args1_targets1                           N/A  avgt   15         0.196 ±        0.002  ns/op
kotlin_benchmarks.callconv.Inline64long.Q64long_args1_targets2                           N/A  avgt   15         0.367 ±        0.036  ns/op
kotlin_benchmarks.callconv.Inline64long.Q64long_args1_targets3                           N/A  avgt   15        83.061 ±        0.571  ns/op
kotlin_benchmarks.callconv.Inline64long.Q64long_args2_targets0                           N/A  avgt   15         0.310 ±        0.117  ns/op
kotlin_benchmarks.callconv.Inline64long.Q64long_args2_targets1                           N/A  avgt   15         0.390 ±        0.103  ns/op
kotlin_benchmarks.callconv.Inline64long.Q64long_args2_targets2                           N/A  avgt   15         0.349 ±        0.005  ns/op
kotlin_benchmarks.callconv.Inline64long.Q64long_args2_targets3                           N/A  avgt   15        85.828 ±        2.666  ns/op
kotlin_benchmarks.callconv.Inline64long.Q64long_args4_targets0                           N/A  avgt   15         0.202 ±        0.003  ns/op
kotlin_benchmarks.callconv.Inline64long.Q64long_args4_targets1                           N/A  avgt   15         0.201 ±        0.001  ns/op
kotlin_benchmarks.callconv.Inline64long.Q64long_args4_targets2                           N/A  avgt   15         0.346 ±        0.002  ns/op
kotlin_benchmarks.callconv.Inline64long.Q64long_args4_targets3                           N/A  avgt   15        95.791 ±        0.622  ns/op
kotlin_benchmarks.callconv.Inline64long.Q64long_args8_targets0                           N/A  avgt   15         0.207 ±        0.001  ns/op
kotlin_benchmarks.callconv.Inline64long.Q64long_args8_targets1                           N/A  avgt   15         0.207 ±        0.002  ns/op
kotlin_benchmarks.callconv.Inline64long.Q64long_args8_targets2                           N/A  avgt   15         0.349 ±        0.002  ns/op
kotlin_benchmarks.callconv.Inline64long.Q64long_args8_targets3                           N/A  avgt   15       156.813 ±       65.076  ns/op
kotlin_benchmarks.callconv.PrimitiveByte.byte_args1_targets0                             N/A  avgt   15         0.347 ±        0.097  ns/op
kotlin_benchmarks.callconv.PrimitiveByte.byte_args1_targets1                             N/A  avgt   15         0.195 ±        0.001  ns/op
kotlin_benchmarks.callconv.PrimitiveByte.byte_args1_targets2                             N/A  avgt   15         0.345 ±        0.006  ns/op
kotlin_benchmarks.callconv.PrimitiveByte.byte_args1_targets3                             N/A  avgt   15         2.863 ±        0.033  ns/op
kotlin_benchmarks.callconv.PrimitiveByte.byte_args2_targets0                             N/A  avgt   15         0.196 ±        0.001  ns/op
kotlin_benchmarks.callconv.PrimitiveByte.byte_args2_targets1                             N/A  avgt   15         0.195 ±        0.001  ns/op
kotlin_benchmarks.callconv.PrimitiveByte.byte_args2_targets2                             N/A  avgt   15         0.358 ±        0.015  ns/op
kotlin_benchmarks.callconv.PrimitiveByte.byte_args2_targets3                             N/A  avgt   15         2.748 ±        0.171  ns/op
kotlin_benchmarks.callconv.PrimitiveByte.byte_args4_targets0                             N/A  avgt   15         0.196 ±        0.001  ns/op
kotlin_benchmarks.callconv.PrimitiveByte.byte_args4_targets1                             N/A  avgt   15         0.195 ±        0.001  ns/op
kotlin_benchmarks.callconv.PrimitiveByte.byte_args4_targets2                             N/A  avgt   15         0.560 ±        0.190  ns/op
kotlin_benchmarks.callconv.PrimitiveByte.byte_args4_targets3                             N/A  avgt   15         5.633 ±        2.444  ns/op
kotlin_benchmarks.callconv.PrimitiveByte.byte_args8_targets0                             N/A  avgt   15         0.196 ±        0.002  ns/op
kotlin_benchmarks.callconv.PrimitiveByte.byte_args8_targets1                             N/A  avgt   15         0.198 ±        0.008  ns/op
kotlin_benchmarks.callconv.PrimitiveByte.byte_args8_targets2                             N/A  avgt   15         0.346 ±        0.004  ns/op
kotlin_benchmarks.callconv.PrimitiveByte.byte_args8_targets3                             N/A  avgt   15         3.078 ±        0.153  ns/op
kotlin_benchmarks.callconv.PrimitiveInt.int_args1_targets0                               N/A  avgt   15         0.197 ±        0.001  ns/op
kotlin_benchmarks.callconv.PrimitiveInt.int_args1_targets1                               N/A  avgt   15         0.196 ±        0.002  ns/op
kotlin_benchmarks.callconv.PrimitiveInt.int_args1_targets2                               N/A  avgt   15         0.345 ±        0.005  ns/op
kotlin_benchmarks.callconv.PrimitiveInt.int_args1_targets3                               N/A  avgt   15         2.750 ±        0.165  ns/op
kotlin_benchmarks.callconv.PrimitiveInt.int_args2_targets0                               N/A  avgt   15         0.196 ±        0.001  ns/op
kotlin_benchmarks.callconv.PrimitiveInt.int_args2_targets1                               N/A  avgt   15         0.206 ±        0.023  ns/op
kotlin_benchmarks.callconv.PrimitiveInt.int_args2_targets2                               N/A  avgt   15         0.382 ±        0.039  ns/op
kotlin_benchmarks.callconv.PrimitiveInt.int_args2_targets3                               N/A  avgt   15         5.794 ±        0.888  ns/op
kotlin_benchmarks.callconv.PrimitiveInt.int_args4_targets0                               N/A  avgt   15         0.196 ±        0.001  ns/op
kotlin_benchmarks.callconv.PrimitiveInt.int_args4_targets1                               N/A  avgt   15         0.196 ±        0.002  ns/op
kotlin_benchmarks.callconv.PrimitiveInt.int_args4_targets2                               N/A  avgt   15         0.343 ±        0.002  ns/op
kotlin_benchmarks.callconv.PrimitiveInt.int_args4_targets3                               N/A  avgt   15         2.844 ±        0.019  ns/op
kotlin_benchmarks.callconv.PrimitiveInt.int_args8_targets0                               N/A  avgt   15         0.196 ±        0.001  ns/op
kotlin_benchmarks.callconv.PrimitiveInt.int_args8_targets1                               N/A  avgt   15         0.197 ±        0.001  ns/op
kotlin_benchmarks.callconv.PrimitiveInt.int_args8_targets2                               N/A  avgt   15         0.354 ±        0.003  ns/op
kotlin_benchmarks.callconv.PrimitiveInt.int_args8_targets3                               N/A  avgt   15         3.764 ±        0.394  ns/op
kotlin_benchmarks.callconv.PrimitiveLong.long_args1_targets0                             N/A  avgt   15         0.340 ±        0.105  ns/op
kotlin_benchmarks.callconv.PrimitiveLong.long_args1_targets1                             N/A  avgt   15         0.273 ±        0.125  ns/op
kotlin_benchmarks.callconv.PrimitiveLong.long_args1_targets2                             N/A  avgt   15         0.343 ±        0.001  ns/op
kotlin_benchmarks.callconv.PrimitiveLong.long_args1_targets3                             N/A  avgt   15         2.849 ±        0.010  ns/op
kotlin_benchmarks.callconv.PrimitiveLong.long_args2_targets0                             N/A  avgt   15         0.195 ±        0.002  ns/op
kotlin_benchmarks.callconv.PrimitiveLong.long_args2_targets1                             N/A  avgt   15         0.196 ±        0.001  ns/op
kotlin_benchmarks.callconv.PrimitiveLong.long_args2_targets2                             N/A  avgt   15         0.353 ±        0.002  ns/op
kotlin_benchmarks.callconv.PrimitiveLong.long_args2_targets3                             N/A  avgt   15         3.058 ±        0.347  ns/op
kotlin_benchmarks.callconv.PrimitiveLong.long_args4_targets0                             N/A  avgt   15         0.209 ±        0.019  ns/op
kotlin_benchmarks.callconv.PrimitiveLong.long_args4_targets1                             N/A  avgt   15         0.335 ±        0.106  ns/op
kotlin_benchmarks.callconv.PrimitiveLong.long_args4_targets2                             N/A  avgt   15         0.469 ±        0.195  ns/op
kotlin_benchmarks.callconv.PrimitiveLong.long_args4_targets3                             N/A  avgt   15         2.932 ±        0.198  ns/op
kotlin_benchmarks.callconv.PrimitiveLong.long_args8_targets0                             N/A  avgt   15         0.196 ±        0.002  ns/op
kotlin_benchmarks.callconv.PrimitiveLong.long_args8_targets1                             N/A  avgt   15         0.196 ±        0.002  ns/op
kotlin_benchmarks.callconv.PrimitiveLong.long_args8_targets2                             N/A  avgt   15         0.354 ±        0.002  ns/op
kotlin_benchmarks.callconv.PrimitiveLong.long_args8_targets3                             N/A  avgt   15         3.159 ±        0.042  ns/op
org.openjdk.bench.valhalla.array.copy.Identity32int.ref_arraycopy                        100  avgt   15        11.012 ±        3.338  ns/op
org.openjdk.bench.valhalla.array.copy.Identity32int.ref_arraycopy                    1000000  avgt   15     80345.730 ±     5739.259  ns/op
org.openjdk.bench.valhalla.array.copy.Identity32int.ref_copy                             100  avgt   15        76.275 ±        0.376  ns/op
org.openjdk.bench.valhalla.array.copy.Identity32int.ref_copy                         1000000  avgt   15  32344425.789 ±  2196488.417  ns/op
org.openjdk.bench.valhalla.array.copy.Inline128int.Ref_to_Val_arraycopy                  100  avgt   15         9.569 ±        0.075  ns/op
org.openjdk.bench.valhalla.array.copy.Inline128int.Ref_to_Val_arraycopy              1000000  avgt   15     78808.214 ±     3796.583  ns/op
org.openjdk.bench.valhalla.array.copy.Inline128int.Ref_to_Val_copy                       100  avgt   15       178.592 ±        1.831  ns/op
org.openjdk.bench.valhalla.array.copy.Inline128int.Ref_to_Val_copy                   1000000  avgt   15  27545211.396 ±  1176457.849  ns/op
org.openjdk.bench.valhalla.array.copy.Inline128int.Val_to_Ref_arraycopy                  100  avgt   15        16.947 ±        5.954  ns/op
org.openjdk.bench.valhalla.array.copy.Inline128int.Val_to_Ref_arraycopy              1000000  avgt   15    196560.610 ±    48196.520  ns/op
org.openjdk.bench.valhalla.array.copy.Inline128int.Val_to_Ref_copy                       100  avgt   15       178.935 ±        1.406  ns/op
org.openjdk.bench.valhalla.array.copy.Inline128int.Val_to_Ref_copy                   1000000  avgt   15  26199026.866 ±  4303697.611  ns/op
org.openjdk.bench.valhalla.array.copy.Inline128int.Val_to_Val_arraycopy                  100  avgt   15         9.635 ±        0.084  ns/op
org.openjdk.bench.valhalla.array.copy.Inline128int.Val_to_Val_arraycopy              1000000  avgt   15     81077.434 ±     3733.130  ns/op
org.openjdk.bench.valhalla.array.copy.Inline128int.Val_to_Val_copy                       100  avgt   15       177.677 ±        1.148  ns/op
org.openjdk.bench.valhalla.array.copy.Inline128int.Val_to_Val_copy                   1000000  avgt   15  29120598.728 ±  1870399.714  ns/op
org.openjdk.bench.valhalla.array.copy.Inline32int.Ref_to_Val_arraycopy                   100  avgt   15         9.976 ±        0.160  ns/op
org.openjdk.bench.valhalla.array.copy.Inline32int.Ref_to_Val_arraycopy               1000000  avgt   15     81634.127 ±     3955.940  ns/op
org.openjdk.bench.valhalla.array.copy.Inline32int.Ref_to_Val_copy                        100  avgt   15        77.694 ±        0.526  ns/op
org.openjdk.bench.valhalla.array.copy.Inline32int.Ref_to_Val_copy                    1000000  avgt   15  27103847.243 ±  2043960.109  ns/op
org.openjdk.bench.valhalla.array.copy.Inline32int.Val_to_Ref_arraycopy                   100  avgt   15        14.390 ±        4.861  ns/op
org.openjdk.bench.valhalla.array.copy.Inline32int.Val_to_Ref_arraycopy               1000000  avgt   15    192329.453 ±    30932.634  ns/op
org.openjdk.bench.valhalla.array.copy.Inline32int.Val_to_Ref_copy                        100  avgt   15        78.060 ±        0.822  ns/op
org.openjdk.bench.valhalla.array.copy.Inline32int.Val_to_Ref_copy                    1000000  avgt   15  41580340.401 ± 14350424.126  ns/op
org.openjdk.bench.valhalla.array.copy.Inline32int.Val_to_Val_arraycopy                   100  avgt   15         9.929 ±        0.119  ns/op
org.openjdk.bench.valhalla.array.copy.Inline32int.Val_to_Val_arraycopy               1000000  avgt   15     81254.769 ±     4311.280  ns/op
org.openjdk.bench.valhalla.array.copy.Inline32int.Val_to_Val_copy                        100  avgt   15        78.203 ±        0.541  ns/op
org.openjdk.bench.valhalla.array.copy.Inline32int.Val_to_Val_copy                    1000000  avgt   15  23110511.038 ±  3105174.858  ns/op
org.openjdk.bench.valhalla.array.copy.Inline64byte.Ref_to_Val_arraycopy                  100  avgt   15         9.646 ±        0.073  ns/op
org.openjdk.bench.valhalla.array.copy.Inline64byte.Ref_to_Val_arraycopy              1000000  avgt   15     85270.485 ±     7635.926  ns/op
org.openjdk.bench.valhalla.array.copy.Inline64byte.Ref_to_Val_copy                       100  avgt   15       191.809 ±       15.918  ns/op
org.openjdk.bench.valhalla.array.copy.Inline64byte.Ref_to_Val_copy                   1000000  avgt   15  27014355.744 ±  3598387.355  ns/op
org.openjdk.bench.valhalla.array.copy.Inline64byte.Val_to_Ref_arraycopy                  100  avgt   15        15.979 ±        5.291  ns/op
org.openjdk.bench.valhalla.array.copy.Inline64byte.Val_to_Ref_arraycopy              1000000  avgt   15    141046.322 ±    49502.985  ns/op
org.openjdk.bench.valhalla.array.copy.Inline64byte.Val_to_Ref_copy                       100  avgt   15       179.198 ±        1.211  ns/op
org.openjdk.bench.valhalla.array.copy.Inline64byte.Val_to_Ref_copy                   1000000  avgt   15  23443055.461 ±  7109803.653  ns/op
org.openjdk.bench.valhalla.array.copy.Inline64byte.Val_to_Val_arraycopy                  100  avgt   15         9.635 ±        0.090  ns/op
org.openjdk.bench.valhalla.array.copy.Inline64byte.Val_to_Val_arraycopy              1000000  avgt   15     80216.448 ±     4028.081  ns/op
org.openjdk.bench.valhalla.array.copy.Inline64byte.Val_to_Val_copy                       100  avgt   15       179.140 ±        0.999  ns/op
org.openjdk.bench.valhalla.array.copy.Inline64byte.Val_to_Val_copy                   1000000  avgt   15  25225103.421 ±  4073829.024  ns/op
org.openjdk.bench.valhalla.array.copy.Inline64int.Ref_to_Val_arraycopy                   100  avgt   15         9.694 ±        0.079  ns/op
org.openjdk.bench.valhalla.array.copy.Inline64int.Ref_to_Val_arraycopy               1000000  avgt   15     89421.622 ±    17298.279  ns/op
org.openjdk.bench.valhalla.array.copy.Inline64int.Ref_to_Val_copy                        100  avgt   15       197.988 ±       18.241  ns/op
org.openjdk.bench.valhalla.array.copy.Inline64int.Ref_to_Val_copy                    1000000  avgt   15  35098664.931 ±  8857304.760  ns/op
org.openjdk.bench.valhalla.array.copy.Inline64int.Val_to_Ref_arraycopy                   100  avgt   15        13.152 ±        5.538  ns/op
org.openjdk.bench.valhalla.array.copy.Inline64int.Val_to_Ref_arraycopy               1000000  avgt   15     82401.624 ±     7008.268  ns/op
org.openjdk.bench.valhalla.array.copy.Inline64int.Val_to_Ref_copy                        100  avgt   15       179.003 ±        0.833  ns/op
org.openjdk.bench.valhalla.array.copy.Inline64int.Val_to_Ref_copy                    1000000  avgt   15  23804121.077 ±  2174869.835  ns/op
org.openjdk.bench.valhalla.array.copy.Inline64int.Val_to_Val_arraycopy                   100  avgt   15         9.642 ±        0.095  ns/op
org.openjdk.bench.valhalla.array.copy.Inline64int.Val_to_Val_arraycopy               1000000  avgt   15     86816.548 ±     8277.869  ns/op
org.openjdk.bench.valhalla.array.copy.Inline64int.Val_to_Val_copy                        100  avgt   15       195.584 ±       18.022  ns/op
org.openjdk.bench.valhalla.array.copy.Inline64int.Val_to_Val_copy                    1000000  avgt   15  25193232.044 ±  2172281.454  ns/op
org.openjdk.bench.valhalla.array.copy.InlineOpt.Ref_to_Val_arraycopy                     100  avgt   15        21.245 ±        3.137  ns/op
org.openjdk.bench.valhalla.array.copy.InlineOpt.Ref_to_Val_arraycopy                 1000000  avgt   15     81685.822 ±     3655.596  ns/op
org.openjdk.bench.valhalla.array.copy.InlineOpt.Ref_to_Val_copy                          100  avgt   15        77.885 ±        0.400  ns/op
org.openjdk.bench.valhalla.array.copy.InlineOpt.Ref_to_Val_copy                      1000000  avgt   15  21573679.390 ±  1652550.424  ns/op
org.openjdk.bench.valhalla.array.copy.InlineOpt.Val_to_Ref_arraycopy                     100  avgt   15        10.012 ±        0.148  ns/op
org.openjdk.bench.valhalla.array.copy.InlineOpt.Val_to_Ref_arraycopy                 1000000  avgt   15     82669.287 ±     2838.948  ns/op
org.openjdk.bench.valhalla.array.copy.InlineOpt.Val_to_Ref_copy                          100  avgt   15        77.908 ±        0.718  ns/op
org.openjdk.bench.valhalla.array.copy.InlineOpt.Val_to_Ref_copy                      1000000  avgt   15  22360645.237 ±  1548280.137  ns/op
org.openjdk.bench.valhalla.array.copy.InlineOpt.Val_to_Val_arraycopy                     100  avgt   15        10.034 ±        0.148  ns/op
org.openjdk.bench.valhalla.array.copy.InlineOpt.Val_to_Val_arraycopy                 1000000  avgt   15     80895.109 ±     4751.462  ns/op
org.openjdk.bench.valhalla.array.copy.InlineOpt.Val_to_Val_copy                          100  avgt   15        77.983 ±        0.545  ns/op
org.openjdk.bench.valhalla.array.copy.InlineOpt.Val_to_Val_copy                      1000000  avgt   15  22963178.918 ±  2945999.956  ns/op
org.openjdk.bench.valhalla.array.copy.Primitive128.p128int_arraycopy                     100  avgt   15        28.811 ±        0.139  ns/op
org.openjdk.bench.valhalla.array.copy.Primitive128.p128int_arraycopy                 1000000  avgt   15    411614.548 ±    43599.756  ns/op
org.openjdk.bench.valhalla.array.copy.Primitive128.p128int_copy                          100  avgt   15        21.424 ±        0.149  ns/op
org.openjdk.bench.valhalla.array.copy.Primitive128.p128int_copy                      1000000  avgt   15    560731.948 ±    17821.172  ns/op
org.openjdk.bench.valhalla.array.copy.Primitive32.p32int_arraycopy                       100  avgt   15         7.723 ±        0.063  ns/op
org.openjdk.bench.valhalla.array.copy.Primitive32.p32int_arraycopy                   1000000  avgt   15     75256.950 ±     5137.868  ns/op
org.openjdk.bench.valhalla.array.copy.Primitive32.p32int_copy                            100  avgt   15         9.373 ±        0.092  ns/op
org.openjdk.bench.valhalla.array.copy.Primitive32.p32int_copy                        1000000  avgt   15     90214.735 ±     1047.443  ns/op
org.openjdk.bench.valhalla.array.copy.Primitive64.p64byte_arraycopy                      100  avgt   15        15.434 ±        0.196  ns/op
org.openjdk.bench.valhalla.array.copy.Primitive64.p64byte_arraycopy                  1000000  avgt   15    163530.618 ±     9680.475  ns/op
org.openjdk.bench.valhalla.array.copy.Primitive64.p64byte_copy                           100  avgt   15        19.743 ±        1.664  ns/op
org.openjdk.bench.valhalla.array.copy.Primitive64.p64byte_copy                       1000000  avgt   15    201563.384 ±     7425.117  ns/op
org.openjdk.bench.valhalla.array.copy.Primitive64.p64int_arraycopy                       100  avgt   15        15.494 ±        0.197  ns/op
org.openjdk.bench.valhalla.array.copy.Primitive64.p64int_arraycopy                   1000000  avgt   15    164919.750 ±     7085.283  ns/op
org.openjdk.bench.valhalla.array.copy.Primitive64.p64int_copy                            100  avgt   15        12.045 ±        0.337  ns/op
org.openjdk.bench.valhalla.array.copy.Primitive64.p64int_copy                        1000000  avgt   15    190987.429 ±     8951.927  ns/op
org.openjdk.bench.valhalla.array.copy.Primitive64.p64long_arraycopy                      100  avgt   15        15.473 ±        0.161  ns/op
org.openjdk.bench.valhalla.array.copy.Primitive64.p64long_arraycopy                  1000000  avgt   15    163992.359 ±     7153.311  ns/op
org.openjdk.bench.valhalla.array.copy.Primitive64.p64long_copy                           100  avgt   15        10.998 ±        0.036  ns/op
org.openjdk.bench.valhalla.array.copy.Primitive64.p64long_copy                       1000000  avgt   15    162760.304 ±    11268.439  ns/op
org.openjdk.bench.valhalla.array.fill.Identity32int.Def_to_Ref_as_Ref_arrayfill          100  avgt   15        88.702 ±        1.841  ns/op
org.openjdk.bench.valhalla.array.fill.Identity32int.Def_to_Ref_as_Ref_arrayfill      1000000  avgt   15  23607423.304 ±  2712848.324  ns/op
org.openjdk.bench.valhalla.array.fill.Identity32int.Def_to_Ref_as_Ref_fill               100  avgt   15       180.217 ±        3.653  ns/op
org.openjdk.bench.valhalla.array.fill.Identity32int.Def_to_Ref_as_Ref_fill           1000000  avgt   15   1821812.336 ±    76021.746  ns/op
org.openjdk.bench.valhalla.array.fill.Identity32int.New_to_Ref_as_Ref_arrayfill          100  avgt   15        89.875 ±        0.372  ns/op
org.openjdk.bench.valhalla.array.fill.Identity32int.New_to_Ref_as_Ref_arrayfill      1000000  avgt   15  22216161.865 ±  1171477.696  ns/op
org.openjdk.bench.valhalla.array.fill.Identity32int.New_to_Ref_as_Ref_fill               100  avgt   15        85.207 ±        4.358  ns/op
org.openjdk.bench.valhalla.array.fill.Identity32int.New_to_Ref_as_Ref_fill           1000000  avgt   15  23031809.873 ±  2367253.532  ns/op
org.openjdk.bench.valhalla.array.fill.Identity32int.Ref_to_Ref_as_Ref_arrayfillinst      100  avgt   15        71.916 ±        0.797  ns/op
org.openjdk.bench.valhalla.array.fill.Identity32int.Ref_to_Ref_as_Ref_arrayfillinst  1000000  avgt   15  23581093.318 ±  2113092.133  ns/op
org.openjdk.bench.valhalla.array.fill.Identity32int.Ref_to_Ref_as_Ref_arrayfillstat      100  avgt   15        71.456 ±        0.250  ns/op
org.openjdk.bench.valhalla.array.fill.Identity32int.Ref_to_Ref_as_Ref_arrayfillstat  1000000  avgt   15  22927085.675 ±  1755080.766  ns/op
org.openjdk.bench.valhalla.array.fill.Identity32int.Ref_to_Ref_as_Ref_fill_fillstat      100  avgt   15        73.514 ±        0.279  ns/op
org.openjdk.bench.valhalla.array.fill.Identity32int.Ref_to_Ref_as_Ref_fill_fillstat  1000000  avgt   15  24157468.967 ±  2768261.071  ns/op
org.openjdk.bench.valhalla.array.fill.Identity32int.Ref_to_Ref_as_Ref_fillinst           100  avgt   15        73.981 ±        0.487  ns/op
org.openjdk.bench.valhalla.array.fill.Identity32int.Ref_to_Ref_as_Ref_fillinst       1000000  avgt   15  23654239.961 ±  2729482.087  ns/op
org.openjdk.bench.valhalla.array.fill.IdentityOpt.Def_to_Ref_as_Ref_arrayfill            100  avgt   15        87.486 ±        1.807  ns/op
org.openjdk.bench.valhalla.array.fill.IdentityOpt.Def_to_Ref_as_Ref_arrayfill        1000000  avgt   15  22976931.335 ±  1425751.796  ns/op
org.openjdk.bench.valhalla.array.fill.IdentityOpt.Def_to_Ref_as_Ref_fill                 100  avgt   15       180.524 ±        5.826  ns/op
org.openjdk.bench.valhalla.array.fill.IdentityOpt.Def_to_Ref_as_Ref_fill             1000000  avgt   15   1899817.979 ±    94139.278  ns/op
org.openjdk.bench.valhalla.array.fill.IdentityOpt.New_to_Ref_as_Ref_arrayfill            100  avgt   15        87.657 ±        3.633  ns/op
org.openjdk.bench.valhalla.array.fill.IdentityOpt.New_to_Ref_as_Ref_arrayfill        1000000  avgt   15  23216890.428 ±  1874624.773  ns/op
org.openjdk.bench.valhalla.array.fill.IdentityOpt.New_to_Ref_as_Ref_fill                 100  avgt   15        87.440 ±        4.878  ns/op
org.openjdk.bench.valhalla.array.fill.IdentityOpt.New_to_Ref_as_Ref_fill             1000000  avgt   15  23403706.020 ±  1632024.638  ns/op
org.openjdk.bench.valhalla.array.fill.IdentityOpt.Ref_to_Ref_as_Ref_arrayfillinst        100  avgt   15        71.907 ±        0.269  ns/op
org.openjdk.bench.valhalla.array.fill.IdentityOpt.Ref_to_Ref_as_Ref_arrayfillinst    1000000  avgt   15  24385855.505 ±  2119593.412  ns/op
org.openjdk.bench.valhalla.array.fill.IdentityOpt.Ref_to_Ref_as_Ref_arrayfillstat        100  avgt   15        71.633 ±        0.598  ns/op
org.openjdk.bench.valhalla.array.fill.IdentityOpt.Ref_to_Ref_as_Ref_arrayfillstat    1000000  avgt   15  24555263.175 ±  2590701.297  ns/op
org.openjdk.bench.valhalla.array.fill.IdentityOpt.Ref_to_Ref_as_Ref_fill_fillstat        100  avgt   15        73.455 ±        0.268  ns/op
org.openjdk.bench.valhalla.array.fill.IdentityOpt.Ref_to_Ref_as_Ref_fill_fillstat    1000000  avgt   15  22708283.048 ±  2057106.493  ns/op
org.openjdk.bench.valhalla.array.fill.IdentityOpt.Ref_to_Ref_as_Ref_fillinst             100  avgt   15        73.904 ±        0.433  ns/op
org.openjdk.bench.valhalla.array.fill.IdentityOpt.Ref_to_Ref_as_Ref_fillinst         1000000  avgt   15  23912586.291 ±  2276021.960  ns/op
org.openjdk.bench.valhalla.array.fill.Inline128int.Def_to_Ref_as_Ref_arrayfill           100  avgt   15       136.631 ±        0.925  ns/op
org.openjdk.bench.valhalla.array.fill.Inline128int.Def_to_Ref_as_Ref_arrayfill       1000000  avgt   15  24608881.730 ±  2635127.174  ns/op
org.openjdk.bench.valhalla.array.fill.Inline128int.Def_to_Ref_as_Ref_fill                100  avgt   15       348.416 ±       21.501  ns/op
org.openjdk.bench.valhalla.array.fill.Inline128int.Def_to_Ref_as_Ref_fill            1000000  avgt   15   3569865.042 ±    43710.107  ns/op
org.openjdk.bench.valhalla.array.fill.Inline128int.Def_to_Val_as_Val_arrayfill           100  avgt   15       132.752 ±        5.686  ns/op
org.openjdk.bench.valhalla.array.fill.Inline128int.Def_to_Val_as_Val_arrayfill       1000000  avgt   15  23760471.185 ±  2955309.461  ns/op
org.openjdk.bench.valhalla.array.fill.Inline128int.Def_to_Val_as_Val_fill                100  avgt   15       341.770 ±       17.398  ns/op
org.openjdk.bench.valhalla.array.fill.Inline128int.Def_to_Val_as_Val_fill            1000000  avgt   15   3621805.867 ±   139130.600  ns/op
org.openjdk.bench.valhalla.array.fill.Inline128int.New_to_Ref_as_Ref_arrayfill           100  avgt   15       132.373 ±        1.237  ns/op
org.openjdk.bench.valhalla.array.fill.Inline128int.New_to_Ref_as_Ref_arrayfill       1000000  avgt   15  23980303.485 ±  3279094.967  ns/op
org.openjdk.bench.valhalla.array.fill.Inline128int.New_to_Ref_as_Ref_fill                100  avgt   15       250.139 ±        3.993  ns/op
org.openjdk.bench.valhalla.array.fill.Inline128int.New_to_Ref_as_Ref_fill            1000000  avgt   15   2952039.215 ±   206733.334  ns/op
org.openjdk.bench.valhalla.array.fill.Inline128int.New_to_Val_as_Val_arrayfill           100  avgt   15       132.801 ±        0.469  ns/op
org.openjdk.bench.valhalla.array.fill.Inline128int.New_to_Val_as_Val_arrayfill       1000000  avgt   15  24243159.627 ±  2851148.768  ns/op
org.openjdk.bench.valhalla.array.fill.Inline128int.New_to_Val_as_Val_fill                100  avgt   15       254.708 ±       13.676  ns/op
org.openjdk.bench.valhalla.array.fill.Inline128int.New_to_Val_as_Val_fill            1000000  avgt   15   2947548.555 ±   289932.713  ns/op
org.openjdk.bench.valhalla.array.fill.Inline128int.Ref_to_Ref_as_Ref_arrayfillinst       100  avgt   15       117.062 ±        0.863  ns/op
org.openjdk.bench.valhalla.array.fill.Inline128int.Ref_to_Ref_as_Ref_arrayfillinst   1000000  avgt   15  23930259.899 ±  2029154.474  ns/op
org.openjdk.bench.valhalla.array.fill.Inline128int.Ref_to_Ref_as_Ref_arrayfillstat       100  avgt   15       117.717 ±        0.894  ns/op
org.openjdk.bench.valhalla.array.fill.Inline128int.Ref_to_Ref_as_Ref_arrayfillstat   1000000  avgt   15  24562582.600 ±  3042418.822  ns/op
org.openjdk.bench.valhalla.array.fill.Inline128int.Ref_to_Ref_as_Ref_fillinst            100  avgt   15       131.331 ±        3.064  ns/op
org.openjdk.bench.valhalla.array.fill.Inline128int.Ref_to_Ref_as_Ref_fillinst        1000000  avgt   15  26783821.711 ±  2159852.996  ns/op
org.openjdk.bench.valhalla.array.fill.Inline128int.Ref_to_Ref_as_Ref_fillstat            100  avgt   15       133.630 ±        1.582  ns/op
org.openjdk.bench.valhalla.array.fill.Inline128int.Ref_to_Ref_as_Ref_fillstat        1000000  avgt   15  26439037.722 ±  3747404.207  ns/op
org.openjdk.bench.valhalla.array.fill.Inline128int.Ref_to_Val_as_Val_arrayfillinst       100  avgt   15       117.149 ±        2.111  ns/op
org.openjdk.bench.valhalla.array.fill.Inline128int.Ref_to_Val_as_Val_arrayfillinst   1000000  avgt   15  24716807.779 ±  2626928.486  ns/op
org.openjdk.bench.valhalla.array.fill.Inline128int.Ref_to_Val_as_Val_arrayfillstat       100  avgt   15       117.208 ±        0.416  ns/op
org.openjdk.bench.valhalla.array.fill.Inline128int.Ref_to_Val_as_Val_arrayfillstat   1000000  avgt   15  23974881.221 ±  1234224.713  ns/op
org.openjdk.bench.valhalla.array.fill.Inline128int.Ref_to_Val_as_Val_fillinst            100  avgt   15       130.584 ±        3.593  ns/op
org.openjdk.bench.valhalla.array.fill.Inline128int.Ref_to_Val_as_Val_fillinst        1000000  avgt   15  25885807.795 ±  1483043.939  ns/op
org.openjdk.bench.valhalla.array.fill.Inline128int.Ref_to_Val_as_Val_fillstat            100  avgt   15       134.579 ±        3.562  ns/op
org.openjdk.bench.valhalla.array.fill.Inline128int.Ref_to_Val_as_Val_fillstat        1000000  avgt   15  26869324.941 ±  1729123.019  ns/op
org.openjdk.bench.valhalla.array.fill.Inline128int.Val_to_Ref_as_Ref_arrayfillinst       100  avgt   15       117.275 ±        1.366  ns/op
org.openjdk.bench.valhalla.array.fill.Inline128int.Val_to_Ref_as_Ref_arrayfillinst   1000000  avgt   15  24405165.687 ±  2273837.982  ns/op
org.openjdk.bench.valhalla.array.fill.Inline128int.Val_to_Ref_as_Ref_arrayfillstat       100  avgt   15       118.119 ±        1.308  ns/op
org.openjdk.bench.valhalla.array.fill.Inline128int.Val_to_Ref_as_Ref_arrayfillstat   1000000  avgt   15  25485272.133 ±  2480142.449  ns/op
org.openjdk.bench.valhalla.array.fill.Inline128int.Val_to_Ref_as_Ref_fillinst            100  avgt   15       129.471 ±        0.898  ns/op
org.openjdk.bench.valhalla.array.fill.Inline128int.Val_to_Ref_as_Ref_fillinst        1000000  avgt   15  29939286.789 ±  9689383.776  ns/op
org.openjdk.bench.valhalla.array.fill.Inline128int.Val_to_Ref_as_Ref_fillstat            100  avgt   15       133.562 ±        0.750  ns/op
org.openjdk.bench.valhalla.array.fill.Inline128int.Val_to_Ref_as_Ref_fillstat        1000000  avgt   15  49757325.362 ±  1961085.363  ns/op
org.openjdk.bench.valhalla.array.fill.Inline128int.Val_to_Val_as_Val_arrayfillinst       100  avgt   15       117.477 ±        0.914  ns/op
org.openjdk.bench.valhalla.array.fill.Inline128int.Val_to_Val_as_Val_arrayfillinst   1000000  avgt   15  49016979.847 ±  1922491.076  ns/op
org.openjdk.bench.valhalla.array.fill.Inline128int.Val_to_Val_as_Val_arrayfillstat       100  avgt   15       118.389 ±        2.988  ns/op
org.openjdk.bench.valhalla.array.fill.Inline128int.Val_to_Val_as_Val_arrayfillstat   1000000  avgt   15  47961783.763 ±  3619283.091  ns/op
org.openjdk.bench.valhalla.array.fill.Inline128int.Val_to_Val_as_Val_fillinst            100  avgt   15       127.863 ±        2.693  ns/op
org.openjdk.bench.valhalla.array.fill.Inline128int.Val_to_Val_as_Val_fillinst        1000000  avgt   15  56548657.097 ±  7060906.175  ns/op
org.openjdk.bench.valhalla.array.fill.Inline128int.Val_to_Val_as_Val_fillstat            100  avgt   15       130.313 ±        1.221  ns/op
org.openjdk.bench.valhalla.array.fill.Inline128int.Val_to_Val_as_Val_fillstat        1000000  avgt   15  60839469.184 ±  8321349.903  ns/op
org.openjdk.bench.valhalla.array.fill.Inline32int.Def_to_Ref_as_Ref_arrayfill            100  avgt   15        67.982 ±        1.215  ns/op
org.openjdk.bench.valhalla.array.fill.Inline32int.Def_to_Ref_as_Ref_arrayfill        1000000  avgt   15  48500305.518 ±  3649067.778  ns/op
org.openjdk.bench.valhalla.array.fill.Inline32int.Def_to_Ref_as_Ref_fill                 100  avgt   15        66.535 ±        0.288  ns/op
org.openjdk.bench.valhalla.array.fill.Inline32int.Def_to_Ref_as_Ref_fill             1000000  avgt   15  47644788.451 ±  3614563.831  ns/op
org.openjdk.bench.valhalla.array.fill.Inline32int.Def_to_Val_as_Val_arrayfill            100  avgt   15        66.513 ±        0.258  ns/op
org.openjdk.bench.valhalla.array.fill.Inline32int.Def_to_Val_as_Val_arrayfill        1000000  avgt   15  49352254.649 ±  5256898.590  ns/op
org.openjdk.bench.valhalla.array.fill.Inline32int.Def_to_Val_as_Val_fill                 100  avgt   15        66.200 ±        0.630  ns/op
org.openjdk.bench.valhalla.array.fill.Inline32int.Def_to_Val_as_Val_fill             1000000  avgt   15  41918714.722 ± 15062217.843  ns/op
org.openjdk.bench.valhalla.array.fill.Inline32int.New_to_Ref_as_Ref_arrayfill            100  avgt   15        84.690 ±        0.686  ns/op
org.openjdk.bench.valhalla.array.fill.Inline32int.New_to_Ref_as_Ref_arrayfill        1000000  avgt   15  49079377.933 ±  7363611.892  ns/op
org.openjdk.bench.valhalla.array.fill.Inline32int.New_to_Ref_as_Ref_fill                 100  avgt   15       178.802 ±        2.720  ns/op
org.openjdk.bench.valhalla.array.fill.Inline32int.New_to_Ref_as_Ref_fill             1000000  avgt   15   1804029.856 ±    59250.850  ns/op
org.openjdk.bench.valhalla.array.fill.Inline32int.New_to_Val_as_Val_arrayfill            100  avgt   15        78.508 ±        0.638  ns/op
org.openjdk.bench.valhalla.array.fill.Inline32int.New_to_Val_as_Val_arrayfill        1000000  avgt   15  46818023.332 ±  3831275.352  ns/op
org.openjdk.bench.valhalla.array.fill.Inline32int.New_to_Val_as_Val_fill                 100  avgt   15       175.702 ±        2.093  ns/op
org.openjdk.bench.valhalla.array.fill.Inline32int.New_to_Val_as_Val_fill             1000000  avgt   15   1760051.583 ±    22838.358  ns/op
org.openjdk.bench.valhalla.array.fill.Inline32int.Ref_to_Ref_as_Ref_arrayfillinst        100  avgt   15        65.672 ±        0.334  ns/op
org.openjdk.bench.valhalla.array.fill.Inline32int.Ref_to_Ref_as_Ref_arrayfillinst    1000000  avgt   15  34420095.550 ±  9267110.492  ns/op
org.openjdk.bench.valhalla.array.fill.Inline32int.Ref_to_Ref_as_Ref_arrayfillstat        100  avgt   15        67.693 ±        6.768  ns/op
org.openjdk.bench.valhalla.array.fill.Inline32int.Ref_to_Ref_as_Ref_arrayfillstat    1000000  avgt   15  44053679.551 ± 12383396.682  ns/op
org.openjdk.bench.valhalla.array.fill.Inline32int.Ref_to_Ref_as_Ref_fillinst             100  avgt   15        74.133 ±        1.692  ns/op
org.openjdk.bench.valhalla.array.fill.Inline32int.Ref_to_Ref_as_Ref_fillinst         1000000  avgt   15  40441766.927 ±  8897014.277  ns/op
org.openjdk.bench.valhalla.array.fill.Inline32int.Ref_to_Ref_as_Ref_fillstat             100  avgt   15        75.291 ±        4.557  ns/op
org.openjdk.bench.valhalla.array.fill.Inline32int.Ref_to_Ref_as_Ref_fillstat         1000000  avgt   15  47319258.146 ±  6656820.087  ns/op
org.openjdk.bench.valhalla.array.fill.Inline32int.Ref_to_Val_as_Val_arrayfillinst        100  avgt   15        71.184 ±        2.756  ns/op
org.openjdk.bench.valhalla.array.fill.Inline32int.Ref_to_Val_as_Val_arrayfillinst    1000000  avgt   15  49920268.927 ±  5730863.184  ns/op
org.openjdk.bench.valhalla.array.fill.Inline32int.Ref_to_Val_as_Val_arrayfillstat        100  avgt   15        71.368 ±        4.771  ns/op
org.openjdk.bench.valhalla.array.fill.Inline32int.Ref_to_Val_as_Val_arrayfillstat    1000000  avgt   15  23330518.243 ±  6611358.439  ns/op
org.openjdk.bench.valhalla.array.fill.Inline32int.Ref_to_Val_as_Val_fillinst             100  avgt   15        74.383 ±        0.977  ns/op
org.openjdk.bench.valhalla.array.fill.Inline32int.Ref_to_Val_as_Val_fillinst         1000000  avgt   15  32646245.150 ±  5123244.765  ns/op
org.openjdk.bench.valhalla.array.fill.Inline32int.Ref_to_Val_as_Val_fillstat             100  avgt   15        73.759 ±        1.178  ns/op
org.openjdk.bench.valhalla.array.fill.Inline32int.Ref_to_Val_as_Val_fillstat         1000000  avgt   15  31414635.338 ±  4089664.185  ns/op
org.openjdk.bench.valhalla.array.fill.Inline32int.Val_to_Ref_as_Ref_arrayfillinst        100  avgt   15        69.964 ±        0.453  ns/op
org.openjdk.bench.valhalla.array.fill.Inline32int.Val_to_Ref_as_Ref_arrayfillinst    1000000  avgt   15  32752418.088 ±  2764801.427  ns/op
org.openjdk.bench.valhalla.array.fill.Inline32int.Val_to_Ref_as_Ref_arrayfillstat        100  avgt   15        73.125 ±        7.509  ns/op
org.openjdk.bench.valhalla.array.fill.Inline32int.Val_to_Ref_as_Ref_arrayfillstat    1000000  avgt   15  33562869.386 ±  2971206.985  ns/op
org.openjdk.bench.valhalla.array.fill.Inline32int.Val_to_Ref_as_Ref_fillinst             100  avgt   15        81.525 ±        9.453  ns/op
org.openjdk.bench.valhalla.array.fill.Inline32int.Val_to_Ref_as_Ref_fillinst         1000000  avgt   15  43895134.453 ±  5743676.151  ns/op
org.openjdk.bench.valhalla.array.fill.Inline32int.Val_to_Ref_as_Ref_fillstat             100  avgt   15        83.134 ±       22.365  ns/op
org.openjdk.bench.valhalla.array.fill.Inline32int.Val_to_Ref_as_Ref_fillstat         1000000  avgt   15  30256390.813 ±  4015620.151  ns/op
org.openjdk.bench.valhalla.array.fill.Inline32int.Val_to_Val_as_Val_arrayfillinst        100  avgt   15        69.850 ±        0.273  ns/op
org.openjdk.bench.valhalla.array.fill.Inline32int.Val_to_Val_as_Val_arrayfillinst    1000000  avgt   15  31909007.894 ±  2779859.566  ns/op
org.openjdk.bench.valhalla.array.fill.Inline32int.Val_to_Val_as_Val_arrayfillstat        100  avgt   15        69.688 ±        0.246  ns/op
org.openjdk.bench.valhalla.array.fill.Inline32int.Val_to_Val_as_Val_arrayfillstat    1000000  avgt   15  32796911.894 ±  2595646.528  ns/op
org.openjdk.bench.valhalla.array.fill.Inline32int.Val_to_Val_as_Val_fillinst             100  avgt   15        75.508 ±        4.096  ns/op
org.openjdk.bench.valhalla.array.fill.Inline32int.Val_to_Val_as_Val_fillinst         1000000  avgt   15  33571302.783 ±  2624216.274  ns/op
org.openjdk.bench.valhalla.array.fill.Inline32int.Val_to_Val_as_Val_fillstat             100  avgt   15        87.318 ±       13.327  ns/op
org.openjdk.bench.valhalla.array.fill.Inline32int.Val_to_Val_as_Val_fillstat         1000000  avgt   15  39264542.672 ±  8240140.953  ns/op
org.openjdk.bench.valhalla.array.fill.Inline64byte.Def_to_Ref_as_Ref_arrayfill           100  avgt   15       133.568 ±        6.763  ns/op
org.openjdk.bench.valhalla.array.fill.Inline64byte.Def_to_Ref_as_Ref_arrayfill       1000000  avgt   15  36570503.020 ± 21915565.509  ns/op
org.openjdk.bench.valhalla.array.fill.Inline64byte.Def_to_Ref_as_Ref_fill                100  avgt   15       415.932 ±       57.974  ns/op
org.openjdk.bench.valhalla.array.fill.Inline64byte.Def_to_Ref_as_Ref_fill            1000000  avgt   15   3947616.103 ±   278132.445  ns/op
org.openjdk.bench.valhalla.array.fill.Inline64byte.Def_to_Val_as_Val_arrayfill           100  avgt   15       137.212 ±        1.458  ns/op
org.openjdk.bench.valhalla.array.fill.Inline64byte.Def_to_Val_as_Val_arrayfill       1000000  avgt   15  34869946.236 ±  6584017.970  ns/op
org.openjdk.bench.valhalla.array.fill.Inline64byte.Def_to_Val_as_Val_fill                100  avgt   15       405.253 ±       32.443  ns/op
org.openjdk.bench.valhalla.array.fill.Inline64byte.Def_to_Val_as_Val_fill            1000000  avgt   15   4175464.150 ±   306088.358  ns/op
org.openjdk.bench.valhalla.array.fill.Inline64byte.New_to_Ref_as_Ref_arrayfill           100  avgt   15       129.321 ±        5.971  ns/op
org.openjdk.bench.valhalla.array.fill.Inline64byte.New_to_Ref_as_Ref_arrayfill       1000000  avgt   15  44940557.289 ±  6015624.031  ns/op
org.openjdk.bench.valhalla.array.fill.Inline64byte.New_to_Ref_as_Ref_fill                100  avgt   15       315.989 ±      121.769  ns/op
org.openjdk.bench.valhalla.array.fill.Inline64byte.New_to_Ref_as_Ref_fill            1000000  avgt   15   2991832.148 ±   205372.747  ns/op
org.openjdk.bench.valhalla.array.fill.Inline64byte.New_to_Val_as_Val_arrayfill           100  avgt   15       137.559 ±        1.449  ns/op
org.openjdk.bench.valhalla.array.fill.Inline64byte.New_to_Val_as_Val_arrayfill       1000000  avgt   15  42456417.891 ±  8027324.186  ns/op
org.openjdk.bench.valhalla.array.fill.Inline64byte.New_to_Val_as_Val_fill                100  avgt   15       272.927 ±       10.122  ns/op
org.openjdk.bench.valhalla.array.fill.Inline64byte.New_to_Val_as_Val_fill            1000000  avgt   15   3062880.049 ±   471383.088  ns/op
org.openjdk.bench.valhalla.array.fill.Inline64byte.Ref_to_Ref_as_Ref_arrayfillinst       100  avgt   15       117.859 ±        1.775  ns/op
org.openjdk.bench.valhalla.array.fill.Inline64byte.Ref_to_Ref_as_Ref_arrayfillinst   1000000  avgt   15  47977586.776 ±  8364448.331  ns/op
org.openjdk.bench.valhalla.array.fill.Inline64byte.Ref_to_Ref_as_Ref_arrayfillstat       100  avgt   15       117.884 ±        1.491  ns/op
org.openjdk.bench.valhalla.array.fill.Inline64byte.Ref_to_Ref_as_Ref_arrayfillstat   1000000  avgt   15  43338125.381 ±  8115263.329  ns/op
org.openjdk.bench.valhalla.array.fill.Inline64byte.Ref_to_Ref_as_Ref_fillinst            100  avgt   15       133.679 ±        7.557  ns/op
org.openjdk.bench.valhalla.array.fill.Inline64byte.Ref_to_Ref_as_Ref_fillinst        1000000  avgt   15  45727264.241 ±  6418826.415  ns/op
org.openjdk.bench.valhalla.array.fill.Inline64byte.Ref_to_Ref_as_Ref_fillstat            100  avgt   15       133.992 ±        1.062  ns/op
org.openjdk.bench.valhalla.array.fill.Inline64byte.Ref_to_Ref_as_Ref_fillstat        1000000  avgt   15  48318856.160 ±  7300951.552  ns/op
org.openjdk.bench.valhalla.array.fill.Inline64byte.Ref_to_Val_as_Val_arrayfillinst       100  avgt   15       116.663 ±        0.850  ns/op
org.openjdk.bench.valhalla.array.fill.Inline64byte.Ref_to_Val_as_Val_arrayfillinst   1000000  avgt   15  45915317.503 ±  9076530.339  ns/op
org.openjdk.bench.valhalla.array.fill.Inline64byte.Ref_to_Val_as_Val_arrayfillstat       100  avgt   15       117.877 ±        1.285  ns/op
org.openjdk.bench.valhalla.array.fill.Inline64byte.Ref_to_Val_as_Val_arrayfillstat   1000000  avgt   15  49610227.383 ±  4970124.486  ns/op
org.openjdk.bench.valhalla.array.fill.Inline64byte.Ref_to_Val_as_Val_fillinst            100  avgt   15       130.350 ±        1.703  ns/op
org.openjdk.bench.valhalla.array.fill.Inline64byte.Ref_to_Val_as_Val_fillinst        1000000  avgt   15  51902151.254 ±  5787070.641  ns/op
org.openjdk.bench.valhalla.array.fill.Inline64byte.Ref_to_Val_as_Val_fillstat            100  avgt   15       133.801 ±        1.987  ns/op
org.openjdk.bench.valhalla.array.fill.Inline64byte.Ref_to_Val_as_Val_fillstat        1000000  avgt   15  48152073.296 ±  6922130.935  ns/op
org.openjdk.bench.valhalla.array.fill.Inline64byte.Val_to_Ref_as_Ref_arrayfillinst       100  avgt   15       116.879 ±        1.134  ns/op
org.openjdk.bench.valhalla.array.fill.Inline64byte.Val_to_Ref_as_Ref_arrayfillinst   1000000  avgt   15  50352242.094 ±  7091479.831  ns/op
org.openjdk.bench.valhalla.array.fill.Inline64byte.Val_to_Ref_as_Ref_arrayfillstat       100  avgt   15       117.406 ±        0.773  ns/op
org.openjdk.bench.valhalla.array.fill.Inline64byte.Val_to_Ref_as_Ref_arrayfillstat   1000000  avgt   15  50946326.167 ±  6288442.899  ns/op
org.openjdk.bench.valhalla.array.fill.Inline64byte.Val_to_Ref_as_Ref_fillinst            100  avgt   15       130.853 ±        2.844  ns/op
org.openjdk.bench.valhalla.array.fill.Inline64byte.Val_to_Ref_as_Ref_fillinst        1000000  avgt   15  51961186.630 ±  6634475.123  ns/op
org.openjdk.bench.valhalla.array.fill.Inline64byte.Val_to_Ref_as_Ref_fillstat            100  avgt   15       132.880 ±        0.817  ns/op
org.openjdk.bench.valhalla.array.fill.Inline64byte.Val_to_Ref_as_Ref_fillstat        1000000  avgt   15  51362913.876 ±  5493589.168  ns/op
org.openjdk.bench.valhalla.array.fill.Inline64byte.Val_to_Val_as_Val_arrayfillinst       100  avgt   15       117.521 ±        1.059  ns/op
org.openjdk.bench.valhalla.array.fill.Inline64byte.Val_to_Val_as_Val_arrayfillinst   1000000  avgt   15  43185176.239 ±  9984532.720  ns/op
org.openjdk.bench.valhalla.array.fill.Inline64byte.Val_to_Val_as_Val_arrayfillstat       100  avgt   15       117.092 ±        0.433  ns/op
org.openjdk.bench.valhalla.array.fill.Inline64byte.Val_to_Val_as_Val_arrayfillstat   1000000  avgt   15  34840779.886 ±  6080938.409  ns/op
org.openjdk.bench.valhalla.array.fill.Inline64byte.Val_to_Val_as_Val_fillinst            100  avgt   15       130.008 ±        1.256  ns/op
org.openjdk.bench.valhalla.array.fill.Inline64byte.Val_to_Val_as_Val_fillinst        1000000  avgt   15  35664127.526 ±  4343979.090  ns/op
org.openjdk.bench.valhalla.array.fill.Inline64byte.Val_to_Val_as_Val_fillstat            100  avgt   15       132.905 ±        1.140  ns/op
org.openjdk.bench.valhalla.array.fill.Inline64byte.Val_to_Val_as_Val_fillstat        1000000  avgt   15  28093350.003 ±  7614884.509  ns/op
org.openjdk.bench.valhalla.array.fill.Inline64int.Def_to_Ref_as_Ref_arrayfill            100  avgt   15       133.043 ±        6.292  ns/op
org.openjdk.bench.valhalla.array.fill.Inline64int.Def_to_Ref_as_Ref_arrayfill        1000000  avgt   15  26902253.432 ±  4179280.798  ns/op
org.openjdk.bench.valhalla.array.fill.Inline64int.Def_to_Ref_as_Ref_fill                 100  avgt   15       387.985 ±        7.373  ns/op
org.openjdk.bench.valhalla.array.fill.Inline64int.Def_to_Ref_as_Ref_fill             1000000  avgt   15   3967653.264 ±   105396.089  ns/op
org.openjdk.bench.valhalla.array.fill.Inline64int.Def_to_Val_as_Val_arrayfill            100  avgt   15       136.126 ±        1.028  ns/op
org.openjdk.bench.valhalla.array.fill.Inline64int.Def_to_Val_as_Val_arrayfill        1000000  avgt   15  34143981.605 ±  4205727.518  ns/op
org.openjdk.bench.valhalla.array.fill.Inline64int.Def_to_Val_as_Val_fill                 100  avgt   15       392.407 ±        8.570  ns/op
org.openjdk.bench.valhalla.array.fill.Inline64int.Def_to_Val_as_Val_fill             1000000  avgt   15   4107431.833 ±   290720.747  ns/op
org.openjdk.bench.valhalla.array.fill.Inline64int.New_to_Ref_as_Ref_arrayfill            100  avgt   15       153.330 ±       36.793  ns/op
org.openjdk.bench.valhalla.array.fill.Inline64int.New_to_Ref_as_Ref_arrayfill        1000000  avgt   15  39037334.234 ± 10777618.172  ns/op
org.openjdk.bench.valhalla.array.fill.Inline64int.New_to_Ref_as_Ref_fill                 100  avgt   15       271.459 ±       10.555  ns/op
org.openjdk.bench.valhalla.array.fill.Inline64int.New_to_Ref_as_Ref_fill             1000000  avgt   15   2982672.887 ±   210512.920  ns/op
org.openjdk.bench.valhalla.array.fill.Inline64int.New_to_Val_as_Val_arrayfill            100  avgt   15       133.008 ±        4.744  ns/op
org.openjdk.bench.valhalla.array.fill.Inline64int.New_to_Val_as_Val_arrayfill        1000000  avgt   15  32415958.783 ±  2564963.833  ns/op
org.openjdk.bench.valhalla.array.fill.Inline64int.New_to_Val_as_Val_fill                 100  avgt   15       274.682 ±        8.892  ns/op
org.openjdk.bench.valhalla.array.fill.Inline64int.New_to_Val_as_Val_fill             1000000  avgt   15   3003330.874 ±   257195.651  ns/op
org.openjdk.bench.valhalla.array.fill.Inline64int.Ref_to_Ref_as_Ref_arrayfillinst        100  avgt   15       136.074 ±       20.769  ns/op
org.openjdk.bench.valhalla.array.fill.Inline64int.Ref_to_Ref_as_Ref_arrayfillinst    1000000  avgt   15  35952309.450 ±  6988562.922  ns/op
org.openjdk.bench.valhalla.array.fill.Inline64int.Ref_to_Ref_as_Ref_arrayfillstat        100  avgt   15       160.873 ±       65.054  ns/op
org.openjdk.bench.valhalla.array.fill.Inline64int.Ref_to_Ref_as_Ref_arrayfillstat    1000000  avgt   15  31608720.417 ±  2448788.067  ns/op
org.openjdk.bench.valhalla.array.fill.Inline64int.Ref_to_Ref_as_Ref_fillinst             100  avgt   15       129.329 ±        0.892  ns/op
org.openjdk.bench.valhalla.array.fill.Inline64int.Ref_to_Ref_as_Ref_fillinst         1000000  avgt   15  32413017.458 ±  3336311.934  ns/op
org.openjdk.bench.valhalla.array.fill.Inline64int.Ref_to_Ref_as_Ref_fillstat             100  avgt   15       133.173 ±        0.870  ns/op
org.openjdk.bench.valhalla.array.fill.Inline64int.Ref_to_Ref_as_Ref_fillstat         1000000  avgt   15  33359505.396 ±  2222501.768  ns/op
org.openjdk.bench.valhalla.array.fill.Inline64int.Ref_to_Val_as_Val_arrayfillinst        100  avgt   15       118.331 ±        5.043  ns/op
org.openjdk.bench.valhalla.array.fill.Inline64int.Ref_to_Val_as_Val_arrayfillinst    1000000  avgt   15  33802696.084 ±  4439450.781  ns/op
org.openjdk.bench.valhalla.array.fill.Inline64int.Ref_to_Val_as_Val_arrayfillstat        100  avgt   15       209.541 ±       53.744  ns/op
org.openjdk.bench.valhalla.array.fill.Inline64int.Ref_to_Val_as_Val_arrayfillstat    1000000  avgt   15  33015545.203 ±  8366884.441  ns/op
org.openjdk.bench.valhalla.array.fill.Inline64int.Ref_to_Val_as_Val_fillinst             100  avgt   15       130.226 ±        1.280  ns/op
org.openjdk.bench.valhalla.array.fill.Inline64int.Ref_to_Val_as_Val_fillinst         1000000  avgt   15  44653951.238 ± 16953709.918  ns/op
org.openjdk.bench.valhalla.array.fill.Inline64int.Ref_to_Val_as_Val_fillstat             100  avgt   15       133.387 ±        2.873  ns/op
org.openjdk.bench.valhalla.array.fill.Inline64int.Ref_to_Val_as_Val_fillstat         1000000  avgt   15  53447944.517 ±  6445256.090  ns/op
org.openjdk.bench.valhalla.array.fill.Inline64int.Val_to_Ref_as_Ref_arrayfillinst        100  avgt   15       116.448 ±        0.882  ns/op
org.openjdk.bench.valhalla.array.fill.Inline64int.Val_to_Ref_as_Ref_arrayfillinst    1000000  avgt   15  30835775.260 ± 17754685.631  ns/op
org.openjdk.bench.valhalla.array.fill.Inline64int.Val_to_Ref_as_Ref_arrayfillstat        100  avgt   15       117.629 ±        1.002  ns/op
org.openjdk.bench.valhalla.array.fill.Inline64int.Val_to_Ref_as_Ref_arrayfillstat    1000000  avgt   15  22533755.208 ±  4049922.385  ns/op
org.openjdk.bench.valhalla.array.fill.Inline64int.Val_to_Ref_as_Ref_fillinst             100  avgt   15       128.933 ±        0.971  ns/op
org.openjdk.bench.valhalla.array.fill.Inline64int.Val_to_Ref_as_Ref_fillinst         1000000  avgt   15  34587765.750 ±  3923863.682  ns/op
org.openjdk.bench.valhalla.array.fill.Inline64int.Val_to_Ref_as_Ref_fillstat             100  avgt   15       133.384 ±        1.700  ns/op
org.openjdk.bench.valhalla.array.fill.Inline64int.Val_to_Ref_as_Ref_fillstat         1000000  avgt   15  32761065.731 ±  4084849.170  ns/op
org.openjdk.bench.valhalla.array.fill.Inline64int.Val_to_Val_as_Val_arrayfillinst        100  avgt   15       123.501 ±       10.715  ns/op
org.openjdk.bench.valhalla.array.fill.Inline64int.Val_to_Val_as_Val_arrayfillinst    1000000  avgt   15  31917643.741 ±  4991943.668  ns/op
org.openjdk.bench.valhalla.array.fill.Inline64int.Val_to_Val_as_Val_arrayfillstat        100  avgt   15       186.528 ±       60.591  ns/op
org.openjdk.bench.valhalla.array.fill.Inline64int.Val_to_Val_as_Val_arrayfillstat    1000000  avgt   15  31668321.450 ± 10119676.520  ns/op
org.openjdk.bench.valhalla.array.fill.Inline64int.Val_to_Val_as_Val_fillinst             100  avgt   15       130.798 ±        1.787  ns/op
org.openjdk.bench.valhalla.array.fill.Inline64int.Val_to_Val_as_Val_fillinst         1000000  avgt   15  24686833.370 ±  3033499.343  ns/op
org.openjdk.bench.valhalla.array.fill.Inline64int.Val_to_Val_as_Val_fillstat             100  avgt   15       133.303 ±        0.920  ns/op
org.openjdk.bench.valhalla.array.fill.Inline64int.Val_to_Val_as_Val_fillstat         1000000  avgt   15  33036299.695 ±  4394279.577  ns/op
org.openjdk.bench.valhalla.array.fill.InlineOpt.Def_to_Ref_as_Ref_arrayfill              100  avgt   15        69.640 ±        0.242  ns/op
org.openjdk.bench.valhalla.array.fill.InlineOpt.Def_to_Ref_as_Ref_arrayfill          1000000  avgt   15  32529304.207 ±  4838985.924  ns/op
org.openjdk.bench.valhalla.array.fill.InlineOpt.Def_to_Ref_as_Ref_fill                   100  avgt   15        71.619 ±        4.510  ns/op
org.openjdk.bench.valhalla.array.fill.InlineOpt.Def_to_Ref_as_Ref_fill               1000000  avgt   15  30784080.229 ±  6764373.231  ns/op
org.openjdk.bench.valhalla.array.fill.InlineOpt.Def_to_Val_as_Val_arrayfill              100  avgt   15       146.880 ±        6.387  ns/op
org.openjdk.bench.valhalla.array.fill.InlineOpt.Def_to_Val_as_Val_arrayfill          1000000  avgt   15  44183946.553 ± 12006300.679  ns/op
org.openjdk.bench.valhalla.array.fill.InlineOpt.Def_to_Val_as_Val_fill                   100  avgt   15        70.067 ±        0.933  ns/op
org.openjdk.bench.valhalla.array.fill.InlineOpt.Def_to_Val_as_Val_fill               1000000  avgt   15  39368815.854 ± 13652271.811  ns/op
org.openjdk.bench.valhalla.array.fill.InlineOpt.New_to_Ref_as_Ref_arrayfill              100  avgt   15       170.301 ±       11.753  ns/op
org.openjdk.bench.valhalla.array.fill.InlineOpt.New_to_Ref_as_Ref_arrayfill          1000000  avgt   15  27758721.715 ±  4443405.272  ns/op
org.openjdk.bench.valhalla.array.fill.InlineOpt.New_to_Ref_as_Ref_fill                   100  avgt   15       194.691 ±       31.711  ns/op
org.openjdk.bench.valhalla.array.fill.InlineOpt.New_to_Ref_as_Ref_fill               1000000  avgt   15   2091305.537 ±   313279.858  ns/op
org.openjdk.bench.valhalla.array.fill.InlineOpt.New_to_Val_as_Val_arrayfill              100  avgt   15       168.371 ±        2.630  ns/op
org.openjdk.bench.valhalla.array.fill.InlineOpt.New_to_Val_as_Val_arrayfill          1000000  avgt   15  30341016.552 ±  2265759.318  ns/op
org.openjdk.bench.valhalla.array.fill.InlineOpt.New_to_Val_as_Val_fill                   100  avgt   15       181.669 ±        5.405  ns/op
org.openjdk.bench.valhalla.array.fill.InlineOpt.New_to_Val_as_Val_fill               1000000  avgt   15   2297486.680 ±   705616.271  ns/op
org.openjdk.bench.valhalla.array.fill.InlineOpt.Ref_to_Ref_as_Ref_arrayfillinst          100  avgt   15        77.478 ±       10.398  ns/op
org.openjdk.bench.valhalla.array.fill.InlineOpt.Ref_to_Ref_as_Ref_arrayfillinst      1000000  avgt   15  23547129.101 ± 13239036.437  ns/op
org.openjdk.bench.valhalla.array.fill.InlineOpt.Ref_to_Ref_as_Ref_arrayfillstat          100  avgt   15       114.357 ±       39.454  ns/op
org.openjdk.bench.valhalla.array.fill.InlineOpt.Ref_to_Ref_as_Ref_arrayfillstat      1000000  avgt   15  30860735.240 ±  3176691.683  ns/op
org.openjdk.bench.valhalla.array.fill.InlineOpt.Ref_to_Ref_as_Ref_fillinst               100  avgt   15        75.325 ±        4.704  ns/op
org.openjdk.bench.valhalla.array.fill.InlineOpt.Ref_to_Ref_as_Ref_fillinst           1000000  avgt   15  30401064.758 ±  5786918.353  ns/op
org.openjdk.bench.valhalla.array.fill.InlineOpt.Ref_to_Ref_as_Ref_fillstat               100  avgt   15        73.647 ±        0.434  ns/op
org.openjdk.bench.valhalla.array.fill.InlineOpt.Ref_to_Ref_as_Ref_fillstat           1000000  avgt   15  32666527.775 ±  5036365.666  ns/op
org.openjdk.bench.valhalla.array.fill.InlineOpt.Ref_to_Val_as_Val_arrayfillinst          100  avgt   15        69.873 ±        0.313  ns/op
org.openjdk.bench.valhalla.array.fill.InlineOpt.Ref_to_Val_as_Val_arrayfillinst      1000000  avgt   15  32932031.429 ±  3631962.206  ns/op
org.openjdk.bench.valhalla.array.fill.InlineOpt.Ref_to_Val_as_Val_arrayfillstat          100  avgt   15        69.787 ±        0.117  ns/op
org.openjdk.bench.valhalla.array.fill.InlineOpt.Ref_to_Val_as_Val_arrayfillstat      1000000  avgt   15  34481847.311 ±  3111406.717  ns/op
org.openjdk.bench.valhalla.array.fill.InlineOpt.Ref_to_Val_as_Val_fillinst               100  avgt   15        82.781 ±       10.678  ns/op
org.openjdk.bench.valhalla.array.fill.InlineOpt.Ref_to_Val_as_Val_fillinst           1000000  avgt   15  40384720.363 ±  8184524.012  ns/op
org.openjdk.bench.valhalla.array.fill.InlineOpt.Ref_to_Val_as_Val_fillstat               100  avgt   15        88.009 ±       32.066  ns/op
org.openjdk.bench.valhalla.array.fill.InlineOpt.Ref_to_Val_as_Val_fillstat           1000000  avgt   15  48908602.919 ±  7197084.426  ns/op
org.openjdk.bench.valhalla.array.fill.InlineOpt.Val_to_Ref_as_Ref_arrayfillinst          100  avgt   15        70.175 ±        0.618  ns/op
org.openjdk.bench.valhalla.array.fill.InlineOpt.Val_to_Ref_as_Ref_arrayfillinst      1000000  avgt   15  42176012.996 ± 10933751.879  ns/op
org.openjdk.bench.valhalla.array.fill.InlineOpt.Val_to_Ref_as_Ref_arrayfillstat          100  avgt   15        69.834 ±        0.302  ns/op
org.openjdk.bench.valhalla.array.fill.InlineOpt.Val_to_Ref_as_Ref_arrayfillstat      1000000  avgt   15  48333655.610 ± 10903570.059  ns/op
org.openjdk.bench.valhalla.array.fill.InlineOpt.Val_to_Ref_as_Ref_fillinst               100  avgt   15        74.174 ±        0.546  ns/op
org.openjdk.bench.valhalla.array.fill.InlineOpt.Val_to_Ref_as_Ref_fillinst           1000000  avgt   15  42848503.550 ±  9243813.038  ns/op
org.openjdk.bench.valhalla.array.fill.InlineOpt.Val_to_Ref_as_Ref_fillstat               100  avgt   15        73.907 ±        0.547  ns/op
org.openjdk.bench.valhalla.array.fill.InlineOpt.Val_to_Ref_as_Ref_fillstat           1000000  avgt   15  38439578.486 ± 10100061.998  ns/op
org.openjdk.bench.valhalla.array.fill.InlineOpt.Val_to_Val_as_Val_arrayfillinst          100  avgt   15        69.983 ±        0.395  ns/op
org.openjdk.bench.valhalla.array.fill.InlineOpt.Val_to_Val_as_Val_arrayfillinst      1000000  avgt   15  33442932.496 ±  6274139.432  ns/op
org.openjdk.bench.valhalla.array.fill.InlineOpt.Val_to_Val_as_Val_arrayfillstat          100  avgt   15        69.850 ±        0.255  ns/op
org.openjdk.bench.valhalla.array.fill.InlineOpt.Val_to_Val_as_Val_arrayfillstat      1000000  avgt   15  34674321.436 ±  5279445.165  ns/op
org.openjdk.bench.valhalla.array.fill.InlineOpt.Val_to_Val_as_Val_fillinst               100  avgt   15        82.178 ±       13.385  ns/op
org.openjdk.bench.valhalla.array.fill.InlineOpt.Val_to_Val_as_Val_fillinst           1000000  avgt   15  30636428.231 ±  2417973.941  ns/op
org.openjdk.bench.valhalla.array.fill.InlineOpt.Val_to_Val_as_Val_fillstat               100  avgt   15        79.459 ±       11.002  ns/op
org.openjdk.bench.valhalla.array.fill.InlineOpt.Val_to_Val_as_Val_fillstat           1000000  avgt   15  31010750.255 ±  2979557.239  ns/op
org.openjdk.bench.valhalla.array.fill.Primitive64.arrayfill                              100  avgt   15        18.392 ±        0.212  ns/op
org.openjdk.bench.valhalla.array.fill.Primitive64.arrayfill                          1000000  avgt   15    126490.752 ±     5407.879  ns/op
org.openjdk.bench.valhalla.array.fill.Primitive64.fill0                                  100  avgt   15         8.749 ±        0.079  ns/op
org.openjdk.bench.valhalla.array.fill.Primitive64.fill0                              1000000  avgt   15    128500.811 ±     1607.447  ns/op
org.openjdk.bench.valhalla.array.fill.Primitive64.fill1                                  100  avgt   15         8.769 ±        0.112  ns/op
org.openjdk.bench.valhalla.array.fill.Primitive64.fill1                              1000000  avgt   15    127814.293 ±     2831.900  ns/op
org.openjdk.bench.valhalla.array.read.Inline128int.Val_as_Int_to_Int_read                100  avgt   15         0.773 ±        0.003  ns/op
org.openjdk.bench.valhalla.array.read.Inline128int.Val_as_Int_to_Int_read            1000000  avgt   15         0.844 ±        0.068  ns/op
org.openjdk.bench.valhalla.array.read.Inline128int.Val_as_Ref_to_Int_read                100  avgt   15         1.025 ±        0.085  ns/op
org.openjdk.bench.valhalla.array.read.Inline128int.Val_as_Ref_to_Int_read            1000000  avgt   15         1.482 ±        0.504  ns/op
org.openjdk.bench.valhalla.array.read.Inline128int.Val_as_Ref_to_Ref_read                100  avgt   15         1.273 ±        0.538  ns/op
org.openjdk.bench.valhalla.array.read.Inline128int.Val_as_Ref_to_Ref_read            1000000  avgt   15         0.932 ±        0.004  ns/op
org.openjdk.bench.valhalla.array.read.Inline128int.Val_as_Ref_to_Val_read                100  avgt   15         0.932 ±        0.007  ns/op
org.openjdk.bench.valhalla.array.read.Inline128int.Val_as_Ref_to_Val_read            1000000  avgt   15         0.934 ±        0.008  ns/op
org.openjdk.bench.valhalla.array.read.Inline128int.Val_as_Val_to_Int_read                100  avgt   15         0.930 ±        0.006  ns/op
org.openjdk.bench.valhalla.array.read.Inline128int.Val_as_Val_to_Int_read            1000000  avgt   15         0.976 ±        0.071  ns/op
org.openjdk.bench.valhalla.array.read.Inline128int.Val_as_Val_to_Ref_read                100  avgt   15         1.004 ±        0.104  ns/op
org.openjdk.bench.valhalla.array.read.Inline128int.Val_as_Val_to_Ref_read            1000000  avgt   15         1.098 ±        0.144  ns/op
org.openjdk.bench.valhalla.array.read.Inline128int.Val_as_Val_to_Val_read                100  avgt   15         1.616 ±        0.447  ns/op
org.openjdk.bench.valhalla.array.read.Inline128int.Val_as_Val_to_Val_read            1000000  avgt   15         1.270 ±        0.526  ns/op
org.openjdk.bench.valhalla.array.read.Inline32int.Val_as_Int_to_Int_read                 100  avgt   15         0.777 ±        0.008  ns/op
org.openjdk.bench.valhalla.array.read.Inline32int.Val_as_Int_to_Int_read             1000000  avgt   15         0.784 ±        0.033  ns/op
org.openjdk.bench.valhalla.array.read.Inline32int.Val_as_Ref_to_Int_read                 100  avgt   15         0.773 ±        0.005  ns/op
org.openjdk.bench.valhalla.array.read.Inline32int.Val_as_Ref_to_Int_read             1000000  avgt   15         0.779 ±        0.015  ns/op
org.openjdk.bench.valhalla.array.read.Inline32int.Val_as_Ref_to_Ref_read                 100  avgt   15         0.806 ±        0.047  ns/op
org.openjdk.bench.valhalla.array.read.Inline32int.Val_as_Ref_to_Ref_read             1000000  avgt   15         0.772 ±        0.003  ns/op
org.openjdk.bench.valhalla.array.read.Inline32int.Val_as_Ref_to_Val_read                 100  avgt   15         0.774 ±        0.008  ns/op
org.openjdk.bench.valhalla.array.read.Inline32int.Val_as_Ref_to_Val_read             1000000  avgt   15         0.776 ±        0.013  ns/op
org.openjdk.bench.valhalla.array.read.Inline32int.Val_as_Val_to_Int_read                 100  avgt   15         0.775 ±        0.009  ns/op
org.openjdk.bench.valhalla.array.read.Inline32int.Val_as_Val_to_Int_read             1000000  avgt   15         0.879 ±        0.123  ns/op
org.openjdk.bench.valhalla.array.read.Inline32int.Val_as_Val_to_Ref_read                 100  avgt   15         0.868 ±        0.096  ns/op
org.openjdk.bench.valhalla.array.read.Inline32int.Val_as_Val_to_Ref_read             1000000  avgt   15         1.023 ±        0.265  ns/op
org.openjdk.bench.valhalla.array.read.Inline32int.Val_as_Val_to_Val_read                 100  avgt   15         1.559 ±        0.156  ns/op
org.openjdk.bench.valhalla.array.read.Inline32int.Val_as_Val_to_Val_read             1000000  avgt   15         0.782 ±        0.019  ns/op
org.openjdk.bench.valhalla.array.read.Inline64byte.Val_as_Int_to_Int_read                100  avgt   15         0.804 ±        0.021  ns/op
org.openjdk.bench.valhalla.array.read.Inline64byte.Val_as_Int_to_Int_read            1000000  avgt   15         0.775 ±        0.007  ns/op
org.openjdk.bench.valhalla.array.read.Inline64byte.Val_as_Ref_to_Int_read                100  avgt   15         0.932 ±        0.007  ns/op
org.openjdk.bench.valhalla.array.read.Inline64byte.Val_as_Ref_to_Int_read            1000000  avgt   15         0.964 ±        0.048  ns/op
org.openjdk.bench.valhalla.array.read.Inline64byte.Val_as_Ref_to_Ref_read                100  avgt   15         1.010 ±        0.069  ns/op
org.openjdk.bench.valhalla.array.read.Inline64byte.Val_as_Ref_to_Ref_read            1000000  avgt   15         1.077 ±        0.087  ns/op
org.openjdk.bench.valhalla.array.read.Inline64byte.Val_as_Ref_to_Val_read                100  avgt   15         1.372 ±        0.455  ns/op
org.openjdk.bench.valhalla.array.read.Inline64byte.Val_as_Ref_to_Val_read            1000000  avgt   15         1.442 ±        0.584  ns/op
org.openjdk.bench.valhalla.array.read.Inline64byte.Val_as_Val_to_Int_read                100  avgt   15         0.931 ±        0.009  ns/op
org.openjdk.bench.valhalla.array.read.Inline64byte.Val_as_Val_to_Int_read            1000000  avgt   15         0.935 ±        0.013  ns/op
org.openjdk.bench.valhalla.array.read.Inline64byte.Val_as_Val_to_Ref_read                100  avgt   15         0.935 ±        0.008  ns/op
org.openjdk.bench.valhalla.array.read.Inline64byte.Val_as_Val_to_Ref_read            1000000  avgt   15         0.937 ±        0.010  ns/op
org.openjdk.bench.valhalla.array.read.Inline64byte.Val_as_Val_to_Val_read                100  avgt   15         0.937 ±        0.021  ns/op
org.openjdk.bench.valhalla.array.read.Inline64byte.Val_as_Val_to_Val_read            1000000  avgt   15         0.929 ±        0.001  ns/op
org.openjdk.bench.valhalla.array.read.Inline64int.Val_as_Int_to_Int_read                 100  avgt   15         0.812 ±        0.063  ns/op
org.openjdk.bench.valhalla.array.read.Inline64int.Val_as_Int_to_Int_read             1000000  avgt   15         0.847 ±        0.075  ns/op
org.openjdk.bench.valhalla.array.read.Inline64int.Val_as_Ref_to_Int_read                 100  avgt   15         1.142 ±        0.235  ns/op
org.openjdk.bench.valhalla.array.read.Inline64int.Val_as_Ref_to_Int_read             1000000  avgt   15         1.753 ±        0.436  ns/op
org.openjdk.bench.valhalla.array.read.Inline64int.Val_as_Ref_to_Ref_read                 100  avgt   15         0.933 ±        0.003  ns/op
org.openjdk.bench.valhalla.array.read.Inline64int.Val_as_Ref_to_Ref_read             1000000  avgt   15         0.934 ±        0.005  ns/op
org.openjdk.bench.valhalla.array.read.Inline64int.Val_as_Ref_to_Val_read                 100  avgt   15         0.934 ±        0.008  ns/op
org.openjdk.bench.valhalla.array.read.Inline64int.Val_as_Ref_to_Val_read             1000000  avgt   15         0.934 ±        0.012  ns/op
org.openjdk.bench.valhalla.array.read.Inline64int.Val_as_Val_to_Int_read                 100  avgt   15         0.962 ±        0.066  ns/op
org.openjdk.bench.valhalla.array.read.Inline64int.Val_as_Val_to_Int_read             1000000  avgt   15         1.019 ±        0.115  ns/op
org.openjdk.bench.valhalla.array.read.Inline64int.Val_as_Val_to_Ref_read                 100  avgt   15         1.042 ±        0.121  ns/op
org.openjdk.bench.valhalla.array.read.Inline64int.Val_as_Val_to_Ref_read             1000000  avgt   15         1.881 ±        0.279  ns/op
org.openjdk.bench.valhalla.array.read.Inline64int.Val_as_Val_to_Val_read                 100  avgt   15         0.930 ±        0.003  ns/op
org.openjdk.bench.valhalla.array.read.Inline64int.Val_as_Val_to_Val_read             1000000  avgt   15         0.942 ±        0.037  ns/op
org.openjdk.bench.valhalla.array.read.Primitive128int.p128int_read                       100  avgt   15         1.539 ±        0.012  ns/op
org.openjdk.bench.valhalla.array.read.Primitive128int.p128int_read                   1000000  avgt   15         1.540 ±        0.009  ns/op
org.openjdk.bench.valhalla.array.read.Primitive32int.p32int_read                         100  avgt   15         0.551 ±        0.016  ns/op
org.openjdk.bench.valhalla.array.read.Primitive32int.p32int_read                     1000000  avgt   15         0.572 ±        0.037  ns/op
org.openjdk.bench.valhalla.array.read.Primitive64byte.p64byte_read                       100  avgt   15         2.782 ±        0.046  ns/op
org.openjdk.bench.valhalla.array.read.Primitive64byte.p64byte_read                   1000000  avgt   15         2.773 ±        0.021  ns/op
org.openjdk.bench.valhalla.array.read.Primitive64int.read                                100  avgt   15         0.967 ±        0.006  ns/op
org.openjdk.bench.valhalla.array.read.Primitive64int.read                            1000000  avgt   15         1.083 ±        0.090  ns/op
org.openjdk.bench.valhalla.array.read.Primitive64long.p64long_read                       100  avgt   15         0.627 ±        0.066  ns/op
org.openjdk.bench.valhalla.array.read.Primitive64long.p64long_read                   1000000  avgt   15         0.632 ±        0.088  ns/op
org.openjdk.bench.valhalla.array.set.Inline128int.New_to_Ref_as_Ref_set                  100  avgt   15      1674.133 ±      345.412  ns/op
org.openjdk.bench.valhalla.array.set.Inline128int.New_to_Ref_as_Ref_set              1000000  avgt   15  13004911.761 ±  5188670.478  ns/op
org.openjdk.bench.valhalla.array.set.Inline128int.New_to_Val_as_Val_set                  100  avgt   15       927.159 ±       41.876  ns/op
org.openjdk.bench.valhalla.array.set.Inline128int.New_to_Val_as_Val_set              1000000  avgt   15   9173089.646 ±   538752.502  ns/op
org.openjdk.bench.valhalla.array.set.Inline128int.Ref_to_Ref_as_Ref_set                  100  avgt   15       910.269 ±        5.456  ns/op
org.openjdk.bench.valhalla.array.set.Inline128int.Ref_to_Ref_as_Ref_set              1000000  avgt   15   8994223.582 ±   244658.411  ns/op
org.openjdk.bench.valhalla.array.set.Inline128int.Ref_to_Val_as_Val_set                  100  avgt   15       989.970 ±      115.324  ns/op
org.openjdk.bench.valhalla.array.set.Inline128int.Ref_to_Val_as_Val_set              1000000  avgt   15   9907094.792 ±   882251.877  ns/op
org.openjdk.bench.valhalla.array.set.Inline128int.Val_to_Ref_as_Ref_set                  100  avgt   15      1236.444 ±      419.286  ns/op
org.openjdk.bench.valhalla.array.set.Inline128int.Val_to_Ref_as_Ref_set              1000000  avgt   15  15554901.301 ±  5058538.236  ns/op
org.openjdk.bench.valhalla.array.set.Inline128int.Val_to_Val_as_Val_set                  100  avgt   15       911.899 ±        9.784  ns/op
org.openjdk.bench.valhalla.array.set.Inline128int.Val_to_Val_as_Val_set              1000000  avgt   15   9602288.986 ±   968978.325  ns/op
org.openjdk.bench.valhalla.array.set.Inline32int.New_to_Ref_as_Ref_set                   100  avgt   15       182.362 ±        7.512  ns/op
org.openjdk.bench.valhalla.array.set.Inline32int.New_to_Ref_as_Ref_set               1000000  avgt   15   1830877.086 ±    41613.881  ns/op
org.openjdk.bench.valhalla.array.set.Inline32int.New_to_Val_as_Val_set                   100  avgt   15       185.405 ±       14.451  ns/op
org.openjdk.bench.valhalla.array.set.Inline32int.New_to_Val_as_Val_set               1000000  avgt   15   2057028.845 ±   262261.741  ns/op
org.openjdk.bench.valhalla.array.set.Inline32int.Ref_to_Ref_as_Ref_set                   100  avgt   15       196.331 ±       22.683  ns/op
org.openjdk.bench.valhalla.array.set.Inline32int.Ref_to_Ref_as_Ref_set               1000000  avgt   15   3864725.796 ±   656764.403  ns/op
org.openjdk.bench.valhalla.array.set.Inline32int.Ref_to_Val_as_Val_set                   100  avgt   15       190.028 ±       31.127  ns/op
org.openjdk.bench.valhalla.array.set.Inline32int.Ref_to_Val_as_Val_set               1000000  avgt   15   1887591.870 ±   155032.793  ns/op
org.openjdk.bench.valhalla.array.set.Inline32int.Val_to_Ref_as_Ref_set                   100  avgt   15       182.263 ±       11.311  ns/op
org.openjdk.bench.valhalla.array.set.Inline32int.Val_to_Ref_as_Ref_set               1000000  avgt   15   1865160.472 ±   122636.547  ns/op
org.openjdk.bench.valhalla.array.set.Inline32int.Val_to_Val_as_Val_set                   100  avgt   15       185.446 ±       13.916  ns/op
org.openjdk.bench.valhalla.array.set.Inline32int.Val_to_Val_as_Val_set               1000000  avgt   15   1821839.529 ±    45516.728  ns/op
org.openjdk.bench.valhalla.array.set.Inline64byte.New_to_Ref_as_Ref_set                  100  avgt   15       823.175 ±       16.992  ns/op
org.openjdk.bench.valhalla.array.set.Inline64byte.New_to_Ref_as_Ref_set              1000000  avgt   15   7799471.487 ±   140009.155  ns/op
org.openjdk.bench.valhalla.array.set.Inline64byte.New_to_Val_as_Val_set                  100  avgt   15       830.890 ±       26.565  ns/op
org.openjdk.bench.valhalla.array.set.Inline64byte.New_to_Val_as_Val_set              1000000  avgt   15   7836572.547 ±   285328.330  ns/op
org.openjdk.bench.valhalla.array.set.Inline64byte.Ref_to_Ref_as_Ref_set                  100  avgt   15       977.984 ±      245.973  ns/op
org.openjdk.bench.valhalla.array.set.Inline64byte.Ref_to_Ref_as_Ref_set              1000000  avgt   15   8905532.522 ±  1273537.674  ns/op
org.openjdk.bench.valhalla.array.set.Inline64byte.Ref_to_Val_as_Val_set                  100  avgt   15       978.134 ±      161.540  ns/op
org.openjdk.bench.valhalla.array.set.Inline64byte.Ref_to_Val_as_Val_set              1000000  avgt   15  14556824.668 ±  3090806.000  ns/op
org.openjdk.bench.valhalla.array.set.Inline64byte.Val_to_Ref_as_Ref_set                  100  avgt   15       858.258 ±       60.461  ns/op
org.openjdk.bench.valhalla.array.set.Inline64byte.Val_to_Ref_as_Ref_set              1000000  avgt   15   8081062.014 ±   649276.473  ns/op
org.openjdk.bench.valhalla.array.set.Inline64byte.Val_to_Val_as_Val_set                  100  avgt   15       822.790 ±       11.143  ns/op
org.openjdk.bench.valhalla.array.set.Inline64byte.Val_to_Val_as_Val_set              1000000  avgt   15   7845418.142 ±   231882.286  ns/op
org.openjdk.bench.valhalla.array.set.Inline64int.New_to_Ref_as_Ref_set                   100  avgt   15       477.996 ±       25.270  ns/op
org.openjdk.bench.valhalla.array.set.Inline64int.New_to_Ref_as_Ref_set               1000000  avgt   15   5058318.118 ±   197122.259  ns/op
org.openjdk.bench.valhalla.array.set.Inline64int.New_to_Val_as_Val_set                   100  avgt   15       468.835 ±        7.999  ns/op
org.openjdk.bench.valhalla.array.set.Inline64int.New_to_Val_as_Val_set               1000000  avgt   15   6482012.264 ±  2321050.129  ns/op
org.openjdk.bench.valhalla.array.set.Inline64int.Ref_to_Ref_as_Ref_set                   100  avgt   15       515.037 ±       43.224  ns/op
org.openjdk.bench.valhalla.array.set.Inline64int.Ref_to_Ref_as_Ref_set               1000000  avgt   15   8500338.180 ±  2387274.918  ns/op
org.openjdk.bench.valhalla.array.set.Inline64int.Ref_to_Val_as_Val_set                   100  avgt   15       515.498 ±      142.622  ns/op
org.openjdk.bench.valhalla.array.set.Inline64int.Ref_to_Val_as_Val_set               1000000  avgt   15   5103017.436 ±   279976.982  ns/op
org.openjdk.bench.valhalla.array.set.Inline64int.Val_to_Ref_as_Ref_set                   100  avgt   15       473.645 ±       16.452  ns/op
org.openjdk.bench.valhalla.array.set.Inline64int.Val_to_Ref_as_Ref_set               1000000  avgt   15   5020041.246 ±   128377.669  ns/op
org.openjdk.bench.valhalla.array.set.Inline64int.Val_to_Val_as_Val_set                   100  avgt   15       470.650 ±        6.195  ns/op
org.openjdk.bench.valhalla.array.set.Inline64int.Val_to_Val_as_Val_set               1000000  avgt   15   5026176.617 ±   169332.696  ns/op
org.openjdk.bench.valhalla.array.set.Primitive32.set                                     100  avgt   15        15.389 ±        0.079  ns/op
org.openjdk.bench.valhalla.array.set.Primitive32.set                                 1000000  avgt   15    155745.702 ±     4057.912  ns/op
org.openjdk.bench.valhalla.array.set.Primitive64.set0                                    100  avgt   15        17.628 ±        1.784  ns/op
org.openjdk.bench.valhalla.array.set.Primitive64.set0                                1000000  avgt   15    284524.950 ±    90808.094  ns/op
org.openjdk.bench.valhalla.array.set.Primitive64.set1                                    100  avgt   15        21.544 ±        8.909  ns/op
org.openjdk.bench.valhalla.array.set.Primitive64.set1                                1000000  avgt   15    187150.391 ±    20697.033  ns/op
org.openjdk.bench.valhalla.array.sum.IdentityOpt.Int_as_Int_sum                          100  avgt   15        74.854 ±        3.097  ns/op
org.openjdk.bench.valhalla.array.sum.IdentityOpt.Int_as_Int_sum                      1000000  avgt   15    844631.797 ±    46236.418  ns/op
org.openjdk.bench.valhalla.array.sum.IdentityOpt.Ref_as_Ref_fields                       100  avgt   15        50.413 ±        0.587  ns/op
org.openjdk.bench.valhalla.array.sum.IdentityOpt.Ref_as_Ref_fields                   1000000  avgt   15    743250.521 ±     5700.223  ns/op
org.openjdk.bench.valhalla.array.sum.IdentityOpt.Ref_as_Ref_sum                          100  avgt   15        50.112 ±        0.364  ns/op
org.openjdk.bench.valhalla.array.sum.IdentityOpt.Ref_as_Ref_sum                      1000000  avgt   15    740760.892 ±    10361.683  ns/op
org.openjdk.bench.valhalla.array.sum.Inline128int.Int_as_Int_sum                         100  avgt   15       279.306 ±        1.386  ns/op
org.openjdk.bench.valhalla.array.sum.Inline128int.Int_as_Int_sum                     1000000  avgt   15   3154606.050 ±    26842.251  ns/op
org.openjdk.bench.valhalla.array.sum.Inline128int.Ref_as_Int_sum                         100  avgt   15       261.799 ±        1.620  ns/op
org.openjdk.bench.valhalla.array.sum.Inline128int.Ref_as_Int_sum                     1000000  avgt   15   3102918.952 ±   221789.358  ns/op
org.openjdk.bench.valhalla.array.sum.Inline128int.Ref_as_Ref_fields                      100  avgt   15       144.482 ±        1.002  ns/op
org.openjdk.bench.valhalla.array.sum.Inline128int.Ref_as_Ref_fields                  1000000  avgt   15   2544160.375 ±    48587.893  ns/op
org.openjdk.bench.valhalla.array.sum.Inline128int.Ref_as_Ref_sum                         100  avgt   15       265.164 ±        1.675  ns/op
org.openjdk.bench.valhalla.array.sum.Inline128int.Ref_as_Ref_sum                     1000000  avgt   15   3057801.356 ±    70171.153  ns/op
org.openjdk.bench.valhalla.array.sum.Inline128int.Val_as_Int_sum                         100  avgt   15       260.344 ±        2.842  ns/op
org.openjdk.bench.valhalla.array.sum.Inline128int.Val_as_Int_sum                     1000000  avgt   15   3130051.288 ±   156201.684  ns/op
org.openjdk.bench.valhalla.array.sum.Inline128int.Val_as_Ref_fields                      100  avgt   15       141.712 ±        0.666  ns/op
org.openjdk.bench.valhalla.array.sum.Inline128int.Val_as_Ref_fields                  1000000  avgt   15   2471926.324 ±    16030.323  ns/op
org.openjdk.bench.valhalla.array.sum.Inline128int.Val_as_Ref_sum                         100  avgt   15       262.520 ±        0.503  ns/op
org.openjdk.bench.valhalla.array.sum.Inline128int.Val_as_Ref_sum                     1000000  avgt   15   3033127.402 ±    83339.935  ns/op
org.openjdk.bench.valhalla.array.sum.Inline128int.Val_as_Val_fields                      100  avgt   15       141.385 ±        0.426  ns/op
org.openjdk.bench.valhalla.array.sum.Inline128int.Val_as_Val_fields                  1000000  avgt   15   2472483.004 ±    41057.983  ns/op
org.openjdk.bench.valhalla.array.sum.Inline128int.Val_as_Val_sum                         100  avgt   15       262.522 ±        2.677  ns/op
org.openjdk.bench.valhalla.array.sum.Inline128int.Val_as_Val_sum                     1000000  avgt   15   3023827.309 ±   109120.348  ns/op
org.openjdk.bench.valhalla.array.sum.Inline32int.Int_as_Int_sum                          100  avgt   15        34.533 ±        2.216  ns/op
org.openjdk.bench.valhalla.array.sum.Inline32int.Int_as_Int_sum                      1000000  avgt   15    457381.334 ±    23549.691  ns/op
org.openjdk.bench.valhalla.array.sum.Inline32int.Ref_as_Ref_fields                       100  avgt   15        25.967 ±        0.429  ns/op
org.openjdk.bench.valhalla.array.sum.Inline32int.Ref_as_Ref_fields                   1000000  avgt   15    375555.611 ±    20309.939  ns/op
org.openjdk.bench.valhalla.array.sum.Inline32int.Ref_as_Ref_sum                          100  avgt   15        26.053 ±        0.435  ns/op
org.openjdk.bench.valhalla.array.sum.Inline32int.Ref_as_Ref_sum                      1000000  avgt   15    440666.733 ±   283032.002  ns/op
org.openjdk.bench.valhalla.array.sum.Inline32int.Val_as_Int_sum                          100  avgt   15        25.948 ±        0.280  ns/op
org.openjdk.bench.valhalla.array.sum.Inline32int.Val_as_Int_sum                      1000000  avgt   15    371554.763 ±    21719.619  ns/op
org.openjdk.bench.valhalla.array.sum.Inline32int.Val_as_Ref_fields                       100  avgt   15        26.034 ±        0.322  ns/op
org.openjdk.bench.valhalla.array.sum.Inline32int.Val_as_Ref_fields                   1000000  avgt   15    375723.453 ±    25806.535  ns/op
org.openjdk.bench.valhalla.array.sum.Inline32int.Val_as_Ref_sum                          100  avgt   15        25.951 ±        0.250  ns/op
org.openjdk.bench.valhalla.array.sum.Inline32int.Val_as_Ref_sum                      1000000  avgt   15    379989.420 ±    30094.446  ns/op
org.openjdk.bench.valhalla.array.sum.Inline32int.Val_as_Val_fields                       100  avgt   15        25.895 ±        0.155  ns/op
org.openjdk.bench.valhalla.array.sum.Inline32int.Val_as_Val_fields                   1000000  avgt   15    377599.729 ±    27667.244  ns/op
org.openjdk.bench.valhalla.array.sum.Inline32int.Val_as_Val_sum                          100  avgt   15        25.841 ±        0.070  ns/op
org.openjdk.bench.valhalla.array.sum.Inline32int.Val_as_Val_sum                      1000000  avgt   15    366613.275 ±    16053.482  ns/op
org.openjdk.bench.valhalla.array.sum.Inline64byte.Int_as_Int_sum                         100  avgt   15       205.554 ±       25.300  ns/op
org.openjdk.bench.valhalla.array.sum.Inline64byte.Int_as_Int_sum                     1000000  avgt   15   2091608.919 ±   304148.894  ns/op
org.openjdk.bench.valhalla.array.sum.Inline64byte.Ref_as_Ref_fields                      100  avgt   15       834.688 ±      214.637  ns/op
org.openjdk.bench.valhalla.array.sum.Inline64byte.Ref_as_Ref_fields                  1000000  avgt   15   5259196.365 ±   653915.684  ns/op
org.openjdk.bench.valhalla.array.sum.Inline64byte.Ref_as_Ref_sum                         100  avgt   15       180.069 ±        9.236  ns/op
org.openjdk.bench.valhalla.array.sum.Inline64byte.Ref_as_Ref_sum                     1000000  avgt   15   1893026.029 ±    80688.145  ns/op
org.openjdk.bench.valhalla.array.sum.Inline64byte.Val_as_Int_sum                         100  avgt   15       171.605 ±        1.232  ns/op
org.openjdk.bench.valhalla.array.sum.Inline64byte.Val_as_Int_sum                     1000000  avgt   15   1931954.044 ±   187240.413  ns/op
org.openjdk.bench.valhalla.array.sum.Inline64byte.Val_as_Ref_fields                      100  avgt   15       458.229 ±       12.454  ns/op
org.openjdk.bench.valhalla.array.sum.Inline64byte.Val_as_Ref_fields                  1000000  avgt   15   5714214.928 ±   680266.539  ns/op
org.openjdk.bench.valhalla.array.sum.Inline64byte.Val_as_Ref_sum                         100  avgt   15       281.013 ±       70.198  ns/op
org.openjdk.bench.valhalla.array.sum.Inline64byte.Val_as_Ref_sum                     1000000  avgt   15   2558677.667 ±   845029.190  ns/op
org.openjdk.bench.valhalla.array.sum.Inline64byte.Val_as_Val_fields                      100  avgt   15       452.640 ±        1.458  ns/op
org.openjdk.bench.valhalla.array.sum.Inline64byte.Val_as_Val_fields                  1000000  avgt   15   4937117.130 ±   148069.084  ns/op
org.openjdk.bench.valhalla.array.sum.Inline64byte.Val_as_Val_sum                         100  avgt   15       176.018 ±        1.614  ns/op
org.openjdk.bench.valhalla.array.sum.Inline64byte.Val_as_Val_sum                     1000000  avgt   15   1902334.715 ±   145426.526  ns/op
org.openjdk.bench.valhalla.array.sum.Inline64int.Int_as_Int_sum                          100  avgt   15        88.729 ±        1.910  ns/op
org.openjdk.bench.valhalla.array.sum.Inline64int.Int_as_Int_sum                      1000000  avgt   15   1356112.714 ±    72272.045  ns/op
org.openjdk.bench.valhalla.array.sum.Inline64int.Ref_as_Int_sum                          100  avgt   15        75.190 ±        0.917  ns/op
org.openjdk.bench.valhalla.array.sum.Inline64int.Ref_as_Int_sum                      1000000  avgt   15   1327615.426 ±   126747.663  ns/op
org.openjdk.bench.valhalla.array.sum.Inline64int.Ref_as_Ref_fields                       100  avgt   15        61.048 ±        2.441  ns/op
org.openjdk.bench.valhalla.array.sum.Inline64int.Ref_as_Ref_fields                   1000000  avgt   15   1297604.405 ±    95751.123  ns/op
org.openjdk.bench.valhalla.array.sum.Inline64int.Ref_as_Ref_sum                          100  avgt   15        75.108 ±        1.694  ns/op
org.openjdk.bench.valhalla.array.sum.Inline64int.Ref_as_Ref_sum                      1000000  avgt   15   1292686.675 ±    68632.551  ns/op
org.openjdk.bench.valhalla.array.sum.Inline64int.Val_as_Int_sum                          100  avgt   15        75.041 ±        0.709  ns/op
org.openjdk.bench.valhalla.array.sum.Inline64int.Val_as_Int_sum                      1000000  avgt   15   1278830.970 ±    38609.257  ns/op
org.openjdk.bench.valhalla.array.sum.Inline64int.Val_as_Ref_fields                       100  avgt   15        62.148 ±        4.723  ns/op
org.openjdk.bench.valhalla.array.sum.Inline64int.Val_as_Ref_fields                   1000000  avgt   15   1324926.507 ±    77965.495  ns/op
org.openjdk.bench.valhalla.array.sum.Inline64int.Val_as_Ref_sum                          100  avgt   15        83.887 ±        9.681  ns/op
org.openjdk.bench.valhalla.array.sum.Inline64int.Val_as_Ref_sum                      1000000  avgt   15   1631537.149 ±   364536.400  ns/op
org.openjdk.bench.valhalla.array.sum.Inline64int.Val_as_Val_fields                       100  avgt   15        84.922 ±       39.033  ns/op
org.openjdk.bench.valhalla.array.sum.Inline64int.Val_as_Val_fields                   1000000  avgt   15   1275977.012 ±    52262.940  ns/op
org.openjdk.bench.valhalla.array.sum.Inline64int.Val_as_Val_sum                          100  avgt   15        74.763 ±        0.729  ns/op
org.openjdk.bench.valhalla.array.sum.Inline64int.Val_as_Val_sum                      1000000  avgt   15   1290843.611 ±    65284.056  ns/op
org.openjdk.bench.valhalla.array.sum.InlineOpt.Int_as_Int_sum                            100  avgt   15        73.235 ±        0.362  ns/op
org.openjdk.bench.valhalla.array.sum.InlineOpt.Int_as_Int_sum                        1000000  avgt   15    857957.179 ±    61205.856  ns/op
org.openjdk.bench.valhalla.array.sum.InlineOpt.Ref_as_Ref_fields                         100  avgt   15        53.767 ±        4.304  ns/op
org.openjdk.bench.valhalla.array.sum.InlineOpt.Ref_as_Ref_fields                     1000000  avgt   15    882335.871 ±   220309.463  ns/op
org.openjdk.bench.valhalla.array.sum.InlineOpt.Ref_as_Ref_sum                            100  avgt   15        90.456 ±       24.325  ns/op
org.openjdk.bench.valhalla.array.sum.InlineOpt.Ref_as_Ref_sum                        1000000  avgt   15    787290.886 ±    38407.748  ns/op
org.openjdk.bench.valhalla.array.sum.InlineOpt.Val_as_Int_sum                            100  avgt   15        50.872 ±        0.260  ns/op
org.openjdk.bench.valhalla.array.sum.InlineOpt.Val_as_Int_sum                        1000000  avgt   15    779700.881 ±    52300.745  ns/op
org.openjdk.bench.valhalla.array.sum.InlineOpt.Val_as_Ref_fields                         100  avgt   15        51.012 ±        0.878  ns/op
org.openjdk.bench.valhalla.array.sum.InlineOpt.Val_as_Ref_fields                     1000000  avgt   15    792236.937 ±    33868.621  ns/op
org.openjdk.bench.valhalla.array.sum.InlineOpt.Val_as_Ref_sum                            100  avgt   15        51.798 ±        2.075  ns/op
org.openjdk.bench.valhalla.array.sum.InlineOpt.Val_as_Ref_sum                        1000000  avgt   15    783842.712 ±    37532.441  ns/op
org.openjdk.bench.valhalla.array.sum.InlineOpt.Val_as_Val_fields                         100  avgt   15        51.169 ±        0.935  ns/op
org.openjdk.bench.valhalla.array.sum.InlineOpt.Val_as_Val_fields                     1000000  avgt   15    776387.101 ±    31580.377  ns/op
org.openjdk.bench.valhalla.array.sum.InlineOpt.Val_as_Val_sum                            100  avgt   15        51.851 ±        2.382  ns/op
org.openjdk.bench.valhalla.array.sum.InlineOpt.Val_as_Val_sum                        1000000  avgt   15    772935.278 ±    44132.420  ns/op
org.openjdk.bench.valhalla.array.sum.Primitive128int.sum                                 100  avgt   15       103.146 ±        1.212  ns/op
org.openjdk.bench.valhalla.array.sum.Primitive128int.sum                             1000000  avgt   15   1242948.454 ±     6744.798  ns/op
org.openjdk.bench.valhalla.array.sum.Primitive32int.sum                                  100  avgt   15        16.918 ±        0.131  ns/op
org.openjdk.bench.valhalla.array.sum.Primitive32int.sum                              1000000  avgt   15    310808.484 ±      680.640  ns/op
org.openjdk.bench.valhalla.array.sum.Primitive64byte.sum                                 100  avgt   15       489.398 ±       26.148  ns/op
org.openjdk.bench.valhalla.array.sum.Primitive64byte.sum                             1000000  avgt   15   5383772.970 ±   464145.529  ns/op
org.openjdk.bench.valhalla.array.sum.Primitive64int.sum                                  100  avgt   15        46.074 ±        4.090  ns/op
org.openjdk.bench.valhalla.array.sum.Primitive64int.sum                              1000000  avgt   15   1110523.336 ±   284243.037  ns/op
org.openjdk.bench.valhalla.array.sum.Primitive64long.sum0                                100  avgt   15        23.127 ±        9.465  ns/op
org.openjdk.bench.valhalla.array.sum.Primitive64long.sum0                            1000000  avgt   15    312176.992 ±     4236.819  ns/op
org.openjdk.bench.valhalla.array.sum.Primitive64long.sum1                                100  avgt   15        16.911 ±        0.054  ns/op
org.openjdk.bench.valhalla.array.sum.Primitive64long.sum1                            1000000  avgt   15    311734.556 ±     2130.357  ns/op
org.openjdk.bench.valhalla.callconv.Inline64byte.Q64byte_args1_targets0                  N/A  avgt   15         0.197 ±        0.001  ns/op
org.openjdk.bench.valhalla.callconv.Inline64byte.Q64byte_args1_targets1                  N/A  avgt   15         0.297 ±        0.034  ns/op
org.openjdk.bench.valhalla.callconv.Inline64byte.Q64byte_args1_targets2                  N/A  avgt   15         0.391 ±        0.044  ns/op
org.openjdk.bench.valhalla.callconv.Inline64byte.Q64byte_args1_targets3                  N/A  avgt   15        84.043 ±        5.135  ns/op
org.openjdk.bench.valhalla.callconv.Inline64byte.Q64byte_args2_targets0                  N/A  avgt   15         0.341 ±        0.088  ns/op
org.openjdk.bench.valhalla.callconv.Inline64byte.Q64byte_args2_targets1                  N/A  avgt   15         0.387 ±        0.160  ns/op
org.openjdk.bench.valhalla.callconv.Inline64byte.Q64byte_args2_targets2                  N/A  avgt   15         0.350 ±        0.004  ns/op
org.openjdk.bench.valhalla.callconv.Inline64byte.Q64byte_args2_targets3                  N/A  avgt   15        79.435 ±        0.809  ns/op
org.openjdk.bench.valhalla.callconv.Inline64byte.Q64byte_args4_targets0                  N/A  avgt   15         0.200 ±        0.005  ns/op
org.openjdk.bench.valhalla.callconv.Inline64byte.Q64byte_args4_targets1                  N/A  avgt   15         0.285 ±        0.002  ns/op
org.openjdk.bench.valhalla.callconv.Inline64byte.Q64byte_args4_targets2                  N/A  avgt   15         0.408 ±        0.140  ns/op
org.openjdk.bench.valhalla.callconv.Inline64byte.Q64byte_args4_targets3                  N/A  avgt   15        81.992 ±        5.620  ns/op
org.openjdk.bench.valhalla.callconv.Inline64byte.Q64byte_args8_targets0                  N/A  avgt   15         0.204 ±        0.025  ns/op
org.openjdk.bench.valhalla.callconv.Inline64byte.Q64byte_args8_targets1                  N/A  avgt   15         0.288 ±        0.005  ns/op
org.openjdk.bench.valhalla.callconv.Inline64byte.Q64byte_args8_targets2                  N/A  avgt   15         0.369 ±        0.065  ns/op
org.openjdk.bench.valhalla.callconv.Inline64byte.Q64byte_args8_targets3                  N/A  avgt   15        98.714 ±       18.460  ns/op
org.openjdk.bench.valhalla.callconv.Inline64int.Q64int_args1_targets0                    N/A  avgt   15         0.211 ±        0.022  ns/op
org.openjdk.bench.valhalla.callconv.Inline64int.Q64int_args1_targets1                    N/A  avgt   15         0.270 ±        0.007  ns/op
org.openjdk.bench.valhalla.callconv.Inline64int.Q64int_args1_targets2                    N/A  avgt   15         0.346 ±        0.003  ns/op
org.openjdk.bench.valhalla.callconv.Inline64int.Q64int_args1_targets3                    N/A  avgt   15        76.413 ±        0.608  ns/op
org.openjdk.bench.valhalla.callconv.Inline64int.Q64int_args2_targets0                    N/A  avgt   15         0.193 ±        0.002  ns/op
org.openjdk.bench.valhalla.callconv.Inline64int.Q64int_args2_targets1                    N/A  avgt   15         0.262 ±        0.001  ns/op
org.openjdk.bench.valhalla.callconv.Inline64int.Q64int_args2_targets2                    N/A  avgt   15         0.339 ±        0.003  ns/op
org.openjdk.bench.valhalla.callconv.Inline64int.Q64int_args2_targets3                    N/A  avgt   15        76.229 ±        0.339  ns/op
org.openjdk.bench.valhalla.callconv.Inline64int.Q64int_args4_targets0                    N/A  avgt   15         0.193 ±        0.002  ns/op
org.openjdk.bench.valhalla.callconv.Inline64int.Q64int_args4_targets1                    N/A  avgt   15         0.267 ±        0.002  ns/op
org.openjdk.bench.valhalla.callconv.Inline64int.Q64int_args4_targets2                    N/A  avgt   15         0.338 ±        0.004  ns/op
org.openjdk.bench.valhalla.callconv.Inline64int.Q64int_args4_targets3                    N/A  avgt   15        78.151 ±        0.781  ns/op
org.openjdk.bench.valhalla.callconv.Inline64int.Q64int_args8_targets0                    N/A  avgt   15         0.191 ±        0.003  ns/op
org.openjdk.bench.valhalla.callconv.Inline64int.Q64int_args8_targets1                    N/A  avgt   15         0.270 ±        0.003  ns/op
org.openjdk.bench.valhalla.callconv.Inline64int.Q64int_args8_targets2                    N/A  avgt   15         0.338 ±        0.003  ns/op
org.openjdk.bench.valhalla.callconv.Inline64int.Q64int_args8_targets3                    N/A  avgt   15        79.643 ±        1.180  ns/op
org.openjdk.bench.valhalla.callconv.Inline64long.Q64long_args1_targets0                  N/A  avgt   15         0.191 ±        0.003  ns/op
org.openjdk.bench.valhalla.callconv.Inline64long.Q64long_args1_targets1                  N/A  avgt   15         0.254 ±        0.001  ns/op
org.openjdk.bench.valhalla.callconv.Inline64long.Q64long_args1_targets2                  N/A  avgt   15         0.329 ±        0.001  ns/op
org.openjdk.bench.valhalla.callconv.Inline64long.Q64long_args1_targets3                  N/A  avgt   15        73.305 ±        0.843  ns/op
org.openjdk.bench.valhalla.callconv.Inline64long.Q64long_args2_targets0                  N/A  avgt   15         0.184 ±        0.001  ns/op
org.openjdk.bench.valhalla.callconv.Inline64long.Q64long_args2_targets1                  N/A  avgt   15         0.254 ±        0.001  ns/op
org.openjdk.bench.valhalla.callconv.Inline64long.Q64long_args2_targets2                  N/A  avgt   15         0.351 ±        0.037  ns/op
org.openjdk.bench.valhalla.callconv.Inline64long.Q64long_args2_targets3                  N/A  avgt   15        73.844 ±        2.197  ns/op
org.openjdk.bench.valhalla.callconv.Inline64long.Q64long_args4_targets0                  N/A  avgt   15         0.187 ±        0.001  ns/op
org.openjdk.bench.valhalla.callconv.Inline64long.Q64long_args4_targets1                  N/A  avgt   15         0.264 ±        0.003  ns/op
org.openjdk.bench.valhalla.callconv.Inline64long.Q64long_args4_targets2                  N/A  avgt   15         0.337 ±        0.002  ns/op
org.openjdk.bench.valhalla.callconv.Inline64long.Q64long_args4_targets3                  N/A  avgt   15        74.911 ±        0.775  ns/op
org.openjdk.bench.valhalla.callconv.Inline64long.Q64long_args8_targets0                  N/A  avgt   15         0.186 ±        0.002  ns/op
org.openjdk.bench.valhalla.callconv.Inline64long.Q64long_args8_targets1                  N/A  avgt   15         0.265 ±        0.002  ns/op
org.openjdk.bench.valhalla.callconv.Inline64long.Q64long_args8_targets2                  N/A  avgt   15         0.338 ±        0.003  ns/op
org.openjdk.bench.valhalla.callconv.Inline64long.Q64long_args8_targets3                  N/A  avgt   15        77.775 ±        0.564  ns/op
org.openjdk.bench.valhalla.callconv.PrimitiveByte.byte_args1_targets0                    N/A  avgt   15         0.354 ±        0.001  ns/op
org.openjdk.bench.valhalla.callconv.PrimitiveByte.byte_args1_targets1                    N/A  avgt   15         0.472 ±        0.003  ns/op
org.openjdk.bench.valhalla.callconv.PrimitiveByte.byte_args1_targets2                    N/A  avgt   15         0.724 ±        0.006  ns/op
org.openjdk.bench.valhalla.callconv.PrimitiveByte.byte_args1_targets3                    N/A  avgt   15         2.733 ±        0.042  ns/op
org.openjdk.bench.valhalla.callconv.PrimitiveByte.byte_args2_targets0                    N/A  avgt   15         0.347 ±        0.004  ns/op
org.openjdk.bench.valhalla.callconv.PrimitiveByte.byte_args2_targets1                    N/A  avgt   15         0.464 ±        0.002  ns/op
org.openjdk.bench.valhalla.callconv.PrimitiveByte.byte_args2_targets2                    N/A  avgt   15         0.545 ±        0.016  ns/op
org.openjdk.bench.valhalla.callconv.PrimitiveByte.byte_args2_targets3                    N/A  avgt   15         2.726 ±        0.015  ns/op
org.openjdk.bench.valhalla.callconv.PrimitiveByte.byte_args4_targets0                    N/A  avgt   15         0.346 ±        0.002  ns/op
org.openjdk.bench.valhalla.callconv.PrimitiveByte.byte_args4_targets1                    N/A  avgt   15         0.463 ±        0.002  ns/op
org.openjdk.bench.valhalla.callconv.PrimitiveByte.byte_args4_targets2                    N/A  avgt   15         0.540 ±        0.016  ns/op
org.openjdk.bench.valhalla.callconv.PrimitiveByte.byte_args4_targets3                    N/A  avgt   15         2.777 ±        0.020  ns/op
org.openjdk.bench.valhalla.callconv.PrimitiveByte.byte_args8_targets0                    N/A  avgt   15         0.350 ±        0.002  ns/op
org.openjdk.bench.valhalla.callconv.PrimitiveByte.byte_args8_targets1                    N/A  avgt   15         0.474 ±        0.007  ns/op
org.openjdk.bench.valhalla.callconv.PrimitiveByte.byte_args8_targets2                    N/A  avgt   15         0.534 ±        0.005  ns/op
org.openjdk.bench.valhalla.callconv.PrimitiveByte.byte_args8_targets3                    N/A  avgt   15         3.067 ±        0.022  ns/op
org.openjdk.bench.valhalla.callconv.PrimitiveInt.int_args1_targets0                      N/A  avgt   15         0.191 ±        0.003  ns/op
org.openjdk.bench.valhalla.callconv.PrimitiveInt.int_args1_targets1                      N/A  avgt   15         0.259 ±        0.001  ns/op
org.openjdk.bench.valhalla.callconv.PrimitiveInt.int_args1_targets2                      N/A  avgt   15         0.336 ±        0.002  ns/op
org.openjdk.bench.valhalla.callconv.PrimitiveInt.int_args1_targets3                      N/A  avgt   15         2.760 ±        0.018  ns/op
org.openjdk.bench.valhalla.callconv.PrimitiveInt.int_args2_targets0                      N/A  avgt   15         0.189 ±        0.001  ns/op
org.openjdk.bench.valhalla.callconv.PrimitiveInt.int_args2_targets1                      N/A  avgt   15         0.260 ±        0.002  ns/op
org.openjdk.bench.valhalla.callconv.PrimitiveInt.int_args2_targets2                      N/A  avgt   15         0.335 ±        0.001  ns/op
org.openjdk.bench.valhalla.callconv.PrimitiveInt.int_args2_targets3                      N/A  avgt   15         2.731 ±        0.022  ns/op
org.openjdk.bench.valhalla.callconv.PrimitiveInt.int_args4_targets0                      N/A  avgt   15         0.188 ±        0.001  ns/op
org.openjdk.bench.valhalla.callconv.PrimitiveInt.int_args4_targets1                      N/A  avgt   15         0.258 ±        0.003  ns/op
org.openjdk.bench.valhalla.callconv.PrimitiveInt.int_args4_targets2                      N/A  avgt   15         0.334 ±        0.002  ns/op
org.openjdk.bench.valhalla.callconv.PrimitiveInt.int_args4_targets3                      N/A  avgt   15         2.747 ±        0.032  ns/op
org.openjdk.bench.valhalla.callconv.PrimitiveInt.int_args8_targets0                      N/A  avgt   15         0.192 ±        0.003  ns/op
org.openjdk.bench.valhalla.callconv.PrimitiveInt.int_args8_targets1                      N/A  avgt   15         0.267 ±        0.004  ns/op
org.openjdk.bench.valhalla.callconv.PrimitiveInt.int_args8_targets2                      N/A  avgt   15         0.335 ±        0.004  ns/op
org.openjdk.bench.valhalla.callconv.PrimitiveInt.int_args8_targets3                      N/A  avgt   15         3.028 ±        0.027  ns/op
org.openjdk.bench.valhalla.callconv.PrimitiveLong.long_args1_targets0                    N/A  avgt   15         0.187 ±        0.003  ns/op
org.openjdk.bench.valhalla.callconv.PrimitiveLong.long_args1_targets1                    N/A  avgt   15         0.255 ±        0.004  ns/op
org.openjdk.bench.valhalla.callconv.PrimitiveLong.long_args1_targets2                    N/A  avgt   15         0.331 ±        0.004  ns/op
org.openjdk.bench.valhalla.callconv.PrimitiveLong.long_args1_targets3                    N/A  avgt   15         2.713 ±        0.034  ns/op
org.openjdk.bench.valhalla.callconv.PrimitiveLong.long_args2_targets0                    N/A  avgt   15         0.188 ±        0.001  ns/op
org.openjdk.bench.valhalla.callconv.PrimitiveLong.long_args2_targets1                    N/A  avgt   15         0.256 ±        0.001  ns/op
org.openjdk.bench.valhalla.callconv.PrimitiveLong.long_args2_targets2                    N/A  avgt   15         0.332 ±        0.002  ns/op
org.openjdk.bench.valhalla.callconv.PrimitiveLong.long_args2_targets3                    N/A  avgt   15         2.739 ±        0.019  ns/op
org.openjdk.bench.valhalla.callconv.PrimitiveLong.long_args4_targets0                    N/A  avgt   15         0.189 ±        0.004  ns/op
org.openjdk.bench.valhalla.callconv.PrimitiveLong.long_args4_targets1                    N/A  avgt   15         0.257 ±        0.003  ns/op
org.openjdk.bench.valhalla.callconv.PrimitiveLong.long_args4_targets2                    N/A  avgt   15         0.336 ±        0.001  ns/op
org.openjdk.bench.valhalla.callconv.PrimitiveLong.long_args4_targets3                    N/A  avgt   15         2.745 ±        0.012  ns/op
org.openjdk.bench.valhalla.callconv.PrimitiveLong.long_args8_targets0                    N/A  avgt   15         0.187 ±        0.002  ns/op
org.openjdk.bench.valhalla.callconv.PrimitiveLong.long_args8_targets1                    N/A  avgt   15         0.265 ±        0.001  ns/op
org.openjdk.bench.valhalla.callconv.PrimitiveLong.long_args8_targets2                    N/A  avgt   15         0.336 ±        0.002  ns/op
org.openjdk.bench.valhalla.callconv.PrimitiveLong.long_args8_targets3                    N/A  avgt   15         3.044 ±        0.017  ns/op

Benchmark result is saved to /Users/Evgeniy.Zhelenskiy/IdeaProjects/valhalla-benchmarks/reports/jmh/results.csv
